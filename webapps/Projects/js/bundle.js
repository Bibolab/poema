webpackJsonp([0],[function(module,exports,__webpack_require__){"use strict";var platform_browser_dynamic_1=__webpack_require__(1),core_1=__webpack_require__(2),http_1=__webpack_require__(3),router_1=__webpack_require__(4),common_1=__webpack_require__(5);__webpack_require__(6);var app_1=__webpack_require__(287),nb_notify_1=__webpack_require__(291),app_service_1=__webpack_require__(288),task_service_1=__webpack_require__(302),project_service_1=__webpack_require__(295),reference_service_1=__webpack_require__(289),staff_service_1=__webpack_require__(290);core_1.enableProdMode(),platform_browser_dynamic_1.bootstrap(app_1.App,[http_1.HTTP_PROVIDERS,router_1.ROUTER_DIRECTIVES,router_1.ROUTER_PROVIDERS,core_1.provide(core_1.PLATFORM_DIRECTIVES,{useValue:router_1.ROUTER_DIRECTIVES,multi:!0}),core_1.provide(common_1.LocationStrategy,{useClass:common_1.HashLocationStrategy}),common_1.FORM_PROVIDERS,nb_notify_1.NBNotifyComponent,app_service_1.AppService,task_service_1.TaskService,project_service_1.ProjectService,reference_service_1.ReferenceService,staff_service_1.StaffService])["catch"](function(err){return console.error(err)})},,,,,,function(module,exports,__webpack_require__){"use strict";var Subject_1=__webpack_require__(7);exports.Subject=Subject_1.Subject;var Observable_1=__webpack_require__(8);exports.Observable=Observable_1.Observable,__webpack_require__(27),__webpack_require__(31),__webpack_require__(34),__webpack_require__(45),__webpack_require__(49),__webpack_require__(52),__webpack_require__(54),__webpack_require__(57),__webpack_require__(65),__webpack_require__(68),__webpack_require__(71),__webpack_require__(73),__webpack_require__(75),__webpack_require__(84),__webpack_require__(87),__webpack_require__(89),__webpack_require__(93),__webpack_require__(95),__webpack_require__(98),__webpack_require__(101),__webpack_require__(105),__webpack_require__(108),__webpack_require__(110),__webpack_require__(112),__webpack_require__(114),__webpack_require__(116),__webpack_require__(118),__webpack_require__(125),__webpack_require__(127),__webpack_require__(129),__webpack_require__(130),__webpack_require__(131),__webpack_require__(133),__webpack_require__(136),__webpack_require__(139),__webpack_require__(141),__webpack_require__(143),__webpack_require__(145),__webpack_require__(147),__webpack_require__(149),__webpack_require__(151),__webpack_require__(153),__webpack_require__(155),__webpack_require__(157),__webpack_require__(159),__webpack_require__(161),__webpack_require__(163),__webpack_require__(166),__webpack_require__(171),__webpack_require__(173),__webpack_require__(175),__webpack_require__(177),__webpack_require__(179),__webpack_require__(181),__webpack_require__(183),__webpack_require__(185),__webpack_require__(187),__webpack_require__(189),__webpack_require__(190),__webpack_require__(191),__webpack_require__(192),__webpack_require__(193),__webpack_require__(194),__webpack_require__(195),__webpack_require__(198),__webpack_require__(200),__webpack_require__(202),__webpack_require__(205),__webpack_require__(206),__webpack_require__(208),__webpack_require__(209),__webpack_require__(211),__webpack_require__(213),__webpack_require__(215),__webpack_require__(217),__webpack_require__(219),__webpack_require__(221),__webpack_require__(223),__webpack_require__(225),__webpack_require__(227),__webpack_require__(229),__webpack_require__(231),__webpack_require__(233),__webpack_require__(235),__webpack_require__(244),__webpack_require__(246),__webpack_require__(248),__webpack_require__(250),__webpack_require__(253),__webpack_require__(255),__webpack_require__(257),__webpack_require__(259),__webpack_require__(261),__webpack_require__(263),__webpack_require__(265),__webpack_require__(267),__webpack_require__(269),__webpack_require__(271),__webpack_require__(273),__webpack_require__(275),__webpack_require__(277),__webpack_require__(279),__webpack_require__(281),__webpack_require__(283),__webpack_require__(284);var Operator_1=__webpack_require__(286);exports.Operator=Operator_1.Operator;var Subscription_1=__webpack_require__(14);exports.Subscription=Subscription_1.Subscription;var Subscriber_1=__webpack_require__(12);exports.Subscriber=Subscriber_1.Subscriber;var AsyncSubject_1=__webpack_require__(30);exports.AsyncSubject=AsyncSubject_1.AsyncSubject;var ReplaySubject_1=__webpack_require__(121);exports.ReplaySubject=ReplaySubject_1.ReplaySubject;var BehaviorSubject_1=__webpack_require__(204);exports.BehaviorSubject=BehaviorSubject_1.BehaviorSubject;var ConnectableObservable_1=__webpack_require__(124);exports.ConnectableObservable=ConnectableObservable_1.ConnectableObservable;var Notification_1=__webpack_require__(64);exports.Notification=Notification_1.Notification;var EmptyError_1=__webpack_require__(165);exports.EmptyError=EmptyError_1.EmptyError;var ArgumentOutOfRangeError_1=__webpack_require__(252);exports.ArgumentOutOfRangeError=ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;var ObjectUnsubscribedError_1=__webpack_require__(26);exports.ObjectUnsubscribedError=ObjectUnsubscribedError_1.ObjectUnsubscribedError;var UnsubscriptionError_1=__webpack_require__(19);exports.UnsubscriptionError=UnsubscriptionError_1.UnsubscriptionError;var asap_1=__webpack_require__(238),async_1=__webpack_require__(79),queue_1=__webpack_require__(122),rxSubscriber_1=__webpack_require__(20),iterator_1=__webpack_require__(43),observable=__webpack_require__(22),Scheduler={asap:asap_1.asap,async:async_1.async,queue:queue_1.queue};exports.Scheduler=Scheduler;var Symbol={rxSubscriber:rxSubscriber_1.$$rxSubscriber,observable:observable,iterator:iterator_1.$$iterator};exports.Symbol=Symbol},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),Subscriber_1=__webpack_require__(12),Subscription_1=__webpack_require__(14),SubjectSubscription_1=__webpack_require__(24),rxSubscriber_1=__webpack_require__(20),throwError_1=__webpack_require__(25),ObjectUnsubscribedError_1=__webpack_require__(26),Subject=function(_super){function Subject(destination,source){_super.call(this),this.destination=destination,this.source=source,this.observers=[],this.isUnsubscribed=!1,this.isStopped=!1,this.hasErrored=!1,this.dispatching=!1,this.hasCompleted=!1,this.source=source}return __extends(Subject,_super),Subject.prototype.lift=function(operator){var subject=new Subject(this.destination||this,this);return subject.operator=operator,subject},Subject.prototype.add=function(subscription){return Subscription_1.Subscription.prototype.add.call(this,subscription)},Subject.prototype.remove=function(subscription){Subscription_1.Subscription.prototype.remove.call(this,subscription)},Subject.prototype.unsubscribe=function(){Subscription_1.Subscription.prototype.unsubscribe.call(this)},Subject.prototype._subscribe=function(subscriber){if(this.source)return this.source.subscribe(subscriber);if(!subscriber.isUnsubscribed){if(this.hasErrored)return subscriber.error(this.errorValue);if(this.hasCompleted)return subscriber.complete();this.throwIfUnsubscribed();var subscription=new SubjectSubscription_1.SubjectSubscription(this,subscriber);return this.observers.push(subscriber),subscription}},Subject.prototype._unsubscribe=function(){this.source=null,this.isStopped=!0,this.observers=null,this.destination=null},Subject.prototype.next=function(value){this.throwIfUnsubscribed(),this.isStopped||(this.dispatching=!0,this._next(value),this.dispatching=!1,this.hasErrored?this._error(this.errorValue):this.hasCompleted&&this._complete())},Subject.prototype.error=function(err){this.throwIfUnsubscribed(),this.isStopped||(this.isStopped=!0,this.hasErrored=!0,this.errorValue=err,this.dispatching||this._error(err))},Subject.prototype.complete=function(){this.throwIfUnsubscribed(),this.isStopped||(this.isStopped=!0,this.hasCompleted=!0,this.dispatching||this._complete())},Subject.prototype.asObservable=function(){var observable=new SubjectObservable(this);return observable},Subject.prototype._next=function(value){this.destination?this.destination.next(value):this._finalNext(value)},Subject.prototype._finalNext=function(value){for(var index=-1,observers=this.observers.slice(0),len=observers.length;++index<len;)observers[index].next(value)},Subject.prototype._error=function(err){this.destination?this.destination.error(err):this._finalError(err)},Subject.prototype._finalError=function(err){var index=-1,observers=this.observers;if(this.observers=null,this.isUnsubscribed=!0,observers)for(var len=observers.length;++index<len;)observers[index].error(err);this.isUnsubscribed=!1,this.unsubscribe()},Subject.prototype._complete=function(){this.destination?this.destination.complete():this._finalComplete()},Subject.prototype._finalComplete=function(){var index=-1,observers=this.observers;if(this.observers=null,this.isUnsubscribed=!0,observers)for(var len=observers.length;++index<len;)observers[index].complete();this.isUnsubscribed=!1,this.unsubscribe()},Subject.prototype.throwIfUnsubscribed=function(){this.isUnsubscribed&&throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError)},Subject.prototype[rxSubscriber_1.$$rxSubscriber]=function(){return new Subscriber_1.Subscriber(this)},Subject.create=function(destination,source){return new Subject(destination,source)},Subject}(Observable_1.Observable);exports.Subject=Subject;var SubjectObservable=function(_super){function SubjectObservable(source){_super.call(this),this.source=source}return __extends(SubjectObservable,_super),SubjectObservable}(Observable_1.Observable)},function(module,exports,__webpack_require__){"use strict";var root_1=__webpack_require__(9),toSubscriber_1=__webpack_require__(11),$$observable=__webpack_require__(22),Observable=function(){function Observable(subscribe){this._isScalar=!1,subscribe&&(this._subscribe=subscribe)}return Observable.prototype.lift=function(operator){var observable=new Observable;return observable.source=this,observable.operator=operator,observable},Observable.prototype.subscribe=function(observerOrNext,error,complete){var operator=this.operator,sink=toSubscriber_1.toSubscriber(observerOrNext,error,complete);if(sink.add(operator?operator.call(sink,this):this._subscribe(sink)),sink.syncErrorThrowable&&(sink.syncErrorThrowable=!1,sink.syncErrorThrown))throw sink.syncErrorValue;return sink},Observable.prototype.forEach=function(next,PromiseCtor){var _this=this;if(PromiseCtor||(root_1.root.Rx&&root_1.root.Rx.config&&root_1.root.Rx.config.Promise?PromiseCtor=root_1.root.Rx.config.Promise:root_1.root.Promise&&(PromiseCtor=root_1.root.Promise)),!PromiseCtor)throw new Error("no Promise impl found");return new PromiseCtor(function(resolve,reject){var subscription=_this.subscribe(function(value){if(subscription)try{next(value)}catch(err){reject(err),subscription.unsubscribe()}else next(value)},reject,resolve)})},Observable.prototype._subscribe=function(subscriber){return this.source.subscribe(subscriber)},Observable.prototype[$$observable]=function(){return this},Observable.create=function(subscribe){return new Observable(subscribe)},Observable}();exports.Observable=Observable},function(module,exports,__webpack_require__){(function(module,global){"use strict";var objectTypes={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1};exports.root=objectTypes[typeof self]&&self||objectTypes[typeof window]&&window;var freeGlobal=(objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports,objectTypes[typeof module]&&module&&!module.nodeType&&module,objectTypes[typeof global]&&global);!freeGlobal||freeGlobal.global!==freeGlobal&&freeGlobal.window!==freeGlobal||(exports.root=freeGlobal)}).call(exports,__webpack_require__(10)(module),function(){return this}())},function(module,exports){module.exports=function(module){return module.webpackPolyfill||(module.deprecate=function(){},module.paths=[],module.children=[],module.webpackPolyfill=1),module}},function(module,exports,__webpack_require__){"use strict";function toSubscriber(nextOrObserver,error,complete){if(nextOrObserver&&"object"==typeof nextOrObserver){if(nextOrObserver instanceof Subscriber_1.Subscriber)return nextOrObserver;if("function"==typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber])return nextOrObserver[rxSubscriber_1.$$rxSubscriber]()}return new Subscriber_1.Subscriber(nextOrObserver,error,complete)}var Subscriber_1=__webpack_require__(12),rxSubscriber_1=__webpack_require__(20);exports.toSubscriber=toSubscriber},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},isFunction_1=__webpack_require__(13),Subscription_1=__webpack_require__(14),rxSubscriber_1=__webpack_require__(20),Observer_1=__webpack_require__(21),Subscriber=function(_super){function Subscriber(destinationOrNext,error,complete){switch(_super.call(this),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=Observer_1.empty;break;case 1:if(!destinationOrNext){this.destination=Observer_1.empty;break}if("object"==typeof destinationOrNext){destinationOrNext instanceof Subscriber?(this.destination=destinationOrNext,this.destination.add(this)):(this.syncErrorThrowable=!0,this.destination=new SafeSubscriber(this,destinationOrNext));break}default:this.syncErrorThrowable=!0,this.destination=new SafeSubscriber(this,destinationOrNext,error,complete)}}return __extends(Subscriber,_super),Subscriber.create=function(next,error,complete){var subscriber=new Subscriber(next,error,complete);return subscriber.syncErrorThrowable=!1,subscriber},Subscriber.prototype.next=function(value){this.isStopped||this._next(value)},Subscriber.prototype.error=function(err){this.isStopped||(this.isStopped=!0,this._error(err))},Subscriber.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},Subscriber.prototype.unsubscribe=function(){this.isUnsubscribed||(this.isStopped=!0,_super.prototype.unsubscribe.call(this))},Subscriber.prototype._next=function(value){this.destination.next(value)},Subscriber.prototype._error=function(err){this.destination.error(err),this.unsubscribe()},Subscriber.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},Subscriber.prototype[rxSubscriber_1.$$rxSubscriber]=function(){return this},Subscriber}(Subscription_1.Subscription);exports.Subscriber=Subscriber;var SafeSubscriber=function(_super){function SafeSubscriber(_parent,observerOrNext,error,complete){_super.call(this),this._parent=_parent;var next,context=this;isFunction_1.isFunction(observerOrNext)?next=observerOrNext:observerOrNext&&(context=observerOrNext,next=observerOrNext.next,error=observerOrNext.error,complete=observerOrNext.complete,isFunction_1.isFunction(context.unsubscribe)&&this.add(context.unsubscribe.bind(context)),context.unsubscribe=this.unsubscribe.bind(this)),this._context=context,this._next=next,this._error=error,this._complete=complete}return __extends(SafeSubscriber,_super),SafeSubscriber.prototype.next=function(value){if(!this.isStopped&&this._next){var _parent=this._parent;_parent.syncErrorThrowable?this.__tryOrSetError(_parent,this._next,value)&&this.unsubscribe():this.__tryOrUnsub(this._next,value)}},SafeSubscriber.prototype.error=function(err){if(!this.isStopped){var _parent=this._parent;if(this._error)_parent.syncErrorThrowable?(this.__tryOrSetError(_parent,this._error,err),this.unsubscribe()):(this.__tryOrUnsub(this._error,err),this.unsubscribe());else{if(!_parent.syncErrorThrowable)throw this.unsubscribe(),err;_parent.syncErrorValue=err,_parent.syncErrorThrown=!0,this.unsubscribe()}}},SafeSubscriber.prototype.complete=function(){if(!this.isStopped){var _parent=this._parent;this._complete?_parent.syncErrorThrowable?(this.__tryOrSetError(_parent,this._complete),this.unsubscribe()):(this.__tryOrUnsub(this._complete),this.unsubscribe()):this.unsubscribe()}},SafeSubscriber.prototype.__tryOrUnsub=function(fn,value){try{fn.call(this._context,value)}catch(err){throw this.unsubscribe(),err}},SafeSubscriber.prototype.__tryOrSetError=function(parent,fn,value){try{fn.call(this._context,value)}catch(err){return parent.syncErrorValue=err,parent.syncErrorThrown=!0,!0}return!1},SafeSubscriber.prototype._unsubscribe=function(){var _parent=this._parent;this._context=null,this._parent=null,_parent.unsubscribe()},SafeSubscriber}(Subscriber)},function(module,exports){"use strict";function isFunction(x){return"function"==typeof x}exports.isFunction=isFunction},function(module,exports,__webpack_require__){"use strict";var isArray_1=__webpack_require__(15),isObject_1=__webpack_require__(16),isFunction_1=__webpack_require__(13),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),UnsubscriptionError_1=__webpack_require__(19),Subscription=function(){function Subscription(unsubscribe){this.isUnsubscribed=!1,unsubscribe&&(this._unsubscribe=unsubscribe)}return Subscription.prototype.unsubscribe=function(){var errors,hasErrors=!1;if(!this.isUnsubscribed){this.isUnsubscribed=!0;var _a=this,_unsubscribe=_a._unsubscribe,_subscriptions=_a._subscriptions;if(this._subscriptions=null,isFunction_1.isFunction(_unsubscribe)){var trial=tryCatch_1.tryCatch(_unsubscribe).call(this);trial===errorObject_1.errorObject&&(hasErrors=!0,(errors=errors||[]).push(errorObject_1.errorObject.e))}if(isArray_1.isArray(_subscriptions))for(var index=-1,len=_subscriptions.length;++index<len;){var sub=_subscriptions[index];if(isObject_1.isObject(sub)){var trial=tryCatch_1.tryCatch(sub.unsubscribe).call(sub);if(trial===errorObject_1.errorObject){hasErrors=!0,errors=errors||[];var err=errorObject_1.errorObject.e;err instanceof UnsubscriptionError_1.UnsubscriptionError?errors=errors.concat(err.errors):errors.push(err)}}}if(hasErrors)throw new UnsubscriptionError_1.UnsubscriptionError(errors)}},Subscription.prototype.add=function(teardown){if(teardown&&teardown!==this&&teardown!==Subscription.EMPTY){var sub=teardown;switch(typeof teardown){case"function":sub=new Subscription(teardown);case"object":if(sub.isUnsubscribed||"function"!=typeof sub.unsubscribe)break;this.isUnsubscribed?sub.unsubscribe():(this._subscriptions||(this._subscriptions=[])).push(sub);break;default:throw new Error("Unrecognized teardown "+teardown+" added to Subscription.")}return sub}},Subscription.prototype.remove=function(subscription){if(null!=subscription&&subscription!==this&&subscription!==Subscription.EMPTY){var subscriptions=this._subscriptions;if(subscriptions){var subscriptionIndex=subscriptions.indexOf(subscription);-1!==subscriptionIndex&&subscriptions.splice(subscriptionIndex,1)}}},Subscription.EMPTY=function(empty){return empty.isUnsubscribed=!0,empty}(new Subscription),Subscription}();exports.Subscription=Subscription},function(module,exports){"use strict";exports.isArray=Array.isArray||function(x){return x&&"number"==typeof x.length}},function(module,exports){"use strict";function isObject(x){return null!=x&&"object"==typeof x}exports.isObject=isObject},function(module,exports,__webpack_require__){"use strict";function tryCatcher(){try{return tryCatchTarget.apply(this,arguments)}catch(e){return errorObject_1.errorObject.e=e,errorObject_1.errorObject}}function tryCatch(fn){return tryCatchTarget=fn,tryCatcher}var tryCatchTarget,errorObject_1=__webpack_require__(18);exports.tryCatch=tryCatch},function(module,exports){"use strict";exports.errorObject={e:{}}},function(module,exports){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},UnsubscriptionError=function(_super){function UnsubscriptionError(errors){_super.call(this),this.errors=errors,this.name="UnsubscriptionError",this.message=errors?errors.length+" errors occurred during unsubscription:\n"+errors.map(function(err,i){return i+1+") "+err.toString()}).join("\n"):""}return __extends(UnsubscriptionError,_super),UnsubscriptionError}(Error);exports.UnsubscriptionError=UnsubscriptionError},function(module,exports,__webpack_require__){"use strict";var root_1=__webpack_require__(9),Symbol=root_1.root.Symbol;exports.$$rxSubscriber="function"==typeof Symbol&&"function"==typeof Symbol["for"]?Symbol["for"]("rxSubscriber"):"@@rxSubscriber"},function(module,exports){"use strict";exports.empty={isUnsubscribed:!0,next:function(value){},error:function(err){throw err},complete:function(){}}},function(module,exports,__webpack_require__){(function(global){"use strict";module.exports=__webpack_require__(23)(global||window||this)}).call(exports,function(){return this}())},function(module,exports){"use strict";module.exports=function(root){var result,Symbol=root.Symbol;return"function"==typeof Symbol?Symbol.observable?result=Symbol.observable:(result=Symbol("observable"),Symbol.observable=result):result="@@observable",result}},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscription_1=__webpack_require__(14),SubjectSubscription=function(_super){function SubjectSubscription(subject,observer){_super.call(this),this.subject=subject,this.observer=observer,this.isUnsubscribed=!1}return __extends(SubjectSubscription,_super),SubjectSubscription.prototype.unsubscribe=function(){if(!this.isUnsubscribed){this.isUnsubscribed=!0;var subject=this.subject,observers=subject.observers;if(this.subject=null,observers&&0!==observers.length&&!subject.isUnsubscribed){var subscriberIndex=observers.indexOf(this.observer);-1!==subscriberIndex&&observers.splice(subscriberIndex,1)}}},SubjectSubscription}(Subscription_1.Subscription);exports.SubjectSubscription=SubjectSubscription},function(module,exports){"use strict";function throwError(e){throw e}exports.throwError=throwError},function(module,exports){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},ObjectUnsubscribedError=function(_super){function ObjectUnsubscribedError(){_super.call(this,"object unsubscribed"),this.name="ObjectUnsubscribedError"}return __extends(ObjectUnsubscribedError,_super),ObjectUnsubscribedError}(Error);exports.ObjectUnsubscribedError=ObjectUnsubscribedError},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bindCallback_1=__webpack_require__(28);Observable_1.Observable.bindCallback=bindCallback_1.bindCallback},function(module,exports,__webpack_require__){"use strict";var BoundCallbackObservable_1=__webpack_require__(29);exports.bindCallback=BoundCallbackObservable_1.BoundCallbackObservable.create},function(module,exports,__webpack_require__){"use strict";function dispatch(state){var self=this,source=state.source,subscriber=state.subscriber,callbackFunc=source.callbackFunc,args=source.args,scheduler=source.scheduler,subject=source.subject;if(!subject){subject=source.subject=new AsyncSubject_1.AsyncSubject;var handler=function handlerFn(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++)innerArgs[_i-0]=arguments[_i];var source=handlerFn.source,selector=source.selector,subject=source.subject;if(selector){var result_2=tryCatch_1.tryCatch(selector).apply(this,innerArgs);result_2===errorObject_1.errorObject?self.add(scheduler.schedule(dispatchError,0,{err:errorObject_1.errorObject.e,subject:subject})):self.add(scheduler.schedule(dispatchNext,0,{value:result_2,subject:subject}))}else{var value=1===innerArgs.length?innerArgs[0]:innerArgs;self.add(scheduler.schedule(dispatchNext,0,{value:value,subject:subject}))}};handler.source=source;var result=tryCatch_1.tryCatch(callbackFunc).apply(this,args.concat(handler));result===errorObject_1.errorObject&&subject.error(errorObject_1.errorObject.e)}self.add(subject.subscribe(subscriber))}function dispatchNext(arg){var value=arg.value,subject=arg.subject;subject.next(value),subject.complete()}function dispatchError(arg){var err=arg.err,subject=arg.subject;subject.error(err)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),AsyncSubject_1=__webpack_require__(30),BoundCallbackObservable=function(_super){function BoundCallbackObservable(callbackFunc,selector,args,scheduler){_super.call(this),this.callbackFunc=callbackFunc,this.selector=selector,this.args=args,this.scheduler=scheduler}return __extends(BoundCallbackObservable,_super),BoundCallbackObservable.create=function(func,selector,scheduler){return void 0===selector&&(selector=void 0),function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i-0]=arguments[_i];return new BoundCallbackObservable(func,selector,args,scheduler)}},BoundCallbackObservable.prototype._subscribe=function(subscriber){var callbackFunc=this.callbackFunc,args=this.args,scheduler=this.scheduler,subject=this.subject;if(scheduler)return scheduler.schedule(dispatch,0,{source:this,subscriber:subscriber});if(!subject){subject=this.subject=new AsyncSubject_1.AsyncSubject;var handler=function handlerFn(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++)innerArgs[_i-0]=arguments[_i];var source=handlerFn.source,selector=source.selector,subject=source.subject;if(selector){var result_1=tryCatch_1.tryCatch(selector).apply(this,innerArgs);result_1===errorObject_1.errorObject?subject.error(errorObject_1.errorObject.e):(subject.next(result_1),subject.complete())}else subject.next(1===innerArgs.length?innerArgs[0]:innerArgs),subject.complete()};handler.source=this;var result=tryCatch_1.tryCatch(callbackFunc).apply(this,args.concat(handler));result===errorObject_1.errorObject&&subject.error(errorObject_1.errorObject.e)}return subject.subscribe(subscriber)},BoundCallbackObservable}(Observable_1.Observable);exports.BoundCallbackObservable=BoundCallbackObservable},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),AsyncSubject=function(_super){function AsyncSubject(){_super.apply(this,arguments),this.value=null,this.hasNext=!1}return __extends(AsyncSubject,_super),AsyncSubject.prototype._subscribe=function(subscriber){return this.hasCompleted&&this.hasNext&&subscriber.next(this.value),_super.prototype._subscribe.call(this,subscriber)},AsyncSubject.prototype._next=function(value){this.value=value,this.hasNext=!0},AsyncSubject.prototype._complete=function(){var index=-1,observers=this.observers,len=observers.length;if(this.isUnsubscribed=!0,this.hasNext)for(;++index<len;){var o=observers[index];o.next(this.value),o.complete()}else for(;++index<len;)observers[index].complete();this.isUnsubscribed=!1,this.unsubscribe()},AsyncSubject}(Subject_1.Subject);exports.AsyncSubject=AsyncSubject},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bindNodeCallback_1=__webpack_require__(32);Observable_1.Observable.bindNodeCallback=bindNodeCallback_1.bindNodeCallback},function(module,exports,__webpack_require__){"use strict";var BoundNodeCallbackObservable_1=__webpack_require__(33);exports.bindNodeCallback=BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create},function(module,exports,__webpack_require__){"use strict";function dispatch(state){var self=this,source=state.source,subscriber=state.subscriber,callbackFunc=source.callbackFunc,args=source.args,scheduler=source.scheduler,subject=source.subject;if(!subject){subject=source.subject=new AsyncSubject_1.AsyncSubject;var handler=function handlerFn(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++)innerArgs[_i-0]=arguments[_i];var source=handlerFn.source,selector=source.selector,subject=source.subject,err=innerArgs.shift();if(err)subject.error(err);else if(selector){var result_2=tryCatch_1.tryCatch(selector).apply(this,innerArgs);result_2===errorObject_1.errorObject?self.add(scheduler.schedule(dispatchError,0,{err:errorObject_1.errorObject.e,subject:subject})):self.add(scheduler.schedule(dispatchNext,0,{value:result_2,subject:subject}))}else{var value=1===innerArgs.length?innerArgs[0]:innerArgs;self.add(scheduler.schedule(dispatchNext,0,{value:value,subject:subject}))}};handler.source=source;var result=tryCatch_1.tryCatch(callbackFunc).apply(this,args.concat(handler));result===errorObject_1.errorObject&&subject.error(errorObject_1.errorObject.e)}self.add(subject.subscribe(subscriber))}function dispatchNext(arg){var value=arg.value,subject=arg.subject;subject.next(value),subject.complete()}function dispatchError(arg){var err=arg.err,subject=arg.subject;subject.error(err)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),AsyncSubject_1=__webpack_require__(30),BoundNodeCallbackObservable=function(_super){function BoundNodeCallbackObservable(callbackFunc,selector,args,scheduler){_super.call(this),this.callbackFunc=callbackFunc,this.selector=selector,this.args=args,this.scheduler=scheduler}return __extends(BoundNodeCallbackObservable,_super),BoundNodeCallbackObservable.create=function(func,selector,scheduler){return void 0===selector&&(selector=void 0),function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i-0]=arguments[_i];return new BoundNodeCallbackObservable(func,selector,args,scheduler)}},BoundNodeCallbackObservable.prototype._subscribe=function(subscriber){var callbackFunc=this.callbackFunc,args=this.args,scheduler=this.scheduler,subject=this.subject;if(scheduler)return scheduler.schedule(dispatch,0,{source:this,subscriber:subscriber});if(!subject){subject=this.subject=new AsyncSubject_1.AsyncSubject;var handler=function handlerFn(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++)innerArgs[_i-0]=arguments[_i];var source=handlerFn.source,selector=source.selector,subject=source.subject,err=innerArgs.shift();if(err)subject.error(err);else if(selector){var result_1=tryCatch_1.tryCatch(selector).apply(this,innerArgs);result_1===errorObject_1.errorObject?subject.error(errorObject_1.errorObject.e):(subject.next(result_1),subject.complete())}else subject.next(1===innerArgs.length?innerArgs[0]:innerArgs),subject.complete()};handler.source=this;var result=tryCatch_1.tryCatch(callbackFunc).apply(this,args.concat(handler));result===errorObject_1.errorObject&&subject.error(errorObject_1.errorObject.e)}return subject.subscribe(subscriber)},BoundNodeCallbackObservable}(Observable_1.Observable);exports.BoundNodeCallbackObservable=BoundNodeCallbackObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),combineLatest_1=__webpack_require__(35);Observable_1.Observable.combineLatest=combineLatest_1.combineLatestStatic},function(module,exports,__webpack_require__){"use strict";function combineLatest(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];var project=null;return"function"==typeof observables[observables.length-1]&&(project=observables.pop()),
1===observables.length&&isArray_1.isArray(observables[0])&&(observables=observables[0]),observables.unshift(this),new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project))}function combineLatestStatic(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];var project=null,scheduler=null;return isScheduler_1.isScheduler(observables[observables.length-1])&&(scheduler=observables.pop()),"function"==typeof observables[observables.length-1]&&(project=observables.pop()),1===observables.length&&isArray_1.isArray(observables[0])&&(observables=observables[0]),new ArrayObservable_1.ArrayObservable(observables,scheduler).lift(new CombineLatestOperator(project))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},ArrayObservable_1=__webpack_require__(36),isArray_1=__webpack_require__(15),isScheduler_1=__webpack_require__(39),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.combineLatest=combineLatest,exports.combineLatestStatic=combineLatestStatic;var CombineLatestOperator=function(){function CombineLatestOperator(project){this.project=project}return CombineLatestOperator.prototype.call=function(subscriber,source){return source._subscribe(new CombineLatestSubscriber(subscriber,this.project))},CombineLatestOperator}();exports.CombineLatestOperator=CombineLatestOperator;var CombineLatestSubscriber=function(_super){function CombineLatestSubscriber(destination,project){_super.call(this,destination),this.project=project,this.active=0,this.values=[],this.observables=[],this.toRespond=[]}return __extends(CombineLatestSubscriber,_super),CombineLatestSubscriber.prototype._next=function(observable){var toRespond=this.toRespond;toRespond.push(toRespond.length),this.observables.push(observable)},CombineLatestSubscriber.prototype._complete=function(){var observables=this.observables,len=observables.length;if(0===len)this.destination.complete();else{this.active=len;for(var i=0;len>i;i++){var observable=observables[i];this.add(subscribeToResult_1.subscribeToResult(this,observable,observable,i))}}},CombineLatestSubscriber.prototype.notifyComplete=function(unused){0===(this.active-=1)&&this.destination.complete()},CombineLatestSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){var values=this.values;values[outerIndex]=innerValue;var toRespond=this.toRespond;if(toRespond.length>0){var found=toRespond.indexOf(outerIndex);-1!==found&&toRespond.splice(found,1)}0===toRespond.length&&(this.project?this._tryProject(values):this.destination.next(values))},CombineLatestSubscriber.prototype._tryProject=function(values){var result;try{result=this.project.apply(this,values)}catch(err){return void this.destination.error(err)}this.destination.next(result)},CombineLatestSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.CombineLatestSubscriber=CombineLatestSubscriber},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),ScalarObservable_1=__webpack_require__(37),EmptyObservable_1=__webpack_require__(38),isScheduler_1=__webpack_require__(39),ArrayObservable=function(_super){function ArrayObservable(array,scheduler){_super.call(this),this.array=array,this.scheduler=scheduler,scheduler||1!==array.length||(this._isScalar=!0,this.value=array[0])}return __extends(ArrayObservable,_super),ArrayObservable.create=function(array,scheduler){return new ArrayObservable(array,scheduler)},ArrayObservable.of=function(){for(var array=[],_i=0;_i<arguments.length;_i++)array[_i-0]=arguments[_i];var scheduler=array[array.length-1];isScheduler_1.isScheduler(scheduler)?array.pop():scheduler=null;var len=array.length;return len>1?new ArrayObservable(array,scheduler):1===len?new ScalarObservable_1.ScalarObservable(array[0],scheduler):new EmptyObservable_1.EmptyObservable(scheduler)},ArrayObservable.dispatch=function(state){var array=state.array,index=state.index,count=state.count,subscriber=state.subscriber;return index>=count?void subscriber.complete():(subscriber.next(array[index]),void(subscriber.isUnsubscribed||(state.index=index+1,this.schedule(state))))},ArrayObservable.prototype._subscribe=function(subscriber){var index=0,array=this.array,count=array.length,scheduler=this.scheduler;if(scheduler)return scheduler.schedule(ArrayObservable.dispatch,0,{array:array,index:index,count:count,subscriber:subscriber});for(var i=0;count>i&&!subscriber.isUnsubscribed;i++)subscriber.next(array[i]);subscriber.complete()},ArrayObservable}(Observable_1.Observable);exports.ArrayObservable=ArrayObservable},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),ScalarObservable=function(_super){function ScalarObservable(value,scheduler){_super.call(this),this.value=value,this.scheduler=scheduler,this._isScalar=!0}return __extends(ScalarObservable,_super),ScalarObservable.create=function(value,scheduler){return new ScalarObservable(value,scheduler)},ScalarObservable.dispatch=function(state){var done=state.done,value=state.value,subscriber=state.subscriber;return done?void subscriber.complete():(subscriber.next(value),void(subscriber.isUnsubscribed||(state.done=!0,this.schedule(state))))},ScalarObservable.prototype._subscribe=function(subscriber){var value=this.value,scheduler=this.scheduler;return scheduler?scheduler.schedule(ScalarObservable.dispatch,0,{done:!1,value:value,subscriber:subscriber}):(subscriber.next(value),void(subscriber.isUnsubscribed||subscriber.complete()))},ScalarObservable}(Observable_1.Observable);exports.ScalarObservable=ScalarObservable},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),EmptyObservable=function(_super){function EmptyObservable(scheduler){_super.call(this),this.scheduler=scheduler}return __extends(EmptyObservable,_super),EmptyObservable.create=function(scheduler){return new EmptyObservable(scheduler)},EmptyObservable.dispatch=function(arg){var subscriber=arg.subscriber;subscriber.complete()},EmptyObservable.prototype._subscribe=function(subscriber){var scheduler=this.scheduler;return scheduler?scheduler.schedule(EmptyObservable.dispatch,0,{subscriber:subscriber}):void subscriber.complete()},EmptyObservable}(Observable_1.Observable);exports.EmptyObservable=EmptyObservable},function(module,exports){"use strict";function isScheduler(value){return value&&"function"==typeof value.schedule}exports.isScheduler=isScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),OuterSubscriber=function(_super){function OuterSubscriber(){_super.apply(this,arguments)}return __extends(OuterSubscriber,_super),OuterSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.destination.next(innerValue)},OuterSubscriber.prototype.notifyError=function(error,innerSub){this.destination.error(error)},OuterSubscriber.prototype.notifyComplete=function(innerSub){this.destination.complete()},OuterSubscriber}(Subscriber_1.Subscriber);exports.OuterSubscriber=OuterSubscriber},function(module,exports,__webpack_require__){"use strict";function subscribeToResult(outerSubscriber,result,outerValue,outerIndex){var destination=new InnerSubscriber_1.InnerSubscriber(outerSubscriber,outerValue,outerIndex);if(!destination.isUnsubscribed){if(result instanceof Observable_1.Observable)return result._isScalar?(destination.next(result.value),void destination.complete()):result.subscribe(destination);if(isArray_1.isArray(result)){for(var i=0,len=result.length;len>i&&!destination.isUnsubscribed;i++)destination.next(result[i]);destination.isUnsubscribed||destination.complete()}else{if(isPromise_1.isPromise(result))return result.then(function(value){destination.isUnsubscribed||(destination.next(value),destination.complete())},function(err){return destination.error(err)}).then(null,function(err){root_1.root.setTimeout(function(){throw err})}),destination;if("function"==typeof result[iterator_1.$$iterator]){for(var _i=0,_a=result;_i<_a.length;_i++){var item=_a[_i];if(destination.next(item),destination.isUnsubscribed)break}destination.isUnsubscribed||destination.complete()}else if("function"==typeof result[$$observable]){var obs=result[$$observable]();if("function"==typeof obs.subscribe)return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber,outerValue,outerIndex));destination.error("invalid observable")}else destination.error(new TypeError("unknown type returned"))}}}var root_1=__webpack_require__(9),isArray_1=__webpack_require__(15),isPromise_1=__webpack_require__(42),Observable_1=__webpack_require__(8),iterator_1=__webpack_require__(43),InnerSubscriber_1=__webpack_require__(44),$$observable=__webpack_require__(22);exports.subscribeToResult=subscribeToResult},function(module,exports){"use strict";function isPromise(value){return value&&"function"!=typeof value.subscribe&&"function"==typeof value.then}exports.isPromise=isPromise},function(module,exports,__webpack_require__){"use strict";var root_1=__webpack_require__(9),Symbol=root_1.root.Symbol;if("function"==typeof Symbol)Symbol.iterator?exports.$$iterator=Symbol.iterator:"function"==typeof Symbol["for"]&&(exports.$$iterator=Symbol["for"]("iterator"));else if(root_1.root.Set&&"function"==typeof(new root_1.root.Set)["@@iterator"])exports.$$iterator="@@iterator";else if(root_1.root.Map)for(var keys=Object.getOwnPropertyNames(root_1.root.Map.prototype),i=0;i<keys.length;++i){var key=keys[i];if("entries"!==key&&"size"!==key&&root_1.root.Map.prototype[key]===root_1.root.Map.prototype.entries){exports.$$iterator=key;break}}else exports.$$iterator="@@iterator"},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),InnerSubscriber=function(_super){function InnerSubscriber(parent,outerValue,outerIndex){_super.call(this),this.parent=parent,this.outerValue=outerValue,this.outerIndex=outerIndex,this.index=0}return __extends(InnerSubscriber,_super),InnerSubscriber.prototype._next=function(value){this.parent.notifyNext(this.outerValue,value,this.outerIndex,this.index++,this)},InnerSubscriber.prototype._error=function(error){this.parent.notifyError(error,this),this.unsubscribe()},InnerSubscriber.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},InnerSubscriber}(Subscriber_1.Subscriber);exports.InnerSubscriber=InnerSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),concat_1=__webpack_require__(46);Observable_1.Observable.concat=concat_1.concat},function(module,exports,__webpack_require__){"use strict";var concat_1=__webpack_require__(47);exports.concat=concat_1.concatStatic},function(module,exports,__webpack_require__){"use strict";function concat(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];return concatStatic.apply(void 0,[this].concat(observables))}function concatStatic(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];var scheduler=null,args=observables;return isScheduler_1.isScheduler(args[observables.length-1])&&(scheduler=args.pop()),new ArrayObservable_1.ArrayObservable(observables,scheduler).lift(new mergeAll_1.MergeAllOperator(1))}var isScheduler_1=__webpack_require__(39),ArrayObservable_1=__webpack_require__(36),mergeAll_1=__webpack_require__(48);exports.concat=concat,exports.concatStatic=concatStatic},function(module,exports,__webpack_require__){"use strict";function mergeAll(concurrent){return void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),this.lift(new MergeAllOperator(concurrent))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.mergeAll=mergeAll;var MergeAllOperator=function(){function MergeAllOperator(concurrent){this.concurrent=concurrent}return MergeAllOperator.prototype.call=function(observer,source){return source._subscribe(new MergeAllSubscriber(observer,this.concurrent))},MergeAllOperator}();exports.MergeAllOperator=MergeAllOperator;var MergeAllSubscriber=function(_super){function MergeAllSubscriber(destination,concurrent){_super.call(this,destination),this.concurrent=concurrent,this.hasCompleted=!1,this.buffer=[],this.active=0}return __extends(MergeAllSubscriber,_super),MergeAllSubscriber.prototype._next=function(observable){this.active<this.concurrent?(this.active++,this.add(subscribeToResult_1.subscribeToResult(this,observable))):this.buffer.push(observable)},MergeAllSubscriber.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},MergeAllSubscriber.prototype.notifyComplete=function(innerSub){var buffer=this.buffer;this.remove(innerSub),this.active--,buffer.length>0?this._next(buffer.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},MergeAllSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.MergeAllSubscriber=MergeAllSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),defer_1=__webpack_require__(50);Observable_1.Observable.defer=defer_1.defer},function(module,exports,__webpack_require__){"use strict";var DeferObservable_1=__webpack_require__(51);exports.defer=DeferObservable_1.DeferObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),subscribeToResult_1=__webpack_require__(41),OuterSubscriber_1=__webpack_require__(40),DeferObservable=function(_super){function DeferObservable(observableFactory){_super.call(this),this.observableFactory=observableFactory}return __extends(DeferObservable,_super),DeferObservable.create=function(observableFactory){return new DeferObservable(observableFactory)},DeferObservable.prototype._subscribe=function(subscriber){return new DeferSubscriber(subscriber,this.observableFactory)},DeferObservable}(Observable_1.Observable);exports.DeferObservable=DeferObservable;var DeferSubscriber=function(_super){function DeferSubscriber(destination,factory){_super.call(this,destination),this.factory=factory,this.tryDefer()}return __extends(DeferSubscriber,_super),DeferSubscriber.prototype.tryDefer=function(){try{this._callFactory()}catch(err){this._error(err)}},DeferSubscriber.prototype._callFactory=function(){var result=this.factory();result&&this.add(subscribeToResult_1.subscribeToResult(this,result))},DeferSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),empty_1=__webpack_require__(53);Observable_1.Observable.empty=empty_1.empty},function(module,exports,__webpack_require__){"use strict";var EmptyObservable_1=__webpack_require__(38);exports.empty=EmptyObservable_1.EmptyObservable.create},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),forkJoin_1=__webpack_require__(55);Observable_1.Observable.forkJoin=forkJoin_1.forkJoin},function(module,exports,__webpack_require__){"use strict";var ForkJoinObservable_1=__webpack_require__(56);exports.forkJoin=ForkJoinObservable_1.ForkJoinObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),EmptyObservable_1=__webpack_require__(38),isArray_1=__webpack_require__(15),subscribeToResult_1=__webpack_require__(41),OuterSubscriber_1=__webpack_require__(40),ForkJoinObservable=function(_super){function ForkJoinObservable(sources,resultSelector){_super.call(this),this.sources=sources,this.resultSelector=resultSelector}return __extends(ForkJoinObservable,_super),ForkJoinObservable.create=function(){for(var sources=[],_i=0;_i<arguments.length;_i++)sources[_i-0]=arguments[_i];if(null===sources||0===arguments.length)return new EmptyObservable_1.EmptyObservable;var resultSelector=null;return"function"==typeof sources[sources.length-1]&&(resultSelector=sources.pop()),1===sources.length&&isArray_1.isArray(sources[0])&&(sources=sources[0]),0===sources.length?new EmptyObservable_1.EmptyObservable:new ForkJoinObservable(sources,resultSelector)},ForkJoinObservable.prototype._subscribe=function(subscriber){return new ForkJoinSubscriber(subscriber,this.sources,this.resultSelector)},ForkJoinObservable}(Observable_1.Observable);exports.ForkJoinObservable=ForkJoinObservable;var ForkJoinSubscriber=function(_super){function ForkJoinSubscriber(destination,sources,resultSelector){_super.call(this,destination),this.sources=sources,this.resultSelector=resultSelector,this.completed=0,this.haveValues=0;var len=sources.length;this.total=len,this.values=new Array(len);for(var i=0;len>i;i++){var source=sources[i],innerSubscription=subscribeToResult_1.subscribeToResult(this,source,null,i);innerSubscription&&(innerSubscription.outerIndex=i,this.add(innerSubscription))}}return __extends(ForkJoinSubscriber,_super),ForkJoinSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.values[outerIndex]=innerValue,innerSub._hasValue||(innerSub._hasValue=!0,this.haveValues++)},ForkJoinSubscriber.prototype.notifyComplete=function(innerSub){var destination=this.destination,_a=this,haveValues=_a.haveValues,resultSelector=_a.resultSelector,values=_a.values,len=values.length;if(!innerSub._hasValue)return void destination.complete();if(this.completed++,this.completed===len){if(haveValues===len){var value=resultSelector?resultSelector.apply(this,values):values;destination.next(value)}destination.complete()}},ForkJoinSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),from_1=__webpack_require__(58);Observable_1.Observable.from=from_1.from},function(module,exports,__webpack_require__){"use strict";var FromObservable_1=__webpack_require__(59);exports.from=FromObservable_1.FromObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},isArray_1=__webpack_require__(15),isFunction_1=__webpack_require__(13),isPromise_1=__webpack_require__(42),isScheduler_1=__webpack_require__(39),PromiseObservable_1=__webpack_require__(60),IteratorObservable_1=__webpack_require__(61),ArrayObservable_1=__webpack_require__(36),ArrayLikeObservable_1=__webpack_require__(62),iterator_1=__webpack_require__(43),Observable_1=__webpack_require__(8),observeOn_1=__webpack_require__(63),$$observable=__webpack_require__(22),isArrayLike=function(x){return x&&"number"==typeof x.length},FromObservable=function(_super){function FromObservable(ish,scheduler){_super.call(this,null),this.ish=ish,this.scheduler=scheduler}return __extends(FromObservable,_super),FromObservable.create=function(ish,mapFnOrScheduler,thisArg,lastScheduler){var scheduler=null,mapFn=null;if(isFunction_1.isFunction(mapFnOrScheduler)?(scheduler=lastScheduler||null,mapFn=mapFnOrScheduler):isScheduler_1.isScheduler(scheduler)&&(scheduler=mapFnOrScheduler),null!=ish){if("function"==typeof ish[$$observable])return ish instanceof Observable_1.Observable&&!scheduler?ish:new FromObservable(ish,scheduler);if(isArray_1.isArray(ish))return new ArrayObservable_1.ArrayObservable(ish,scheduler);if(isPromise_1.isPromise(ish))return new PromiseObservable_1.PromiseObservable(ish,scheduler);if("function"==typeof ish[iterator_1.$$iterator]||"string"==typeof ish)return new IteratorObservable_1.IteratorObservable(ish,null,null,scheduler);if(isArrayLike(ish))return new ArrayLikeObservable_1.ArrayLikeObservable(ish,mapFn,thisArg,scheduler)}throw new TypeError((null!==ish&&typeof ish||ish)+" is not observable")},FromObservable.prototype._subscribe=function(subscriber){var ish=this.ish,scheduler=this.scheduler;return null==scheduler?ish[$$observable]().subscribe(subscriber):ish[$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber,scheduler,0))},FromObservable}(Observable_1.Observable);exports.FromObservable=FromObservable},function(module,exports,__webpack_require__){"use strict";function dispatchNext(arg){var value=arg.value,subscriber=arg.subscriber;subscriber.isUnsubscribed||(subscriber.next(value),subscriber.complete())}function dispatchError(arg){var err=arg.err,subscriber=arg.subscriber;subscriber.isUnsubscribed||subscriber.error(err)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},root_1=__webpack_require__(9),Observable_1=__webpack_require__(8),PromiseObservable=function(_super){function PromiseObservable(promise,scheduler){void 0===scheduler&&(scheduler=null),_super.call(this),this.promise=promise,this.scheduler=scheduler}return __extends(PromiseObservable,_super),PromiseObservable.create=function(promise,scheduler){return void 0===scheduler&&(scheduler=null),new PromiseObservable(promise,scheduler)},PromiseObservable.prototype._subscribe=function(subscriber){var _this=this,promise=this.promise,scheduler=this.scheduler;if(null==scheduler)this._isScalar?subscriber.isUnsubscribed||(subscriber.next(this.value),subscriber.complete()):promise.then(function(value){_this.value=value,_this._isScalar=!0,subscriber.isUnsubscribed||(subscriber.next(value),subscriber.complete())},function(err){subscriber.isUnsubscribed||subscriber.error(err)}).then(null,function(err){root_1.root.setTimeout(function(){throw err})});else if(this._isScalar){if(!subscriber.isUnsubscribed)return scheduler.schedule(dispatchNext,0,{value:this.value,subscriber:subscriber})}else promise.then(function(value){_this.value=value,_this._isScalar=!0,subscriber.isUnsubscribed||subscriber.add(scheduler.schedule(dispatchNext,0,{value:value,subscriber:subscriber}))},function(err){subscriber.isUnsubscribed||subscriber.add(scheduler.schedule(dispatchError,0,{err:err,subscriber:subscriber}))}).then(null,function(err){root_1.root.setTimeout(function(){throw err})})},PromiseObservable}(Observable_1.Observable);exports.PromiseObservable=PromiseObservable},function(module,exports,__webpack_require__){"use strict";function getIterator(obj){var i=obj[iterator_1.$$iterator];if(!i&&"string"==typeof obj)return new StringIterator(obj);if(!i&&void 0!==obj.length)return new ArrayIterator(obj);if(!i)throw new TypeError("Object is not iterable");return obj[iterator_1.$$iterator]()}function toLength(o){var len=+o.length;return isNaN(len)?0:0!==len&&numberIsFinite(len)?(len=sign(len)*Math.floor(Math.abs(len)),0>=len?0:len>maxSafeInteger?maxSafeInteger:len):len}function numberIsFinite(value){return"number"==typeof value&&root_1.root.isFinite(value)}function sign(value){var valueAsNumber=+value;return 0===valueAsNumber?valueAsNumber:isNaN(valueAsNumber)?valueAsNumber:0>valueAsNumber?-1:1}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},root_1=__webpack_require__(9),isObject_1=__webpack_require__(16),tryCatch_1=__webpack_require__(17),Observable_1=__webpack_require__(8),isFunction_1=__webpack_require__(13),iterator_1=__webpack_require__(43),errorObject_1=__webpack_require__(18),IteratorObservable=function(_super){function IteratorObservable(iterator,project,thisArg,scheduler){if(_super.call(this),null==iterator)throw new Error("iterator cannot be null.");if(isObject_1.isObject(project))this.thisArg=project,this.scheduler=thisArg;else if(isFunction_1.isFunction(project))this.project=project,this.thisArg=thisArg,this.scheduler=scheduler;else if(null!=project)throw new Error("When provided, `project` must be a function.");this.iterator=getIterator(iterator)}return __extends(IteratorObservable,_super),IteratorObservable.create=function(iterator,project,thisArg,scheduler){return new IteratorObservable(iterator,project,thisArg,scheduler)},IteratorObservable.dispatch=function(state){var index=state.index,hasError=state.hasError,thisArg=state.thisArg,project=state.project,iterator=state.iterator,subscriber=state.subscriber;if(hasError)return void subscriber.error(state.error);var result=iterator.next();return result.done?void subscriber.complete():(project?(result=tryCatch_1.tryCatch(project).call(thisArg,result.value,index),result===errorObject_1.errorObject?(state.error=errorObject_1.errorObject.e,state.hasError=!0):(subscriber.next(result),state.index=index+1)):(subscriber.next(result.value),state.index=index+1),void(subscriber.isUnsubscribed||this.schedule(state)))},IteratorObservable.prototype._subscribe=function(subscriber){var index=0,_a=this,iterator=_a.iterator,project=_a.project,thisArg=_a.thisArg,scheduler=_a.scheduler;if(scheduler)return scheduler.schedule(IteratorObservable.dispatch,0,{index:index,thisArg:thisArg,project:project,iterator:iterator,subscriber:subscriber});for(;;){var result=iterator.next();if(result.done){subscriber.complete();break}if(project){if(result=tryCatch_1.tryCatch(project).call(thisArg,result.value,index++),result===errorObject_1.errorObject){subscriber.error(errorObject_1.errorObject.e);break}subscriber.next(result)}else subscriber.next(result.value);if(subscriber.isUnsubscribed)break}},IteratorObservable}(Observable_1.Observable);exports.IteratorObservable=IteratorObservable;var StringIterator=function(){function StringIterator(str,idx,len){void 0===idx&&(idx=0),void 0===len&&(len=str.length),this.str=str,this.idx=idx,this.len=len}return StringIterator.prototype[iterator_1.$$iterator]=function(){return this},StringIterator.prototype.next=function(){return this.idx<this.len?{done:!1,value:this.str.charAt(this.idx++)}:{done:!0,value:void 0}},StringIterator}(),ArrayIterator=function(){function ArrayIterator(arr,idx,len){void 0===idx&&(idx=0),void 0===len&&(len=toLength(arr)),this.arr=arr,this.idx=idx,this.len=len}return ArrayIterator.prototype[iterator_1.$$iterator]=function(){return this},ArrayIterator.prototype.next=function(){return this.idx<this.len?{done:!1,value:this.arr[this.idx++]}:{done:!0,value:void 0}},ArrayIterator}(),maxSafeInteger=Math.pow(2,53)-1},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),ScalarObservable_1=__webpack_require__(37),EmptyObservable_1=__webpack_require__(38),ArrayLikeObservable=function(_super){function ArrayLikeObservable(arrayLike,mapFn,thisArg,scheduler){_super.call(this),this.arrayLike=arrayLike,this.scheduler=scheduler,mapFn||scheduler||1!==arrayLike.length||(this._isScalar=!0,this.value=arrayLike[0]),mapFn&&(this.mapFn=mapFn.bind(thisArg))}return __extends(ArrayLikeObservable,_super),ArrayLikeObservable.create=function(arrayLike,mapFn,thisArg,scheduler){var length=arrayLike.length;return 0===length?new EmptyObservable_1.EmptyObservable:1!==length||mapFn?new ArrayLikeObservable(arrayLike,mapFn,thisArg,scheduler):new ScalarObservable_1.ScalarObservable(arrayLike[0],scheduler)},ArrayLikeObservable.dispatch=function(state){var arrayLike=state.arrayLike,index=state.index,length=state.length,mapFn=state.mapFn,subscriber=state.subscriber;if(!subscriber.isUnsubscribed){if(index>=length)return void subscriber.complete();var result=mapFn?mapFn(arrayLike[index],index):arrayLike[index];subscriber.next(result),state.index=index+1,this.schedule(state)}},ArrayLikeObservable.prototype._subscribe=function(subscriber){var index=0,_a=this,arrayLike=_a.arrayLike,mapFn=_a.mapFn,scheduler=_a.scheduler,length=arrayLike.length;if(scheduler)return scheduler.schedule(ArrayLikeObservable.dispatch,0,{arrayLike:arrayLike,index:index,length:length,mapFn:mapFn,subscriber:subscriber});for(var i=0;length>i&&!subscriber.isUnsubscribed;i++){var result=mapFn?mapFn(arrayLike[i],i):arrayLike[i];subscriber.next(result)}subscriber.complete()},ArrayLikeObservable}(Observable_1.Observable);exports.ArrayLikeObservable=ArrayLikeObservable},function(module,exports,__webpack_require__){"use strict";function observeOn(scheduler,delay){return void 0===delay&&(delay=0),this.lift(new ObserveOnOperator(scheduler,delay))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Notification_1=__webpack_require__(64);exports.observeOn=observeOn;var ObserveOnOperator=function(){function ObserveOnOperator(scheduler,delay){void 0===delay&&(delay=0),this.scheduler=scheduler,this.delay=delay}return ObserveOnOperator.prototype.call=function(subscriber,source){return source._subscribe(new ObserveOnSubscriber(subscriber,this.scheduler,this.delay))},ObserveOnOperator}();exports.ObserveOnOperator=ObserveOnOperator;var ObserveOnSubscriber=function(_super){function ObserveOnSubscriber(destination,scheduler,delay){void 0===delay&&(delay=0),_super.call(this,destination),this.scheduler=scheduler,this.delay=delay}return __extends(ObserveOnSubscriber,_super),ObserveOnSubscriber.dispatch=function(arg){var notification=arg.notification,destination=arg.destination;notification.observe(destination)},ObserveOnSubscriber.prototype.scheduleMessage=function(notification){this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,this.delay,new ObserveOnMessage(notification,this.destination)))},ObserveOnSubscriber.prototype._next=function(value){this.scheduleMessage(Notification_1.Notification.createNext(value))},ObserveOnSubscriber.prototype._error=function(err){this.scheduleMessage(Notification_1.Notification.createError(err))},ObserveOnSubscriber.prototype._complete=function(){this.scheduleMessage(Notification_1.Notification.createComplete())},ObserveOnSubscriber}(Subscriber_1.Subscriber);exports.ObserveOnSubscriber=ObserveOnSubscriber;var ObserveOnMessage=function(){function ObserveOnMessage(notification,destination){this.notification=notification,this.destination=destination;
}return ObserveOnMessage}();exports.ObserveOnMessage=ObserveOnMessage},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),Notification=function(){function Notification(kind,value,exception){this.kind=kind,this.value=value,this.exception=exception,this.hasValue="N"===kind}return Notification.prototype.observe=function(observer){switch(this.kind){case"N":return observer.next&&observer.next(this.value);case"E":return observer.error&&observer.error(this.exception);case"C":return observer.complete&&observer.complete()}},Notification.prototype["do"]=function(next,error,complete){var kind=this.kind;switch(kind){case"N":return next&&next(this.value);case"E":return error&&error(this.exception);case"C":return complete&&complete()}},Notification.prototype.accept=function(nextOrObserver,error,complete){return nextOrObserver&&"function"==typeof nextOrObserver.next?this.observe(nextOrObserver):this["do"](nextOrObserver,error,complete)},Notification.prototype.toObservable=function(){var kind=this.kind;switch(kind){case"N":return Observable_1.Observable.of(this.value);case"E":return Observable_1.Observable["throw"](this.exception);case"C":return Observable_1.Observable.empty()}},Notification.createNext=function(value){return"undefined"!=typeof value?new Notification("N",value):this.undefinedValueNotification},Notification.createError=function(err){return new Notification("E",void 0,err)},Notification.createComplete=function(){return this.completeNotification},Notification.completeNotification=new Notification("C"),Notification.undefinedValueNotification=new Notification("N",void 0),Notification}();exports.Notification=Notification},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),fromEvent_1=__webpack_require__(66);Observable_1.Observable.fromEvent=fromEvent_1.fromEvent},function(module,exports,__webpack_require__){"use strict";var FromEventObservable_1=__webpack_require__(67);exports.fromEvent=FromEventObservable_1.FromEventObservable.create},function(module,exports,__webpack_require__){"use strict";function isNodeStyleEventEmmitter(sourceObj){return!!sourceObj&&"function"==typeof sourceObj.addListener&&"function"==typeof sourceObj.removeListener}function isJQueryStyleEventEmitter(sourceObj){return!!sourceObj&&"function"==typeof sourceObj.on&&"function"==typeof sourceObj.off}function isNodeList(sourceObj){return!!sourceObj&&"[object NodeList]"===sourceObj.toString()}function isHTMLCollection(sourceObj){return!!sourceObj&&"[object HTMLCollection]"===sourceObj.toString()}function isEventTarget(sourceObj){return!!sourceObj&&"function"==typeof sourceObj.addEventListener&&"function"==typeof sourceObj.removeEventListener}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),Subscription_1=__webpack_require__(14),FromEventObservable=function(_super){function FromEventObservable(sourceObj,eventName,selector){_super.call(this),this.sourceObj=sourceObj,this.eventName=eventName,this.selector=selector}return __extends(FromEventObservable,_super),FromEventObservable.create=function(target,eventName,selector){return new FromEventObservable(target,eventName,selector)},FromEventObservable.setupSubscription=function(sourceObj,eventName,handler,subscriber){var unsubscribe;if(isNodeList(sourceObj)||isHTMLCollection(sourceObj))for(var i=0,len=sourceObj.length;len>i;i++)FromEventObservable.setupSubscription(sourceObj[i],eventName,handler,subscriber);else isEventTarget(sourceObj)?(sourceObj.addEventListener(eventName,handler),unsubscribe=function(){return sourceObj.removeEventListener(eventName,handler)}):isJQueryStyleEventEmitter(sourceObj)?(sourceObj.on(eventName,handler),unsubscribe=function(){return sourceObj.off(eventName,handler)}):isNodeStyleEventEmmitter(sourceObj)&&(sourceObj.addListener(eventName,handler),unsubscribe=function(){return sourceObj.removeListener(eventName,handler)});subscriber.add(new Subscription_1.Subscription(unsubscribe))},FromEventObservable.prototype._subscribe=function(subscriber){var sourceObj=this.sourceObj,eventName=this.eventName,selector=this.selector,handler=selector?function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i-0]=arguments[_i];var result=tryCatch_1.tryCatch(selector).apply(void 0,args);result===errorObject_1.errorObject?subscriber.error(errorObject_1.errorObject.e):subscriber.next(result)}:function(e){return subscriber.next(e)};FromEventObservable.setupSubscription(sourceObj,eventName,handler,subscriber)},FromEventObservable}(Observable_1.Observable);exports.FromEventObservable=FromEventObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),fromEventPattern_1=__webpack_require__(69);Observable_1.Observable.fromEventPattern=fromEventPattern_1.fromEventPattern},function(module,exports,__webpack_require__){"use strict";var FromEventPatternObservable_1=__webpack_require__(70);exports.fromEventPattern=FromEventPatternObservable_1.FromEventPatternObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),Subscription_1=__webpack_require__(14),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),FromEventPatternObservable=function(_super){function FromEventPatternObservable(addHandler,removeHandler,selector){_super.call(this),this.addHandler=addHandler,this.removeHandler=removeHandler,this.selector=selector}return __extends(FromEventPatternObservable,_super),FromEventPatternObservable.create=function(addHandler,removeHandler,selector){return new FromEventPatternObservable(addHandler,removeHandler,selector)},FromEventPatternObservable.prototype._subscribe=function(subscriber){var addHandler=this.addHandler,removeHandler=this.removeHandler,selector=this.selector,handler=selector?function(e){var result=tryCatch_1.tryCatch(selector).apply(null,arguments);result===errorObject_1.errorObject?subscriber.error(result.e):subscriber.next(result)}:function(e){subscriber.next(e)},result=tryCatch_1.tryCatch(addHandler)(handler);result===errorObject_1.errorObject&&subscriber.error(result.e),subscriber.add(new Subscription_1.Subscription(function(){removeHandler(handler)}))},FromEventPatternObservable}(Observable_1.Observable);exports.FromEventPatternObservable=FromEventPatternObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),fromPromise_1=__webpack_require__(72);Observable_1.Observable.fromPromise=fromPromise_1.fromPromise},function(module,exports,__webpack_require__){"use strict";var PromiseObservable_1=__webpack_require__(60);exports.fromPromise=PromiseObservable_1.PromiseObservable.create},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),GenerateObservable_1=__webpack_require__(74);Observable_1.Observable.generate=GenerateObservable_1.GenerateObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),isScheduler_1=__webpack_require__(39),selfSelector=function(value){return value},GenerateObservable=function(_super){function GenerateObservable(initialState,condition,iterate,resultSelector,scheduler){_super.call(this),this.initialState=initialState,this.condition=condition,this.iterate=iterate,this.resultSelector=resultSelector,this.scheduler=scheduler}return __extends(GenerateObservable,_super),GenerateObservable.create=function(initialStateOrOptions,condition,iterate,resultSelectorOrObservable,scheduler){return 1==arguments.length?new GenerateObservable(initialStateOrOptions.initialState,initialStateOrOptions.condition,initialStateOrOptions.iterate,initialStateOrOptions.resultSelector||selfSelector,initialStateOrOptions.scheduler):void 0===resultSelectorOrObservable||isScheduler_1.isScheduler(resultSelectorOrObservable)?new GenerateObservable(initialStateOrOptions,condition,iterate,selfSelector,resultSelectorOrObservable):new GenerateObservable(initialStateOrOptions,condition,iterate,resultSelectorOrObservable,scheduler)},GenerateObservable.prototype._subscribe=function(subscriber){var state=this.initialState;if(this.scheduler)return this.scheduler.schedule(GenerateObservable.dispatch,0,{subscriber:subscriber,iterate:this.iterate,condition:this.condition,resultSelector:this.resultSelector,state:state});for(var _a=this,condition=_a.condition,resultSelector=_a.resultSelector,iterate=_a.iterate;;){if(condition){var conditionResult=void 0;try{conditionResult=condition(state)}catch(err){return void subscriber.error(err)}if(!conditionResult){subscriber.complete();break}}var value=void 0;try{value=resultSelector(state)}catch(err){return void subscriber.error(err)}if(subscriber.next(value),subscriber.isUnsubscribed)break;try{state=iterate(state)}catch(err){return void subscriber.error(err)}}},GenerateObservable.dispatch=function(state){var subscriber=state.subscriber,condition=state.condition;if(!subscriber.isUnsubscribed){if(state.needIterate)try{state.state=state.iterate(state.state)}catch(err){return void subscriber.error(err)}else state.needIterate=!0;if(condition){var conditionResult=void 0;try{conditionResult=condition(state.state)}catch(err){return void subscriber.error(err)}if(!conditionResult)return void subscriber.complete();if(subscriber.isUnsubscribed)return}var value;try{value=state.resultSelector(state.state)}catch(err){return void subscriber.error(err)}if(!subscriber.isUnsubscribed&&(subscriber.next(value),!subscriber.isUnsubscribed))return this.schedule(state)}},GenerateObservable}(Observable_1.Observable);exports.GenerateObservable=GenerateObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),interval_1=__webpack_require__(76);Observable_1.Observable.interval=interval_1.interval},function(module,exports,__webpack_require__){"use strict";var IntervalObservable_1=__webpack_require__(77);exports.interval=IntervalObservable_1.IntervalObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},isNumeric_1=__webpack_require__(78),Observable_1=__webpack_require__(8),async_1=__webpack_require__(79),IntervalObservable=function(_super){function IntervalObservable(period,scheduler){void 0===period&&(period=0),void 0===scheduler&&(scheduler=async_1.async),_super.call(this),this.period=period,this.scheduler=scheduler,(!isNumeric_1.isNumeric(period)||0>period)&&(this.period=0),scheduler&&"function"==typeof scheduler.schedule||(this.scheduler=async_1.async)}return __extends(IntervalObservable,_super),IntervalObservable.create=function(period,scheduler){return void 0===period&&(period=0),void 0===scheduler&&(scheduler=async_1.async),new IntervalObservable(period,scheduler)},IntervalObservable.dispatch=function(state){var index=state.index,subscriber=state.subscriber,period=state.period;subscriber.next(index),subscriber.isUnsubscribed||(state.index+=1,this.schedule(state,period))},IntervalObservable.prototype._subscribe=function(subscriber){var index=0,period=this.period,scheduler=this.scheduler;subscriber.add(scheduler.schedule(IntervalObservable.dispatch,period,{index:index,subscriber:subscriber,period:period}))},IntervalObservable}(Observable_1.Observable);exports.IntervalObservable=IntervalObservable},function(module,exports,__webpack_require__){"use strict";function isNumeric(val){return!isArray_1.isArray(val)&&val-parseFloat(val)+1>=0}var isArray_1=__webpack_require__(15);exports.isNumeric=isNumeric},function(module,exports,__webpack_require__){"use strict";var AsyncScheduler_1=__webpack_require__(80);exports.async=new AsyncScheduler_1.AsyncScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},FutureAction_1=__webpack_require__(81),QueueScheduler_1=__webpack_require__(82),AsyncScheduler=function(_super){function AsyncScheduler(){_super.apply(this,arguments)}return __extends(AsyncScheduler,_super),AsyncScheduler.prototype.scheduleNow=function(work,state){return new FutureAction_1.FutureAction(this,work).schedule(state,0)},AsyncScheduler}(QueueScheduler_1.QueueScheduler);exports.AsyncScheduler=AsyncScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},root_1=__webpack_require__(9),Subscription_1=__webpack_require__(14),FutureAction=function(_super){function FutureAction(scheduler,work){_super.call(this),this.scheduler=scheduler,this.work=work,this.pending=!1}return __extends(FutureAction,_super),FutureAction.prototype.execute=function(){if(this.isUnsubscribed)this.error=new Error("executing a cancelled action");else try{this.work(this.state)}catch(e){this.unsubscribe(),this.error=e}},FutureAction.prototype.schedule=function(state,delay){return void 0===delay&&(delay=0),this.isUnsubscribed?this:this._schedule(state,delay)},FutureAction.prototype._schedule=function(state,delay){var _this=this;void 0===delay&&(delay=0),this.state=state,this.pending=!0;var id=this.id;return null!=id&&this.delay===delay?this:(this.delay=delay,null!=id&&(this.id=null,root_1.root.clearInterval(id)),this.id=root_1.root.setInterval(function(){_this.pending=!1;var _a=_this,id=_a.id,scheduler=_a.scheduler;scheduler.actions.push(_this),scheduler.flush(),_this.pending===!1&&null!=id&&(_this.id=null,root_1.root.clearInterval(id))},delay),this)},FutureAction.prototype._unsubscribe=function(){this.pending=!1;var _a=this,id=_a.id,scheduler=_a.scheduler,actions=scheduler.actions,index=actions.indexOf(this);null!=id&&(this.id=null,root_1.root.clearInterval(id)),-1!==index&&actions.splice(index,1),this.work=null,this.state=null,this.scheduler=null},FutureAction}(Subscription_1.Subscription);exports.FutureAction=FutureAction},function(module,exports,__webpack_require__){"use strict";var QueueAction_1=__webpack_require__(83),FutureAction_1=__webpack_require__(81),QueueScheduler=function(){function QueueScheduler(){this.active=!1,this.actions=[],this.scheduledId=null}return QueueScheduler.prototype.now=function(){return Date.now()},QueueScheduler.prototype.flush=function(){if(!this.active&&!this.scheduledId){this.active=!0;for(var actions=this.actions,action=null;action=actions.shift();)if(action.execute(),action.error)throw this.active=!1,action.error;this.active=!1}},QueueScheduler.prototype.schedule=function(work,delay,state){return void 0===delay&&(delay=0),0>=delay?this.scheduleNow(work,state):this.scheduleLater(work,delay,state)},QueueScheduler.prototype.scheduleNow=function(work,state){return new QueueAction_1.QueueAction(this,work).schedule(state)},QueueScheduler.prototype.scheduleLater=function(work,delay,state){return new FutureAction_1.FutureAction(this,work).schedule(state,delay)},QueueScheduler}();exports.QueueScheduler=QueueScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},FutureAction_1=__webpack_require__(81),QueueAction=function(_super){function QueueAction(){_super.apply(this,arguments)}return __extends(QueueAction,_super),QueueAction.prototype._schedule=function(state,delay){if(void 0===delay&&(delay=0),delay>0)return _super.prototype._schedule.call(this,state,delay);this.delay=delay,this.state=state;var scheduler=this.scheduler;return scheduler.actions.push(this),scheduler.flush(),this},QueueAction}(FutureAction_1.FutureAction);exports.QueueAction=QueueAction},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),merge_1=__webpack_require__(85);Observable_1.Observable.merge=merge_1.merge},function(module,exports,__webpack_require__){"use strict";var merge_1=__webpack_require__(86);exports.merge=merge_1.mergeStatic},function(module,exports,__webpack_require__){"use strict";function merge(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];return observables.unshift(this),mergeStatic.apply(this,observables)}function mergeStatic(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];var concurrent=Number.POSITIVE_INFINITY,scheduler=null,last=observables[observables.length-1];return isScheduler_1.isScheduler(last)?(scheduler=observables.pop(),observables.length>1&&"number"==typeof observables[observables.length-1]&&(concurrent=observables.pop())):"number"==typeof last&&(concurrent=observables.pop()),1===observables.length?observables[0]:new ArrayObservable_1.ArrayObservable(observables,scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent))}var ArrayObservable_1=__webpack_require__(36),mergeAll_1=__webpack_require__(48),isScheduler_1=__webpack_require__(39);exports.merge=merge,exports.mergeStatic=mergeStatic},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),race_1=__webpack_require__(88);Observable_1.Observable.race=race_1.raceStatic},function(module,exports,__webpack_require__){"use strict";function race(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];return 1===observables.length&&isArray_1.isArray(observables[0])&&(observables=observables[0]),observables.unshift(this),raceStatic.apply(this,observables)}function raceStatic(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];if(1===observables.length){if(!isArray_1.isArray(observables[0]))return observables[0];observables=observables[0]}return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},isArray_1=__webpack_require__(15),ArrayObservable_1=__webpack_require__(36),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.race=race,exports.raceStatic=raceStatic;var RaceOperator=function(){function RaceOperator(){}return RaceOperator.prototype.call=function(subscriber,source){return source._subscribe(new RaceSubscriber(subscriber))},RaceOperator}();exports.RaceOperator=RaceOperator;var RaceSubscriber=function(_super){function RaceSubscriber(destination){_super.call(this,destination),this.hasFirst=!1,this.observables=[],this.subscriptions=[]}return __extends(RaceSubscriber,_super),RaceSubscriber.prototype._next=function(observable){this.observables.push(observable)},RaceSubscriber.prototype._complete=function(){var observables=this.observables,len=observables.length;if(0===len)this.destination.complete();else{for(var i=0;len>i;i++){var observable=observables[i],subscription=subscribeToResult_1.subscribeToResult(this,observable,observable,i);this.subscriptions&&(this.subscriptions.push(subscription),this.add(subscription))}this.observables=null}},RaceSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){if(!this.hasFirst){this.hasFirst=!0;for(var i=0;i<this.subscriptions.length;i++)if(i!==outerIndex){var subscription=this.subscriptions[i];subscription.unsubscribe(),this.remove(subscription)}this.subscriptions=null}this.destination.next(innerValue)},RaceSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.RaceSubscriber=RaceSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),never_1=__webpack_require__(90);Observable_1.Observable.never=never_1.never},function(module,exports,__webpack_require__){"use strict";var NeverObservable_1=__webpack_require__(91);exports.never=NeverObservable_1.NeverObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),noop_1=__webpack_require__(92),NeverObservable=function(_super){function NeverObservable(){_super.call(this)}return __extends(NeverObservable,_super),NeverObservable.create=function(){return new NeverObservable},NeverObservable.prototype._subscribe=function(subscriber){noop_1.noop()},NeverObservable}(Observable_1.Observable);exports.NeverObservable=NeverObservable},function(module,exports){"use strict";function noop(){}exports.noop=noop},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),of_1=__webpack_require__(94);Observable_1.Observable.of=of_1.of},function(module,exports,__webpack_require__){"use strict";var ArrayObservable_1=__webpack_require__(36);exports.of=ArrayObservable_1.ArrayObservable.of},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),range_1=__webpack_require__(96);Observable_1.Observable.range=range_1.range},function(module,exports,__webpack_require__){"use strict";var RangeObservable_1=__webpack_require__(97);exports.range=RangeObservable_1.RangeObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),RangeObservable=function(_super){function RangeObservable(start,count,scheduler){_super.call(this),this.start=start,this._count=count,this.scheduler=scheduler}return __extends(RangeObservable,_super),RangeObservable.create=function(start,count,scheduler){return void 0===start&&(start=0),void 0===count&&(count=0),new RangeObservable(start,count,scheduler)},RangeObservable.dispatch=function(state){var start=state.start,index=state.index,count=state.count,subscriber=state.subscriber;return index>=count?void subscriber.complete():(subscriber.next(start),void(subscriber.isUnsubscribed||(state.index=index+1,state.start=start+1,this.schedule(state))))},RangeObservable.prototype._subscribe=function(subscriber){var index=0,start=this.start,count=this._count,scheduler=this.scheduler;if(scheduler)return scheduler.schedule(RangeObservable.dispatch,0,{index:index,count:count,start:start,subscriber:subscriber});for(;;){if(index++>=count){subscriber.complete();break}if(subscriber.next(start++),subscriber.isUnsubscribed)break}},RangeObservable}(Observable_1.Observable);exports.RangeObservable=RangeObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),throw_1=__webpack_require__(99);Observable_1.Observable["throw"]=throw_1._throw},function(module,exports,__webpack_require__){"use strict";var ErrorObservable_1=__webpack_require__(100);exports._throw=ErrorObservable_1.ErrorObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),ErrorObservable=function(_super){function ErrorObservable(error,scheduler){_super.call(this),this.error=error,this.scheduler=scheduler}return __extends(ErrorObservable,_super),ErrorObservable.create=function(error,scheduler){return new ErrorObservable(error,scheduler)},ErrorObservable.dispatch=function(arg){var error=arg.error,subscriber=arg.subscriber;subscriber.error(error)},ErrorObservable.prototype._subscribe=function(subscriber){var error=this.error,scheduler=this.scheduler;return scheduler?scheduler.schedule(ErrorObservable.dispatch,0,{error:error,subscriber:subscriber}):void subscriber.error(error)},ErrorObservable}(Observable_1.Observable);exports.ErrorObservable=ErrorObservable},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),timer_1=__webpack_require__(102);Observable_1.Observable.timer=timer_1.timer},function(module,exports,__webpack_require__){"use strict";var TimerObservable_1=__webpack_require__(103);exports.timer=TimerObservable_1.TimerObservable.create},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},isNumeric_1=__webpack_require__(78),Observable_1=__webpack_require__(8),async_1=__webpack_require__(79),isScheduler_1=__webpack_require__(39),isDate_1=__webpack_require__(104),TimerObservable=function(_super){function TimerObservable(dueTime,period,scheduler){void 0===dueTime&&(dueTime=0),_super.call(this),this.period=-1,this.dueTime=0,isNumeric_1.isNumeric(period)?this.period=Number(period)<1&&1||Number(period):isScheduler_1.isScheduler(period)&&(scheduler=period),isScheduler_1.isScheduler(scheduler)||(scheduler=async_1.async),this.scheduler=scheduler,this.dueTime=isDate_1.isDate(dueTime)?+dueTime-this.scheduler.now():dueTime}return __extends(TimerObservable,_super),TimerObservable.create=function(initialDelay,period,scheduler){return void 0===initialDelay&&(initialDelay=0),new TimerObservable(initialDelay,period,scheduler)},TimerObservable.dispatch=function(state){var index=state.index,period=state.period,subscriber=state.subscriber,action=this;if(subscriber.next(index),!subscriber.isUnsubscribed){if(-1===period)return subscriber.complete();state.index=index+1,action.schedule(state,period)}},TimerObservable.prototype._subscribe=function(subscriber){var index=0,_a=this,period=_a.period,dueTime=_a.dueTime,scheduler=_a.scheduler;return scheduler.schedule(TimerObservable.dispatch,dueTime,{index:index,period:period,subscriber:subscriber})},TimerObservable}(Observable_1.Observable);exports.TimerObservable=TimerObservable},function(module,exports){"use strict";function isDate(value){return value instanceof Date&&!isNaN(+value)}exports.isDate=isDate},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),zip_1=__webpack_require__(106);Observable_1.Observable.zip=zip_1.zip},function(module,exports,__webpack_require__){"use strict";var zip_1=__webpack_require__(107);exports.zip=zip_1.zipStatic},function(module,exports,__webpack_require__){"use strict";function zipProto(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];return observables.unshift(this),zipStatic.apply(this,observables)}function zipStatic(){for(var observables=[],_i=0;_i<arguments.length;_i++)observables[_i-0]=arguments[_i];var project=observables[observables.length-1];return"function"==typeof project&&observables.pop(),new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},ArrayObservable_1=__webpack_require__(36),isArray_1=__webpack_require__(15),Subscriber_1=__webpack_require__(12),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41),iterator_1=__webpack_require__(43);exports.zipProto=zipProto,exports.zipStatic=zipStatic;var ZipOperator=function(){function ZipOperator(project){this.project=project}return ZipOperator.prototype.call=function(subscriber,source){return source._subscribe(new ZipSubscriber(subscriber,this.project))},ZipOperator}();exports.ZipOperator=ZipOperator;var ZipSubscriber=function(_super){function ZipSubscriber(destination,project,values){void 0===values&&(values=Object.create(null)),_super.call(this,destination),this.index=0,this.iterators=[],this.active=0,this.project="function"==typeof project?project:null,this.values=values}return __extends(ZipSubscriber,_super),ZipSubscriber.prototype._next=function(value){var iterators=this.iterators,index=this.index++;isArray_1.isArray(value)?iterators.push(new StaticArrayIterator(value)):"function"==typeof value[iterator_1.$$iterator]?iterators.push(new StaticIterator(value[iterator_1.$$iterator]())):iterators.push(new ZipBufferIterator(this.destination,this,value,index))},ZipSubscriber.prototype._complete=function(){var iterators=this.iterators,len=iterators.length;this.active=len;for(var i=0;len>i;i++){var iterator=iterators[i];iterator.stillUnsubscribed?this.add(iterator.subscribe(iterator,i)):this.active--}},ZipSubscriber.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},ZipSubscriber.prototype.checkIterators=function(){for(var iterators=this.iterators,len=iterators.length,destination=this.destination,i=0;len>i;i++){var iterator=iterators[i];if("function"==typeof iterator.hasValue&&!iterator.hasValue())return}for(var shouldComplete=!1,args=[],i=0;len>i;i++){var iterator=iterators[i],result=iterator.next();if(iterator.hasCompleted()&&(shouldComplete=!0),result.done)return void destination.complete();args.push(result.value)}this.project?this._tryProject(args):destination.next(args),shouldComplete&&destination.complete()},ZipSubscriber.prototype._tryProject=function(args){var result;try{result=this.project.apply(this,args)}catch(err){return void this.destination.error(err)}this.destination.next(result)},ZipSubscriber}(Subscriber_1.Subscriber);exports.ZipSubscriber=ZipSubscriber;var StaticIterator=function(){function StaticIterator(iterator){this.iterator=iterator,this.nextResult=iterator.next()}return StaticIterator.prototype.hasValue=function(){return!0},StaticIterator.prototype.next=function(){var result=this.nextResult;return this.nextResult=this.iterator.next(),result},StaticIterator.prototype.hasCompleted=function(){var nextResult=this.nextResult;return nextResult&&nextResult.done},StaticIterator}(),StaticArrayIterator=function(){function StaticArrayIterator(array){this.array=array,this.index=0,this.length=0,this.length=array.length}return StaticArrayIterator.prototype[iterator_1.$$iterator]=function(){return this},StaticArrayIterator.prototype.next=function(value){var i=this.index++,array=this.array;return i<this.length?{value:array[i],done:!1}:{done:!0}},StaticArrayIterator.prototype.hasValue=function(){return this.array.length>this.index},StaticArrayIterator.prototype.hasCompleted=function(){return this.array.length===this.index},StaticArrayIterator}(),ZipBufferIterator=function(_super){function ZipBufferIterator(destination,parent,observable,index){_super.call(this,destination),this.parent=parent,this.observable=observable,this.index=index,this.stillUnsubscribed=!0,this.buffer=[],this.isComplete=!1}return __extends(ZipBufferIterator,_super),ZipBufferIterator.prototype[iterator_1.$$iterator]=function(){return this},ZipBufferIterator.prototype.next=function(){
var buffer=this.buffer;return 0===buffer.length&&this.isComplete?{done:!0}:{value:buffer.shift(),done:!1}},ZipBufferIterator.prototype.hasValue=function(){return this.buffer.length>0},ZipBufferIterator.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},ZipBufferIterator.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},ZipBufferIterator.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.buffer.push(innerValue),this.parent.checkIterators()},ZipBufferIterator.prototype.subscribe=function(value,index){return subscribeToResult_1.subscribeToResult(this,this.observable,this,index)},ZipBufferIterator}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),buffer_1=__webpack_require__(109);Observable_1.Observable.prototype.buffer=buffer_1.buffer},function(module,exports,__webpack_require__){"use strict";function buffer(closingNotifier){return this.lift(new BufferOperator(closingNotifier))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.buffer=buffer;var BufferOperator=function(){function BufferOperator(closingNotifier){this.closingNotifier=closingNotifier}return BufferOperator.prototype.call=function(subscriber,source){return source._subscribe(new BufferSubscriber(subscriber,this.closingNotifier))},BufferOperator}(),BufferSubscriber=function(_super){function BufferSubscriber(destination,closingNotifier){_super.call(this,destination),this.buffer=[],this.add(subscribeToResult_1.subscribeToResult(this,closingNotifier))}return __extends(BufferSubscriber,_super),BufferSubscriber.prototype._next=function(value){this.buffer.push(value)},BufferSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){var buffer=this.buffer;this.buffer=[],this.destination.next(buffer)},BufferSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bufferCount_1=__webpack_require__(111);Observable_1.Observable.prototype.bufferCount=bufferCount_1.bufferCount},function(module,exports,__webpack_require__){"use strict";function bufferCount(bufferSize,startBufferEvery){return void 0===startBufferEvery&&(startBufferEvery=null),this.lift(new BufferCountOperator(bufferSize,startBufferEvery))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.bufferCount=bufferCount;var BufferCountOperator=function(){function BufferCountOperator(bufferSize,startBufferEvery){this.bufferSize=bufferSize,this.startBufferEvery=startBufferEvery}return BufferCountOperator.prototype.call=function(subscriber,source){return source._subscribe(new BufferCountSubscriber(subscriber,this.bufferSize,this.startBufferEvery))},BufferCountOperator}(),BufferCountSubscriber=function(_super){function BufferCountSubscriber(destination,bufferSize,startBufferEvery){_super.call(this,destination),this.bufferSize=bufferSize,this.startBufferEvery=startBufferEvery,this.buffers=[[]],this.count=0}return __extends(BufferCountSubscriber,_super),BufferCountSubscriber.prototype._next=function(value){var count=this.count+=1,destination=this.destination,bufferSize=this.bufferSize,startBufferEvery=null==this.startBufferEvery?bufferSize:this.startBufferEvery,buffers=this.buffers,len=buffers.length,remove=-1;count%startBufferEvery===0&&buffers.push([]);for(var i=0;len>i;i++){var buffer=buffers[i];buffer.push(value),buffer.length===bufferSize&&(remove=i,destination.next(buffer))}-1!==remove&&buffers.splice(remove,1)},BufferCountSubscriber.prototype._complete=function(){for(var destination=this.destination,buffers=this.buffers;buffers.length>0;){var buffer=buffers.shift();buffer.length>0&&destination.next(buffer)}_super.prototype._complete.call(this)},BufferCountSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bufferTime_1=__webpack_require__(113);Observable_1.Observable.prototype.bufferTime=bufferTime_1.bufferTime},function(module,exports,__webpack_require__){"use strict";function bufferTime(bufferTimeSpan,bufferCreationInterval,scheduler){return void 0===bufferCreationInterval&&(bufferCreationInterval=null),void 0===scheduler&&(scheduler=async_1.async),this.lift(new BufferTimeOperator(bufferTimeSpan,bufferCreationInterval,scheduler))}function dispatchBufferTimeSpanOnly(state){var subscriber=state.subscriber,prevBuffer=state.buffer;prevBuffer&&subscriber.closeBuffer(prevBuffer),state.buffer=subscriber.openBuffer(),subscriber.isUnsubscribed||this.schedule(state,state.bufferTimeSpan)}function dispatchBufferCreation(state){var bufferCreationInterval=state.bufferCreationInterval,bufferTimeSpan=state.bufferTimeSpan,subscriber=state.subscriber,scheduler=state.scheduler,buffer=subscriber.openBuffer(),action=this;subscriber.isUnsubscribed||(action.add(scheduler.schedule(dispatchBufferClose,bufferTimeSpan,{subscriber:subscriber,buffer:buffer})),action.schedule(state,bufferCreationInterval))}function dispatchBufferClose(arg){var subscriber=arg.subscriber,buffer=arg.buffer;subscriber.closeBuffer(buffer)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),async_1=__webpack_require__(79);exports.bufferTime=bufferTime;var BufferTimeOperator=function(){function BufferTimeOperator(bufferTimeSpan,bufferCreationInterval,scheduler){this.bufferTimeSpan=bufferTimeSpan,this.bufferCreationInterval=bufferCreationInterval,this.scheduler=scheduler}return BufferTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new BufferTimeSubscriber(subscriber,this.bufferTimeSpan,this.bufferCreationInterval,this.scheduler))},BufferTimeOperator}(),BufferTimeSubscriber=function(_super){function BufferTimeSubscriber(destination,bufferTimeSpan,bufferCreationInterval,scheduler){_super.call(this,destination),this.bufferTimeSpan=bufferTimeSpan,this.bufferCreationInterval=bufferCreationInterval,this.scheduler=scheduler,this.buffers=[];var buffer=this.openBuffer();if(null!==bufferCreationInterval&&bufferCreationInterval>=0){var closeState={subscriber:this,buffer:buffer},creationState={bufferTimeSpan:bufferTimeSpan,bufferCreationInterval:bufferCreationInterval,subscriber:this,scheduler:scheduler};this.add(scheduler.schedule(dispatchBufferClose,bufferTimeSpan,closeState)),this.add(scheduler.schedule(dispatchBufferCreation,bufferCreationInterval,creationState))}else{var timeSpanOnlyState={subscriber:this,buffer:buffer,bufferTimeSpan:bufferTimeSpan};this.add(scheduler.schedule(dispatchBufferTimeSpanOnly,bufferTimeSpan,timeSpanOnlyState))}}return __extends(BufferTimeSubscriber,_super),BufferTimeSubscriber.prototype._next=function(value){for(var buffers=this.buffers,len=buffers.length,i=0;len>i;i++)buffers[i].push(value)},BufferTimeSubscriber.prototype._error=function(err){this.buffers.length=0,_super.prototype._error.call(this,err)},BufferTimeSubscriber.prototype._complete=function(){for(var _a=this,buffers=_a.buffers,destination=_a.destination;buffers.length>0;)destination.next(buffers.shift());_super.prototype._complete.call(this)},BufferTimeSubscriber.prototype._unsubscribe=function(){this.buffers=null},BufferTimeSubscriber.prototype.openBuffer=function(){var buffer=[];return this.buffers.push(buffer),buffer},BufferTimeSubscriber.prototype.closeBuffer=function(buffer){this.destination.next(buffer);var buffers=this.buffers;buffers.splice(buffers.indexOf(buffer),1)},BufferTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bufferToggle_1=__webpack_require__(115);Observable_1.Observable.prototype.bufferToggle=bufferToggle_1.bufferToggle},function(module,exports,__webpack_require__){"use strict";function bufferToggle(openings,closingSelector){return this.lift(new BufferToggleOperator(openings,closingSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscription_1=__webpack_require__(14),subscribeToResult_1=__webpack_require__(41),OuterSubscriber_1=__webpack_require__(40);exports.bufferToggle=bufferToggle;var BufferToggleOperator=function(){function BufferToggleOperator(openings,closingSelector){this.openings=openings,this.closingSelector=closingSelector}return BufferToggleOperator.prototype.call=function(subscriber,source){return source._subscribe(new BufferToggleSubscriber(subscriber,this.openings,this.closingSelector))},BufferToggleOperator}(),BufferToggleSubscriber=function(_super){function BufferToggleSubscriber(destination,openings,closingSelector){_super.call(this,destination),this.openings=openings,this.closingSelector=closingSelector,this.contexts=[],this.add(subscribeToResult_1.subscribeToResult(this,openings))}return __extends(BufferToggleSubscriber,_super),BufferToggleSubscriber.prototype._next=function(value){for(var contexts=this.contexts,len=contexts.length,i=0;len>i;i++)contexts[i].buffer.push(value)},BufferToggleSubscriber.prototype._error=function(err){for(var contexts=this.contexts;contexts.length>0;){var context=contexts.shift();context.subscription.unsubscribe(),context.buffer=null,context.subscription=null}this.contexts=null,_super.prototype._error.call(this,err)},BufferToggleSubscriber.prototype._complete=function(){for(var contexts=this.contexts;contexts.length>0;){var context=contexts.shift();this.destination.next(context.buffer),context.subscription.unsubscribe(),context.buffer=null,context.subscription=null}this.contexts=null,_super.prototype._complete.call(this)},BufferToggleSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){outerValue?this.closeBuffer(outerValue):this.openBuffer(innerValue)},BufferToggleSubscriber.prototype.notifyComplete=function(innerSub){this.closeBuffer(innerSub.context)},BufferToggleSubscriber.prototype.openBuffer=function(value){try{var closingSelector=this.closingSelector,closingNotifier=closingSelector.call(this,value);closingNotifier&&this.trySubscribe(closingNotifier)}catch(err){this._error(err)}},BufferToggleSubscriber.prototype.closeBuffer=function(context){var contexts=this.contexts;if(contexts&&context){var buffer=context.buffer,subscription=context.subscription;this.destination.next(buffer),contexts.splice(contexts.indexOf(context),1),this.remove(subscription),subscription.unsubscribe()}},BufferToggleSubscriber.prototype.trySubscribe=function(closingNotifier){var contexts=this.contexts,buffer=[],subscription=new Subscription_1.Subscription,context={buffer:buffer,subscription:subscription};contexts.push(context);var innerSubscription=subscribeToResult_1.subscribeToResult(this,closingNotifier,context);!innerSubscription||innerSubscription.isUnsubscribed?this.closeBuffer(context):(innerSubscription.context=context,this.add(innerSubscription),subscription.add(innerSubscription))},BufferToggleSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),bufferWhen_1=__webpack_require__(117);Observable_1.Observable.prototype.bufferWhen=bufferWhen_1.bufferWhen},function(module,exports,__webpack_require__){"use strict";function bufferWhen(closingSelector){return this.lift(new BufferWhenOperator(closingSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscription_1=__webpack_require__(14),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.bufferWhen=bufferWhen;var BufferWhenOperator=function(){function BufferWhenOperator(closingSelector){this.closingSelector=closingSelector}return BufferWhenOperator.prototype.call=function(subscriber,source){return source._subscribe(new BufferWhenSubscriber(subscriber,this.closingSelector))},BufferWhenOperator}(),BufferWhenSubscriber=function(_super){function BufferWhenSubscriber(destination,closingSelector){_super.call(this,destination),this.closingSelector=closingSelector,this.subscribing=!1,this.openBuffer()}return __extends(BufferWhenSubscriber,_super),BufferWhenSubscriber.prototype._next=function(value){this.buffer.push(value)},BufferWhenSubscriber.prototype._complete=function(){var buffer=this.buffer;buffer&&this.destination.next(buffer),_super.prototype._complete.call(this)},BufferWhenSubscriber.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},BufferWhenSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.openBuffer()},BufferWhenSubscriber.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},BufferWhenSubscriber.prototype.openBuffer=function(){var closingSubscription=this.closingSubscription;closingSubscription&&(this.remove(closingSubscription),closingSubscription.unsubscribe());var buffer=this.buffer;this.buffer&&this.destination.next(buffer),this.buffer=[];var closingNotifier=tryCatch_1.tryCatch(this.closingSelector)();closingNotifier===errorObject_1.errorObject?this.error(errorObject_1.errorObject.e):(closingSubscription=new Subscription_1.Subscription,this.closingSubscription=closingSubscription,this.add(closingSubscription),this.subscribing=!0,closingSubscription.add(subscribeToResult_1.subscribeToResult(this,closingNotifier)),this.subscribing=!1)},BufferWhenSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),cache_1=__webpack_require__(119);Observable_1.Observable.prototype.cache=cache_1.cache},function(module,exports,__webpack_require__){"use strict";function cache(bufferSize,windowTime,scheduler){return void 0===bufferSize&&(bufferSize=Number.POSITIVE_INFINITY),void 0===windowTime&&(windowTime=Number.POSITIVE_INFINITY),publishReplay_1.publishReplay.call(this,bufferSize,windowTime,scheduler).refCount()}var publishReplay_1=__webpack_require__(120);exports.cache=cache},function(module,exports,__webpack_require__){"use strict";function publishReplay(bufferSize,windowTime,scheduler){return void 0===bufferSize&&(bufferSize=Number.POSITIVE_INFINITY),void 0===windowTime&&(windowTime=Number.POSITIVE_INFINITY),multicast_1.multicast.call(this,new ReplaySubject_1.ReplaySubject(bufferSize,windowTime,scheduler))}var ReplaySubject_1=__webpack_require__(121),multicast_1=__webpack_require__(123);exports.publishReplay=publishReplay},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),queue_1=__webpack_require__(122),observeOn_1=__webpack_require__(63),ReplaySubject=function(_super){function ReplaySubject(bufferSize,windowTime,scheduler){void 0===bufferSize&&(bufferSize=Number.POSITIVE_INFINITY),void 0===windowTime&&(windowTime=Number.POSITIVE_INFINITY),_super.call(this),this.events=[],this.scheduler=scheduler,this.bufferSize=1>bufferSize?1:bufferSize,this._windowTime=1>windowTime?1:windowTime}return __extends(ReplaySubject,_super),ReplaySubject.prototype._next=function(value){var now=this._getNow();this.events.push(new ReplayEvent(now,value)),this._trimBufferThenGetEvents(now),_super.prototype._next.call(this,value)},ReplaySubject.prototype._subscribe=function(subscriber){var events=this._trimBufferThenGetEvents(this._getNow()),scheduler=this.scheduler;scheduler&&subscriber.add(subscriber=new observeOn_1.ObserveOnSubscriber(subscriber,scheduler));for(var index=-1,len=events.length;++index<len&&!subscriber.isUnsubscribed;)subscriber.next(events[index].value);return _super.prototype._subscribe.call(this,subscriber)},ReplaySubject.prototype._getNow=function(){return(this.scheduler||queue_1.queue).now()},ReplaySubject.prototype._trimBufferThenGetEvents=function(now){for(var bufferSize=this.bufferSize,_windowTime=this._windowTime,events=this.events,eventsCount=events.length,spliceCount=0;eventsCount>spliceCount&&!(now-events[spliceCount].time<_windowTime);)spliceCount+=1;return eventsCount>bufferSize&&(spliceCount=Math.max(spliceCount,eventsCount-bufferSize)),spliceCount>0&&events.splice(0,spliceCount),events},ReplaySubject}(Subject_1.Subject);exports.ReplaySubject=ReplaySubject;var ReplayEvent=function(){function ReplayEvent(time,value){this.time=time,this.value=value}return ReplayEvent}()},function(module,exports,__webpack_require__){"use strict";var QueueScheduler_1=__webpack_require__(82);exports.queue=new QueueScheduler_1.QueueScheduler},function(module,exports,__webpack_require__){"use strict";function multicast(subjectOrSubjectFactory){var subjectFactory;return subjectFactory="function"==typeof subjectOrSubjectFactory?subjectOrSubjectFactory:function(){return subjectOrSubjectFactory},new ConnectableObservable_1.ConnectableObservable(this,subjectFactory)}var ConnectableObservable_1=__webpack_require__(124);exports.multicast=multicast},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),Subscriber_1=__webpack_require__(12),Subscription_1=__webpack_require__(14),ConnectableObservable=function(_super){function ConnectableObservable(source,subjectFactory){_super.call(this),this.source=source,this.subjectFactory=subjectFactory}return __extends(ConnectableObservable,_super),ConnectableObservable.prototype._subscribe=function(subscriber){return this.getSubject().subscribe(subscriber)},ConnectableObservable.prototype.getSubject=function(){var subject=this.subject;return subject&&!subject.isUnsubscribed?subject:this.subject=this.subjectFactory()},ConnectableObservable.prototype.connect=function(){var source=this.source,subscription=this.subscription;return subscription&&!subscription.isUnsubscribed?subscription:(subscription=source.subscribe(this.getSubject()),subscription.add(new ConnectableSubscription(this)),this.subscription=subscription)},ConnectableObservable.prototype.refCount=function(){return new RefCountObservable(this)},ConnectableObservable.prototype._closeSubscription=function(){this.subject=null,this.subscription=null},ConnectableObservable}(Observable_1.Observable);exports.ConnectableObservable=ConnectableObservable;var ConnectableSubscription=function(_super){function ConnectableSubscription(connectable){_super.call(this),this.connectable=connectable}return __extends(ConnectableSubscription,_super),ConnectableSubscription.prototype._unsubscribe=function(){var connectable=this.connectable;connectable._closeSubscription(),this.connectable=null},ConnectableSubscription}(Subscription_1.Subscription),RefCountObservable=function(_super){function RefCountObservable(connectable,refCount){void 0===refCount&&(refCount=0),_super.call(this),this.connectable=connectable,this.refCount=refCount}return __extends(RefCountObservable,_super),RefCountObservable.prototype._subscribe=function(subscriber){var connectable=this.connectable,refCountSubscriber=new RefCountSubscriber(subscriber,this),subscription=connectable.subscribe(refCountSubscriber);return subscription.isUnsubscribed||1!==++this.refCount||(refCountSubscriber.connection=this.connection=connectable.connect()),subscription},RefCountObservable}(Observable_1.Observable),RefCountSubscriber=function(_super){function RefCountSubscriber(destination,refCountObservable){_super.call(this,null),this.destination=destination,this.refCountObservable=refCountObservable,this.connection=refCountObservable.connection,destination.add(this)}return __extends(RefCountSubscriber,_super),RefCountSubscriber.prototype._next=function(value){this.destination.next(value)},RefCountSubscriber.prototype._error=function(err){this._resetConnectable(),this.destination.error(err)},RefCountSubscriber.prototype._complete=function(){this._resetConnectable(),this.destination.complete()},RefCountSubscriber.prototype._resetConnectable=function(){var observable=this.refCountObservable,obsConnection=observable.connection,subConnection=this.connection;subConnection&&subConnection===obsConnection&&(observable.refCount=0,obsConnection.unsubscribe(),observable.connection=null,this.unsubscribe())},RefCountSubscriber.prototype._unsubscribe=function(){var observable=this.refCountObservable;if(0!==observable.refCount&&0===--observable.refCount){var obsConnection=observable.connection,subConnection=this.connection;subConnection&&subConnection===obsConnection&&(obsConnection.unsubscribe(),observable.connection=null)}},RefCountSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),catch_1=__webpack_require__(126);Observable_1.Observable.prototype["catch"]=catch_1._catch},function(module,exports,__webpack_require__){"use strict";function _catch(selector){var operator=new CatchOperator(selector),caught=this.lift(operator);return operator.caught=caught}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports._catch=_catch;var CatchOperator=function(){function CatchOperator(selector){this.selector=selector}return CatchOperator.prototype.call=function(subscriber,source){return source._subscribe(new CatchSubscriber(subscriber,this.selector,this.caught))},CatchOperator}(),CatchSubscriber=function(_super){function CatchSubscriber(destination,selector,caught){_super.call(this,destination),this.selector=selector,this.caught=caught}return __extends(CatchSubscriber,_super),CatchSubscriber.prototype.error=function(err){if(!this.isStopped){var result=void 0;try{result=this.selector(err,this.caught)}catch(err){return void this.destination.error(err)}this._innerSub(result)}},CatchSubscriber.prototype._innerSub=function(result){this.unsubscribe(),this.destination.remove(this),result.subscribe(this.destination)},CatchSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),combineAll_1=__webpack_require__(128);Observable_1.Observable.prototype.combineAll=combineAll_1.combineAll},function(module,exports,__webpack_require__){"use strict";function combineAll(project){return this.lift(new combineLatest_1.CombineLatestOperator(project))}var combineLatest_1=__webpack_require__(35);exports.combineAll=combineAll},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),combineLatest_1=__webpack_require__(35);Observable_1.Observable.prototype.combineLatest=combineLatest_1.combineLatest},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),concat_1=__webpack_require__(47);Observable_1.Observable.prototype.concat=concat_1.concat},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),concatAll_1=__webpack_require__(132);Observable_1.Observable.prototype.concatAll=concatAll_1.concatAll},function(module,exports,__webpack_require__){"use strict";function concatAll(){return this.lift(new mergeAll_1.MergeAllOperator(1))}var mergeAll_1=__webpack_require__(48);exports.concatAll=concatAll},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),concatMap_1=__webpack_require__(134);Observable_1.Observable.prototype.concatMap=concatMap_1.concatMap},function(module,exports,__webpack_require__){"use strict";function concatMap(project,resultSelector){return this.lift(new mergeMap_1.MergeMapOperator(project,resultSelector,1))}var mergeMap_1=__webpack_require__(135);exports.concatMap=concatMap},function(module,exports,__webpack_require__){"use strict";function mergeMap(project,resultSelector,concurrent){return void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),"number"==typeof resultSelector&&(concurrent=resultSelector,resultSelector=null),this.lift(new MergeMapOperator(project,resultSelector,concurrent))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},subscribeToResult_1=__webpack_require__(41),OuterSubscriber_1=__webpack_require__(40);exports.mergeMap=mergeMap;var MergeMapOperator=function(){function MergeMapOperator(project,resultSelector,concurrent){void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),this.project=project,this.resultSelector=resultSelector,this.concurrent=concurrent}return MergeMapOperator.prototype.call=function(observer,source){return source._subscribe(new MergeMapSubscriber(observer,this.project,this.resultSelector,this.concurrent))},MergeMapOperator}();exports.MergeMapOperator=MergeMapOperator;var MergeMapSubscriber=function(_super){function MergeMapSubscriber(destination,project,resultSelector,concurrent){void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),_super.call(this,destination),this.project=project,this.resultSelector=resultSelector,this.concurrent=concurrent,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}return __extends(MergeMapSubscriber,_super),MergeMapSubscriber.prototype._next=function(value){this.active<this.concurrent?this._tryNext(value):this.buffer.push(value)},MergeMapSubscriber.prototype._tryNext=function(value){var result,index=this.index++;try{result=this.project(value,index)}catch(err){return void this.destination.error(err)}this.active++,this._innerSub(result,value,index)},MergeMapSubscriber.prototype._innerSub=function(ish,value,index){this.add(subscribeToResult_1.subscribeToResult(this,ish,value,index))},MergeMapSubscriber.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},MergeMapSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.resultSelector?this._notifyResultSelector(outerValue,innerValue,outerIndex,innerIndex):this.destination.next(innerValue)},MergeMapSubscriber.prototype._notifyResultSelector=function(outerValue,innerValue,outerIndex,innerIndex){var result;try{result=this.resultSelector(outerValue,innerValue,outerIndex,innerIndex)}catch(err){return void this.destination.error(err)}this.destination.next(result)},MergeMapSubscriber.prototype.notifyComplete=function(innerSub){var buffer=this.buffer;this.remove(innerSub),this.active--,buffer.length>0?this._next(buffer.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},MergeMapSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.MergeMapSubscriber=MergeMapSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),concatMapTo_1=__webpack_require__(137);Observable_1.Observable.prototype.concatMapTo=concatMapTo_1.concatMapTo},function(module,exports,__webpack_require__){"use strict";function concatMapTo(innerObservable,resultSelector){return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable,resultSelector,1))}var mergeMapTo_1=__webpack_require__(138);exports.concatMapTo=concatMapTo},function(module,exports,__webpack_require__){"use strict";function mergeMapTo(innerObservable,resultSelector,concurrent){return void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),"number"==typeof resultSelector&&(concurrent=resultSelector,resultSelector=null),this.lift(new MergeMapToOperator(innerObservable,resultSelector,concurrent))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.mergeMapTo=mergeMapTo;var MergeMapToOperator=function(){function MergeMapToOperator(ish,resultSelector,concurrent){void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),this.ish=ish,this.resultSelector=resultSelector,this.concurrent=concurrent}return MergeMapToOperator.prototype.call=function(observer,source){return source._subscribe(new MergeMapToSubscriber(observer,this.ish,this.resultSelector,this.concurrent))},MergeMapToOperator}();exports.MergeMapToOperator=MergeMapToOperator;var MergeMapToSubscriber=function(_super){function MergeMapToSubscriber(destination,ish,resultSelector,concurrent){void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),_super.call(this,destination),this.ish=ish,this.resultSelector=resultSelector,this.concurrent=concurrent,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}return __extends(MergeMapToSubscriber,_super),MergeMapToSubscriber.prototype._next=function(value){if(this.active<this.concurrent){var resultSelector=this.resultSelector,index=this.index++,ish=this.ish,destination=this.destination;this.active++,this._innerSub(ish,destination,resultSelector,value,index)}else this.buffer.push(value)},MergeMapToSubscriber.prototype._innerSub=function(ish,destination,resultSelector,value,index){this.add(subscribeToResult_1.subscribeToResult(this,ish,value,index))},MergeMapToSubscriber.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},MergeMapToSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){var _a=this,resultSelector=_a.resultSelector,destination=_a.destination;resultSelector?this.trySelectResult(outerValue,innerValue,outerIndex,innerIndex):destination.next(innerValue)},MergeMapToSubscriber.prototype.trySelectResult=function(outerValue,innerValue,outerIndex,innerIndex){var result,_a=this,resultSelector=_a.resultSelector,destination=_a.destination;try{result=resultSelector(outerValue,innerValue,outerIndex,innerIndex)}catch(err){return void destination.error(err)}destination.next(result)},MergeMapToSubscriber.prototype.notifyError=function(err){this.destination.error(err)},MergeMapToSubscriber.prototype.notifyComplete=function(innerSub){var buffer=this.buffer;this.remove(innerSub),this.active--,buffer.length>0?this._next(buffer.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},MergeMapToSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.MergeMapToSubscriber=MergeMapToSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),count_1=__webpack_require__(140);Observable_1.Observable.prototype.count=count_1.count},function(module,exports,__webpack_require__){"use strict";function count(predicate){return this.lift(new CountOperator(predicate,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,
new __)},Subscriber_1=__webpack_require__(12);exports.count=count;var CountOperator=function(){function CountOperator(predicate,source){this.predicate=predicate,this.source=source}return CountOperator.prototype.call=function(subscriber,source){return source._subscribe(new CountSubscriber(subscriber,this.predicate,this.source))},CountOperator}(),CountSubscriber=function(_super){function CountSubscriber(destination,predicate,source){_super.call(this,destination),this.predicate=predicate,this.source=source,this.count=0,this.index=0}return __extends(CountSubscriber,_super),CountSubscriber.prototype._next=function(value){this.predicate?this._tryPredicate(value):this.count++},CountSubscriber.prototype._tryPredicate=function(value){var result;try{result=this.predicate(value,this.index++,this.source)}catch(err){return void this.destination.error(err)}result&&this.count++},CountSubscriber.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},CountSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),dematerialize_1=__webpack_require__(142);Observable_1.Observable.prototype.dematerialize=dematerialize_1.dematerialize},function(module,exports,__webpack_require__){"use strict";function dematerialize(){return this.lift(new DeMaterializeOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.dematerialize=dematerialize;var DeMaterializeOperator=function(){function DeMaterializeOperator(){}return DeMaterializeOperator.prototype.call=function(subscriber,source){return source._subscribe(new DeMaterializeSubscriber(subscriber))},DeMaterializeOperator}(),DeMaterializeSubscriber=function(_super){function DeMaterializeSubscriber(destination){_super.call(this,destination)}return __extends(DeMaterializeSubscriber,_super),DeMaterializeSubscriber.prototype._next=function(value){value.observe(this.destination)},DeMaterializeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),debounce_1=__webpack_require__(144);Observable_1.Observable.prototype.debounce=debounce_1.debounce},function(module,exports,__webpack_require__){"use strict";function debounce(durationSelector){return this.lift(new DebounceOperator(durationSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.debounce=debounce;var DebounceOperator=function(){function DebounceOperator(durationSelector){this.durationSelector=durationSelector}return DebounceOperator.prototype.call=function(subscriber,source){return source._subscribe(new DebounceSubscriber(subscriber,this.durationSelector))},DebounceOperator}(),DebounceSubscriber=function(_super){function DebounceSubscriber(destination,durationSelector){_super.call(this,destination),this.durationSelector=durationSelector,this.hasValue=!1,this.durationSubscription=null}return __extends(DebounceSubscriber,_super),DebounceSubscriber.prototype._next=function(value){try{var result=this.durationSelector.call(this,value);result&&this._tryNext(value,result)}catch(err){this.destination.error(err)}},DebounceSubscriber.prototype._complete=function(){this.emitValue(),this.destination.complete()},DebounceSubscriber.prototype._tryNext=function(value,duration){var subscription=this.durationSubscription;this.value=value,this.hasValue=!0,subscription&&(subscription.unsubscribe(),this.remove(subscription)),subscription=subscribeToResult_1.subscribeToResult(this,duration),subscription.isUnsubscribed||this.add(this.durationSubscription=subscription)},DebounceSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.emitValue()},DebounceSubscriber.prototype.notifyComplete=function(){this.emitValue()},DebounceSubscriber.prototype.emitValue=function(){if(this.hasValue){var value=this.value,subscription=this.durationSubscription;subscription&&(this.durationSubscription=null,subscription.unsubscribe(),this.remove(subscription)),this.value=null,this.hasValue=!1,_super.prototype._next.call(this,value)}},DebounceSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),debounceTime_1=__webpack_require__(146);Observable_1.Observable.prototype.debounceTime=debounceTime_1.debounceTime},function(module,exports,__webpack_require__){"use strict";function debounceTime(dueTime,scheduler){return void 0===scheduler&&(scheduler=async_1.async),this.lift(new DebounceTimeOperator(dueTime,scheduler))}function dispatchNext(subscriber){subscriber.debouncedNext()}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),async_1=__webpack_require__(79);exports.debounceTime=debounceTime;var DebounceTimeOperator=function(){function DebounceTimeOperator(dueTime,scheduler){this.dueTime=dueTime,this.scheduler=scheduler}return DebounceTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new DebounceTimeSubscriber(subscriber,this.dueTime,this.scheduler))},DebounceTimeOperator}(),DebounceTimeSubscriber=function(_super){function DebounceTimeSubscriber(destination,dueTime,scheduler){_super.call(this,destination),this.dueTime=dueTime,this.scheduler=scheduler,this.debouncedSubscription=null,this.lastValue=null,this.hasValue=!1}return __extends(DebounceTimeSubscriber,_super),DebounceTimeSubscriber.prototype._next=function(value){this.clearDebounce(),this.lastValue=value,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(dispatchNext,this.dueTime,this))},DebounceTimeSubscriber.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},DebounceTimeSubscriber.prototype.debouncedNext=function(){this.clearDebounce(),this.hasValue&&(this.destination.next(this.lastValue),this.lastValue=null,this.hasValue=!1)},DebounceTimeSubscriber.prototype.clearDebounce=function(){var debouncedSubscription=this.debouncedSubscription;null!==debouncedSubscription&&(this.remove(debouncedSubscription),debouncedSubscription.unsubscribe(),this.debouncedSubscription=null)},DebounceTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),defaultIfEmpty_1=__webpack_require__(148);Observable_1.Observable.prototype.defaultIfEmpty=defaultIfEmpty_1.defaultIfEmpty},function(module,exports,__webpack_require__){"use strict";function defaultIfEmpty(defaultValue){return void 0===defaultValue&&(defaultValue=null),this.lift(new DefaultIfEmptyOperator(defaultValue))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.defaultIfEmpty=defaultIfEmpty;var DefaultIfEmptyOperator=function(){function DefaultIfEmptyOperator(defaultValue){this.defaultValue=defaultValue}return DefaultIfEmptyOperator.prototype.call=function(subscriber,source){return source._subscribe(new DefaultIfEmptySubscriber(subscriber,this.defaultValue))},DefaultIfEmptyOperator}(),DefaultIfEmptySubscriber=function(_super){function DefaultIfEmptySubscriber(destination,defaultValue){_super.call(this,destination),this.defaultValue=defaultValue,this.isEmpty=!0}return __extends(DefaultIfEmptySubscriber,_super),DefaultIfEmptySubscriber.prototype._next=function(value){this.isEmpty=!1,this.destination.next(value)},DefaultIfEmptySubscriber.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},DefaultIfEmptySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),delay_1=__webpack_require__(150);Observable_1.Observable.prototype.delay=delay_1.delay},function(module,exports,__webpack_require__){"use strict";function delay(delay,scheduler){void 0===scheduler&&(scheduler=async_1.async);var absoluteDelay=isDate_1.isDate(delay),delayFor=absoluteDelay?+delay-scheduler.now():Math.abs(delay);return this.lift(new DelayOperator(delayFor,scheduler))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},async_1=__webpack_require__(79),isDate_1=__webpack_require__(104),Subscriber_1=__webpack_require__(12),Notification_1=__webpack_require__(64);exports.delay=delay;var DelayOperator=function(){function DelayOperator(delay,scheduler){this.delay=delay,this.scheduler=scheduler}return DelayOperator.prototype.call=function(subscriber,source){return source._subscribe(new DelaySubscriber(subscriber,this.delay,this.scheduler))},DelayOperator}(),DelaySubscriber=function(_super){function DelaySubscriber(destination,delay,scheduler){_super.call(this,destination),this.delay=delay,this.scheduler=scheduler,this.queue=[],this.active=!1,this.errored=!1}return __extends(DelaySubscriber,_super),DelaySubscriber.dispatch=function(state){for(var source=state.source,queue=source.queue,scheduler=state.scheduler,destination=state.destination;queue.length>0&&queue[0].time-scheduler.now()<=0;)queue.shift().notification.observe(destination);if(queue.length>0){var delay_1=Math.max(0,queue[0].time-scheduler.now());this.schedule(state,delay_1)}else source.active=!1},DelaySubscriber.prototype._schedule=function(scheduler){this.active=!0,this.add(scheduler.schedule(DelaySubscriber.dispatch,this.delay,{source:this,destination:this.destination,scheduler:scheduler}))},DelaySubscriber.prototype.scheduleNotification=function(notification){if(this.errored!==!0){var scheduler=this.scheduler,message=new DelayMessage(scheduler.now()+this.delay,notification);this.queue.push(message),this.active===!1&&this._schedule(scheduler)}},DelaySubscriber.prototype._next=function(value){this.scheduleNotification(Notification_1.Notification.createNext(value))},DelaySubscriber.prototype._error=function(err){this.errored=!0,this.queue=[],this.destination.error(err)},DelaySubscriber.prototype._complete=function(){this.scheduleNotification(Notification_1.Notification.createComplete())},DelaySubscriber}(Subscriber_1.Subscriber),DelayMessage=function(){function DelayMessage(time,notification){this.time=time,this.notification=notification}return DelayMessage}()},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),delayWhen_1=__webpack_require__(152);Observable_1.Observable.prototype.delayWhen=delayWhen_1.delayWhen},function(module,exports,__webpack_require__){"use strict";function delayWhen(delayDurationSelector,subscriptionDelay){return subscriptionDelay?new SubscriptionDelayObservable(this,subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector)):this.lift(new DelayWhenOperator(delayDurationSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Observable_1=__webpack_require__(8),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.delayWhen=delayWhen;var DelayWhenOperator=function(){function DelayWhenOperator(delayDurationSelector){this.delayDurationSelector=delayDurationSelector}return DelayWhenOperator.prototype.call=function(subscriber,source){return source._subscribe(new DelayWhenSubscriber(subscriber,this.delayDurationSelector))},DelayWhenOperator}(),DelayWhenSubscriber=function(_super){function DelayWhenSubscriber(destination,delayDurationSelector){_super.call(this,destination),this.delayDurationSelector=delayDurationSelector,this.completed=!1,this.delayNotifierSubscriptions=[],this.values=[]}return __extends(DelayWhenSubscriber,_super),DelayWhenSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.destination.next(outerValue),this.removeSubscription(innerSub),this.tryComplete()},DelayWhenSubscriber.prototype.notifyError=function(error,innerSub){this._error(error)},DelayWhenSubscriber.prototype.notifyComplete=function(innerSub){var value=this.removeSubscription(innerSub);value&&this.destination.next(value),this.tryComplete()},DelayWhenSubscriber.prototype._next=function(value){try{var delayNotifier=this.delayDurationSelector(value);delayNotifier&&this.tryDelay(delayNotifier,value)}catch(err){this.destination.error(err)}},DelayWhenSubscriber.prototype._complete=function(){this.completed=!0,this.tryComplete()},DelayWhenSubscriber.prototype.removeSubscription=function(subscription){subscription.unsubscribe();var subscriptionIdx=this.delayNotifierSubscriptions.indexOf(subscription),value=null;return-1!==subscriptionIdx&&(value=this.values[subscriptionIdx],this.delayNotifierSubscriptions.splice(subscriptionIdx,1),this.values.splice(subscriptionIdx,1)),value},DelayWhenSubscriber.prototype.tryDelay=function(delayNotifier,value){var notifierSubscription=subscribeToResult_1.subscribeToResult(this,delayNotifier,value);this.add(notifierSubscription),this.delayNotifierSubscriptions.push(notifierSubscription),this.values.push(value)},DelayWhenSubscriber.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},DelayWhenSubscriber}(OuterSubscriber_1.OuterSubscriber),SubscriptionDelayObservable=function(_super){function SubscriptionDelayObservable(source,subscriptionDelay){_super.call(this),this.source=source,this.subscriptionDelay=subscriptionDelay}return __extends(SubscriptionDelayObservable,_super),SubscriptionDelayObservable.prototype._subscribe=function(subscriber){this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber,this.source))},SubscriptionDelayObservable}(Observable_1.Observable),SubscriptionDelaySubscriber=function(_super){function SubscriptionDelaySubscriber(parent,source){_super.call(this),this.parent=parent,this.source=source,this.sourceSubscribed=!1}return __extends(SubscriptionDelaySubscriber,_super),SubscriptionDelaySubscriber.prototype._next=function(unused){this.subscribeToSource()},SubscriptionDelaySubscriber.prototype._error=function(err){this.unsubscribe(),this.parent.error(err)},SubscriptionDelaySubscriber.prototype._complete=function(){this.subscribeToSource()},SubscriptionDelaySubscriber.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},SubscriptionDelaySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),distinctUntilChanged_1=__webpack_require__(154);Observable_1.Observable.prototype.distinctUntilChanged=distinctUntilChanged_1.distinctUntilChanged},function(module,exports,__webpack_require__){"use strict";function distinctUntilChanged(compare,keySelector){return this.lift(new DistinctUntilChangedOperator(compare,keySelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18);exports.distinctUntilChanged=distinctUntilChanged;var DistinctUntilChangedOperator=function(){function DistinctUntilChangedOperator(compare,keySelector){this.compare=compare,this.keySelector=keySelector}return DistinctUntilChangedOperator.prototype.call=function(subscriber,source){return source._subscribe(new DistinctUntilChangedSubscriber(subscriber,this.compare,this.keySelector))},DistinctUntilChangedOperator}(),DistinctUntilChangedSubscriber=function(_super){function DistinctUntilChangedSubscriber(destination,compare,keySelector){_super.call(this,destination),this.keySelector=keySelector,this.hasKey=!1,"function"==typeof compare&&(this.compare=compare)}return __extends(DistinctUntilChangedSubscriber,_super),DistinctUntilChangedSubscriber.prototype.compare=function(x,y){return x===y},DistinctUntilChangedSubscriber.prototype._next=function(value){var keySelector=this.keySelector,key=value;if(keySelector&&(key=tryCatch_1.tryCatch(this.keySelector)(value),key===errorObject_1.errorObject))return this.destination.error(errorObject_1.errorObject.e);var result=!1;if(this.hasKey){if(result=tryCatch_1.tryCatch(this.compare)(this.key,key),result===errorObject_1.errorObject)return this.destination.error(errorObject_1.errorObject.e)}else this.hasKey=!0;Boolean(result)===!1&&(this.key=key,this.destination.next(value))},DistinctUntilChangedSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),do_1=__webpack_require__(156);Observable_1.Observable.prototype["do"]=do_1._do},function(module,exports,__webpack_require__){"use strict";function _do(nextOrObserver,error,complete){return this.lift(new DoOperator(nextOrObserver,error,complete))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports._do=_do;var DoOperator=function(){function DoOperator(nextOrObserver,error,complete){this.nextOrObserver=nextOrObserver,this.error=error,this.complete=complete}return DoOperator.prototype.call=function(subscriber,source){return source._subscribe(new DoSubscriber(subscriber,this.nextOrObserver,this.error,this.complete))},DoOperator}(),DoSubscriber=function(_super){function DoSubscriber(destination,nextOrObserver,error,complete){_super.call(this,destination);var safeSubscriber=new Subscriber_1.Subscriber(nextOrObserver,error,complete);safeSubscriber.syncErrorThrowable=!0,this.add(safeSubscriber),this.safeSubscriber=safeSubscriber}return __extends(DoSubscriber,_super),DoSubscriber.prototype._next=function(value){var safeSubscriber=this.safeSubscriber;safeSubscriber.next(value),safeSubscriber.syncErrorThrown?this.destination.error(safeSubscriber.syncErrorValue):this.destination.next(value)},DoSubscriber.prototype._error=function(err){var safeSubscriber=this.safeSubscriber;safeSubscriber.error(err),safeSubscriber.syncErrorThrown?this.destination.error(safeSubscriber.syncErrorValue):this.destination.error(err)},DoSubscriber.prototype._complete=function(){var safeSubscriber=this.safeSubscriber;safeSubscriber.complete(),safeSubscriber.syncErrorThrown?this.destination.error(safeSubscriber.syncErrorValue):this.destination.complete()},DoSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),expand_1=__webpack_require__(158);Observable_1.Observable.prototype.expand=expand_1.expand},function(module,exports,__webpack_require__){"use strict";function expand(project,concurrent,scheduler){return void 0===concurrent&&(concurrent=Number.POSITIVE_INFINITY),void 0===scheduler&&(scheduler=void 0),concurrent=1>(concurrent||0)?Number.POSITIVE_INFINITY:concurrent,this.lift(new ExpandOperator(project,concurrent,scheduler))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.expand=expand;var ExpandOperator=function(){function ExpandOperator(project,concurrent,scheduler){this.project=project,this.concurrent=concurrent,this.scheduler=scheduler}return ExpandOperator.prototype.call=function(subscriber,source){return source._subscribe(new ExpandSubscriber(subscriber,this.project,this.concurrent,this.scheduler))},ExpandOperator}();exports.ExpandOperator=ExpandOperator;var ExpandSubscriber=function(_super){function ExpandSubscriber(destination,project,concurrent,scheduler){_super.call(this,destination),this.project=project,this.concurrent=concurrent,this.scheduler=scheduler,this.index=0,this.active=0,this.hasCompleted=!1,concurrent<Number.POSITIVE_INFINITY&&(this.buffer=[])}return __extends(ExpandSubscriber,_super),ExpandSubscriber.dispatch=function(arg){var subscriber=arg.subscriber,result=arg.result,value=arg.value,index=arg.index;subscriber.subscribeToProjection(result,value,index)},ExpandSubscriber.prototype._next=function(value){var destination=this.destination;if(destination.isUnsubscribed)return void this._complete();var index=this.index++;if(this.active<this.concurrent){destination.next(value);var result=tryCatch_1.tryCatch(this.project)(value,index);if(result===errorObject_1.errorObject)destination.error(errorObject_1.errorObject.e);else if(this.scheduler){var state={subscriber:this,result:result,value:value,index:index};this.add(this.scheduler.schedule(ExpandSubscriber.dispatch,0,state))}else this.subscribeToProjection(result,value,index)}else this.buffer.push(value)},ExpandSubscriber.prototype.subscribeToProjection=function(result,value,index){this.active++,this.add(subscribeToResult_1.subscribeToResult(this,result,value,index))},ExpandSubscriber.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete()},ExpandSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this._next(innerValue)},ExpandSubscriber.prototype.notifyComplete=function(innerSub){var buffer=this.buffer;this.remove(innerSub),this.active--,buffer&&buffer.length>0&&this._next(buffer.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},ExpandSubscriber}(OuterSubscriber_1.OuterSubscriber);exports.ExpandSubscriber=ExpandSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),filter_1=__webpack_require__(160);Observable_1.Observable.prototype.filter=filter_1.filter},function(module,exports,__webpack_require__){"use strict";function filter(predicate,thisArg){return this.lift(new FilterOperator(predicate,thisArg))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.filter=filter;var FilterOperator=function(){function FilterOperator(predicate,thisArg){this.predicate=predicate,this.thisArg=thisArg}return FilterOperator.prototype.call=function(subscriber,source){return source._subscribe(new FilterSubscriber(subscriber,this.predicate,this.thisArg))},FilterOperator}(),FilterSubscriber=function(_super){function FilterSubscriber(destination,predicate,thisArg){_super.call(this,destination),this.predicate=predicate,this.thisArg=thisArg,this.count=0,this.predicate=predicate}return __extends(FilterSubscriber,_super),FilterSubscriber.prototype._next=function(value){var result;try{result=this.predicate.call(this.thisArg,value,this.count++)}catch(err){return void this.destination.error(err)}result&&this.destination.next(value)},FilterSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),finally_1=__webpack_require__(162);Observable_1.Observable.prototype["finally"]=finally_1._finally},function(module,exports,__webpack_require__){"use strict";function _finally(finallySelector){return this.lift(new FinallyOperator(finallySelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Subscription_1=__webpack_require__(14);exports._finally=_finally;var FinallyOperator=function(){function FinallyOperator(finallySelector){this.finallySelector=finallySelector}return FinallyOperator.prototype.call=function(subscriber,source){return source._subscribe(new FinallySubscriber(subscriber,this.finallySelector))},FinallyOperator}(),FinallySubscriber=function(_super){function FinallySubscriber(destination,finallySelector){_super.call(this,destination),this.add(new Subscription_1.Subscription(finallySelector))}return __extends(FinallySubscriber,_super),FinallySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),first_1=__webpack_require__(164);Observable_1.Observable.prototype.first=first_1.first},function(module,exports,__webpack_require__){"use strict";function first(predicate,resultSelector,defaultValue){return this.lift(new FirstOperator(predicate,resultSelector,defaultValue,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),EmptyError_1=__webpack_require__(165);exports.first=first;var FirstOperator=function(){function FirstOperator(predicate,resultSelector,defaultValue,source){this.predicate=predicate,this.resultSelector=resultSelector,this.defaultValue=defaultValue,this.source=source}return FirstOperator.prototype.call=function(observer,source){return source._subscribe(new FirstSubscriber(observer,this.predicate,this.resultSelector,this.defaultValue,this.source))},FirstOperator}(),FirstSubscriber=function(_super){function FirstSubscriber(destination,predicate,resultSelector,defaultValue,source){_super.call(this,destination),this.predicate=predicate,this.resultSelector=resultSelector,this.defaultValue=defaultValue,this.source=source,this.index=0,this.hasCompleted=!1}return __extends(FirstSubscriber,_super),FirstSubscriber.prototype._next=function(value){var index=this.index++;this.predicate?this._tryPredicate(value,index):this._emit(value,index)},FirstSubscriber.prototype._tryPredicate=function(value,index){var result;try{result=this.predicate(value,index,this.source)}catch(err){return void this.destination.error(err)}result&&this._emit(value,index)},FirstSubscriber.prototype._emit=function(value,index){return this.resultSelector?void this._tryResultSelector(value,index):void this._emitFinal(value)},FirstSubscriber.prototype._tryResultSelector=function(value,index){var result;try{result=this.resultSelector(value,index)}catch(err){return void this.destination.error(err)}this._emitFinal(result)},FirstSubscriber.prototype._emitFinal=function(value){var destination=this.destination;destination.next(value),destination.complete(),this.hasCompleted=!0},FirstSubscriber.prototype._complete=function(){var destination=this.destination;this.hasCompleted||"undefined"==typeof this.defaultValue?this.hasCompleted||destination.error(new EmptyError_1.EmptyError):(destination.next(this.defaultValue),destination.complete())},FirstSubscriber}(Subscriber_1.Subscriber)},function(module,exports){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},EmptyError=function(_super){function EmptyError(){_super.call(this,"no elements in sequence"),this.name="EmptyError"}return __extends(EmptyError,_super),EmptyError}(Error);exports.EmptyError=EmptyError},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),groupBy_1=__webpack_require__(167);Observable_1.Observable.prototype.groupBy=groupBy_1.groupBy},function(module,exports,__webpack_require__){"use strict";function groupBy(keySelector,elementSelector,durationSelector){return this.lift(new GroupByOperator(this,keySelector,elementSelector,durationSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Subscription_1=__webpack_require__(14),Observable_1=__webpack_require__(8),Subject_1=__webpack_require__(7),Map_1=__webpack_require__(168),FastMap_1=__webpack_require__(170);exports.groupBy=groupBy;var GroupByOperator=function(){function GroupByOperator(source,keySelector,elementSelector,durationSelector){this.source=source,this.keySelector=keySelector,this.elementSelector=elementSelector,this.durationSelector=durationSelector}return GroupByOperator.prototype.call=function(subscriber,source){return source._subscribe(new GroupBySubscriber(subscriber,this.keySelector,this.elementSelector,this.durationSelector))},GroupByOperator}(),GroupBySubscriber=function(_super){function GroupBySubscriber(destination,keySelector,elementSelector,durationSelector){_super.call(this),this.keySelector=keySelector,this.elementSelector=elementSelector,this.durationSelector=durationSelector,this.groups=null,this.attemptedToUnsubscribe=!1,this.count=0,this.destination=destination,this.add(destination)}return __extends(GroupBySubscriber,_super),GroupBySubscriber.prototype._next=function(value){var key;try{key=this.keySelector(value)}catch(err){return void this.error(err)}this._group(value,key)},GroupBySubscriber.prototype._group=function(value,key){var groups=this.groups;groups||(groups=this.groups="string"==typeof key?new FastMap_1.FastMap:new Map_1.Map);var group=groups.get(key);if(!group){groups.set(key,group=new Subject_1.Subject);var groupedObservable=new GroupedObservable(key,group,this);this.durationSelector&&this._selectDuration(key,group),this.destination.next(groupedObservable)}this.elementSelector?this._selectElement(value,group):this.tryGroupNext(value,group)},GroupBySubscriber.prototype._selectElement=function(value,group){var result;try{result=this.elementSelector(value)}catch(err){return void this.error(err)}this.tryGroupNext(result,group)},GroupBySubscriber.prototype._selectDuration=function(key,group){var duration;try{duration=this.durationSelector(new GroupedObservable(key,group))}catch(err){return void this.error(err)}this.add(duration.subscribe(new GroupDurationSubscriber(key,group,this)))},GroupBySubscriber.prototype.tryGroupNext=function(value,group){group.isUnsubscribed||group.next(value)},GroupBySubscriber.prototype._error=function(err){var groups=this.groups;groups&&(groups.forEach(function(group,key){group.error(err)}),groups.clear()),this.destination.error(err)},GroupBySubscriber.prototype._complete=function(){var groups=this.groups;groups&&(groups.forEach(function(group,key){group.complete()}),groups.clear()),this.destination.complete()},GroupBySubscriber.prototype.removeGroup=function(key){this.groups["delete"](key)},GroupBySubscriber.prototype.unsubscribe=function(){this.isUnsubscribed||this.attemptedToUnsubscribe||(this.attemptedToUnsubscribe=!0,0===this.count&&_super.prototype.unsubscribe.call(this))},GroupBySubscriber}(Subscriber_1.Subscriber),GroupDurationSubscriber=function(_super){function GroupDurationSubscriber(key,group,parent){_super.call(this),this.key=key,this.group=group,this.parent=parent}return __extends(GroupDurationSubscriber,_super),GroupDurationSubscriber.prototype._next=function(value){this.tryComplete()},GroupDurationSubscriber.prototype._error=function(err){
this.tryError(err)},GroupDurationSubscriber.prototype._complete=function(){this.tryComplete()},GroupDurationSubscriber.prototype.tryError=function(err){var group=this.group;group.isUnsubscribed||group.error(err),this.parent.removeGroup(this.key)},GroupDurationSubscriber.prototype.tryComplete=function(){var group=this.group;group.isUnsubscribed||group.complete(),this.parent.removeGroup(this.key)},GroupDurationSubscriber}(Subscriber_1.Subscriber),GroupedObservable=function(_super){function GroupedObservable(key,groupSubject,refCountSubscription){_super.call(this),this.key=key,this.groupSubject=groupSubject,this.refCountSubscription=refCountSubscription}return __extends(GroupedObservable,_super),GroupedObservable.prototype._subscribe=function(subscriber){var subscription=new Subscription_1.Subscription,_a=this,refCountSubscription=_a.refCountSubscription,groupSubject=_a.groupSubject;return refCountSubscription&&!refCountSubscription.isUnsubscribed&&subscription.add(new InnerRefCountSubscription(refCountSubscription)),subscription.add(groupSubject.subscribe(subscriber)),subscription},GroupedObservable}(Observable_1.Observable);exports.GroupedObservable=GroupedObservable;var InnerRefCountSubscription=function(_super){function InnerRefCountSubscription(parent){_super.call(this),this.parent=parent,parent.count++}return __extends(InnerRefCountSubscription,_super),InnerRefCountSubscription.prototype.unsubscribe=function(){var parent=this.parent;parent.isUnsubscribed||this.isUnsubscribed||(_super.prototype.unsubscribe.call(this),parent.count-=1,0===parent.count&&parent.attemptedToUnsubscribe&&parent.unsubscribe())},InnerRefCountSubscription}(Subscription_1.Subscription)},function(module,exports,__webpack_require__){"use strict";var root_1=__webpack_require__(9),MapPolyfill_1=__webpack_require__(169);exports.Map=root_1.root.Map||function(){return MapPolyfill_1.MapPolyfill}()},function(module,exports){"use strict";var MapPolyfill=function(){function MapPolyfill(){this.size=0,this._values=[],this._keys=[]}return MapPolyfill.prototype.get=function(key){var i=this._keys.indexOf(key);return-1===i?void 0:this._values[i]},MapPolyfill.prototype.set=function(key,value){var i=this._keys.indexOf(key);return-1===i?(this._keys.push(key),this._values.push(value),this.size++):this._values[i]=value,this},MapPolyfill.prototype["delete"]=function(key){var i=this._keys.indexOf(key);return-1===i?!1:(this._values.splice(i,1),this._keys.splice(i,1),this.size--,!0)},MapPolyfill.prototype.clear=function(){this._keys.length=0,this._values.length=0,this.size=0},MapPolyfill.prototype.forEach=function(cb,thisArg){for(var i=0;i<this.size;i++)cb.call(thisArg,this._values[i],this._keys[i])},MapPolyfill}();exports.MapPolyfill=MapPolyfill},function(module,exports){"use strict";var FastMap=function(){function FastMap(){this.values={}}return FastMap.prototype["delete"]=function(key){return this.values[key]=null,!0},FastMap.prototype.set=function(key,value){return this.values[key]=value,this},FastMap.prototype.get=function(key){return this.values[key]},FastMap.prototype.forEach=function(cb,thisArg){var values=this.values;for(var key in values)values.hasOwnProperty(key)&&null!==values[key]&&cb.call(thisArg,values[key],key)},FastMap.prototype.clear=function(){this.values={}},FastMap}();exports.FastMap=FastMap},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),ignoreElements_1=__webpack_require__(172);Observable_1.Observable.prototype.ignoreElements=ignoreElements_1.ignoreElements},function(module,exports,__webpack_require__){"use strict";function ignoreElements(){return this.lift(new IgnoreElementsOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),noop_1=__webpack_require__(92);exports.ignoreElements=ignoreElements;var IgnoreElementsOperator=function(){function IgnoreElementsOperator(){}return IgnoreElementsOperator.prototype.call=function(subscriber,source){return source._subscribe(new IgnoreElementsSubscriber(subscriber))},IgnoreElementsOperator}(),IgnoreElementsSubscriber=function(_super){function IgnoreElementsSubscriber(){_super.apply(this,arguments)}return __extends(IgnoreElementsSubscriber,_super),IgnoreElementsSubscriber.prototype._next=function(unused){noop_1.noop()},IgnoreElementsSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),audit_1=__webpack_require__(174);Observable_1.Observable.prototype.audit=audit_1.audit},function(module,exports,__webpack_require__){"use strict";function audit(durationSelector){return this.lift(new AuditOperator(durationSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.audit=audit;var AuditOperator=function(){function AuditOperator(durationSelector){this.durationSelector=durationSelector}return AuditOperator.prototype.call=function(subscriber,source){return source._subscribe(new AuditSubscriber(subscriber,this.durationSelector))},AuditOperator}(),AuditSubscriber=function(_super){function AuditSubscriber(destination,durationSelector){_super.call(this,destination),this.durationSelector=durationSelector,this.hasValue=!1}return __extends(AuditSubscriber,_super),AuditSubscriber.prototype._next=function(value){if(this.value=value,this.hasValue=!0,!this.throttled){var duration=tryCatch_1.tryCatch(this.durationSelector)(value);duration===errorObject_1.errorObject?this.destination.error(errorObject_1.errorObject.e):this.add(this.throttled=subscribeToResult_1.subscribeToResult(this,duration))}},AuditSubscriber.prototype.clearThrottle=function(){var _a=this,value=_a.value,hasValue=_a.hasValue,throttled=_a.throttled;throttled&&(this.remove(throttled),this.throttled=null,throttled.unsubscribe()),hasValue&&(this.value=null,this.hasValue=!1,this.destination.next(value))},AuditSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex){this.clearThrottle()},AuditSubscriber.prototype.notifyComplete=function(){this.clearThrottle()},AuditSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),auditTime_1=__webpack_require__(176);Observable_1.Observable.prototype.auditTime=auditTime_1.auditTime},function(module,exports,__webpack_require__){"use strict";function auditTime(duration,scheduler){return void 0===scheduler&&(scheduler=async_1.async),this.lift(new AuditTimeOperator(duration,scheduler))}function dispatchNext(subscriber){subscriber.clearThrottle()}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},async_1=__webpack_require__(79),Subscriber_1=__webpack_require__(12);exports.auditTime=auditTime;var AuditTimeOperator=function(){function AuditTimeOperator(duration,scheduler){this.duration=duration,this.scheduler=scheduler}return AuditTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new AuditTimeSubscriber(subscriber,this.duration,this.scheduler))},AuditTimeOperator}(),AuditTimeSubscriber=function(_super){function AuditTimeSubscriber(destination,duration,scheduler){_super.call(this,destination),this.duration=duration,this.scheduler=scheduler,this.hasValue=!1}return __extends(AuditTimeSubscriber,_super),AuditTimeSubscriber.prototype._next=function(value){this.value=value,this.hasValue=!0,this.throttled||this.add(this.throttled=this.scheduler.schedule(dispatchNext,this.duration,this))},AuditTimeSubscriber.prototype.clearThrottle=function(){var _a=this,value=_a.value,hasValue=_a.hasValue,throttled=_a.throttled;throttled&&(this.remove(throttled),this.throttled=null,throttled.unsubscribe()),hasValue&&(this.value=null,this.hasValue=!1,this.destination.next(value))},AuditTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),last_1=__webpack_require__(178);Observable_1.Observable.prototype.last=last_1.last},function(module,exports,__webpack_require__){"use strict";function last(predicate,resultSelector,defaultValue){return this.lift(new LastOperator(predicate,resultSelector,defaultValue,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),EmptyError_1=__webpack_require__(165);exports.last=last;var LastOperator=function(){function LastOperator(predicate,resultSelector,defaultValue,source){this.predicate=predicate,this.resultSelector=resultSelector,this.defaultValue=defaultValue,this.source=source}return LastOperator.prototype.call=function(observer,source){return source._subscribe(new LastSubscriber(observer,this.predicate,this.resultSelector,this.defaultValue,this.source))},LastOperator}(),LastSubscriber=function(_super){function LastSubscriber(destination,predicate,resultSelector,defaultValue,source){_super.call(this,destination),this.predicate=predicate,this.resultSelector=resultSelector,this.defaultValue=defaultValue,this.source=source,this.hasValue=!1,this.index=0,"undefined"!=typeof defaultValue&&(this.lastValue=defaultValue,this.hasValue=!0)}return __extends(LastSubscriber,_super),LastSubscriber.prototype._next=function(value){var index=this.index++;if(this.predicate)this._tryPredicate(value,index);else{if(this.resultSelector)return void this._tryResultSelector(value,index);this.lastValue=value,this.hasValue=!0}},LastSubscriber.prototype._tryPredicate=function(value,index){var result;try{result=this.predicate(value,index,this.source)}catch(err){return void this.destination.error(err)}if(result){if(this.resultSelector)return void this._tryResultSelector(value,index);this.lastValue=value,this.hasValue=!0}},LastSubscriber.prototype._tryResultSelector=function(value,index){var result;try{result=this.resultSelector(value,index)}catch(err){return void this.destination.error(err)}this.lastValue=result,this.hasValue=!0},LastSubscriber.prototype._complete=function(){var destination=this.destination;this.hasValue?(destination.next(this.lastValue),destination.complete()):destination.error(new EmptyError_1.EmptyError)},LastSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),let_1=__webpack_require__(180);Observable_1.Observable.prototype.let=let_1.letProto,Observable_1.Observable.prototype.letBind=let_1.letProto},function(module,exports){"use strict";function letProto(func){return func(this)}exports.letProto=letProto},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),every_1=__webpack_require__(182);Observable_1.Observable.prototype.every=every_1.every},function(module,exports,__webpack_require__){"use strict";function every(predicate,thisArg){return this.lift(new EveryOperator(predicate,thisArg,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.every=every;var EveryOperator=function(){function EveryOperator(predicate,thisArg,source){this.predicate=predicate,this.thisArg=thisArg,this.source=source}return EveryOperator.prototype.call=function(observer,source){return source._subscribe(new EverySubscriber(observer,this.predicate,this.thisArg,this.source))},EveryOperator}(),EverySubscriber=function(_super){function EverySubscriber(destination,predicate,thisArg,source){_super.call(this,destination),this.predicate=predicate,this.thisArg=thisArg,this.source=source,this.index=0,this.thisArg=thisArg||this}return __extends(EverySubscriber,_super),EverySubscriber.prototype.notifyComplete=function(everyValueMatch){this.destination.next(everyValueMatch),this.destination.complete()},EverySubscriber.prototype._next=function(value){var result=!1;try{result=this.predicate.call(this.thisArg,value,this.index++,this.source)}catch(err){return void this.destination.error(err)}result||this.notifyComplete(!1)},EverySubscriber.prototype._complete=function(){this.notifyComplete(!0)},EverySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),map_1=__webpack_require__(184);Observable_1.Observable.prototype.map=map_1.map},function(module,exports,__webpack_require__){"use strict";function map(project,thisArg){if("function"!=typeof project)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return this.lift(new MapOperator(project,thisArg))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.map=map;var MapOperator=function(){function MapOperator(project,thisArg){this.project=project,this.thisArg=thisArg}return MapOperator.prototype.call=function(subscriber,source){return source._subscribe(new MapSubscriber(subscriber,this.project,this.thisArg))},MapOperator}(),MapSubscriber=function(_super){function MapSubscriber(destination,project,thisArg){_super.call(this,destination),this.project=project,this.count=0,this.thisArg=thisArg||this}return __extends(MapSubscriber,_super),MapSubscriber.prototype._next=function(value){var result;try{result=this.project.call(this.thisArg,value,this.count++)}catch(err){return void this.destination.error(err)}this.destination.next(result)},MapSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),mapTo_1=__webpack_require__(186);Observable_1.Observable.prototype.mapTo=mapTo_1.mapTo},function(module,exports,__webpack_require__){"use strict";function mapTo(value){return this.lift(new MapToOperator(value))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.mapTo=mapTo;var MapToOperator=function(){function MapToOperator(value){this.value=value}return MapToOperator.prototype.call=function(subscriber,source){return source._subscribe(new MapToSubscriber(subscriber,this.value))},MapToOperator}(),MapToSubscriber=function(_super){function MapToSubscriber(destination,value){_super.call(this,destination),this.value=value}return __extends(MapToSubscriber,_super),MapToSubscriber.prototype._next=function(x){this.destination.next(this.value)},MapToSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),materialize_1=__webpack_require__(188);Observable_1.Observable.prototype.materialize=materialize_1.materialize},function(module,exports,__webpack_require__){"use strict";function materialize(){return this.lift(new MaterializeOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Notification_1=__webpack_require__(64);exports.materialize=materialize;var MaterializeOperator=function(){function MaterializeOperator(){}return MaterializeOperator.prototype.call=function(subscriber,source){return source._subscribe(new MaterializeSubscriber(subscriber))},MaterializeOperator}(),MaterializeSubscriber=function(_super){function MaterializeSubscriber(destination){_super.call(this,destination)}return __extends(MaterializeSubscriber,_super),MaterializeSubscriber.prototype._next=function(value){this.destination.next(Notification_1.Notification.createNext(value))},MaterializeSubscriber.prototype._error=function(err){var destination=this.destination;destination.next(Notification_1.Notification.createError(err)),destination.complete()},MaterializeSubscriber.prototype._complete=function(){var destination=this.destination;destination.next(Notification_1.Notification.createComplete()),destination.complete()},MaterializeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),merge_1=__webpack_require__(86);Observable_1.Observable.prototype.merge=merge_1.merge},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),mergeAll_1=__webpack_require__(48);Observable_1.Observable.prototype.mergeAll=mergeAll_1.mergeAll},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),mergeMap_1=__webpack_require__(135);Observable_1.Observable.prototype.mergeMap=mergeMap_1.mergeMap,Observable_1.Observable.prototype.flatMap=mergeMap_1.mergeMap},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),mergeMapTo_1=__webpack_require__(138);Observable_1.Observable.prototype.flatMapTo=mergeMapTo_1.mergeMapTo,Observable_1.Observable.prototype.mergeMapTo=mergeMapTo_1.mergeMapTo},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),multicast_1=__webpack_require__(123);Observable_1.Observable.prototype.multicast=multicast_1.multicast},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),observeOn_1=__webpack_require__(63);Observable_1.Observable.prototype.observeOn=observeOn_1.observeOn},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),partition_1=__webpack_require__(196);Observable_1.Observable.prototype.partition=partition_1.partition},function(module,exports,__webpack_require__){"use strict";function partition(predicate,thisArg){return[filter_1.filter.call(this,predicate),filter_1.filter.call(this,not_1.not(predicate,thisArg))]}var not_1=__webpack_require__(197),filter_1=__webpack_require__(160);exports.partition=partition},function(module,exports){"use strict";function not(pred,thisArg){function notPred(){return!notPred.pred.apply(notPred.thisArg,arguments)}return notPred.pred=pred,notPred.thisArg=thisArg,notPred}exports.not=not},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),pluck_1=__webpack_require__(199);Observable_1.Observable.prototype.pluck=pluck_1.pluck},function(module,exports,__webpack_require__){"use strict";function pluck(){for(var properties=[],_i=0;_i<arguments.length;_i++)properties[_i-0]=arguments[_i];var length=properties.length;if(0===length)throw new Error("List of properties cannot be empty.");return map_1.map.call(this,plucker(properties,length))}function plucker(props,length){var mapper=function(x){for(var currentProp=x,i=0;length>i;i++){var p=currentProp[props[i]];if("undefined"==typeof p)return;currentProp=p}return currentProp};return mapper}var map_1=__webpack_require__(184);exports.pluck=pluck},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),publish_1=__webpack_require__(201);Observable_1.Observable.prototype.publish=publish_1.publish},function(module,exports,__webpack_require__){"use strict";function publish(){return multicast_1.multicast.call(this,new Subject_1.Subject)}var Subject_1=__webpack_require__(7),multicast_1=__webpack_require__(123);exports.publish=publish},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),publishBehavior_1=__webpack_require__(203);Observable_1.Observable.prototype.publishBehavior=publishBehavior_1.publishBehavior},function(module,exports,__webpack_require__){"use strict";function publishBehavior(value){return multicast_1.multicast.call(this,new BehaviorSubject_1.BehaviorSubject(value))}var BehaviorSubject_1=__webpack_require__(204),multicast_1=__webpack_require__(123);exports.publishBehavior=publishBehavior},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),throwError_1=__webpack_require__(25),ObjectUnsubscribedError_1=__webpack_require__(26),BehaviorSubject=function(_super){function BehaviorSubject(_value){_super.call(this),this._value=_value}return __extends(BehaviorSubject,_super),BehaviorSubject.prototype.getValue=function(){if(this.hasErrored)throwError_1.throwError(this.errorValue);else{if(!this.isUnsubscribed)return this._value;throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError)}},Object.defineProperty(BehaviorSubject.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),BehaviorSubject.prototype._subscribe=function(subscriber){var subscription=_super.prototype._subscribe.call(this,subscriber);return subscription&&!subscription.isUnsubscribed&&subscriber.next(this._value),subscription},BehaviorSubject.prototype._next=function(value){_super.prototype._next.call(this,this._value=value)},BehaviorSubject.prototype._error=function(err){this.hasErrored=!0,_super.prototype._error.call(this,this.errorValue=err)},BehaviorSubject}(Subject_1.Subject);exports.BehaviorSubject=BehaviorSubject},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),publishReplay_1=__webpack_require__(120);Observable_1.Observable.prototype.publishReplay=publishReplay_1.publishReplay},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),publishLast_1=__webpack_require__(207);Observable_1.Observable.prototype.publishLast=publishLast_1.publishLast},function(module,exports,__webpack_require__){"use strict";function publishLast(){return multicast_1.multicast.call(this,new AsyncSubject_1.AsyncSubject)}var AsyncSubject_1=__webpack_require__(30),multicast_1=__webpack_require__(123);exports.publishLast=publishLast},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),race_1=__webpack_require__(88);Observable_1.Observable.prototype.race=race_1.race},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),reduce_1=__webpack_require__(210);Observable_1.Observable.prototype.reduce=reduce_1.reduce},function(module,exports,__webpack_require__){"use strict";function reduce(project,seed){return this.lift(new ReduceOperator(project,seed))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.reduce=reduce;var ReduceOperator=function(){function ReduceOperator(project,seed){this.project=project,this.seed=seed}return ReduceOperator.prototype.call=function(subscriber,source){return source._subscribe(new ReduceSubscriber(subscriber,this.project,this.seed))},ReduceOperator}();exports.ReduceOperator=ReduceOperator;var ReduceSubscriber=function(_super){function ReduceSubscriber(destination,project,seed){_super.call(this,destination),this.hasValue=!1,this.acc=seed,this.project=project,this.hasSeed="undefined"!=typeof seed}return __extends(ReduceSubscriber,_super),ReduceSubscriber.prototype._next=function(value){this.hasValue||(this.hasValue=this.hasSeed)?this._tryReduce(value):(this.acc=value,this.hasValue=!0)},ReduceSubscriber.prototype._tryReduce=function(value){var result;try{result=this.project(this.acc,value)}catch(err){return void this.destination.error(err)}this.acc=result},ReduceSubscriber.prototype._complete=function(){(this.hasValue||this.hasSeed)&&this.destination.next(this.acc),this.destination.complete()},ReduceSubscriber}(Subscriber_1.Subscriber);exports.ReduceSubscriber=ReduceSubscriber},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),repeat_1=__webpack_require__(212);Observable_1.Observable.prototype.repeat=repeat_1.repeat},function(module,exports,__webpack_require__){"use strict";function repeat(count){return void 0===count&&(count=-1),0===count?new EmptyObservable_1.EmptyObservable:0>count?this.lift(new RepeatOperator(-1,this)):this.lift(new RepeatOperator(count-1,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),EmptyObservable_1=__webpack_require__(38);exports.repeat=repeat;var RepeatOperator=function(){function RepeatOperator(count,source){this.count=count,this.source=source}return RepeatOperator.prototype.call=function(subscriber,source){return source._subscribe(new RepeatSubscriber(subscriber,this.count,this.source))},RepeatOperator}(),RepeatSubscriber=function(_super){function RepeatSubscriber(destination,count,source){_super.call(this,destination),this.count=count,this.source=source}return __extends(RepeatSubscriber,_super),RepeatSubscriber.prototype.complete=function(){if(!this.isStopped){var _a=this,source=_a.source,count=_a.count;if(0===count)return _super.prototype.complete.call(this);count>-1&&(this.count=count-1),this.unsubscribe(),this.isStopped=!1,this.isUnsubscribed=!1,source.subscribe(this)}},RepeatSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),retry_1=__webpack_require__(214);Observable_1.Observable.prototype.retry=retry_1.retry},function(module,exports,__webpack_require__){"use strict";function retry(count){return void 0===count&&(count=-1),this.lift(new RetryOperator(count,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.retry=retry;var RetryOperator=function(){function RetryOperator(count,source){this.count=count,this.source=source}return RetryOperator.prototype.call=function(subscriber,source){return source._subscribe(new RetrySubscriber(subscriber,this.count,this.source))},RetryOperator}(),RetrySubscriber=function(_super){function RetrySubscriber(destination,count,source){_super.call(this,destination),this.count=count,this.source=source}return __extends(RetrySubscriber,_super),RetrySubscriber.prototype.error=function(err){if(!this.isStopped){var _a=this,source=_a.source,count=_a.count;if(0===count)return _super.prototype.error.call(this,err);count>-1&&(this.count=count-1),this.unsubscribe(),this.isStopped=!1,this.isUnsubscribed=!1,source.subscribe(this)}},RetrySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),retryWhen_1=__webpack_require__(216);Observable_1.Observable.prototype.retryWhen=retryWhen_1.retryWhen},function(module,exports,__webpack_require__){"use strict";function retryWhen(notifier){return this.lift(new RetryWhenOperator(notifier,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.retryWhen=retryWhen;var RetryWhenOperator=function(){function RetryWhenOperator(notifier,source){this.notifier=notifier,this.source=source}return RetryWhenOperator.prototype.call=function(subscriber,source){return source._subscribe(new RetryWhenSubscriber(subscriber,this.notifier,this.source))},RetryWhenOperator}(),RetryWhenSubscriber=function(_super){function RetryWhenSubscriber(destination,notifier,source){_super.call(this,destination),this.notifier=notifier,this.source=source}return __extends(RetryWhenSubscriber,_super),RetryWhenSubscriber.prototype.error=function(err){if(!this.isStopped){var errors=this.errors,retries=this.retries,retriesSubscription=this.retriesSubscription;if(retries)this.errors=null,this.retriesSubscription=null;else{if(errors=new Subject_1.Subject,retries=tryCatch_1.tryCatch(this.notifier)(errors),retries===errorObject_1.errorObject)return _super.prototype.error.call(this,errorObject_1.errorObject.e);retriesSubscription=subscribeToResult_1.subscribeToResult(this,retries)}this.unsubscribe(),this.isUnsubscribed=!1,this.errors=errors,this.retries=retries,this.retriesSubscription=retriesSubscription,errors.next(err)}},RetryWhenSubscriber.prototype._unsubscribe=function(){var _a=this,errors=_a.errors,retriesSubscription=_a.retriesSubscription;errors&&(errors.unsubscribe(),this.errors=null),retriesSubscription&&(retriesSubscription.unsubscribe(),this.retriesSubscription=null),this.retries=null},RetryWhenSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){var _a=this,errors=_a.errors,retries=_a.retries,retriesSubscription=_a.retriesSubscription;this.errors=null,this.retries=null,this.retriesSubscription=null,this.unsubscribe(),this.isStopped=!1,this.isUnsubscribed=!1,this.errors=errors,this.retries=retries,this.retriesSubscription=retriesSubscription,this.source.subscribe(this)},RetryWhenSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),sample_1=__webpack_require__(218);Observable_1.Observable.prototype.sample=sample_1.sample},function(module,exports,__webpack_require__){"use strict";function sample(notifier){return this.lift(new SampleOperator(notifier))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.sample=sample;var SampleOperator=function(){function SampleOperator(notifier){this.notifier=notifier}return SampleOperator.prototype.call=function(subscriber,source){return source._subscribe(new SampleSubscriber(subscriber,this.notifier))},SampleOperator}(),SampleSubscriber=function(_super){function SampleSubscriber(destination,notifier){_super.call(this,destination),this.hasValue=!1,this.add(subscribeToResult_1.subscribeToResult(this,notifier))}return __extends(SampleSubscriber,_super),SampleSubscriber.prototype._next=function(value){this.value=value,this.hasValue=!0},SampleSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.emitValue()},SampleSubscriber.prototype.notifyComplete=function(){this.emitValue()},SampleSubscriber.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},SampleSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),sampleTime_1=__webpack_require__(220);Observable_1.Observable.prototype.sampleTime=sampleTime_1.sampleTime},function(module,exports,__webpack_require__){
"use strict";function sampleTime(period,scheduler){return void 0===scheduler&&(scheduler=async_1.async),this.lift(new SampleTimeOperator(period,scheduler))}function dispatchNotification(state){var subscriber=state.subscriber,period=state.period;subscriber.notifyNext(),this.schedule(state,period)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),async_1=__webpack_require__(79);exports.sampleTime=sampleTime;var SampleTimeOperator=function(){function SampleTimeOperator(period,scheduler){this.period=period,this.scheduler=scheduler}return SampleTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new SampleTimeSubscriber(subscriber,this.period,this.scheduler))},SampleTimeOperator}(),SampleTimeSubscriber=function(_super){function SampleTimeSubscriber(destination,period,scheduler){_super.call(this,destination),this.period=period,this.scheduler=scheduler,this.hasValue=!1,this.add(scheduler.schedule(dispatchNotification,period,{subscriber:this,period:period}))}return __extends(SampleTimeSubscriber,_super),SampleTimeSubscriber.prototype._next=function(value){this.lastValue=value,this.hasValue=!0},SampleTimeSubscriber.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},SampleTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),scan_1=__webpack_require__(222);Observable_1.Observable.prototype.scan=scan_1.scan},function(module,exports,__webpack_require__){"use strict";function scan(accumulator,seed){return this.lift(new ScanOperator(accumulator,seed))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.scan=scan;var ScanOperator=function(){function ScanOperator(accumulator,seed){this.accumulator=accumulator,this.seed=seed}return ScanOperator.prototype.call=function(subscriber,source){return source._subscribe(new ScanSubscriber(subscriber,this.accumulator,this.seed))},ScanOperator}(),ScanSubscriber=function(_super){function ScanSubscriber(destination,accumulator,seed){_super.call(this,destination),this.accumulator=accumulator,this.index=0,this.accumulatorSet=!1,this.seed=seed,this.accumulatorSet="undefined"!=typeof seed}return __extends(ScanSubscriber,_super),Object.defineProperty(ScanSubscriber.prototype,"seed",{get:function(){return this._seed},set:function(value){this.accumulatorSet=!0,this._seed=value},enumerable:!0,configurable:!0}),ScanSubscriber.prototype._next=function(value){return this.accumulatorSet?this._tryNext(value):(this.seed=value,void this.destination.next(value))},ScanSubscriber.prototype._tryNext=function(value){var result,index=this.index++;try{result=this.accumulator(this.seed,value,index)}catch(err){this.destination.error(err)}this.seed=result,this.destination.next(result)},ScanSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),share_1=__webpack_require__(224);Observable_1.Observable.prototype.share=share_1.share},function(module,exports,__webpack_require__){"use strict";function shareSubjectFactory(){return new Subject_1.Subject}function share(){return multicast_1.multicast.call(this,shareSubjectFactory).refCount()}var multicast_1=__webpack_require__(123),Subject_1=__webpack_require__(7);exports.share=share},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),single_1=__webpack_require__(226);Observable_1.Observable.prototype.single=single_1.single},function(module,exports,__webpack_require__){"use strict";function single(predicate){return this.lift(new SingleOperator(predicate,this))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),EmptyError_1=__webpack_require__(165);exports.single=single;var SingleOperator=function(){function SingleOperator(predicate,source){this.predicate=predicate,this.source=source}return SingleOperator.prototype.call=function(subscriber,source){return source._subscribe(new SingleSubscriber(subscriber,this.predicate,this.source))},SingleOperator}(),SingleSubscriber=function(_super){function SingleSubscriber(destination,predicate,source){_super.call(this,destination),this.predicate=predicate,this.source=source,this.seenValue=!1,this.index=0}return __extends(SingleSubscriber,_super),SingleSubscriber.prototype.applySingleValue=function(value){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=value)},SingleSubscriber.prototype._next=function(value){var predicate=this.predicate;this.index++,predicate?this.tryNext(value):this.applySingleValue(value)},SingleSubscriber.prototype.tryNext=function(value){try{var result=this.predicate(value,this.index,this.source);result&&this.applySingleValue(value)}catch(err){this.destination.error(err)}},SingleSubscriber.prototype._complete=function(){var destination=this.destination;this.index>0?(destination.next(this.seenValue?this.singleValue:void 0),destination.complete()):destination.error(new EmptyError_1.EmptyError)},SingleSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),skip_1=__webpack_require__(228);Observable_1.Observable.prototype.skip=skip_1.skip},function(module,exports,__webpack_require__){"use strict";function skip(total){return this.lift(new SkipOperator(total))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.skip=skip;var SkipOperator=function(){function SkipOperator(total){this.total=total}return SkipOperator.prototype.call=function(subscriber,source){return source._subscribe(new SkipSubscriber(subscriber,this.total))},SkipOperator}(),SkipSubscriber=function(_super){function SkipSubscriber(destination,total){_super.call(this,destination),this.total=total,this.count=0}return __extends(SkipSubscriber,_super),SkipSubscriber.prototype._next=function(x){++this.count>this.total&&this.destination.next(x)},SkipSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),skipUntil_1=__webpack_require__(230);Observable_1.Observable.prototype.skipUntil=skipUntil_1.skipUntil},function(module,exports,__webpack_require__){"use strict";function skipUntil(notifier){return this.lift(new SkipUntilOperator(notifier))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.skipUntil=skipUntil;var SkipUntilOperator=function(){function SkipUntilOperator(notifier){this.notifier=notifier}return SkipUntilOperator.prototype.call=function(subscriber,source){return source._subscribe(new SkipUntilSubscriber(subscriber,this.notifier))},SkipUntilOperator}(),SkipUntilSubscriber=function(_super){function SkipUntilSubscriber(destination,notifier){_super.call(this,destination),this.hasValue=!1,this.isInnerStopped=!1,this.add(subscribeToResult_1.subscribeToResult(this,notifier))}return __extends(SkipUntilSubscriber,_super),SkipUntilSubscriber.prototype._next=function(value){this.hasValue&&_super.prototype._next.call(this,value)},SkipUntilSubscriber.prototype._complete=function(){this.isInnerStopped?_super.prototype._complete.call(this):this.unsubscribe()},SkipUntilSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.hasValue=!0},SkipUntilSubscriber.prototype.notifyComplete=function(){this.isInnerStopped=!0,this.isStopped&&_super.prototype._complete.call(this)},SkipUntilSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),skipWhile_1=__webpack_require__(232);Observable_1.Observable.prototype.skipWhile=skipWhile_1.skipWhile},function(module,exports,__webpack_require__){"use strict";function skipWhile(predicate){return this.lift(new SkipWhileOperator(predicate))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.skipWhile=skipWhile;var SkipWhileOperator=function(){function SkipWhileOperator(predicate){this.predicate=predicate}return SkipWhileOperator.prototype.call=function(subscriber,source){return source._subscribe(new SkipWhileSubscriber(subscriber,this.predicate))},SkipWhileOperator}(),SkipWhileSubscriber=function(_super){function SkipWhileSubscriber(destination,predicate){_super.call(this,destination),this.predicate=predicate,this.skipping=!0,this.index=0}return __extends(SkipWhileSubscriber,_super),SkipWhileSubscriber.prototype._next=function(value){var destination=this.destination;this.skipping&&this.tryCallPredicate(value),this.skipping||destination.next(value)},SkipWhileSubscriber.prototype.tryCallPredicate=function(value){try{var result=this.predicate(value,this.index++);this.skipping=Boolean(result)}catch(err){this.destination.error(err)}},SkipWhileSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),startWith_1=__webpack_require__(234);Observable_1.Observable.prototype.startWith=startWith_1.startWith},function(module,exports,__webpack_require__){"use strict";function startWith(){for(var array=[],_i=0;_i<arguments.length;_i++)array[_i-0]=arguments[_i];var scheduler=array[array.length-1];isScheduler_1.isScheduler(scheduler)?array.pop():scheduler=null;var len=array.length;return 1===len?concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0],scheduler),this):len>1?concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array,scheduler),this):concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler),this)}var ArrayObservable_1=__webpack_require__(36),ScalarObservable_1=__webpack_require__(37),EmptyObservable_1=__webpack_require__(38),concat_1=__webpack_require__(47),isScheduler_1=__webpack_require__(39);exports.startWith=startWith},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),subscribeOn_1=__webpack_require__(236);Observable_1.Observable.prototype.subscribeOn=subscribeOn_1.subscribeOn},function(module,exports,__webpack_require__){"use strict";function subscribeOn(scheduler,delay){return void 0===delay&&(delay=0),new SubscribeOnObservable_1.SubscribeOnObservable(this,delay,scheduler)}var SubscribeOnObservable_1=__webpack_require__(237);exports.subscribeOn=subscribeOn},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Observable_1=__webpack_require__(8),asap_1=__webpack_require__(238),isNumeric_1=__webpack_require__(78),SubscribeOnObservable=function(_super){function SubscribeOnObservable(source,delayTime,scheduler){void 0===delayTime&&(delayTime=0),void 0===scheduler&&(scheduler=asap_1.asap),_super.call(this),this.source=source,this.delayTime=delayTime,this.scheduler=scheduler,(!isNumeric_1.isNumeric(delayTime)||0>delayTime)&&(this.delayTime=0),scheduler&&"function"==typeof scheduler.schedule||(this.scheduler=asap_1.asap)}return __extends(SubscribeOnObservable,_super),SubscribeOnObservable.create=function(source,delay,scheduler){return void 0===delay&&(delay=0),void 0===scheduler&&(scheduler=asap_1.asap),new SubscribeOnObservable(source,delay,scheduler)},SubscribeOnObservable.dispatch=function(arg){var source=arg.source,subscriber=arg.subscriber;return source.subscribe(subscriber)},SubscribeOnObservable.prototype._subscribe=function(subscriber){var delay=this.delayTime,source=this.source,scheduler=this.scheduler;return scheduler.schedule(SubscribeOnObservable.dispatch,delay,{source:source,subscriber:subscriber})},SubscribeOnObservable}(Observable_1.Observable);exports.SubscribeOnObservable=SubscribeOnObservable},function(module,exports,__webpack_require__){"use strict";var AsapScheduler_1=__webpack_require__(239);exports.asap=new AsapScheduler_1.AsapScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},AsapAction_1=__webpack_require__(240),QueueScheduler_1=__webpack_require__(82),AsapScheduler=function(_super){function AsapScheduler(){_super.apply(this,arguments)}return __extends(AsapScheduler,_super),AsapScheduler.prototype.scheduleNow=function(work,state){return new AsapAction_1.AsapAction(this,work).schedule(state)},AsapScheduler}(QueueScheduler_1.QueueScheduler);exports.AsapScheduler=AsapScheduler},function(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Immediate_1=__webpack_require__(241),FutureAction_1=__webpack_require__(81),AsapAction=function(_super){function AsapAction(){_super.apply(this,arguments)}return __extends(AsapAction,_super),AsapAction.prototype._schedule=function(state,delay){if(void 0===delay&&(delay=0),delay>0)return _super.prototype._schedule.call(this,state,delay);this.delay=delay,this.state=state;var scheduler=this.scheduler;return scheduler.actions.push(this),scheduler.scheduledId||(scheduler.scheduledId=Immediate_1.Immediate.setImmediate(function(){scheduler.scheduledId=null,scheduler.flush()})),this},AsapAction.prototype._unsubscribe=function(){var scheduler=this.scheduler,scheduledId=scheduler.scheduledId,actions=scheduler.actions;_super.prototype._unsubscribe.call(this),0===actions.length&&(scheduler.active=!1,null!=scheduledId&&(scheduler.scheduledId=null,Immediate_1.Immediate.clearImmediate(scheduledId)))},AsapAction}(FutureAction_1.FutureAction);exports.AsapAction=AsapAction},function(module,exports,__webpack_require__){(function(clearImmediate,setImmediate){"use strict";var root_1=__webpack_require__(9),ImmediateDefinition=function(){function ImmediateDefinition(root){if(this.root=root,root.setImmediate&&"function"==typeof root.setImmediate)this.setImmediate=root.setImmediate.bind(root),this.clearImmediate=root.clearImmediate.bind(root);else{this.nextHandle=1,this.tasksByHandle={},this.currentlyRunningATask=!1,this.canUseProcessNextTick()?this.setImmediate=this.createProcessNextTickSetImmediate():this.canUsePostMessage()?this.setImmediate=this.createPostMessageSetImmediate():this.canUseMessageChannel()?this.setImmediate=this.createMessageChannelSetImmediate():this.canUseReadyStateChange()?this.setImmediate=this.createReadyStateChangeSetImmediate():this.setImmediate=this.createSetTimeoutSetImmediate();var ci=function clearImmediate(handle){delete clearImmediate.instance.tasksByHandle[handle]};ci.instance=this,this.clearImmediate=ci}}return ImmediateDefinition.prototype.identify=function(o){return this.root.Object.prototype.toString.call(o)},ImmediateDefinition.prototype.canUseProcessNextTick=function(){return"[object process]"===this.identify(this.root.process)},ImmediateDefinition.prototype.canUseMessageChannel=function(){return Boolean(this.root.MessageChannel)},ImmediateDefinition.prototype.canUseReadyStateChange=function(){var document=this.root.document;return Boolean(document&&"onreadystatechange"in document.createElement("script"))},ImmediateDefinition.prototype.canUsePostMessage=function(){var root=this.root;if(root.postMessage&&!root.importScripts){var postMessageIsAsynchronous_1=!0,oldOnMessage=root.onmessage;return root.onmessage=function(){postMessageIsAsynchronous_1=!1},root.postMessage("","*"),root.onmessage=oldOnMessage,postMessageIsAsynchronous_1}return!1},ImmediateDefinition.prototype.partiallyApplied=function(handler){for(var args=[],_i=1;_i<arguments.length;_i++)args[_i-1]=arguments[_i];var fn=function result(){var _a=result,handler=_a.handler,args=_a.args;"function"==typeof handler?handler.apply(void 0,args):new Function(""+handler)()};return fn.handler=handler,fn.args=args,fn},ImmediateDefinition.prototype.addFromSetImmediateArguments=function(args){return this.tasksByHandle[this.nextHandle]=this.partiallyApplied.apply(void 0,args),this.nextHandle++},ImmediateDefinition.prototype.createProcessNextTickSetImmediate=function(){var fn=function setImmediate(){var instance=setImmediate.instance,handle=instance.addFromSetImmediateArguments(arguments);return instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent,handle)),handle};return fn.instance=this,fn},ImmediateDefinition.prototype.createPostMessageSetImmediate=function(){var root=this.root,messagePrefix="setImmediate$"+root.Math.random()+"$",onGlobalMessage=function globalMessageHandler(event){var instance=globalMessageHandler.instance;event.source===root&&"string"==typeof event.data&&0===event.data.indexOf(messagePrefix)&&instance.runIfPresent(+event.data.slice(messagePrefix.length))};onGlobalMessage.instance=this,root.addEventListener("message",onGlobalMessage,!1);var fn=function setImmediate(){var _a=setImmediate,messagePrefix=_a.messagePrefix,instance=_a.instance,handle=instance.addFromSetImmediateArguments(arguments);return instance.root.postMessage(messagePrefix+handle,"*"),handle};return fn.instance=this,fn.messagePrefix=messagePrefix,fn},ImmediateDefinition.prototype.runIfPresent=function(handle){if(this.currentlyRunningATask)this.root.setTimeout(this.partiallyApplied(this.runIfPresent,handle),0);else{var task=this.tasksByHandle[handle];if(task){this.currentlyRunningATask=!0;try{task()}finally{this.clearImmediate(handle),this.currentlyRunningATask=!1}}}},ImmediateDefinition.prototype.createMessageChannelSetImmediate=function(){var _this=this,channel=new this.root.MessageChannel;channel.port1.onmessage=function(event){var handle=event.data;_this.runIfPresent(handle)};var fn=function setImmediate(){var _a=setImmediate,channel=_a.channel,instance=_a.instance,handle=instance.addFromSetImmediateArguments(arguments);return channel.port2.postMessage(handle),handle};return fn.channel=channel,fn.instance=this,fn},ImmediateDefinition.prototype.createReadyStateChangeSetImmediate=function(){var fn=function setImmediate(){var instance=setImmediate.instance,root=instance.root,doc=root.document,html=doc.documentElement,handle=instance.addFromSetImmediateArguments(arguments),script=doc.createElement("script");return script.onreadystatechange=function(){instance.runIfPresent(handle),script.onreadystatechange=null,html.removeChild(script),script=null},html.appendChild(script),handle};return fn.instance=this,fn},ImmediateDefinition.prototype.createSetTimeoutSetImmediate=function(){var fn=function setImmediate(){var instance=setImmediate.instance,handle=instance.addFromSetImmediateArguments(arguments);return instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent,handle),0),handle};return fn.instance=this,fn},ImmediateDefinition}();exports.ImmediateDefinition=ImmediateDefinition,exports.Immediate=new ImmediateDefinition(root_1.root)}).call(exports,__webpack_require__(242).clearImmediate,__webpack_require__(242).setImmediate)},function(module,exports,__webpack_require__){(function(setImmediate,clearImmediate){function Timeout(id,clearFn){this._id=id,this._clearFn=clearFn}var nextTick=__webpack_require__(243).nextTick,apply=Function.prototype.apply,slice=Array.prototype.slice,immediateIds={},nextImmediateId=0;exports.setTimeout=function(){return new Timeout(apply.call(setTimeout,window,arguments),clearTimeout)},exports.setInterval=function(){return new Timeout(apply.call(setInterval,window,arguments),clearInterval)},exports.clearTimeout=exports.clearInterval=function(timeout){timeout.close()},Timeout.prototype.unref=Timeout.prototype.ref=function(){},Timeout.prototype.close=function(){this._clearFn.call(window,this._id)},exports.enroll=function(item,msecs){clearTimeout(item._idleTimeoutId),item._idleTimeout=msecs},exports.unenroll=function(item){clearTimeout(item._idleTimeoutId),item._idleTimeout=-1},exports._unrefActive=exports.active=function(item){clearTimeout(item._idleTimeoutId);var msecs=item._idleTimeout;msecs>=0&&(item._idleTimeoutId=setTimeout(function(){item._onTimeout&&item._onTimeout()},msecs))},exports.setImmediate="function"==typeof setImmediate?setImmediate:function(fn){var id=nextImmediateId++,args=arguments.length<2?!1:slice.call(arguments,1);return immediateIds[id]=!0,nextTick(function(){immediateIds[id]&&(args?fn.apply(null,args):fn.call(null),exports.clearImmediate(id))}),id},exports.clearImmediate="function"==typeof clearImmediate?clearImmediate:function(id){delete immediateIds[id]}}).call(exports,__webpack_require__(242).setImmediate,__webpack_require__(242).clearImmediate)},,function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),switch_1=__webpack_require__(245);Observable_1.Observable.prototype["switch"]=switch_1._switch},function(module,exports,__webpack_require__){"use strict";function _switch(){return this.lift(new SwitchOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports._switch=_switch;var SwitchOperator=function(){function SwitchOperator(){}return SwitchOperator.prototype.call=function(subscriber,source){return source._subscribe(new SwitchSubscriber(subscriber))},SwitchOperator}(),SwitchSubscriber=function(_super){function SwitchSubscriber(destination){_super.call(this,destination),this.active=0,this.hasCompleted=!1}return __extends(SwitchSubscriber,_super),SwitchSubscriber.prototype._next=function(value){this.unsubscribeInner(),this.active++,this.add(this.innerSubscription=subscribeToResult_1.subscribeToResult(this,value))},SwitchSubscriber.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&this.destination.complete()},SwitchSubscriber.prototype.unsubscribeInner=function(){this.active=this.active>0?this.active-1:0;var innerSubscription=this.innerSubscription;innerSubscription&&(innerSubscription.unsubscribe(),this.remove(innerSubscription))},SwitchSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.destination.next(innerValue)},SwitchSubscriber.prototype.notifyError=function(err){this.destination.error(err)},SwitchSubscriber.prototype.notifyComplete=function(){this.unsubscribeInner(),this.hasCompleted&&0===this.active&&this.destination.complete()},SwitchSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),switchMap_1=__webpack_require__(247);Observable_1.Observable.prototype.switchMap=switchMap_1.switchMap},function(module,exports,__webpack_require__){"use strict";function switchMap(project,resultSelector){return this.lift(new SwitchMapOperator(project,resultSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.switchMap=switchMap;var SwitchMapOperator=function(){function SwitchMapOperator(project,resultSelector){this.project=project,this.resultSelector=resultSelector}return SwitchMapOperator.prototype.call=function(subscriber,source){return source._subscribe(new SwitchMapSubscriber(subscriber,this.project,this.resultSelector))},SwitchMapOperator}(),SwitchMapSubscriber=function(_super){function SwitchMapSubscriber(destination,project,resultSelector){_super.call(this,destination),this.project=project,this.resultSelector=resultSelector,this.index=0}return __extends(SwitchMapSubscriber,_super),SwitchMapSubscriber.prototype._next=function(value){var result,index=this.index++;try{result=this.project(value,index)}catch(error){return void this.destination.error(error)}this._innerSub(result,value,index)},SwitchMapSubscriber.prototype._innerSub=function(result,value,index){var innerSubscription=this.innerSubscription;innerSubscription&&innerSubscription.unsubscribe(),this.add(this.innerSubscription=subscribeToResult_1.subscribeToResult(this,result,value,index))},SwitchMapSubscriber.prototype._complete=function(){var innerSubscription=this.innerSubscription;innerSubscription&&!innerSubscription.isUnsubscribed||_super.prototype._complete.call(this)},SwitchMapSubscriber.prototype._unsubscribe=function(){this.innerSubscription=null},SwitchMapSubscriber.prototype.notifyComplete=function(innerSub){this.remove(innerSub),this.innerSubscription=null,this.isStopped&&_super.prototype._complete.call(this)},SwitchMapSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.resultSelector?this._tryNotifyNext(outerValue,innerValue,outerIndex,innerIndex):this.destination.next(innerValue)},SwitchMapSubscriber.prototype._tryNotifyNext=function(outerValue,innerValue,outerIndex,innerIndex){var result;try{result=this.resultSelector(outerValue,innerValue,outerIndex,innerIndex)}catch(err){return void this.destination.error(err)}this.destination.next(result)},SwitchMapSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),switchMapTo_1=__webpack_require__(249);Observable_1.Observable.prototype.switchMapTo=switchMapTo_1.switchMapTo},function(module,exports,__webpack_require__){"use strict";function switchMapTo(innerObservable,resultSelector){return this.lift(new SwitchMapToOperator(innerObservable,resultSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.switchMapTo=switchMapTo;var SwitchMapToOperator=function(){function SwitchMapToOperator(observable,resultSelector){this.observable=observable,this.resultSelector=resultSelector}return SwitchMapToOperator.prototype.call=function(subscriber,source){return source._subscribe(new SwitchMapToSubscriber(subscriber,this.observable,this.resultSelector))},SwitchMapToOperator}(),SwitchMapToSubscriber=function(_super){function SwitchMapToSubscriber(destination,inner,resultSelector){_super.call(this,destination),this.inner=inner,this.resultSelector=resultSelector,this.index=0}return __extends(SwitchMapToSubscriber,_super),SwitchMapToSubscriber.prototype._next=function(value){var innerSubscription=this.innerSubscription;innerSubscription&&innerSubscription.unsubscribe(),this.add(this.innerSubscription=subscribeToResult_1.subscribeToResult(this,this.inner,value,this.index++))},SwitchMapToSubscriber.prototype._complete=function(){var innerSubscription=this.innerSubscription;innerSubscription&&!innerSubscription.isUnsubscribed||_super.prototype._complete.call(this)},SwitchMapToSubscriber.prototype._unsubscribe=function(){this.innerSubscription=null},SwitchMapToSubscriber.prototype.notifyComplete=function(innerSub){this.remove(innerSub),this.innerSubscription=null,this.isStopped&&_super.prototype._complete.call(this)},SwitchMapToSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){var _a=this,resultSelector=_a.resultSelector,destination=_a.destination;resultSelector?this.tryResultSelector(outerValue,innerValue,outerIndex,innerIndex):destination.next(innerValue)},SwitchMapToSubscriber.prototype.tryResultSelector=function(outerValue,innerValue,outerIndex,innerIndex){var result,_a=this,resultSelector=_a.resultSelector,destination=_a.destination;try{result=resultSelector(outerValue,innerValue,outerIndex,innerIndex)}catch(err){return void destination.error(err)}destination.next(result)},SwitchMapToSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),take_1=__webpack_require__(251);Observable_1.Observable.prototype.take=take_1.take},function(module,exports,__webpack_require__){"use strict";function take(count){return 0===count?new EmptyObservable_1.EmptyObservable:this.lift(new TakeOperator(count))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),ArgumentOutOfRangeError_1=__webpack_require__(252),EmptyObservable_1=__webpack_require__(38);exports.take=take;var TakeOperator=function(){function TakeOperator(total){if(this.total=total,this.total<0)throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError}return TakeOperator.prototype.call=function(subscriber,source){return source._subscribe(new TakeSubscriber(subscriber,this.total))},TakeOperator}(),TakeSubscriber=function(_super){function TakeSubscriber(destination,total){_super.call(this,destination),this.total=total,this.count=0}return __extends(TakeSubscriber,_super),TakeSubscriber.prototype._next=function(value){var total=this.total;++this.count<=total&&(this.destination.next(value),this.count===total&&(this.destination.complete(),this.unsubscribe()))},TakeSubscriber}(Subscriber_1.Subscriber)},function(module,exports){"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},ArgumentOutOfRangeError=function(_super){function ArgumentOutOfRangeError(){_super.call(this,"argument out of range"),this.name="ArgumentOutOfRangeError"}return __extends(ArgumentOutOfRangeError,_super),ArgumentOutOfRangeError}(Error);exports.ArgumentOutOfRangeError=ArgumentOutOfRangeError},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),takeLast_1=__webpack_require__(254);Observable_1.Observable.prototype.takeLast=takeLast_1.takeLast},function(module,exports,__webpack_require__){"use strict";function takeLast(count){return 0===count?new EmptyObservable_1.EmptyObservable:this.lift(new TakeLastOperator(count))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),ArgumentOutOfRangeError_1=__webpack_require__(252),EmptyObservable_1=__webpack_require__(38);exports.takeLast=takeLast;var TakeLastOperator=function(){function TakeLastOperator(total){if(this.total=total,this.total<0)throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
}return TakeLastOperator.prototype.call=function(subscriber,source){return source._subscribe(new TakeLastSubscriber(subscriber,this.total))},TakeLastOperator}(),TakeLastSubscriber=function(_super){function TakeLastSubscriber(destination,total){_super.call(this,destination),this.total=total,this.ring=new Array,this.count=0}return __extends(TakeLastSubscriber,_super),TakeLastSubscriber.prototype._next=function(value){var ring=this.ring,total=this.total,count=this.count++;if(ring.length<total)ring.push(value);else{var index=count%total;ring[index]=value}},TakeLastSubscriber.prototype._complete=function(){var destination=this.destination,count=this.count;if(count>0)for(var total=this.count>=this.total?this.total:this.count,ring=this.ring,i=0;total>i;i++){var idx=count++%total;destination.next(ring[idx])}destination.complete()},TakeLastSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),takeUntil_1=__webpack_require__(256);Observable_1.Observable.prototype.takeUntil=takeUntil_1.takeUntil},function(module,exports,__webpack_require__){"use strict";function takeUntil(notifier){return this.lift(new TakeUntilOperator(notifier))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.takeUntil=takeUntil;var TakeUntilOperator=function(){function TakeUntilOperator(notifier){this.notifier=notifier}return TakeUntilOperator.prototype.call=function(subscriber,source){return source._subscribe(new TakeUntilSubscriber(subscriber,this.notifier))},TakeUntilOperator}(),TakeUntilSubscriber=function(_super){function TakeUntilSubscriber(destination,notifier){_super.call(this,destination),this.notifier=notifier,this.add(subscribeToResult_1.subscribeToResult(this,notifier))}return __extends(TakeUntilSubscriber,_super),TakeUntilSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.complete()},TakeUntilSubscriber.prototype.notifyComplete=function(){},TakeUntilSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),takeWhile_1=__webpack_require__(258);Observable_1.Observable.prototype.takeWhile=takeWhile_1.takeWhile},function(module,exports,__webpack_require__){"use strict";function takeWhile(predicate){return this.lift(new TakeWhileOperator(predicate))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.takeWhile=takeWhile;var TakeWhileOperator=function(){function TakeWhileOperator(predicate){this.predicate=predicate}return TakeWhileOperator.prototype.call=function(subscriber,source){return source._subscribe(new TakeWhileSubscriber(subscriber,this.predicate))},TakeWhileOperator}(),TakeWhileSubscriber=function(_super){function TakeWhileSubscriber(destination,predicate){_super.call(this,destination),this.predicate=predicate,this.index=0}return __extends(TakeWhileSubscriber,_super),TakeWhileSubscriber.prototype._next=function(value){var result,destination=this.destination;try{result=this.predicate(value,this.index++)}catch(err){return void destination.error(err)}this.nextOrComplete(value,result)},TakeWhileSubscriber.prototype.nextOrComplete=function(value,predicateResult){var destination=this.destination;Boolean(predicateResult)?destination.next(value):destination.complete()},TakeWhileSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),throttle_1=__webpack_require__(260);Observable_1.Observable.prototype.throttle=throttle_1.throttle},function(module,exports,__webpack_require__){"use strict";function throttle(durationSelector){return this.lift(new ThrottleOperator(durationSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.throttle=throttle;var ThrottleOperator=function(){function ThrottleOperator(durationSelector){this.durationSelector=durationSelector}return ThrottleOperator.prototype.call=function(subscriber,source){return source._subscribe(new ThrottleSubscriber(subscriber,this.durationSelector))},ThrottleOperator}(),ThrottleSubscriber=function(_super){function ThrottleSubscriber(destination,durationSelector){_super.call(this,destination),this.destination=destination,this.durationSelector=durationSelector}return __extends(ThrottleSubscriber,_super),ThrottleSubscriber.prototype._next=function(value){this.throttled||this.tryDurationSelector(value)},ThrottleSubscriber.prototype.tryDurationSelector=function(value){var duration=null;try{duration=this.durationSelector(value)}catch(err){return void this.destination.error(err)}this.emitAndThrottle(value,duration)},ThrottleSubscriber.prototype.emitAndThrottle=function(value,duration){this.add(this.throttled=subscribeToResult_1.subscribeToResult(this,duration)),this.destination.next(value)},ThrottleSubscriber.prototype._unsubscribe=function(){var throttled=this.throttled;throttled&&(this.remove(throttled),this.throttled=null,throttled.unsubscribe())},ThrottleSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this._unsubscribe()},ThrottleSubscriber.prototype.notifyComplete=function(){this._unsubscribe()},ThrottleSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),throttleTime_1=__webpack_require__(262);Observable_1.Observable.prototype.throttleTime=throttleTime_1.throttleTime},function(module,exports,__webpack_require__){"use strict";function throttleTime(duration,scheduler){return void 0===scheduler&&(scheduler=async_1.async),this.lift(new ThrottleTimeOperator(duration,scheduler))}function dispatchNext(arg){var subscriber=arg.subscriber;subscriber.clearThrottle()}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),async_1=__webpack_require__(79);exports.throttleTime=throttleTime;var ThrottleTimeOperator=function(){function ThrottleTimeOperator(duration,scheduler){this.duration=duration,this.scheduler=scheduler}return ThrottleTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new ThrottleTimeSubscriber(subscriber,this.duration,this.scheduler))},ThrottleTimeOperator}(),ThrottleTimeSubscriber=function(_super){function ThrottleTimeSubscriber(destination,duration,scheduler){_super.call(this,destination),this.duration=duration,this.scheduler=scheduler}return __extends(ThrottleTimeSubscriber,_super),ThrottleTimeSubscriber.prototype._next=function(value){this.throttled||(this.add(this.throttled=this.scheduler.schedule(dispatchNext,this.duration,{subscriber:this})),this.destination.next(value))},ThrottleTimeSubscriber.prototype.clearThrottle=function(){var throttled=this.throttled;throttled&&(throttled.unsubscribe(),this.remove(throttled),this.throttled=null)},ThrottleTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),timeout_1=__webpack_require__(264);Observable_1.Observable.prototype.timeout=timeout_1.timeout},function(module,exports,__webpack_require__){"use strict";function timeout(due,errorToSend,scheduler){void 0===errorToSend&&(errorToSend=null),void 0===scheduler&&(scheduler=async_1.async);var absoluteTimeout=isDate_1.isDate(due),waitFor=absoluteTimeout?+due-scheduler.now():Math.abs(due);return this.lift(new TimeoutOperator(waitFor,absoluteTimeout,errorToSend,scheduler))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},async_1=__webpack_require__(79),isDate_1=__webpack_require__(104),Subscriber_1=__webpack_require__(12);exports.timeout=timeout;var TimeoutOperator=function(){function TimeoutOperator(waitFor,absoluteTimeout,errorToSend,scheduler){this.waitFor=waitFor,this.absoluteTimeout=absoluteTimeout,this.errorToSend=errorToSend,this.scheduler=scheduler}return TimeoutOperator.prototype.call=function(subscriber,source){return source._subscribe(new TimeoutSubscriber(subscriber,this.absoluteTimeout,this.waitFor,this.errorToSend,this.scheduler))},TimeoutOperator}(),TimeoutSubscriber=function(_super){function TimeoutSubscriber(destination,absoluteTimeout,waitFor,errorToSend,scheduler){_super.call(this,destination),this.absoluteTimeout=absoluteTimeout,this.waitFor=waitFor,this.errorToSend=errorToSend,this.scheduler=scheduler,this.index=0,this._previousIndex=0,this._hasCompleted=!1,this.scheduleTimeout()}return __extends(TimeoutSubscriber,_super),Object.defineProperty(TimeoutSubscriber.prototype,"previousIndex",{get:function(){return this._previousIndex},enumerable:!0,configurable:!0}),Object.defineProperty(TimeoutSubscriber.prototype,"hasCompleted",{get:function(){return this._hasCompleted},enumerable:!0,configurable:!0}),TimeoutSubscriber.dispatchTimeout=function(state){var source=state.subscriber,currentIndex=state.index;source.hasCompleted||source.previousIndex!==currentIndex||source.notifyTimeout()},TimeoutSubscriber.prototype.scheduleTimeout=function(){var currentIndex=this.index;this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout,this.waitFor,{subscriber:this,index:currentIndex}),this.index++,this._previousIndex=currentIndex},TimeoutSubscriber.prototype._next=function(value){this.destination.next(value),this.absoluteTimeout||this.scheduleTimeout()},TimeoutSubscriber.prototype._error=function(err){this.destination.error(err),this._hasCompleted=!0},TimeoutSubscriber.prototype._complete=function(){this.destination.complete(),this._hasCompleted=!0},TimeoutSubscriber.prototype.notifyTimeout=function(){this.error(this.errorToSend||new Error("timeout"))},TimeoutSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),timeoutWith_1=__webpack_require__(266);Observable_1.Observable.prototype.timeoutWith=timeoutWith_1.timeoutWith},function(module,exports,__webpack_require__){"use strict";function timeoutWith(due,withObservable,scheduler){void 0===scheduler&&(scheduler=async_1.async);var absoluteTimeout=isDate_1.isDate(due),waitFor=absoluteTimeout?+due-scheduler.now():Math.abs(due);return this.lift(new TimeoutWithOperator(waitFor,absoluteTimeout,withObservable,scheduler))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},async_1=__webpack_require__(79),isDate_1=__webpack_require__(104),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.timeoutWith=timeoutWith;var TimeoutWithOperator=function(){function TimeoutWithOperator(waitFor,absoluteTimeout,withObservable,scheduler){this.waitFor=waitFor,this.absoluteTimeout=absoluteTimeout,this.withObservable=withObservable,this.scheduler=scheduler}return TimeoutWithOperator.prototype.call=function(subscriber,source){return source._subscribe(new TimeoutWithSubscriber(subscriber,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},TimeoutWithOperator}(),TimeoutWithSubscriber=function(_super){function TimeoutWithSubscriber(destination,absoluteTimeout,waitFor,withObservable,scheduler){_super.call(this),this.destination=destination,this.absoluteTimeout=absoluteTimeout,this.waitFor=waitFor,this.withObservable=withObservable,this.scheduler=scheduler,this.timeoutSubscription=void 0,this.index=0,this._previousIndex=0,this._hasCompleted=!1,destination.add(this),this.scheduleTimeout()}return __extends(TimeoutWithSubscriber,_super),Object.defineProperty(TimeoutWithSubscriber.prototype,"previousIndex",{get:function(){return this._previousIndex},enumerable:!0,configurable:!0}),Object.defineProperty(TimeoutWithSubscriber.prototype,"hasCompleted",{get:function(){return this._hasCompleted},enumerable:!0,configurable:!0}),TimeoutWithSubscriber.dispatchTimeout=function(state){var source=state.subscriber,currentIndex=state.index;source.hasCompleted||source.previousIndex!==currentIndex||source.handleTimeout()},TimeoutWithSubscriber.prototype.scheduleTimeout=function(){var currentIndex=this.index,timeoutState={subscriber:this,index:currentIndex};this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout,this.waitFor,timeoutState),this.index++,this._previousIndex=currentIndex},TimeoutWithSubscriber.prototype._next=function(value){this.destination.next(value),this.absoluteTimeout||this.scheduleTimeout()},TimeoutWithSubscriber.prototype._error=function(err){this.destination.error(err),this._hasCompleted=!0},TimeoutWithSubscriber.prototype._complete=function(){this.destination.complete(),this._hasCompleted=!0},TimeoutWithSubscriber.prototype.handleTimeout=function(){if(!this.isUnsubscribed){var withObservable=this.withObservable;this.unsubscribe(),this.destination.add(this.timeoutSubscription=subscribeToResult_1.subscribeToResult(this,withObservable))}},TimeoutWithSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),toArray_1=__webpack_require__(268);Observable_1.Observable.prototype.toArray=toArray_1.toArray},function(module,exports,__webpack_require__){"use strict";function toArray(){return this.lift(new ToArrayOperator)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12);exports.toArray=toArray;var ToArrayOperator=function(){function ToArrayOperator(){}return ToArrayOperator.prototype.call=function(subscriber,source){return source._subscribe(new ToArraySubscriber(subscriber))},ToArrayOperator}(),ToArraySubscriber=function(_super){function ToArraySubscriber(destination){_super.call(this,destination),this.array=[]}return __extends(ToArraySubscriber,_super),ToArraySubscriber.prototype._next=function(x){this.array.push(x)},ToArraySubscriber.prototype._complete=function(){this.destination.next(this.array),this.destination.complete()},ToArraySubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),toPromise_1=__webpack_require__(270);Observable_1.Observable.prototype.toPromise=toPromise_1.toPromise},function(module,exports,__webpack_require__){"use strict";function toPromise(PromiseCtor){var _this=this;if(PromiseCtor||(root_1.root.Rx&&root_1.root.Rx.config&&root_1.root.Rx.config.Promise?PromiseCtor=root_1.root.Rx.config.Promise:root_1.root.Promise&&(PromiseCtor=root_1.root.Promise)),!PromiseCtor)throw new Error("no Promise impl found");return new PromiseCtor(function(resolve,reject){var value;_this.subscribe(function(x){return value=x},function(err){return reject(err)},function(){return resolve(value)})})}var root_1=__webpack_require__(9);exports.toPromise=toPromise},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),window_1=__webpack_require__(272);Observable_1.Observable.prototype.window=window_1.window},function(module,exports,__webpack_require__){"use strict";function window(windowBoundaries){return this.lift(new WindowOperator(windowBoundaries))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.window=window;var WindowOperator=function(){function WindowOperator(windowBoundaries){this.windowBoundaries=windowBoundaries}return WindowOperator.prototype.call=function(subscriber,source){return source._subscribe(new WindowSubscriber(subscriber,this.windowBoundaries))},WindowOperator}(),WindowSubscriber=function(_super){function WindowSubscriber(destination,windowBoundaries){_super.call(this,destination),this.destination=destination,this.windowBoundaries=windowBoundaries,this.add(subscribeToResult_1.subscribeToResult(this,windowBoundaries)),this.openWindow()}return __extends(WindowSubscriber,_super),WindowSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.openWindow()},WindowSubscriber.prototype.notifyError=function(error,innerSub){this._error(error)},WindowSubscriber.prototype.notifyComplete=function(innerSub){this._complete()},WindowSubscriber.prototype._next=function(value){this.window.next(value)},WindowSubscriber.prototype._error=function(err){this.window.error(err),this.destination.error(err)},WindowSubscriber.prototype._complete=function(){this.window.complete(),this.destination.complete()},WindowSubscriber.prototype.openWindow=function(){var prevWindow=this.window;prevWindow&&prevWindow.complete();var destination=this.destination,newWindow=this.window=new Subject_1.Subject;destination.add(newWindow),destination.next(newWindow)},WindowSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),windowCount_1=__webpack_require__(274);Observable_1.Observable.prototype.windowCount=windowCount_1.windowCount},function(module,exports,__webpack_require__){"use strict";function windowCount(windowSize,startWindowEvery){return void 0===startWindowEvery&&(startWindowEvery=0),this.lift(new WindowCountOperator(windowSize,startWindowEvery))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Subject_1=__webpack_require__(7);exports.windowCount=windowCount;var WindowCountOperator=function(){function WindowCountOperator(windowSize,startWindowEvery){this.windowSize=windowSize,this.startWindowEvery=startWindowEvery}return WindowCountOperator.prototype.call=function(subscriber,source){return source._subscribe(new WindowCountSubscriber(subscriber,this.windowSize,this.startWindowEvery))},WindowCountOperator}(),WindowCountSubscriber=function(_super){function WindowCountSubscriber(destination,windowSize,startWindowEvery){_super.call(this,destination),this.destination=destination,this.windowSize=windowSize,this.startWindowEvery=startWindowEvery,this.windows=[new Subject_1.Subject],this.count=0;var firstWindow=this.windows[0];destination.add(firstWindow),destination.next(firstWindow)}return __extends(WindowCountSubscriber,_super),WindowCountSubscriber.prototype._next=function(value){for(var startWindowEvery=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,destination=this.destination,windowSize=this.windowSize,windows=this.windows,len=windows.length,i=0;len>i;i++)windows[i].next(value);var c=this.count-windowSize+1;if(c>=0&&c%startWindowEvery===0&&windows.shift().complete(),++this.count%startWindowEvery===0){var window_1=new Subject_1.Subject;windows.push(window_1),destination.add(window_1),destination.next(window_1)}},WindowCountSubscriber.prototype._error=function(err){for(var windows=this.windows;windows.length>0;)windows.shift().error(err);this.destination.error(err)},WindowCountSubscriber.prototype._complete=function(){for(var windows=this.windows;windows.length>0;)windows.shift().complete();this.destination.complete()},WindowCountSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),windowTime_1=__webpack_require__(276);Observable_1.Observable.prototype.windowTime=windowTime_1.windowTime},function(module,exports,__webpack_require__){"use strict";function windowTime(windowTimeSpan,windowCreationInterval,scheduler){return void 0===windowCreationInterval&&(windowCreationInterval=null),void 0===scheduler&&(scheduler=async_1.async),this.lift(new WindowTimeOperator(windowTimeSpan,windowCreationInterval,scheduler))}function dispatchWindowTimeSpanOnly(state){var subscriber=state.subscriber,windowTimeSpan=state.windowTimeSpan,window=state.window;window&&window.complete(),state.window=subscriber.openWindow(),this.schedule(state,windowTimeSpan)}function dispatchWindowCreation(state){var windowTimeSpan=state.windowTimeSpan,subscriber=state.subscriber,scheduler=state.scheduler,windowCreationInterval=state.windowCreationInterval,window=subscriber.openWindow(),action=this,context={action:action,subscription:null},timeSpanState={subscriber:subscriber,window:window,context:context};context.subscription=scheduler.schedule(dispatchWindowClose,windowTimeSpan,timeSpanState),action.add(context.subscription),action.schedule(state,windowCreationInterval)}function dispatchWindowClose(arg){var subscriber=arg.subscriber,window=arg.window,context=arg.context;context&&context.action&&context.subscription&&context.action.remove(context.subscription),subscriber.closeWindow(window)}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subscriber_1=__webpack_require__(12),Subject_1=__webpack_require__(7),async_1=__webpack_require__(79);exports.windowTime=windowTime;var WindowTimeOperator=function(){function WindowTimeOperator(windowTimeSpan,windowCreationInterval,scheduler){this.windowTimeSpan=windowTimeSpan,this.windowCreationInterval=windowCreationInterval,this.scheduler=scheduler}return WindowTimeOperator.prototype.call=function(subscriber,source){return source._subscribe(new WindowTimeSubscriber(subscriber,this.windowTimeSpan,this.windowCreationInterval,this.scheduler))},WindowTimeOperator}(),WindowTimeSubscriber=function(_super){function WindowTimeSubscriber(destination,windowTimeSpan,windowCreationInterval,scheduler){if(_super.call(this,destination),this.destination=destination,this.windowTimeSpan=windowTimeSpan,this.windowCreationInterval=windowCreationInterval,this.scheduler=scheduler,this.windows=[],null!==windowCreationInterval&&windowCreationInterval>=0){var window_1=this.openWindow(),closeState={subscriber:this,window:window_1,context:null},creationState={windowTimeSpan:windowTimeSpan,windowCreationInterval:windowCreationInterval,subscriber:this,scheduler:scheduler};this.add(scheduler.schedule(dispatchWindowClose,windowTimeSpan,closeState)),this.add(scheduler.schedule(dispatchWindowCreation,windowCreationInterval,creationState))}else{var window_2=this.openWindow(),timeSpanOnlyState={subscriber:this,window:window_2,windowTimeSpan:windowTimeSpan};this.add(scheduler.schedule(dispatchWindowTimeSpanOnly,windowTimeSpan,timeSpanOnlyState))}}return __extends(WindowTimeSubscriber,_super),WindowTimeSubscriber.prototype._next=function(value){for(var windows=this.windows,len=windows.length,i=0;len>i;i++){var window_3=windows[i];window_3.isUnsubscribed||window_3.next(value)}},WindowTimeSubscriber.prototype._error=function(err){for(var windows=this.windows;windows.length>0;)windows.shift().error(err);this.destination.error(err)},WindowTimeSubscriber.prototype._complete=function(){for(var windows=this.windows;windows.length>0;){var window_4=windows.shift();window_4.isUnsubscribed||window_4.complete()}this.destination.complete()},WindowTimeSubscriber.prototype.openWindow=function(){var window=new Subject_1.Subject;this.windows.push(window);var destination=this.destination;return destination.add(window),destination.next(window),window},WindowTimeSubscriber.prototype.closeWindow=function(window){window.complete();var windows=this.windows;windows.splice(windows.indexOf(window),1)},WindowTimeSubscriber}(Subscriber_1.Subscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),windowToggle_1=__webpack_require__(278);Observable_1.Observable.prototype.windowToggle=windowToggle_1.windowToggle},function(module,exports,__webpack_require__){"use strict";function windowToggle(openings,closingSelector){return this.lift(new WindowToggleOperator(openings,closingSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),Subscription_1=__webpack_require__(14),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.windowToggle=windowToggle;var WindowToggleOperator=function(){function WindowToggleOperator(openings,closingSelector){this.openings=openings,this.closingSelector=closingSelector}return WindowToggleOperator.prototype.call=function(subscriber,source){return source._subscribe(new WindowToggleSubscriber(subscriber,this.openings,this.closingSelector))},WindowToggleOperator}(),WindowToggleSubscriber=function(_super){function WindowToggleSubscriber(destination,openings,closingSelector){_super.call(this,destination),this.openings=openings,this.closingSelector=closingSelector,this.contexts=[],this.add(this.openSubscription=subscribeToResult_1.subscribeToResult(this,openings,openings))}return __extends(WindowToggleSubscriber,_super),WindowToggleSubscriber.prototype._next=function(value){var contexts=this.contexts;if(contexts)for(var len=contexts.length,i=0;len>i;i++)contexts[i].window.next(value)},WindowToggleSubscriber.prototype._error=function(err){var contexts=this.contexts;if(this.contexts=null,contexts)for(var len=contexts.length,index=-1;++index<len;){var context=contexts[index];context.window.error(err),context.subscription.unsubscribe()}_super.prototype._error.call(this,err)},WindowToggleSubscriber.prototype._complete=function(){var contexts=this.contexts;if(this.contexts=null,contexts)for(var len=contexts.length,index=-1;++index<len;){var context=contexts[index];context.window.complete(),context.subscription.unsubscribe()}_super.prototype._complete.call(this)},WindowToggleSubscriber.prototype._unsubscribe=function(){var contexts=this.contexts;if(this.contexts=null,contexts)for(var len=contexts.length,index=-1;++index<len;){var context=contexts[index];context.window.unsubscribe(),context.subscription.unsubscribe()}},WindowToggleSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){if(outerValue===this.openings){var closingSelector=this.closingSelector,closingNotifier=tryCatch_1.tryCatch(closingSelector)(innerValue);if(closingNotifier===errorObject_1.errorObject)return this.error(errorObject_1.errorObject.e);var window_1=new Subject_1.Subject,subscription=new Subscription_1.Subscription,context={window:window_1,subscription:subscription};this.contexts.push(context);var innerSubscription=subscribeToResult_1.subscribeToResult(this,closingNotifier,context);innerSubscription.isUnsubscribed?this.closeWindow(this.contexts.length-1):(innerSubscription.context=context,subscription.add(innerSubscription)),this.destination.next(window_1)}else this.closeWindow(this.contexts.indexOf(outerValue))},WindowToggleSubscriber.prototype.notifyError=function(err){this.error(err)},WindowToggleSubscriber.prototype.notifyComplete=function(inner){inner!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(inner.context))},WindowToggleSubscriber.prototype.closeWindow=function(index){if(-1!==index){var contexts=this.contexts,context=contexts[index],window=context.window,subscription=context.subscription;contexts.splice(index,1),window.complete(),subscription.unsubscribe()}},WindowToggleSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),windowWhen_1=__webpack_require__(280);Observable_1.Observable.prototype.windowWhen=windowWhen_1.windowWhen},function(module,exports,__webpack_require__){"use strict";function windowWhen(closingSelector){return this.lift(new WindowOperator(closingSelector))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},Subject_1=__webpack_require__(7),tryCatch_1=__webpack_require__(17),errorObject_1=__webpack_require__(18),OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);exports.windowWhen=windowWhen;var WindowOperator=function(){function WindowOperator(closingSelector){this.closingSelector=closingSelector}return WindowOperator.prototype.call=function(subscriber,source){return source._subscribe(new WindowSubscriber(subscriber,this.closingSelector))},WindowOperator}(),WindowSubscriber=function(_super){function WindowSubscriber(destination,closingSelector){_super.call(this,destination),this.destination=destination,this.closingSelector=closingSelector,this.openWindow()}return __extends(WindowSubscriber,_super),WindowSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.openWindow(innerSub)},WindowSubscriber.prototype.notifyError=function(error,innerSub){this._error(error)},WindowSubscriber.prototype.notifyComplete=function(innerSub){this.openWindow(innerSub)},WindowSubscriber.prototype._next=function(value){this.window.next(value)},WindowSubscriber.prototype._error=function(err){this.window.error(err),this.destination.error(err),this.unsubscribeClosingNotification()},WindowSubscriber.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},WindowSubscriber.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},WindowSubscriber.prototype.openWindow=function(innerSub){void 0===innerSub&&(innerSub=null),innerSub&&(this.remove(innerSub),innerSub.unsubscribe());var prevWindow=this.window;prevWindow&&prevWindow.complete();var window=this.window=new Subject_1.Subject;this.destination.next(window);var closingNotifier=tryCatch_1.tryCatch(this.closingSelector)();if(closingNotifier===errorObject_1.errorObject){var err=errorObject_1.errorObject.e;this.destination.error(err),this.window.error(err)}else this.add(this.closingNotification=subscribeToResult_1.subscribeToResult(this,closingNotifier)),this.add(window)},WindowSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),withLatestFrom_1=__webpack_require__(282);Observable_1.Observable.prototype.withLatestFrom=withLatestFrom_1.withLatestFrom},function(module,exports,__webpack_require__){"use strict";function withLatestFrom(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i-0]=arguments[_i];var project;"function"==typeof args[args.length-1]&&(project=args.pop());var observables=args;return this.lift(new WithLatestFromOperator(observables,project))}var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},OuterSubscriber_1=__webpack_require__(40),subscribeToResult_1=__webpack_require__(41);
exports.withLatestFrom=withLatestFrom;var WithLatestFromOperator=function(){function WithLatestFromOperator(observables,project){this.observables=observables,this.project=project}return WithLatestFromOperator.prototype.call=function(subscriber,source){return source._subscribe(new WithLatestFromSubscriber(subscriber,this.observables,this.project))},WithLatestFromOperator}(),WithLatestFromSubscriber=function(_super){function WithLatestFromSubscriber(destination,observables,project){_super.call(this,destination),this.observables=observables,this.project=project,this.toRespond=[];var len=observables.length;this.values=new Array(len);for(var i=0;len>i;i++)this.toRespond.push(i);for(var i=0;len>i;i++){var observable=observables[i];this.add(subscribeToResult_1.subscribeToResult(this,observable,observable,i))}}return __extends(WithLatestFromSubscriber,_super),WithLatestFromSubscriber.prototype.notifyNext=function(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.values[outerIndex]=innerValue;var toRespond=this.toRespond;if(toRespond.length>0){var found=toRespond.indexOf(outerIndex);-1!==found&&toRespond.splice(found,1)}},WithLatestFromSubscriber.prototype.notifyComplete=function(){},WithLatestFromSubscriber.prototype._next=function(value){if(0===this.toRespond.length){var args=[value].concat(this.values);this.project?this._tryProject(args):this.destination.next(args)}},WithLatestFromSubscriber.prototype._tryProject=function(args){var result;try{result=this.project.apply(this,args)}catch(err){return void this.destination.error(err)}this.destination.next(result)},WithLatestFromSubscriber}(OuterSubscriber_1.OuterSubscriber)},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),zip_1=__webpack_require__(107);Observable_1.Observable.prototype.zip=zip_1.zipProto},function(module,exports,__webpack_require__){"use strict";var Observable_1=__webpack_require__(8),zipAll_1=__webpack_require__(285);Observable_1.Observable.prototype.zipAll=zipAll_1.zipAll},function(module,exports,__webpack_require__){"use strict";function zipAll(project){return this.lift(new zip_1.ZipOperator(project))}var zip_1=__webpack_require__(107);exports.zipAll=zipAll},function(module,exports,__webpack_require__){"use strict";var Subscriber_1=__webpack_require__(12),Operator=function(){function Operator(){}return Operator.prototype.call=function(subscriber,source){return source._subscribe(new Subscriber_1.Subscriber(subscriber))},Operator}();exports.Operator=Operator},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),app_service_1=__webpack_require__(288),reference_service_1=__webpack_require__(289),staff_service_1=__webpack_require__(290),nb_notify_1=__webpack_require__(291),nav_1=__webpack_require__(292),projects_1=__webpack_require__(294),project_1=__webpack_require__(298),tasks_1=__webpack_require__(301),task_1=__webpack_require__(304),user_profile_1=__webpack_require__(307),login_1=__webpack_require__(312),user_1=__webpack_require__(310),App=function(){function App(router,appService,referenceService,staffService){this.router=router,this.appService=appService,this.referenceService=referenceService,this.staffService=staffService,this.HEADER_TITLE="Projects"}return App.prototype.resize=function(window){this.onResize(window)},Object.defineProperty(App.prototype,"device",{get:function(){return this.isMobileDevice},enumerable:!0,configurable:!0}),Object.defineProperty(App.prototype,"toggleNavVisible",{get:function(){return this.isNavCollapsed},enumerable:!0,configurable:!0}),Object.defineProperty(App.prototype,"toggleSearch",{get:function(){return this.isSearchOpen},enumerable:!0,configurable:!0}),App.prototype.ngOnInit=function(){var _this=this;this.isSearchOpen=!1,this.isNavCollapsed=!1,this.loggedUser=new user_1.User,this.isMobileDevice=this.isMobile(),this.appService.getTranslations().subscribe(function(captions){return console.log(captions)},function(err){console.log(err),_this.router.navigate(["/login"])})},App.prototype.toggleNav=function(){this.isNavCollapsed=!this.isNavCollapsed},App.prototype.hideNav=function(event){event.preventDefault(),this.isNavCollapsed=!1,this.isSearchOpen=!1},App.prototype.searchToggle=function(){this.isSearchOpen=!this.isSearchOpen},App.prototype.logout=function(event){event.preventDefault(),window.location.href="Logout"},App.prototype.goBack=function(){window.history.back()},App.prototype.preventDefault=function(event){event.preventDefault()},App.prototype.isMobile=function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)},App.prototype.onResize=function(window){this.isMobileDevice=window.innerWidth<=1024||this.isMobile()},__decorate([core_1.HostListener("window:resize",["$event.target"]),__metadata("design:type",Function),__metadata("design:paramtypes",[Object]),__metadata("design:returntype",void 0)],App.prototype,"resize",null),__decorate([core_1.HostBinding("class.phone"),__metadata("design:type",Object)],App.prototype,"device",null),__decorate([core_1.HostBinding("class.side-nav-toggle"),__metadata("design:type",Object)],App.prototype,"toggleNavVisible",null),__decorate([core_1.HostBinding("class.search-open"),__metadata("design:type",Object)],App.prototype,"toggleSearch",null),App=__decorate([core_1.Component({selector:"project-app",template:__webpack_require__(313),directives:[router_1.ROUTER_DIRECTIVES,nav_1.NavComponent,nb_notify_1.NBNotifyComponent]}),router_1.Routes([{path:"/tasks/:for",component:tasks_1.TasksComponent},{path:"/tasks",component:tasks_1.TasksComponent},{path:"/task/:id",component:task_1.TaskComponent},{path:"/projects/:id",component:project_1.ProjectComponent},{path:"/projects",component:projects_1.ProjectsComponent},{path:"/user-profile",component:user_profile_1.UserProfileComponent},{path:"/login",component:login_1.LoginComponent}]),__metadata("design:paramtypes",[router_1.Router,app_service_1.AppService,reference_service_1.ReferenceService,staff_service_1.StaffService])],App)}();exports.App=App},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),http_1=__webpack_require__(3),AppService=function(){function AppService(http){this.http=http}return AppService.prototype.getTranslations=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="p?id=common-captions";return this.http.get(url,header).map(function(response){return response.json().captions})},AppService.prototype.getNav=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="p?id=outline";return this.http.get(url,header)},AppService.prototype.getUsers=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="p?id=users";return this.http.get(url,header).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},AppService.prototype.updateUserProfile=function(user){},AppService.prototype.logout=function(){return this.http["delete"]("/")},AppService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http])],AppService)}();exports.AppService=AppService},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),http_1=__webpack_require__(3),ReferenceService=function(){function ReferenceService(http){this.http=http}return ReferenceService.prototype.getTags=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="/Reference/p?id=tags";return this.http.get(url,header).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},ReferenceService.prototype.getTaskTypes=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="/Reference/p?id=tasktypes";return this.http.get(url,header).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},ReferenceService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http])],ReferenceService)}();exports.ReferenceService=ReferenceService},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),http_1=__webpack_require__(3),StaffService=function(){function StaffService(http){this.http=http}return StaffService.prototype.getOrganizations=function(){var header={headers:new http_1.Headers({Accept:"application/json"})},url="/Staff/p?id=get-organizations";return this.http.get(url,header).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},StaffService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http])],StaffService)}();exports.StaffService=StaffService},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),NBNotifyComponent=(function(){function _Noty(type,message,visible){this.type="",this.message="",this.visible=!1,this.type=type,this.message=message,this.visible=visible}return _Noty}(),function(){function NBNotifyComponent(){this.notifyList=[]}return NBNotifyComponent=__decorate([core_1.Component({selector:"nb-notify",template:'\n        <div class="nb-notify" *ngIf="notifyList">\n            <div class="nb-notify-entry-{{notify.type}}" style="display:block;" *ngFor="let notify of notifyList">{{notify.message}}</div>\n        </div>\n    '}),__metadata("design:paramtypes",[])],NBNotifyComponent)}());exports.NBNotifyComponent=NBNotifyComponent},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),app_service_1=__webpack_require__(288),NavComponent=function(){function NavComponent(router,appService){this.router=router,this.appService=appService}return NavComponent=__decorate([core_1.Component({selector:"[nav]",template:__webpack_require__(293),directives:[router_1.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[router_1.Router,app_service_1.AppService])],NavComponent)}();exports.NavComponent=NavComponent},function(module,exports){module.exports='<ul>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'inbox\']" class="nav-link">\n            <i class="fa fa-inbox"></i>\n            <span>{{\'inbox\'}}</span>\n        </a>\n    </li>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'today\']" class="nav-link">\n            <i class="fa fa-calendar-o"></i>\n            <span>{{\'today\'}}</span>\n        </a>\n    </li>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'week\']" class="nav-link">\n            <i class="fa fa-calendar"></i>\n            <span>{{\'week\'}}</span>\n        </a>\n    </li>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'all\']" class="nav-link">\n            <i class="fa fa-database"></i>\n            <span>{{\'all\'}}</span>\n        </a>\n    </li>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'completed\']" class="nav-link">\n            <i class="fa fa-check-square-o"></i>\n            <span>{{\'completed\'}}</span>\n        </a>\n    </li>\n    <li>\n        <a [routerLink]="[\'/tasks\', \'my\']" class="nav-link">\n            <i class="fa fa-ticket"></i>\n            <span>{{\'my_tasks\'}}</span>\n        </a>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <a [routerLink]="[\'/projects\']" class="nav-link">\n            <i class="fa fa-puzzle-piece"></i>\n            <span>{{\'projects\'}}</span>\n        </a>\n    </li>\n</ul>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),common_1=__webpack_require__(5),project_service_1=__webpack_require__(295),ProjectsComponent=function(){function ProjectsComponent(router,projectService){var _this=this;this.router=router,this.projectService=projectService,projectService.getProjects().subscribe(function(projects){return _this.projects=projects},function(errorResponse){return _this.handleXhrError(errorResponse)})}return ProjectsComponent.prototype.composeRecord=function(){this.router.navigate(["/projects","new"])},ProjectsComponent.prototype.deleteProject=function(){this.projectService.deleteProject(this.selectedProjects).subscribe()},ProjectsComponent.prototype.handleXhrError=function(errorResponse){401===errorResponse.status&&this.router.navigate(["/login"])},ProjectsComponent=__decorate([core_1.Component({selector:"[projects]",template:__webpack_require__(297),pipes:[common_1.DatePipe]}),__metadata("design:paramtypes",[router_1.Router,project_service_1.ProjectService])],ProjectsComponent)}();exports.ProjectsComponent=ProjectsComponent},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),http_1=__webpack_require__(3),obj_utils_1=__webpack_require__(296),VIEW_URL="p?id=project-view",FORM_URL="p?id=project-form",HEADER={headers:new http_1.Headers({"Content-Type":"application/x-www-form-urlencoded; charset=utf-8",Accept:"application/json"})},ProjectService=function(){function ProjectService(http){this.http=http}return ProjectService.prototype.getProjects=function(){return this.http.get(VIEW_URL,HEADER).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},ProjectService.prototype.getProjectById=function(projectId){return this.http.get(FORM_URL+"&docid="+projectId,HEADER).map(function(response){return response.json().objects[1]}).map(function(response){return response})},ProjectService.prototype.saveProject=function(project){var url=FORM_URL+(project.id?"&docid="+project.id:"");return this.http.post(url,this.serializeProject(project),HEADER)},ProjectService.prototype.deleteProject=function(projects){return this.http["delete"](VIEW_URL)},ProjectService.prototype.serializeProject=function(project){return obj_utils_1.serializeObj({name:project.name,status:project.status,customer:project.customer||"",manager:project.manager||0,programmer:project.programmer||0,tester:project.tester||0,observers:Array.isArray(project.observers)?project.observers.join(","):"",comment:project.comment,finish_date:project.finishDate?project.finishDate.toString():"",attachments:project.attachments?project.attachments.map(function(it){return it.id}).join(","):""})},ProjectService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http])],ProjectService)}();exports.ProjectService=ProjectService},function(module,exports){"use strict";function serializeObj(obj){var result=[];for(var property in obj)result.push(encodeURIComponent(property)+"="+encodeURIComponent(obj[property]));return result.join("&")}exports.serializeObj=serializeObj},function(module,exports){module.exports='<div class="content-header">\n    <h1 class="header-title">\n        {{\'projects\'}}\n    </h1>\n    <div class="content-actions">\n        <button class="btn" type="button" (click)="composeRecord()">\n            {{\'new_project\'}}\n        </button>\n    </div>\n</div>\n<div class="content-body">\n    <div class="view view-project">\n        <header class="entries-head">\n            <div class="head-wrap">\n                <label class="entry-select">\n                    <input type="checkbox" data-toggle="docid" class="all" />\n                </label>\n                <div class="entry-captions">\n                    <span class="vw-project-name">{{\'name\'}}</span>\n                </div>\n            </div>\n        </header>\n        <div class="entries">\n            <div *ngIf="!projects">\n                {{\'loading\'}}\n            </div>\n            <div class="entry-wrap" *ngFor="let project of projects">\n                <div data-id="{{project.id}}" class="entry">\n                    <label class="entry-select">\n                        <input type="checkbox" name="docid" value="{{project.id}}" />\n                    </label>\n                    <a class="entry-link" [routerLink]="[\'/projects\', project.id]">\n                        <div class="entry-fields">\n                            <span class="vw-project-name">{{project.name}}</span>\n                            <span class="vw-project-customer">{{project.customer?.name}}</span>\n                            <span class="vw-project-comment">{{project.comment}}</span>\n                            <span class="vw-date">{{project.finishDate | date:\'dd.MM.y\'}}</span>\n                        </div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),common_1=__webpack_require__(5),app_service_1=__webpack_require__(288),project_1=__webpack_require__(299),project_service_1=__webpack_require__(295),staff_service_1=__webpack_require__(290),ProjectComponent=function(){function ProjectComponent(router,routeSegment,formBuilder,appService,projectService,staffService){var _this=this;this.router=router,this.routeSegment=routeSegment,this.formBuilder=formBuilder,this.appService=appService,this.projectService=projectService,this.staffService=staffService,this.statusOptions=project_1.ProjectStatusType,this.form=formBuilder.group({name:["",common_1.Validators.required],status:[""],customer:[""],manager:[""],programmer:[""],tester:[""],observers:[""],comment:[""],finishDate:[""],attachments:[""]}),"new"!==this.routeSegment.getParam("id")?this.projectService.getProjectById(this.routeSegment.getParam("id")).subscribe(function(project){return _this.project=project},function(errorResponse){return _this.handleXhrError(errorResponse)}):this.project=new project_1.Project,staffService.getOrganizations().subscribe(function(orgs){return _this.customers=orgs}),appService.getUsers().subscribe(function(users){return _this.users=users})}return ProjectComponent.prototype.saveProject=function(){var _this=this;this.projectService.saveProject(this.project).subscribe(function(response){return _this.close()})},ProjectComponent.prototype.close=function(){this.router.navigate(["/projects"])},ProjectComponent.prototype.handleXhrError=function(errorResponse){401===errorResponse.status&&this.router.navigate(["/login"])},ProjectComponent=__decorate([core_1.Component({selector:"[project]",template:__webpack_require__(300),directives:[common_1.FORM_DIRECTIVES],providers:[common_1.FormBuilder]}),__metadata("design:paramtypes",[router_1.Router,router_1.RouteSegment,common_1.FormBuilder,app_service_1.AppService,project_service_1.ProjectService,staff_service_1.StaffService])],ProjectComponent)}();exports.ProjectComponent=ProjectComponent},function(module,exports){"use strict";exports.ProjectStatusType=["DRAFT","PROCESSED","FINISHED"];var Project=function(){function Project(){}return Project}();exports.Project=Project},function(module,exports){module.exports='<div *ngIf="!project">\n    {{\'loading\'}}\n</div>\n<form class="form" [ngFormModel]="form" *ngIf="project">\n    <header class="content-header">\n        <button class="btn-back" type="button" (click)="close($event)">\n            <i class="fa fa-chevron-left"></i>\n        </button>\n        <h1 class="header-title">\n            {{\'project\'}}\n        </h1>\n        <div class="content-actions">\n            <button class="btn btn-primary" type="button" [disabled]="!form.valid" (click)="saveProject()">\n                {{\'save_close\'}}\n            </button>\n            <button class="btn" type="button" (click)="close($event)">\n                {{\'close\'}}\n            </button>\n        </div>\n    </header>\n    <section class="content-body">\n        <fieldset class="fieldset">\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'name\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.name.valid">\n                    <input class="span8" [(ngModel)]="project.name" ngControl="name" />\n                    <div [hidden]="form.controls.name.valid || form.controls.name.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'customer\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.customer.valid">\n                    <select class="span8" [(ngModel)]="project.customer" ngControl="customer">\n                        <option *ngFor="let c of customers" [value]="c.id">{{c.name}}</option>\n                    </select>\n                    <div [hidden]="form.controls.customer.valid || form.controls.customer.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'manager\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.manager.valid">\n                    <select class="span8" [(ngModel)]="project.manager" ngControl="manager">\n                        <option *ngFor="let m of users" [value]="m.id">{{m.login}}</option>\n                    </select>\n                    <div [hidden]="form.controls.manager.valid || form.controls.manager.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'programmer\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.programmer.valid">\n                    <select class="span8" [(ngModel)]="project.programmer" ngControl="programmer">\n                        <option *ngFor="let p of users" [value]="p.id">{{p.login}}</option>\n                    </select>\n                    <div [hidden]="form.controls.programmer.valid || form.controls.programmer.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'tester\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.tester.valid">\n                    <select class="span8" [(ngModel)]="project.tester" ngControl="tester">\n                        <option *ngFor="let t of users" [value]="t.id">{{t.login}}</option>\n                    </select>\n                    <div [hidden]="form.controls.tester.valid || form.controls.tester.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'observers\'}}\n                </div>\n                <div class="controls">\n                    <select class="span8" [(ngModel)]="project.observers" ngControl="observers">\n                        <option *ngFor="let obs of users" [value]="obs.id">{{obs.login}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'status\'}}\n                </div>\n                <div class="controls">\n                    <select class="span8" [(ngModel)]="project.status" ngControl="status">\n                        <option *ngFor="let st of statusOptions" [value]="st">{{st}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'finishDate\'}}\n                </div>\n                <div class="controls">\n                    <input type="date" class="span2" [(ngModel)]="project.finishDate" ngControl="finishDate" />\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'comment\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.comment.valid">\n                    <textarea class="span8" [(ngModel)]="project.comment" ngControl="comment"></textarea>\n                    <div [hidden]="form.controls.comment.valid || form.controls.comment.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n        <fieldset class="fieldset">\n            <legend class="legend">\n                {{\'attachments\'}}\n            </legend>\n            <div class="form-group">\n                <button type="button" class="btn btn-upload" data-upload="">\n                    <i class="fa fa-paperclip"></i>\n                    <span>{{\'attach_file\'}}</span>\n                </button>\n                <div class="attachments" data-upload-files="">\n                    <div class="attachments-file" *ngFor="let att of project.attachments">\n                        <a class="file-name" href="{{att.url}}">\n                            {{att.realFileName}}\n                        </a>\n                        <span class="btn btn-sm btn-link btn-remove-file on-edit">\n                            <i class="fa fa-times"></i>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </section>\n</form>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),common_1=__webpack_require__(5),task_service_1=__webpack_require__(302),TasksComponent=function(){
function TasksComponent(router,routeSegment,taskService){var _this=this;this.router=router,this.routeSegment=routeSegment,this.taskService=taskService,this.taskService.getTasks(this.routeSegment.getParam("for")).subscribe(function(tasks){return _this.tasks=tasks},function(errorResponse){return _this.handleXhrError(errorResponse)})}return TasksComponent.prototype.composeRecord=function(){this.router.navigate(["/task","new"])},TasksComponent.prototype.deleteTask=function(task){this.taskService.deleteTask(task).subscribe()},TasksComponent.prototype.handleXhrError=function(errorResponse){401===errorResponse.status&&this.router.navigate(["/login"])},TasksComponent=__decorate([core_1.Component({selector:"[tasks]",template:__webpack_require__(303),pipes:[common_1.DatePipe]}),__metadata("design:paramtypes",[router_1.Router,router_1.RouteSegment,task_service_1.TaskService])],TasksComponent)}();exports.TasksComponent=TasksComponent},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),http_1=__webpack_require__(3),obj_utils_1=__webpack_require__(296),VIEW_URL="p?id=task-view",FORM_URL="p?id=task-form",HEADER={headers:new http_1.Headers({"Content-Type":"application/x-www-form-urlencoded; charset=utf-8",Accept:"application/json"})},TaskService=function(){function TaskService(http){this.http=http}return TaskService.prototype.getTasks=function(at){return this.http.get(VIEW_URL+(at?"&for="+at:""),HEADER).map(function(response){return response.json().objects[0].list}).map(function(response){return response})},TaskService.prototype.getTaskById=function(taskId){return this.http.get(FORM_URL+"&docid="+taskId,HEADER).map(function(response){return response.json().objects[1]}).map(function(response){return response})},TaskService.prototype.saveTask=function(task){var url=FORM_URL+(task.id?"&docid="+task.id:"");return this.http.post(url,this.serializeTask(task),HEADER)},TaskService.prototype.deleteTask=function(task){return this.http["delete"](VIEW_URL)},TaskService.prototype.serializeTask=function(task){return obj_utils_1.serializeObj({type:task.type.id,status:task.status,priority:task.priority,body:task.body,assignee:task.assignee,start_date:task.startDate,due_date:task.dueDate,tags:Array.isArray(task.tags)?task.tags.map(function(it){return it.id}).join(","):task.tags,attachments:Array.isArray(task.attachments)?task.attachments.map(function(it){return it.id}).join(","):""})},TaskService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http])],TaskService)}();exports.TaskService=TaskService},function(module,exports){module.exports='<div class="content-header">\n    <h1 class="header-title">\n        {{\'tasks\'}}\n    </h1>\n    <div class="content-actions">\n        <button class="btn" type="button" (click)="composeRecord()">\n            {{\'new_task\'}}\n        </button>\n    </div>\n</div>\n<div class="content-body">\n    <div class="view view-task">\n        <header class="entries-head">\n            <div class="head-wrap">\n                <label class="entry-select">\n                    <input type="checkbox" data-toggle="docid" class="all" />\n                </label>\n                <div class="entry-captions">\n                    <span>{{\'body\'}}</span>\n                </div>\n            </div>\n        </header>\n        <div class="entries">\n            <div *ngIf="!tasks">\n                {{\'loading\'}}\n            </div>\n            <div class="entry-wrap" *ngFor="let task of tasks">\n                <div data-id="{{task.id}}" class="entry">\n                    <label class="entry-select">\n                        <input type="checkbox" name="docid" value="{{task.id}}" />\n                    </label>\n                    <a class="entry-link" [routerLink]="[\'/task\', task.id]">\n                        <div class="entry-fields">\n                            <div class="entry-fields">\n                                <span class="vw-task-status">{{task.status}}</span>\n                                <span class="vw-task-priority">{{task.priority}}</span>\n                                <span class="vw-task-body">{{task.body}}</span>\n                                <span class="vw-task-assignee">{{task.assignee}}</span>\n                                <span class="vw-date">{{task.startDate | date:\'dd.MM.y\'}}</span>\n                                <span class="vw-date">{{task.dueDate | date:\'dd.MM.y\'}}</span>\n                                <span class="vw-tags">\n                                    <span class="tag" *ngFor="let tag of tags">{{tag.name}}</span>\n                                </span>\n                            </div>\n                        </div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),common_1=__webpack_require__(5),app_service_1=__webpack_require__(288),task_1=__webpack_require__(305),task_service_1=__webpack_require__(302),reference_service_1=__webpack_require__(289),TaskComponent=function(){function TaskComponent(router,routeSegment,formBuilder,appService,taskService,referenceService){var _this=this;this.router=router,this.routeSegment=routeSegment,this.formBuilder=formBuilder,this.appService=appService,this.taskService=taskService,this.referenceService=referenceService,this.form=formBuilder.group({type:[""],status:[""],priority:[""],body:["",common_1.Validators.required],assignee:[""],startDate:[""],dueDate:[""],tags:[""],attachments:[""]}),"new"!==this.routeSegment.getParam("id")?this.taskService.getTaskById(this.routeSegment.getParam("id")).subscribe(function(task){return _this.task=task},function(errorResponse){return _this.handleXhrError(errorResponse)}):this.task=new task_1.Task,this.appService.getUsers().subscribe(function(users){return _this.users=users}),this.referenceService.getTags().subscribe(function(tags){return _this.tags=tags})}return TaskComponent.prototype.saveTask=function(){var _this=this;this.taskService.saveTask(this.task).subscribe(function(resp){return _this.close()})},TaskComponent.prototype.close=function(){this.router.navigate(["/tasks"])},TaskComponent.prototype.handleXhrError=function(errorResponse){401===errorResponse.status&&this.router.navigate(["/login"])},TaskComponent=__decorate([core_1.Component({selector:"[task]",template:__webpack_require__(306),directives:[common_1.FORM_DIRECTIVES],providers:[common_1.FormBuilder]}),__metadata("design:paramtypes",[router_1.Router,router_1.RouteSegment,common_1.FormBuilder,app_service_1.AppService,task_service_1.TaskService,reference_service_1.ReferenceService])],TaskComponent)}();exports.TaskComponent=TaskComponent},function(module,exports){"use strict";exports.TaskPriorityType=["HEIGHEST","HEIGHT","MEDIUM","NORMAL"],exports.TaskStatusType=["DRAFT","WAITING","PROCESSED","FINISHED"];var Task=function(){function Task(){}return Task}();exports.Task=Task},function(module,exports){module.exports='<div *ngIf="!task">\n    {{\'loading\'}}\n</div>\n<form class="form" [ngFormModel]="form" *ngIf="task">\n    <header class="content-header">\n        <button class="btn-back" type="button" (click)="close($event)">\n            <i class="fa fa-chevron-left"></i>\n        </button>\n        <h1 class="header-title">\n            {{\'task\'}}\n        </h1>\n        <div class="content-actions">\n            <button class="btn btn-primary" type="button" [disabled]="!form.valid" (click)="saveTask()">\n                {{\'save_close\'}}\n            </button>\n            <button class="btn" type="button" (click)="close($event)">\n                {{\'close\'}}\n            </button>\n        </div>\n    </header>\n    <section class="content-body">\n        <fieldset class="fieldset">\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'task_type\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.type.valid">\n                    <input class="span6" [(ngModel)]="task.type" ngControl="type" />\n                    <div [hidden]="form.controls.type.valid || form.controls.type.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'status\'}}\n                </div>\n                <div class="controls">\n                    <label>\n                        <input type="radio" name="status" value="453" [(ngModel)]="task.status" ngControl="status" />\n                        <span>DRAFT</span>\n                    </label>\n                    <label>\n                        <input type="radio" name="status" value="454" [(ngModel)]="task.status" ngControl="status" />\n                        <span>WAITING</span>\n                    </label>\n                    <label>\n                        <input type="radio" name="status" value="455" [(ngModel)]="task.status" ngControl="status" />\n                        <span>PROCESSED</span>\n                    </label>\n                    <label>\n                        <input type="radio" name="status" value="456" [(ngModel)]="task.status" ngControl="status" />\n                        <span>FINISHED</span>\n                    </label>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'priority\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.priority.valid">\n                    <select class="span3" [(ngModel)]="task.priority" ngControl="priority">\n                        <option *ngFor="let m of priorities" [value]="m.value">{{m.name}}</option>\n                    </select>\n                    <div [hidden]="form.controls.priority.valid || form.controls.priority.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'body\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.body.valid">\n                    <textarea class="span8" [(ngModel)]="task.body" ngControl="body"></textarea>\n                    <div [hidden]="form.controls.body.valid || form.controls.body.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'assignee_user\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.assignee.valid">\n                    <select class="span8" [(ngModel)]="task.assignee" ngControl="assignee">\n                        <option *ngFor="let m of users" [value]="m.id">{{m.login}}</option>\n                    </select>\n                    <div [hidden]="form.controls.assignee.valid || form.controls.assignee.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'start_date\'}}\n                </div>\n                <div class="controls">\n                    <input type="date" class="span2" [(ngModel)]="task.startDate" ngControl="startDate" />\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'due_date\'}}\n                </div>\n                <div class="controls">\n                    <input type="date" class="span2" [(ngModel)]="task.dueDate" ngControl="dueDate" />\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="control-label">\n                    {{\'tags\'}}\n                </div>\n                <div class="controls" [class.has-error]="!form.controls.tags.valid">\n                    <select class="span8" multiple [(ngModel)]="task.tags" ngControl="tags">\n                        <option *ngFor="let m of tags" [value]="m.id">{{m.name}}</option>\n                    </select>\n                    <div [hidden]="form.controls.tags.valid || form.controls.tags.pristine" class="error-message">\n                        {{\'required\'}}\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n        <fieldset class="fieldset">\n            <legend class="legend">\n                {{\'attachments\'}}\n            </legend>\n            <div class="form-group">\n                <button type="button" class="btn btn-upload" data-upload="">\n                    <i class="fa fa-paperclip"></i>\n                    <span>{{\'attach_file\'}}</span>\n                </button>\n                <div class="attachments" data-upload-files="">\n                    <div class="attachments-file" *ngFor="let att of task.attachments">\n                        <a class="file-name" href="{{att.url}}">\n                            {{att.realFileName}}\n                        </a>\n                        <span class="btn btn-sm btn-link btn-remove-file on-edit">\n                            <i class="fa fa-times"></i>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </section>\n</form>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),router_1=__webpack_require__(4),common_1=__webpack_require__(5),tabs_1=__webpack_require__(308),tab_1=__webpack_require__(309),app_service_1=__webpack_require__(288),user_1=__webpack_require__(310),UserProfileComponent=function(){function UserProfileComponent(router,formBuilder,appService){this.router=router,this.formBuilder=formBuilder,this.appService=appService,this.user=new user_1.User,this.form=formBuilder.group({login:[],pwd:[],pwd_confirm:[],email:[]})}return UserProfileComponent.prototype.updateUserProfile=function(){this.appService.updateUserProfile(this.user)},UserProfileComponent.prototype.close=function(event){event.preventDefault(),window.history.back()},UserProfileComponent=__decorate([core_1.Component({selector:"[user-profile]",template:__webpack_require__(311),directives:[common_1.FORM_DIRECTIVES,tabs_1.Tabs,tab_1.Tab],providers:[common_1.FormBuilder]}),__metadata("design:paramtypes",[router_1.Router,common_1.FormBuilder,app_service_1.AppService])],UserProfileComponent)}();exports.UserProfileComponent=UserProfileComponent},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),tab_1=__webpack_require__(309),Tabs=function(){function Tabs(){}return Tabs.prototype.ngAfterContentInit=function(){var activeTabs=this.tabs.filter(function(tab){return tab.active});0===activeTabs.length&&this.selectTab(this.tabs.first)},Tabs.prototype.selectTab=function(tab){this.tabs.forEach(function(tab){return tab.active=!1}),tab.active=!0},Tabs.prototype.preventDefault=function(event){event.preventDefault()},__decorate([core_1.ContentChildren(tab_1.Tab),__metadata("design:type",core_1.QueryList)],Tabs.prototype,"tabs",void 0),Tabs=__decorate([core_1.Component({selector:"tabs",template:'\n      <ul class="nav nav-tabs">\n        <li *ngFor="let tab of tabs" (click)="selectTab(tab)" [class.active]="tab.active">\n          <a href="#" (click)="preventDefault($event)">{{tab.title}}</a>\n        </li>\n      </ul>\n      <ng-content></ng-content>\n    '}),__metadata("design:paramtypes",[])],Tabs)}();exports.Tabs=Tabs},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),Tab=function(){function Tab(){this.active=!1}return __decorate([core_1.Input("tabTitle"),__metadata("design:type",String)],Tab.prototype,"title",void 0),__decorate([core_1.Input(),__metadata("design:type",Object)],Tab.prototype,"active",void 0),Tab=__decorate([core_1.Component({selector:"tab",styles:[".nav-tabs .pane { }"],template:'\n      <div [hidden]="!active" class="pane">\n        <ng-content></ng-content>\n      </div>\n    '}),__metadata("design:paramtypes",[])],Tab)}();exports.Tab=Tab},function(module,exports){"use strict";var User=function(){function User(){this.user_name="@anonymous"}return User}();exports.User=User},function(module,exports){module.exports='<form class="form form-userprofile" autocomplete="off" [ngFormModel]="form">\n    <header class="content-header">\n        <button class="btn-back" type="button" (click)="close($event)">\n            <i class="fa fa-chevron-left"></i>\n        </button>\n        <h1 class="header-title">\n            {{\'employee\'}} {{user.name}}\n        </h1>\n        <div class="content-actions">\n            <button class="btn btn-primary" type="button" [disabled]="!form.valid" (click)="updateUserProfile()">\n                {{\'save_close\'}}\n            </button>\n            <button class="btn" type="button" (click)="close($event)">\n                {{\'close\'}}\n            </button>\n        </div>\n    </header>\n    <section class="content-body">\n        <tabs>\n            <tab class="tab-pane" tabTitle="{{\'properties\'}}">\n                <!--<fieldset class="fieldset fieldset-user-avatar">\n                            <img class="user-avatar" src="img/avatar.png"/>\n                </fieldset>-->\n                <fieldset class="fieldset fieldset-user-fields">\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'user_name\'}}\n                        </div>\n                        <div class="controls">\n                            <span class="input-placeholder">\n                                {{user.name}}\n                            </span>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'login_name\'}}\n                        </div>\n                        <div class="controls">\n                            <input type="text" class="span3" [(ngModel)]="user.login" ngControl="login" />\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'password\'}}\n                        </div>\n                        <div class="controls">\n                            <input type="password" class="span3" [(ngModel)]="user.pwd" ngControl="pwd" />\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'password_confirm\'}}\n                        </div>\n                        <div class="controls">\n                            <input type="password" class="span3" [(ngModel)]="user.pwd_confirm" ngControl="pwd_confirm" />\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'email\'}}\n                        </div>\n                        <div class="controls">\n                            <input type="email" class="span3" [(ngModel)]="user.email" ngControl="email" />\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'org_name\'}}\n                        </div>\n                        <div class="controls">\n                            <span class="input-placeholder">\n                                {{user.organization}}\n                            </span>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'department\'}}\n                        </div>\n                        <div class="controls">\n                            <span class="input-placeholder">\n                                {{user.department}}\n                            </span>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'position\'}}\n                        </div>\n                        <div class="controls">\n                            <span class="input-placeholder">\n                                {{user.position}}\n                            </span>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'roles\'}}\n                        </div>\n                        <div class="controls">\n                            <ul class="input-placeholder list-style-none">\n                                <xsl:for-each select="fields/roles/entry">\n                                    <li>\n                                        <xsl:value-of select="." />\n                                    </li>\n                                </xsl:for-each>\n                            </ul>\n                        </div>\n                    </div>\n                </fieldset>\n            </tab>\n            <tab class="tab-pane" tabTitle="{{\'interface\'}}">\n                <fieldset class="fieldset">\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'limit_view\'}}\n                        </div>\n                        <div class="controls">\n                            <select name="pagesize" class="native span2">\n                                <option value="10">\n                                    <xsl:if test="//pagesize = \'10\'">\n                                        <xsl:attribute name="selected" select="\'selected\'" />\n                                    </xsl:if>\n                                    10\n                                </option>\n                                <option value="20">\n                                    <xsl:if test="//pagesize = \'20\'">\n                                        <xsl:attribute name="selected" select="\'selected\'" />\n                                    </xsl:if>\n                                    20\n                                </option>\n                                <option value="30">\n                                    <xsl:if test="//pagesize = \'30\'">\n                                        <xsl:attribute name="selected" select="\'selected\'" />\n                                    </xsl:if>\n                                    30\n                                </option>\n                                <option value="50">\n                                    <xsl:if test="//pagesize = \'50\'">\n                                        <xsl:attribute name="selected" select="\'selected\'" />\n                                    </xsl:if>\n                                    50\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label">\n                            {{\'interface_lang\'}}\n                        </div>\n                        <div class="controls">\n                            <xsl:variable name="currentlang" select="/request/@lang" />\n                            <select name="lang" class="native span2">\n                                <xsl:for-each select="//query[@entity = \'language\']/entry">\n                                    <option value="{viewcontent/lang/@id}">\n                                        <xsl:if test="viewcontent/lang/@id = $currentlang">\n                                            <xsl:attribute name="selected" select="\'selected\'" />\n                                        </xsl:if>\n                                        <xsl:value-of select="viewcontent/lang" />\n                                    </option>\n                                </xsl:for-each>\n                            </select>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="control-label"></div>\n                        <div class="controls">\n                            <a href="javascript:void(0)" data-toggle-theme="theme1" class="input-placeholder">\n                                {{\'change_skin\'}}\n                            </a>\n                        </div>\n                    </div>\n                </fieldset>\n            </tab>\n        </tabs>\n    </section>\n</form>\n'},function(module,exports,__webpack_require__){"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},core_1=__webpack_require__(2),LoginComponent=function(){function LoginComponent(){window.location.href="Logout"}return LoginComponent=__decorate([core_1.Component({selector:"[login]",template:"login"}),__metadata("design:paramtypes",[])],LoginComponent)}();exports.LoginComponent=LoginComponent},function(module,exports){module.exports='<nb-notify></nb-notify>\n<div class="layout">\n    <div class="content-overlay" (mousedown)="hideNav($event)" (touchstart)="hideNav($event)"></div>\n    <header class="header navbar navbar-fixed-top">\n        <div class="container">\n            <div class="navbar-header">\n                <button class="btn-side-nav-toggle" type="button" (click)="toggleNav()"></button>\n                <img class="brand-logo" alt="logo" src="img/logo.png" />\n                <span class="brand-title">\n                    {{HEADER_TITLE}}\n                </span>\n            </div>\n            <nav class="navbar-nav navbar-right">\n                <ul class="nav navbar-right">\n                    <li class="dropdown">\n                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" (click)="preventDefault($event)">\n                            <i class="fa fa-user"></i>\n                        </a>\n                        <ul class="dropdown-menu right">\n                            <li>\n                                <a class="user-profile" [routerLink]="[\'/user-profile\']">\n                                    {{loggedUser.user_name}}\n                                </a>\n                            </li>\n                            <li class="divider"></li>\n                            <li>\n                                <a class="logout" href="#logout" (click)="logout($event)">\n                                    logout\n                                </a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n                <form class="navbar-form navbar-search" name="ft-search" (submit)="ftSearch()">\n                    <input type="hidden" name="id" value="search" />\n                    <input type="search" class="q" name="keyword" value="{{search_keyword}}" placeholder="{{\'search\'}}" required autocomplete="off" (focus)="searchToggle()" (blur)="searchToggle()" />\n                    <button type="reset">\n                        <i class="fa fa-times"></i>\n                    </button>\n                    <input type="submit" value="search" />\n                </form>\n            </nav>\n        </div>\n    </header>\n    <section class="container">\n        <aside nav class="aside side-nav"></aside>\n        <main class="content">\n            <router-outlet></router-outlet>\n        </main>\n    </section>\n</div>\n'}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLmpzIiwid2VicGFjazovLy8uL2FwcC9tYWluLnRzIiwid2VicGFjazovLy8uL34vcnhqcy9SeC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9yb290LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvdG9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL3RyeUNhdGNoLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL2Vycm9yT2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3N5bWJvbC9yeFN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL09ic2VydmVyLmpzIiwid2VicGFjazovLy8uL34vc3ltYm9sLW9ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvU3ViamVjdFN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC90aHJvd0Vycm9yLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvYmluZENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0JvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9Bc3luY1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2JpbmROb2RlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9Cb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvQXJyYXlPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL1NjYWxhck9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvRW1wdHlPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9PdXRlclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL0lubmVyU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvY29uY2F0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvY29uY2F0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvRGVmZXJPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvZm9ya0pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvZm9ya0pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvRm9ya0pvaW5PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvRnJvbU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvUHJvbWlzZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvSXRlcmF0b3JPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0FycmF5TGlrZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0Zyb21FdmVudE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9Gcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvZnJvbVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2dlbmVyYXRlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0dlbmVyYXRlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvSW50ZXJ2YWxPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3NjaGVkdWxlci9GdXR1cmVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3NjaGVkdWxlci9RdWV1ZVNjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvc2NoZWR1bGVyL1F1ZXVlQWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL3JhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3JhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL25ldmVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL25ldmVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL05ldmVyT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9ub29wLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvUmFuZ2VPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS90aHJvdy5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS90aHJvdy5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9FcnJvck9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL1RpbWVyT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL3ppcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3ppcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvYnVmZmVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvYnVmZmVyQ291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2J1ZmZlckNvdW50LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvYnVmZmVyVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvYnVmZmVyVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2J1ZmZlclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvYnVmZmVyVG9nZ2xlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvYnVmZmVyV2hlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvYnVmZmVyV2hlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NhY2hlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9jYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvcHVibGlzaFJlcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvUmVwbGF5U3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvc2NoZWR1bGVyL3F1ZXVlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9tdWx0aWNhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvY2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2NhdGNoLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvY29tYmluZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvY29tYmluZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2NvbmNhdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvY29uY2F0TWFwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdE1hcFRvLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9jb25jYXRNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvbWVyZ2VNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvdW50LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2RlbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlZmF1bHRJZkVtcHR5LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9kZWZhdWx0SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbGF5LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbGF5V2hlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvZGVsYXlXaGVuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvZGlzdGluY3RVbnRpbENoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvZG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2RvLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvZXhwYW5kLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9leHBhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9maXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvRW1wdHlFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2dyb3VwQnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2dyb3VwQnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvTWFwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL01hcFBvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL0Zhc3RNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9pZ25vcmVFbGVtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9hdWRpdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvYXVkaXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9hdWRpdFRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2F1ZGl0VGltZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2xhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2xhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9sZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL2xldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2V2ZXJ5LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvbWFwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvbWFwVG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL21hcFRvLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL21hdGVyaWFsaXplLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL21lcmdlTWFwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvbWVyZ2VNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL211bHRpY2FzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3BhcnRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvcGFydGl0aW9uLmpzIiwid2VicGFjazovLy8uL34vcnhqcy91dGlsL25vdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3BsdWNrLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9wbHVjay5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3B1Ymxpc2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3B1Ymxpc2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9wdWJsaXNoQmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3B1Ymxpc2hCZWhhdmlvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvcHVibGlzaFJlcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3B1Ymxpc2hMYXN0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9wdWJsaXNoTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3JhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3JlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvcmVwZWF0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvcmV0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3JldHJ5LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvcmV0cnlXaGVuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9yZXRyeVdoZW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3NhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3NhbXBsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3NhbXBsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9zY2FuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9zY2FuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2hhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3NoYXJlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2luZ2xlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9zaW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9za2lwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9za2lwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2tpcFVudGlsLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9za2lwVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9za2lwV2hpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3NraXBXaGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3N0YXJ0V2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3Ivc3RhcnRXaXRoLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3N1YnNjcmliZU9uLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL1N1YnNjcmliZU9uT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvc2NoZWR1bGVyL2FzYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3NjaGVkdWxlci9Bc2FwU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9zY2hlZHVsZXIvQXNhcEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9JbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc3dpdGNoLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9zd2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9zd2l0Y2hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3N3aXRjaE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3N3aXRjaE1hcFRvLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9zd2l0Y2hNYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3Rha2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3Rha2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci90YWtlTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvdGFrZUxhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3Rha2VVbnRpbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3Rha2VXaGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvdGFrZVdoaWxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci90aHJvdHRsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvdGltZW91dFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3RpbWVvdXRXaXRoLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3RvUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvdG9Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivd2luZG93LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci93aW5kb3dDb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3Ivd2luZG93Q291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci93aW5kb3dUaW1lLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci93aW5kb3dUaW1lLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivd2luZG93VG9nZ2xlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci93aW5kb3dUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci93aW5kb3dXaGVuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci93aW5kb3dXaGVuLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivd2l0aExhdGVzdEZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL29wZXJhdG9yL3dpdGhMYXRlc3RGcm9tLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvemlwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvemlwQWxsLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci96aXBBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL09wZXJhdG9yLmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VydmljZXMvYXBwLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NlcnZpY2VzL3JlZmVyZW5jZS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC9zZXJ2aWNlcy9zdGFmZi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL25iLW5vdGlmeS50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9uYXYudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RlbXBsYXRlcy9uYXYuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9wcm9qZWN0cy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VydmljZXMvcHJvamVjdC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC91dGlscy9vYmotdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RlbXBsYXRlcy9wcm9qZWN0cy5odG1sIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Byb2plY3QudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vZGVscy9wcm9qZWN0LnRzIiwid2VicGFjazovLy8uL2FwcC90ZW1wbGF0ZXMvcHJvamVjdC5odG1sIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Rhc2tzLnRzIiwid2VicGFjazovLy8uL2FwcC9zZXJ2aWNlcy90YXNrLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RlbXBsYXRlcy90YXNrcy5odG1sIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Rhc2sudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vZGVscy90YXNrLnRzIiwid2VicGFjazovLy8uL2FwcC90ZW1wbGF0ZXMvdGFzay5odG1sIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3VzZXItcHJvZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy90YWJzL3RhYnMudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvdGFicy90YWIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vZGVscy91c2VyLnRzIiwid2VicGFjazovLy8uL2FwcC90ZW1wbGF0ZXMvdXNlci1wcm9maWxlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RlbXBsYXRlcy9hcHAuaHRtbCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnAiLCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInBsYXRmb3JtX2Jyb3dzZXJfZHluYW1pY18xIiwiY29yZV8xIiwiaHR0cF8xIiwicm91dGVyXzEiLCJjb21tb25fMSIsImFwcF8xIiwibmJfbm90aWZ5XzEiLCJhcHBfc2VydmljZV8xIiwidGFza19zZXJ2aWNlXzEiLCJwcm9qZWN0X3NlcnZpY2VfMSIsInJlZmVyZW5jZV9zZXJ2aWNlXzEiLCJzdGFmZl9zZXJ2aWNlXzEiLCJlbmFibGVQcm9kTW9kZSIsImJvb3RzdHJhcCIsIkFwcCIsIkhUVFBfUFJPVklERVJTIiwiUk9VVEVSX0RJUkVDVElWRVMiLCJST1VURVJfUFJPVklERVJTIiwicHJvdmlkZSIsIlBMQVRGT1JNX0RJUkVDVElWRVMiLCJ1c2VWYWx1ZSIsIm11bHRpIiwiTG9jYXRpb25TdHJhdGVneSIsInVzZUNsYXNzIiwiSGFzaExvY2F0aW9uU3RyYXRlZ3kiLCJGT1JNX1BST1ZJREVSUyIsIk5CTm90aWZ5Q29tcG9uZW50IiwiQXBwU2VydmljZSIsIlRhc2tTZXJ2aWNlIiwiUHJvamVjdFNlcnZpY2UiLCJSZWZlcmVuY2VTZXJ2aWNlIiwiU3RhZmZTZXJ2aWNlIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiU3ViamVjdF8xIiwiU3ViamVjdCIsIk9ic2VydmFibGVfMSIsIk9ic2VydmFibGUiLCJPcGVyYXRvcl8xIiwiT3BlcmF0b3IiLCJTdWJzY3JpcHRpb25fMSIsIlN1YnNjcmlwdGlvbiIsIlN1YnNjcmliZXJfMSIsIlN1YnNjcmliZXIiLCJBc3luY1N1YmplY3RfMSIsIkFzeW5jU3ViamVjdCIsIlJlcGxheVN1YmplY3RfMSIsIlJlcGxheVN1YmplY3QiLCJCZWhhdmlvclN1YmplY3RfMSIsIkJlaGF2aW9yU3ViamVjdCIsIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlIiwiTm90aWZpY2F0aW9uXzEiLCJOb3RpZmljYXRpb24iLCJFbXB0eUVycm9yXzEiLCJFbXB0eUVycm9yIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvcl8xIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsImFzYXBfMSIsImFzeW5jXzEiLCJxdWV1ZV8xIiwicnhTdWJzY3JpYmVyXzEiLCJpdGVyYXRvcl8xIiwib2JzZXJ2YWJsZSIsIlNjaGVkdWxlciIsImFzYXAiLCJhc3luYyIsInF1ZXVlIiwiU3ltYm9sIiwicnhTdWJzY3JpYmVyIiwiJCRyeFN1YnNjcmliZXIiLCJpdGVyYXRvciIsIiQkaXRlcmF0b3IiLCJfX2V4dGVuZHMiLCJ0aGlzIiwiZCIsImIiLCJfXyIsImNvbnN0cnVjdG9yIiwicCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiU3ViamVjdFN1YnNjcmlwdGlvbl8xIiwidGhyb3dFcnJvcl8xIiwiX3N1cGVyIiwiZGVzdGluYXRpb24iLCJzb3VyY2UiLCJjYWxsIiwib2JzZXJ2ZXJzIiwiaXNVbnN1YnNjcmliZWQiLCJpc1N0b3BwZWQiLCJoYXNFcnJvcmVkIiwiZGlzcGF0Y2hpbmciLCJoYXNDb21wbGV0ZWQiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzdWJqZWN0IiwiYWRkIiwic3Vic2NyaXB0aW9uIiwicmVtb3ZlIiwidW5zdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwic3Vic2NyaWJlciIsInN1YnNjcmliZSIsImVycm9yVmFsdWUiLCJjb21wbGV0ZSIsInRocm93SWZVbnN1YnNjcmliZWQiLCJTdWJqZWN0U3Vic2NyaXB0aW9uIiwicHVzaCIsIl91bnN1YnNjcmliZSIsIm5leHQiLCJ2YWx1ZSIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiYXNPYnNlcnZhYmxlIiwiU3ViamVjdE9ic2VydmFibGUiLCJfZmluYWxOZXh0IiwiaW5kZXgiLCJzbGljZSIsImxlbiIsImxlbmd0aCIsIl9maW5hbEVycm9yIiwiX2ZpbmFsQ29tcGxldGUiLCJ0aHJvd0Vycm9yIiwicm9vdF8xIiwidG9TdWJzY3JpYmVyXzEiLCIkJG9ic2VydmFibGUiLCJfaXNTY2FsYXIiLCJvYnNlcnZlck9yTmV4dCIsInNpbmsiLCJ0b1N1YnNjcmliZXIiLCJzeW5jRXJyb3JUaHJvd2FibGUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JWYWx1ZSIsImZvckVhY2giLCJQcm9taXNlQ3RvciIsIl90aGlzIiwicm9vdCIsIlJ4IiwiY29uZmlnIiwiUHJvbWlzZSIsIkVycm9yIiwicmVzb2x2ZSIsInJlamVjdCIsImdsb2JhbCIsIm9iamVjdFR5cGVzIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwib2JqZWN0IiwibnVtYmVyIiwic3RyaW5nIiwidW5kZWZpbmVkIiwic2VsZiIsIndpbmRvdyIsImZyZWVHbG9iYWwiLCJub2RlVHlwZSIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJuZXh0T3JPYnNlcnZlciIsImlzRnVuY3Rpb25fMSIsIk9ic2VydmVyXzEiLCJkZXN0aW5hdGlvbk9yTmV4dCIsImFyZ3VtZW50cyIsImVtcHR5IiwiU2FmZVN1YnNjcmliZXIiLCJfcGFyZW50IiwiY29udGV4dCIsImlzRnVuY3Rpb24iLCJiaW5kIiwiX2NvbnRleHQiLCJfX3RyeU9yU2V0RXJyb3IiLCJfX3RyeU9yVW5zdWIiLCJmbiIsInBhcmVudCIsIngiLCJpc0FycmF5XzEiLCJpc09iamVjdF8xIiwidHJ5Q2F0Y2hfMSIsImVycm9yT2JqZWN0XzEiLCJlcnJvcnMiLCJoYXNFcnJvcnMiLCJfYSIsIl9zdWJzY3JpcHRpb25zIiwidHJpYWwiLCJ0cnlDYXRjaCIsImVycm9yT2JqZWN0IiwiZSIsImlzQXJyYXkiLCJzdWIiLCJpc09iamVjdCIsImNvbmNhdCIsInRlYXJkb3duIiwiRU1QVFkiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiQXJyYXkiLCJ0cnlDYXRjaGVyIiwidHJ5Q2F0Y2hUYXJnZXQiLCJhcHBseSIsIm5hbWUiLCJtZXNzYWdlIiwibWFwIiwiaSIsInRvU3RyaW5nIiwiam9pbiIsInJlc3VsdCIsIm9ic2VydmVyIiwic3Vic2NyaWJlckluZGV4IiwiYmluZENhbGxiYWNrXzEiLCJiaW5kQ2FsbGJhY2siLCJCb3VuZENhbGxiYWNrT2JzZXJ2YWJsZV8xIiwiQm91bmRDYWxsYmFja09ic2VydmFibGUiLCJkaXNwYXRjaCIsInN0YXRlIiwiY2FsbGJhY2tGdW5jIiwiYXJncyIsInNjaGVkdWxlciIsImhhbmRsZXIiLCJoYW5kbGVyRm4iLCJpbm5lckFyZ3MiLCJfaSIsInNlbGVjdG9yIiwicmVzdWx0XzIiLCJzY2hlZHVsZSIsImRpc3BhdGNoRXJyb3IiLCJkaXNwYXRjaE5leHQiLCJhcmciLCJmdW5jIiwicmVzdWx0XzEiLCJoYXNOZXh0IiwibyIsImJpbmROb2RlQ2FsbGJhY2tfMSIsImJpbmROb2RlQ2FsbGJhY2siLCJCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGVfMSIsIkJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZSIsInNoaWZ0IiwiY29tYmluZUxhdGVzdF8xIiwiY29tYmluZUxhdGVzdCIsImNvbWJpbmVMYXRlc3RTdGF0aWMiLCJvYnNlcnZhYmxlcyIsInByb2plY3QiLCJwb3AiLCJ1bnNoaWZ0IiwiQXJyYXlPYnNlcnZhYmxlXzEiLCJBcnJheU9ic2VydmFibGUiLCJDb21iaW5lTGF0ZXN0T3BlcmF0b3IiLCJpc1NjaGVkdWxlcl8xIiwiaXNTY2hlZHVsZXIiLCJPdXRlclN1YnNjcmliZXJfMSIsInN1YnNjcmliZVRvUmVzdWx0XzEiLCJDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciIsImFjdGl2ZSIsInZhbHVlcyIsInRvUmVzcG9uZCIsInN1YnNjcmliZVRvUmVzdWx0Iiwibm90aWZ5Q29tcGxldGUiLCJ1bnVzZWQiLCJub3RpZnlOZXh0Iiwib3V0ZXJWYWx1ZSIsImlubmVyVmFsdWUiLCJvdXRlckluZGV4IiwiaW5uZXJJbmRleCIsImlubmVyU3ViIiwiZm91bmQiLCJfdHJ5UHJvamVjdCIsIk91dGVyU3Vic2NyaWJlciIsIlNjYWxhck9ic2VydmFibGVfMSIsIkVtcHR5T2JzZXJ2YWJsZV8xIiwiYXJyYXkiLCJvZiIsIlNjYWxhck9ic2VydmFibGUiLCJFbXB0eU9ic2VydmFibGUiLCJjb3VudCIsImRvbmUiLCJub3RpZnlFcnJvciIsIm91dGVyU3Vic2NyaWJlciIsIklubmVyU3Vic2NyaWJlcl8xIiwiSW5uZXJTdWJzY3JpYmVyIiwiaXNQcm9taXNlXzEiLCJpc1Byb21pc2UiLCJ0aGVuIiwic2V0VGltZW91dCIsIml0ZW0iLCJvYnMiLCJUeXBlRXJyb3IiLCJTZXQiLCJNYXAiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImtleSIsImNvbmNhdF8xIiwiY29uY2F0U3RhdGljIiwibWVyZ2VBbGxfMSIsIk1lcmdlQWxsT3BlcmF0b3IiLCJtZXJnZUFsbCIsImNvbmN1cnJlbnQiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk1lcmdlQWxsU3Vic2NyaWJlciIsImJ1ZmZlciIsImRlZmVyXzEiLCJkZWZlciIsIkRlZmVyT2JzZXJ2YWJsZV8xIiwiRGVmZXJPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZUZhY3RvcnkiLCJEZWZlclN1YnNjcmliZXIiLCJmYWN0b3J5IiwidHJ5RGVmZXIiLCJfY2FsbEZhY3RvcnkiLCJlbXB0eV8xIiwiZm9ya0pvaW5fMSIsImZvcmtKb2luIiwiRm9ya0pvaW5PYnNlcnZhYmxlXzEiLCJGb3JrSm9pbk9ic2VydmFibGUiLCJzb3VyY2VzIiwicmVzdWx0U2VsZWN0b3IiLCJGb3JrSm9pblN1YnNjcmliZXIiLCJjb21wbGV0ZWQiLCJoYXZlVmFsdWVzIiwidG90YWwiLCJpbm5lclN1YnNjcmlwdGlvbiIsIl9oYXNWYWx1ZSIsImZyb21fMSIsImZyb20iLCJGcm9tT2JzZXJ2YWJsZV8xIiwiRnJvbU9ic2VydmFibGUiLCJQcm9taXNlT2JzZXJ2YWJsZV8xIiwiSXRlcmF0b3JPYnNlcnZhYmxlXzEiLCJBcnJheUxpa2VPYnNlcnZhYmxlXzEiLCJvYnNlcnZlT25fMSIsImlzQXJyYXlMaWtlIiwiaXNoIiwibWFwRm5PclNjaGVkdWxlciIsInRoaXNBcmciLCJsYXN0U2NoZWR1bGVyIiwibWFwRm4iLCJQcm9taXNlT2JzZXJ2YWJsZSIsIkl0ZXJhdG9yT2JzZXJ2YWJsZSIsIkFycmF5TGlrZU9ic2VydmFibGUiLCJPYnNlcnZlT25TdWJzY3JpYmVyIiwicHJvbWlzZSIsImdldEl0ZXJhdG9yIiwib2JqIiwiU3RyaW5nSXRlcmF0b3IiLCJBcnJheUl0ZXJhdG9yIiwidG9MZW5ndGgiLCJpc05hTiIsIm51bWJlcklzRmluaXRlIiwic2lnbiIsIk1hdGgiLCJmbG9vciIsImFicyIsIm1heFNhZmVJbnRlZ2VyIiwiaXNGaW5pdGUiLCJ2YWx1ZUFzTnVtYmVyIiwiaGFzRXJyb3IiLCJzdHIiLCJpZHgiLCJjaGFyQXQiLCJhcnIiLCJwb3ciLCJhcnJheUxpa2UiLCJvYnNlcnZlT24iLCJkZWxheSIsIk9ic2VydmVPbk9wZXJhdG9yIiwibm90aWZpY2F0aW9uIiwib2JzZXJ2ZSIsInNjaGVkdWxlTWVzc2FnZSIsIk9ic2VydmVPbk1lc3NhZ2UiLCJjcmVhdGVOZXh0IiwiY3JlYXRlRXJyb3IiLCJjcmVhdGVDb21wbGV0ZSIsImtpbmQiLCJleGNlcHRpb24iLCJoYXNWYWx1ZSIsImFjY2VwdCIsInRvT2JzZXJ2YWJsZSIsInVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uIiwiY29tcGxldGVOb3RpZmljYXRpb24iLCJmcm9tRXZlbnRfMSIsImZyb21FdmVudCIsIkZyb21FdmVudE9ic2VydmFibGVfMSIsIkZyb21FdmVudE9ic2VydmFibGUiLCJpc05vZGVTdHlsZUV2ZW50RW1taXR0ZXIiLCJzb3VyY2VPYmoiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsIm9uIiwib2ZmIiwiaXNOb2RlTGlzdCIsImlzSFRNTENvbGxlY3Rpb24iLCJpc0V2ZW50VGFyZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJ0YXJnZXQiLCJzZXR1cFN1YnNjcmlwdGlvbiIsImZyb21FdmVudFBhdHRlcm5fMSIsImZyb21FdmVudFBhdHRlcm4iLCJGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZV8xIiwiRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUiLCJhZGRIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsImZyb21Qcm9taXNlXzEiLCJmcm9tUHJvbWlzZSIsIkdlbmVyYXRlT2JzZXJ2YWJsZV8xIiwiZ2VuZXJhdGUiLCJHZW5lcmF0ZU9ic2VydmFibGUiLCJzZWxmU2VsZWN0b3IiLCJpbml0aWFsU3RhdGUiLCJjb25kaXRpb24iLCJpdGVyYXRlIiwiaW5pdGlhbFN0YXRlT3JPcHRpb25zIiwicmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUiLCJjb25kaXRpb25SZXN1bHQiLCJuZWVkSXRlcmF0ZSIsImludGVydmFsXzEiLCJpbnRlcnZhbCIsIkludGVydmFsT2JzZXJ2YWJsZV8xIiwiSW50ZXJ2YWxPYnNlcnZhYmxlIiwiaXNOdW1lcmljXzEiLCJwZXJpb2QiLCJpc051bWVyaWMiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiQXN5bmNTY2hlZHVsZXJfMSIsIkFzeW5jU2NoZWR1bGVyIiwiRnV0dXJlQWN0aW9uXzEiLCJRdWV1ZVNjaGVkdWxlcl8xIiwic2NoZWR1bGVOb3ciLCJ3b3JrIiwiRnV0dXJlQWN0aW9uIiwiUXVldWVTY2hlZHVsZXIiLCJwZW5kaW5nIiwiZXhlY3V0ZSIsIl9zY2hlZHVsZSIsImlkIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiYWN0aW9ucyIsImZsdXNoIiwiUXVldWVBY3Rpb25fMSIsInNjaGVkdWxlZElkIiwibm93IiwiRGF0ZSIsImFjdGlvbiIsInNjaGVkdWxlTGF0ZXIiLCJRdWV1ZUFjdGlvbiIsIm1lcmdlXzEiLCJtZXJnZSIsIm1lcmdlU3RhdGljIiwibGFzdCIsInJhY2VfMSIsInJhY2UiLCJyYWNlU3RhdGljIiwiUmFjZU9wZXJhdG9yIiwiUmFjZVN1YnNjcmliZXIiLCJoYXNGaXJzdCIsIm5ldmVyXzEiLCJuZXZlciIsIk5ldmVyT2JzZXJ2YWJsZV8xIiwiTmV2ZXJPYnNlcnZhYmxlIiwibm9vcF8xIiwibm9vcCIsIm9mXzEiLCJyYW5nZV8xIiwicmFuZ2UiLCJSYW5nZU9ic2VydmFibGVfMSIsIlJhbmdlT2JzZXJ2YWJsZSIsInN0YXJ0IiwiX2NvdW50IiwidGhyb3dfMSIsIl90aHJvdyIsIkVycm9yT2JzZXJ2YWJsZV8xIiwiRXJyb3JPYnNlcnZhYmxlIiwidGltZXJfMSIsInRpbWVyIiwiVGltZXJPYnNlcnZhYmxlXzEiLCJUaW1lck9ic2VydmFibGUiLCJpc0RhdGVfMSIsImR1ZVRpbWUiLCJpc0RhdGUiLCJpbml0aWFsRGVsYXkiLCJ6aXBfMSIsInppcCIsInppcFN0YXRpYyIsInppcFByb3RvIiwiWmlwT3BlcmF0b3IiLCJaaXBTdWJzY3JpYmVyIiwiaXRlcmF0b3JzIiwiU3RhdGljQXJyYXlJdGVyYXRvciIsIlN0YXRpY0l0ZXJhdG9yIiwiWmlwQnVmZmVySXRlcmF0b3IiLCJzdGlsbFVuc3Vic2NyaWJlZCIsIm5vdGlmeUluYWN0aXZlIiwiY2hlY2tJdGVyYXRvcnMiLCJzaG91bGRDb21wbGV0ZSIsIm5leHRSZXN1bHQiLCJpc0NvbXBsZXRlIiwiYnVmZmVyXzEiLCJjbG9zaW5nTm90aWZpZXIiLCJCdWZmZXJPcGVyYXRvciIsIkJ1ZmZlclN1YnNjcmliZXIiLCJidWZmZXJDb3VudF8xIiwiYnVmZmVyQ291bnQiLCJidWZmZXJTaXplIiwic3RhcnRCdWZmZXJFdmVyeSIsIkJ1ZmZlckNvdW50T3BlcmF0b3IiLCJCdWZmZXJDb3VudFN1YnNjcmliZXIiLCJidWZmZXJzIiwiYnVmZmVyVGltZV8xIiwiYnVmZmVyVGltZSIsImJ1ZmZlclRpbWVTcGFuIiwiYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCIsIkJ1ZmZlclRpbWVPcGVyYXRvciIsImRpc3BhdGNoQnVmZmVyVGltZVNwYW5Pbmx5IiwicHJldkJ1ZmZlciIsImNsb3NlQnVmZmVyIiwib3BlbkJ1ZmZlciIsImRpc3BhdGNoQnVmZmVyQ3JlYXRpb24iLCJkaXNwYXRjaEJ1ZmZlckNsb3NlIiwiQnVmZmVyVGltZVN1YnNjcmliZXIiLCJjbG9zZVN0YXRlIiwiY3JlYXRpb25TdGF0ZSIsInRpbWVTcGFuT25seVN0YXRlIiwiYnVmZmVyVG9nZ2xlXzEiLCJidWZmZXJUb2dnbGUiLCJvcGVuaW5ncyIsImNsb3NpbmdTZWxlY3RvciIsIkJ1ZmZlclRvZ2dsZU9wZXJhdG9yIiwiQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciIsImNvbnRleHRzIiwidHJ5U3Vic2NyaWJlIiwiYnVmZmVyV2hlbl8xIiwiYnVmZmVyV2hlbiIsIkJ1ZmZlcldoZW5PcGVyYXRvciIsIkJ1ZmZlcldoZW5TdWJzY3JpYmVyIiwic3Vic2NyaWJpbmciLCJjbG9zaW5nU3Vic2NyaXB0aW9uIiwiY2FjaGVfMSIsImNhY2hlIiwid2luZG93VGltZSIsInB1Ymxpc2hSZXBsYXlfMSIsInB1Ymxpc2hSZXBsYXkiLCJyZWZDb3VudCIsIm11bHRpY2FzdF8xIiwibXVsdGljYXN0IiwiZXZlbnRzIiwiX3dpbmRvd1RpbWUiLCJfZ2V0Tm93IiwiUmVwbGF5RXZlbnQiLCJfdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMiLCJldmVudHNDb3VudCIsInNwbGljZUNvdW50IiwidGltZSIsIm1heCIsInN1YmplY3RPclN1YmplY3RGYWN0b3J5Iiwic3ViamVjdEZhY3RvcnkiLCJnZXRTdWJqZWN0IiwiY29ubmVjdCIsIkNvbm5lY3RhYmxlU3Vic2NyaXB0aW9uIiwiUmVmQ291bnRPYnNlcnZhYmxlIiwiX2Nsb3NlU3Vic2NyaXB0aW9uIiwiY29ubmVjdGFibGUiLCJyZWZDb3VudFN1YnNjcmliZXIiLCJSZWZDb3VudFN1YnNjcmliZXIiLCJjb25uZWN0aW9uIiwicmVmQ291bnRPYnNlcnZhYmxlIiwiX3Jlc2V0Q29ubmVjdGFibGUiLCJvYnNDb25uZWN0aW9uIiwic3ViQ29ubmVjdGlvbiIsImNhdGNoXzEiLCJfY2F0Y2giLCJDYXRjaE9wZXJhdG9yIiwiY2F1Z2h0IiwiQ2F0Y2hTdWJzY3JpYmVyIiwiX2lubmVyU3ViIiwiY29tYmluZUFsbF8xIiwiY29tYmluZUFsbCIsImNvbmNhdEFsbF8xIiwiY29uY2F0QWxsIiwiY29uY2F0TWFwXzEiLCJjb25jYXRNYXAiLCJtZXJnZU1hcF8xIiwiTWVyZ2VNYXBPcGVyYXRvciIsIm1lcmdlTWFwIiwiTWVyZ2VNYXBTdWJzY3JpYmVyIiwiX3RyeU5leHQiLCJfbm90aWZ5UmVzdWx0U2VsZWN0b3IiLCJjb25jYXRNYXBUb18xIiwiY29uY2F0TWFwVG8iLCJpbm5lck9ic2VydmFibGUiLCJtZXJnZU1hcFRvXzEiLCJNZXJnZU1hcFRvT3BlcmF0b3IiLCJtZXJnZU1hcFRvIiwiTWVyZ2VNYXBUb1N1YnNjcmliZXIiLCJ0cnlTZWxlY3RSZXN1bHQiLCJjb3VudF8xIiwicHJlZGljYXRlIiwiQ291bnRPcGVyYXRvciIsIkNvdW50U3Vic2NyaWJlciIsIl90cnlQcmVkaWNhdGUiLCJkZW1hdGVyaWFsaXplXzEiLCJkZW1hdGVyaWFsaXplIiwiRGVNYXRlcmlhbGl6ZU9wZXJhdG9yIiwiRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIiLCJkZWJvdW5jZV8xIiwiZGVib3VuY2UiLCJkdXJhdGlvblNlbGVjdG9yIiwiRGVib3VuY2VPcGVyYXRvciIsIkRlYm91bmNlU3Vic2NyaWJlciIsImR1cmF0aW9uU3Vic2NyaXB0aW9uIiwiZW1pdFZhbHVlIiwiZHVyYXRpb24iLCJkZWJvdW5jZVRpbWVfMSIsImRlYm91bmNlVGltZSIsIkRlYm91bmNlVGltZU9wZXJhdG9yIiwiZGVib3VuY2VkTmV4dCIsIkRlYm91bmNlVGltZVN1YnNjcmliZXIiLCJkZWJvdW5jZWRTdWJzY3JpcHRpb24iLCJsYXN0VmFsdWUiLCJjbGVhckRlYm91bmNlIiwiZGVmYXVsdElmRW1wdHlfMSIsImRlZmF1bHRJZkVtcHR5IiwiZGVmYXVsdFZhbHVlIiwiRGVmYXVsdElmRW1wdHlPcGVyYXRvciIsIkRlZmF1bHRJZkVtcHR5U3Vic2NyaWJlciIsImlzRW1wdHkiLCJkZWxheV8xIiwiYWJzb2x1dGVEZWxheSIsImRlbGF5Rm9yIiwiRGVsYXlPcGVyYXRvciIsIkRlbGF5U3Vic2NyaWJlciIsImVycm9yZWQiLCJzY2hlZHVsZU5vdGlmaWNhdGlvbiIsIkRlbGF5TWVzc2FnZSIsImRlbGF5V2hlbl8xIiwiZGVsYXlXaGVuIiwiZGVsYXlEdXJhdGlvblNlbGVjdG9yIiwic3Vic2NyaXB0aW9uRGVsYXkiLCJTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUiLCJEZWxheVdoZW5PcGVyYXRvciIsIkRlbGF5V2hlblN1YnNjcmliZXIiLCJkZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInRyeUNvbXBsZXRlIiwiZGVsYXlOb3RpZmllciIsInRyeURlbGF5Iiwic3Vic2NyaXB0aW9uSWR4Iiwibm90aWZpZXJTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIiLCJzb3VyY2VTdWJzY3JpYmVkIiwic3Vic2NyaWJlVG9Tb3VyY2UiLCJkaXN0aW5jdFVudGlsQ2hhbmdlZF8xIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJjb21wYXJlIiwia2V5U2VsZWN0b3IiLCJEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yIiwiRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyIiwiaGFzS2V5IiwieSIsIkJvb2xlYW4iLCJkb18xIiwiX2RvIiwiRG9PcGVyYXRvciIsIkRvU3Vic2NyaWJlciIsInNhZmVTdWJzY3JpYmVyIiwiZXhwYW5kXzEiLCJleHBhbmQiLCJFeHBhbmRPcGVyYXRvciIsIkV4cGFuZFN1YnNjcmliZXIiLCJzdWJzY3JpYmVUb1Byb2plY3Rpb24iLCJmaWx0ZXJfMSIsImZpbHRlciIsIkZpbHRlck9wZXJhdG9yIiwiRmlsdGVyU3Vic2NyaWJlciIsImZpbmFsbHlfMSIsIl9maW5hbGx5IiwiZmluYWxseVNlbGVjdG9yIiwiRmluYWxseU9wZXJhdG9yIiwiRmluYWxseVN1YnNjcmliZXIiLCJmaXJzdF8xIiwiZmlyc3QiLCJGaXJzdE9wZXJhdG9yIiwiRmlyc3RTdWJzY3JpYmVyIiwiX2VtaXQiLCJfdHJ5UmVzdWx0U2VsZWN0b3IiLCJfZW1pdEZpbmFsIiwiZ3JvdXBCeV8xIiwiZ3JvdXBCeSIsImVsZW1lbnRTZWxlY3RvciIsIkdyb3VwQnlPcGVyYXRvciIsIk1hcF8xIiwiRmFzdE1hcF8xIiwiR3JvdXBCeVN1YnNjcmliZXIiLCJncm91cHMiLCJhdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlIiwiX2dyb3VwIiwiRmFzdE1hcCIsImdyb3VwIiwiZ2V0Iiwic2V0IiwiZ3JvdXBlZE9ic2VydmFibGUiLCJHcm91cGVkT2JzZXJ2YWJsZSIsIl9zZWxlY3REdXJhdGlvbiIsIl9zZWxlY3RFbGVtZW50IiwidHJ5R3JvdXBOZXh0IiwiR3JvdXBEdXJhdGlvblN1YnNjcmliZXIiLCJjbGVhciIsInJlbW92ZUdyb3VwIiwidHJ5RXJyb3IiLCJncm91cFN1YmplY3QiLCJyZWZDb3VudFN1YnNjcmlwdGlvbiIsIklubmVyUmVmQ291bnRTdWJzY3JpcHRpb24iLCJNYXBQb2x5ZmlsbF8xIiwiTWFwUG9seWZpbGwiLCJzaXplIiwiX3ZhbHVlcyIsIl9rZXlzIiwiY2IiLCJpZ25vcmVFbGVtZW50c18xIiwiaWdub3JlRWxlbWVudHMiLCJJZ25vcmVFbGVtZW50c09wZXJhdG9yIiwiSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyIiwiYXVkaXRfMSIsImF1ZGl0IiwiQXVkaXRPcGVyYXRvciIsIkF1ZGl0U3Vic2NyaWJlciIsInRocm90dGxlZCIsImNsZWFyVGhyb3R0bGUiLCJhdWRpdFRpbWVfMSIsImF1ZGl0VGltZSIsIkF1ZGl0VGltZU9wZXJhdG9yIiwiQXVkaXRUaW1lU3Vic2NyaWJlciIsImxhc3RfMSIsIkxhc3RPcGVyYXRvciIsIkxhc3RTdWJzY3JpYmVyIiwibGV0XzEiLCJsZXQiLCJsZXRQcm90byIsImxldEJpbmQiLCJldmVyeV8xIiwiZXZlcnkiLCJFdmVyeU9wZXJhdG9yIiwiRXZlcnlTdWJzY3JpYmVyIiwiZXZlcnlWYWx1ZU1hdGNoIiwibWFwXzEiLCJNYXBPcGVyYXRvciIsIk1hcFN1YnNjcmliZXIiLCJtYXBUb18xIiwibWFwVG8iLCJNYXBUb09wZXJhdG9yIiwiTWFwVG9TdWJzY3JpYmVyIiwibWF0ZXJpYWxpemVfMSIsIm1hdGVyaWFsaXplIiwiTWF0ZXJpYWxpemVPcGVyYXRvciIsIk1hdGVyaWFsaXplU3Vic2NyaWJlciIsImZsYXRNYXAiLCJmbGF0TWFwVG8iLCJwYXJ0aXRpb25fMSIsInBhcnRpdGlvbiIsIm5vdF8xIiwibm90IiwicHJlZCIsIm5vdFByZWQiLCJwbHVja18xIiwicGx1Y2siLCJwcm9wZXJ0aWVzIiwicGx1Y2tlciIsInByb3BzIiwibWFwcGVyIiwiY3VycmVudFByb3AiLCJwdWJsaXNoXzEiLCJwdWJsaXNoIiwicHVibGlzaEJlaGF2aW9yXzEiLCJwdWJsaXNoQmVoYXZpb3IiLCJfdmFsdWUiLCJnZXRWYWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInB1Ymxpc2hMYXN0XzEiLCJwdWJsaXNoTGFzdCIsInJlZHVjZV8xIiwicmVkdWNlIiwic2VlZCIsIlJlZHVjZU9wZXJhdG9yIiwiUmVkdWNlU3Vic2NyaWJlciIsImFjYyIsImhhc1NlZWQiLCJfdHJ5UmVkdWNlIiwicmVwZWF0XzEiLCJyZXBlYXQiLCJSZXBlYXRPcGVyYXRvciIsIlJlcGVhdFN1YnNjcmliZXIiLCJyZXRyeV8xIiwicmV0cnkiLCJSZXRyeU9wZXJhdG9yIiwiUmV0cnlTdWJzY3JpYmVyIiwicmV0cnlXaGVuXzEiLCJyZXRyeVdoZW4iLCJub3RpZmllciIsIlJldHJ5V2hlbk9wZXJhdG9yIiwiUmV0cnlXaGVuU3Vic2NyaWJlciIsInJldHJpZXMiLCJyZXRyaWVzU3Vic2NyaXB0aW9uIiwic2FtcGxlXzEiLCJzYW1wbGUiLCJTYW1wbGVPcGVyYXRvciIsIlNhbXBsZVN1YnNjcmliZXIiLCJzYW1wbGVUaW1lXzEiLCJzYW1wbGVUaW1lIiwiU2FtcGxlVGltZU9wZXJhdG9yIiwiZGlzcGF0Y2hOb3RpZmljYXRpb24iLCJTYW1wbGVUaW1lU3Vic2NyaWJlciIsInNjYW5fMSIsInNjYW4iLCJhY2N1bXVsYXRvciIsIlNjYW5PcGVyYXRvciIsIlNjYW5TdWJzY3JpYmVyIiwiYWNjdW11bGF0b3JTZXQiLCJfc2VlZCIsInNoYXJlXzEiLCJzaGFyZSIsInNoYXJlU3ViamVjdEZhY3RvcnkiLCJzaW5nbGVfMSIsInNpbmdsZSIsIlNpbmdsZU9wZXJhdG9yIiwiU2luZ2xlU3Vic2NyaWJlciIsInNlZW5WYWx1ZSIsImFwcGx5U2luZ2xlVmFsdWUiLCJzaW5nbGVWYWx1ZSIsInRyeU5leHQiLCJza2lwXzEiLCJza2lwIiwiU2tpcE9wZXJhdG9yIiwiU2tpcFN1YnNjcmliZXIiLCJza2lwVW50aWxfMSIsInNraXBVbnRpbCIsIlNraXBVbnRpbE9wZXJhdG9yIiwiU2tpcFVudGlsU3Vic2NyaWJlciIsImlzSW5uZXJTdG9wcGVkIiwic2tpcFdoaWxlXzEiLCJza2lwV2hpbGUiLCJTa2lwV2hpbGVPcGVyYXRvciIsIlNraXBXaGlsZVN1YnNjcmliZXIiLCJza2lwcGluZyIsInRyeUNhbGxQcmVkaWNhdGUiLCJzdGFydFdpdGhfMSIsInN0YXJ0V2l0aCIsInN1YnNjcmliZU9uXzEiLCJzdWJzY3JpYmVPbiIsIlN1YnNjcmliZU9uT2JzZXJ2YWJsZV8xIiwiU3Vic2NyaWJlT25PYnNlcnZhYmxlIiwiZGVsYXlUaW1lIiwiQXNhcFNjaGVkdWxlcl8xIiwiQXNhcFNjaGVkdWxlciIsIkFzYXBBY3Rpb25fMSIsIkFzYXBBY3Rpb24iLCJJbW1lZGlhdGVfMSIsIkltbWVkaWF0ZSIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiSW1tZWRpYXRlRGVmaW5pdGlvbiIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiY2FuVXNlUHJvY2Vzc05leHRUaWNrIiwiY3JlYXRlUHJvY2Vzc05leHRUaWNrU2V0SW1tZWRpYXRlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJjcmVhdGVQb3N0TWVzc2FnZVNldEltbWVkaWF0ZSIsImNhblVzZU1lc3NhZ2VDaGFubmVsIiwiY3JlYXRlTWVzc2FnZUNoYW5uZWxTZXRJbW1lZGlhdGUiLCJjYW5Vc2VSZWFkeVN0YXRlQ2hhbmdlIiwiY3JlYXRlUmVhZHlTdGF0ZUNoYW5nZVNldEltbWVkaWF0ZSIsImNyZWF0ZVNldFRpbWVvdXRTZXRJbW1lZGlhdGUiLCJjaSIsImhhbmRsZSIsImluc3RhbmNlIiwiaWRlbnRpZnkiLCJwcm9jZXNzIiwiTWVzc2FnZUNoYW5uZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzXzEiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJwYXJ0aWFsbHlBcHBsaWVkIiwiRnVuY3Rpb24iLCJhZGRGcm9tU2V0SW1tZWRpYXRlQXJndW1lbnRzIiwibmV4dFRpY2siLCJydW5JZlByZXNlbnQiLCJtZXNzYWdlUHJlZml4IiwicmFuZG9tIiwib25HbG9iYWxNZXNzYWdlIiwiZ2xvYmFsTWVzc2FnZUhhbmRsZXIiLCJldmVudCIsImRhdGEiLCJ0YXNrIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJkb2MiLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJpbW1lZGlhdGVJZHMiLCJuZXh0SW1tZWRpYXRlSWQiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJzd2l0Y2hfMSIsIl9zd2l0Y2giLCJTd2l0Y2hPcGVyYXRvciIsIlN3aXRjaFN1YnNjcmliZXIiLCJ1bnN1YnNjcmliZUlubmVyIiwic3dpdGNoTWFwXzEiLCJzd2l0Y2hNYXAiLCJTd2l0Y2hNYXBPcGVyYXRvciIsIlN3aXRjaE1hcFN1YnNjcmliZXIiLCJfdHJ5Tm90aWZ5TmV4dCIsInN3aXRjaE1hcFRvXzEiLCJzd2l0Y2hNYXBUbyIsIlN3aXRjaE1hcFRvT3BlcmF0b3IiLCJTd2l0Y2hNYXBUb1N1YnNjcmliZXIiLCJpbm5lciIsInRyeVJlc3VsdFNlbGVjdG9yIiwidGFrZV8xIiwidGFrZSIsIlRha2VPcGVyYXRvciIsIlRha2VTdWJzY3JpYmVyIiwidGFrZUxhc3RfMSIsInRha2VMYXN0IiwiVGFrZUxhc3RPcGVyYXRvciIsIlRha2VMYXN0U3Vic2NyaWJlciIsInJpbmciLCJ0YWtlVW50aWxfMSIsInRha2VVbnRpbCIsIlRha2VVbnRpbE9wZXJhdG9yIiwiVGFrZVVudGlsU3Vic2NyaWJlciIsInRha2VXaGlsZV8xIiwidGFrZVdoaWxlIiwiVGFrZVdoaWxlT3BlcmF0b3IiLCJUYWtlV2hpbGVTdWJzY3JpYmVyIiwibmV4dE9yQ29tcGxldGUiLCJwcmVkaWNhdGVSZXN1bHQiLCJ0aHJvdHRsZV8xIiwidGhyb3R0bGUiLCJUaHJvdHRsZU9wZXJhdG9yIiwiVGhyb3R0bGVTdWJzY3JpYmVyIiwidHJ5RHVyYXRpb25TZWxlY3RvciIsImVtaXRBbmRUaHJvdHRsZSIsInRocm90dGxlVGltZV8xIiwidGhyb3R0bGVUaW1lIiwiVGhyb3R0bGVUaW1lT3BlcmF0b3IiLCJUaHJvdHRsZVRpbWVTdWJzY3JpYmVyIiwidGltZW91dF8xIiwiZHVlIiwiZXJyb3JUb1NlbmQiLCJhYnNvbHV0ZVRpbWVvdXQiLCJ3YWl0Rm9yIiwiVGltZW91dE9wZXJhdG9yIiwiVGltZW91dFN1YnNjcmliZXIiLCJfcHJldmlvdXNJbmRleCIsIl9oYXNDb21wbGV0ZWQiLCJzY2hlZHVsZVRpbWVvdXQiLCJkaXNwYXRjaFRpbWVvdXQiLCJjdXJyZW50SW5kZXgiLCJwcmV2aW91c0luZGV4Iiwibm90aWZ5VGltZW91dCIsInRpbWVvdXRXaXRoXzEiLCJ0aW1lb3V0V2l0aCIsIndpdGhPYnNlcnZhYmxlIiwiVGltZW91dFdpdGhPcGVyYXRvciIsIlRpbWVvdXRXaXRoU3Vic2NyaWJlciIsInRpbWVvdXRTdWJzY3JpcHRpb24iLCJoYW5kbGVUaW1lb3V0IiwidGltZW91dFN0YXRlIiwidG9BcnJheV8xIiwidG9BcnJheSIsIlRvQXJyYXlPcGVyYXRvciIsIlRvQXJyYXlTdWJzY3JpYmVyIiwidG9Qcm9taXNlXzEiLCJ0b1Byb21pc2UiLCJ3aW5kb3dfMSIsIndpbmRvd0JvdW5kYXJpZXMiLCJXaW5kb3dPcGVyYXRvciIsIldpbmRvd1N1YnNjcmliZXIiLCJvcGVuV2luZG93IiwicHJldldpbmRvdyIsIm5ld1dpbmRvdyIsIndpbmRvd0NvdW50XzEiLCJ3aW5kb3dDb3VudCIsIndpbmRvd1NpemUiLCJzdGFydFdpbmRvd0V2ZXJ5IiwiV2luZG93Q291bnRPcGVyYXRvciIsIldpbmRvd0NvdW50U3Vic2NyaWJlciIsIndpbmRvd3MiLCJmaXJzdFdpbmRvdyIsImMiLCJ3aW5kb3dUaW1lXzEiLCJ3aW5kb3dUaW1lU3BhbiIsIndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwiLCJXaW5kb3dUaW1lT3BlcmF0b3IiLCJkaXNwYXRjaFdpbmRvd1RpbWVTcGFuT25seSIsImRpc3BhdGNoV2luZG93Q3JlYXRpb24iLCJ0aW1lU3BhblN0YXRlIiwiZGlzcGF0Y2hXaW5kb3dDbG9zZSIsImNsb3NlV2luZG93IiwiV2luZG93VGltZVN1YnNjcmliZXIiLCJ3aW5kb3dfMiIsIndpbmRvd18zIiwid2luZG93XzQiLCJ3aW5kb3dUb2dnbGVfMSIsIndpbmRvd1RvZ2dsZSIsIldpbmRvd1RvZ2dsZU9wZXJhdG9yIiwiV2luZG93VG9nZ2xlU3Vic2NyaWJlciIsIm9wZW5TdWJzY3JpcHRpb24iLCJ3aW5kb3dXaGVuXzEiLCJ3aW5kb3dXaGVuIiwidW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uIiwiY2xvc2luZ05vdGlmaWNhdGlvbiIsIndpdGhMYXRlc3RGcm9tXzEiLCJ3aXRoTGF0ZXN0RnJvbSIsIldpdGhMYXRlc3RGcm9tT3BlcmF0b3IiLCJXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIiLCJ6aXBBbGxfMSIsInppcEFsbCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsInIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX21ldGFkYXRhIiwiayIsInYiLCJtZXRhZGF0YSIsIm5hdl8xIiwicHJvamVjdHNfMSIsInByb2plY3RfMSIsInRhc2tzXzEiLCJ0YXNrXzEiLCJ1c2VyX3Byb2ZpbGVfMSIsImxvZ2luXzEiLCJ1c2VyXzEiLCJyb3V0ZXIiLCJhcHBTZXJ2aWNlIiwicmVmZXJlbmNlU2VydmljZSIsInN0YWZmU2VydmljZSIsIkhFQURFUl9USVRMRSIsInJlc2l6ZSIsIm9uUmVzaXplIiwiaXNNb2JpbGVEZXZpY2UiLCJpc05hdkNvbGxhcHNlZCIsImlzU2VhcmNoT3BlbiIsIm5nT25Jbml0IiwibG9nZ2VkVXNlciIsIlVzZXIiLCJpc01vYmlsZSIsImdldFRyYW5zbGF0aW9ucyIsImNhcHRpb25zIiwibG9nIiwibmF2aWdhdGUiLCJ0b2dnbGVOYXYiLCJoaWRlTmF2IiwicHJldmVudERlZmF1bHQiLCJzZWFyY2hUb2dnbGUiLCJsb2dvdXQiLCJsb2NhdGlvbiIsImhyZWYiLCJnb0JhY2siLCJoaXN0b3J5IiwiYmFjayIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbm5lcldpZHRoIiwiSG9zdExpc3RlbmVyIiwiSG9zdEJpbmRpbmciLCJDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsImRpcmVjdGl2ZXMiLCJOYXZDb21wb25lbnQiLCJSb3V0ZXMiLCJwYXRoIiwiY29tcG9uZW50IiwiVGFza3NDb21wb25lbnQiLCJUYXNrQ29tcG9uZW50IiwiUHJvamVjdENvbXBvbmVudCIsIlByb2plY3RzQ29tcG9uZW50IiwiVXNlclByb2ZpbGVDb21wb25lbnQiLCJMb2dpbkNvbXBvbmVudCIsIlJvdXRlciIsImh0dHAiLCJoZWFkZXIiLCJoZWFkZXJzIiwiSGVhZGVycyIsIkFjY2VwdCIsInVybCIsInJlc3BvbnNlIiwianNvbiIsImdldE5hdiIsImdldFVzZXJzIiwib2JqZWN0cyIsImxpc3QiLCJ1cGRhdGVVc2VyUHJvZmlsZSIsInVzZXIiLCJJbmplY3RhYmxlIiwiSHR0cCIsImdldFRhZ3MiLCJnZXRUYXNrVHlwZXMiLCJnZXRPcmdhbml6YXRpb25zIiwiX05vdHkiLCJ0eXBlIiwidmlzaWJsZSIsIm5vdGlmeUxpc3QiLCJwcm9qZWN0U2VydmljZSIsImdldFByb2plY3RzIiwicHJvamVjdHMiLCJlcnJvclJlc3BvbnNlIiwiaGFuZGxlWGhyRXJyb3IiLCJjb21wb3NlUmVjb3JkIiwiZGVsZXRlUHJvamVjdCIsInNlbGVjdGVkUHJvamVjdHMiLCJzdGF0dXMiLCJwaXBlcyIsIkRhdGVQaXBlIiwib2JqX3V0aWxzXzEiLCJWSUVXX1VSTCIsIkZPUk1fVVJMIiwiSEVBREVSIiwiQ29udGVudC1UeXBlIiwiZ2V0UHJvamVjdEJ5SWQiLCJwcm9qZWN0SWQiLCJzYXZlUHJvamVjdCIsInBvc3QiLCJzZXJpYWxpemVQcm9qZWN0Iiwic2VyaWFsaXplT2JqIiwiY3VzdG9tZXIiLCJtYW5hZ2VyIiwicHJvZ3JhbW1lciIsInRlc3RlciIsImNvbW1lbnQiLCJmaW5pc2hfZGF0ZSIsImZpbmlzaERhdGUiLCJhdHRhY2htZW50cyIsIml0IiwicHJvcGVydHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyb3V0ZVNlZ21lbnQiLCJmb3JtQnVpbGRlciIsInN0YXR1c09wdGlvbnMiLCJQcm9qZWN0U3RhdHVzVHlwZSIsImZvcm0iLCJWYWxpZGF0b3JzIiwicmVxdWlyZWQiLCJnZXRQYXJhbSIsIlByb2plY3QiLCJvcmdzIiwiY3VzdG9tZXJzIiwidXNlcnMiLCJGT1JNX0RJUkVDVElWRVMiLCJwcm92aWRlcnMiLCJGb3JtQnVpbGRlciIsIlJvdXRlU2VnbWVudCIsInRhc2tTZXJ2aWNlIiwiZ2V0VGFza3MiLCJ0YXNrcyIsImRlbGV0ZVRhc2siLCJhdCIsImdldFRhc2tCeUlkIiwidGFza0lkIiwic2F2ZVRhc2siLCJzZXJpYWxpemVUYXNrIiwicHJpb3JpdHkiLCJib2R5IiwiYXNzaWduZWUiLCJzdGFydF9kYXRlIiwic3RhcnREYXRlIiwiZHVlX2RhdGUiLCJkdWVEYXRlIiwidGFncyIsIlRhc2siLCJyZXNwIiwiVGFza1ByaW9yaXR5VHlwZSIsIlRhc2tTdGF0dXNUeXBlIiwidGFic18xIiwidGFiXzEiLCJsb2dpbiIsInB3ZCIsInB3ZF9jb25maXJtIiwiZW1haWwiLCJUYWJzIiwiVGFiIiwibmdBZnRlckNvbnRlbnRJbml0IiwiYWN0aXZlVGFicyIsInRhYnMiLCJ0YWIiLCJzZWxlY3RUYWIiLCJDb250ZW50Q2hpbGRyZW4iLCJRdWVyeUxpc3QiLCJJbnB1dCIsIlN0cmluZyIsInN0eWxlcyIsInVzZXJfbmFtZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsSUFFUixTQUFTQyxPQUFRQyxRQUFTQyxxQkFFL0IsWUNKRCxJQUFBQyw0QkFBQUQsb0JBQTBCLEdBQzFCRSxPQUFBRixvQkFBbUUsR0FDbkVHLE9BQUFILG9CQUE0RSxHQUM1RUksU0FBQUosb0JBQW9ELEdBQ3BESyxTQUFBTCxvQkFBdUUsRUFDdkVBLHFCQUFPLEVBRVAsSUFBQU0sT0FBQU4sb0JBQW9CLEtBQ3BCTyxZQUFBUCxvQkFBa0MsS0FDbENRLGNBQUFSLG9CQUEyQixLQUMzQlMsZUFBQVQsb0JBQTRCLEtBQzVCVSxrQkFBQVYsb0JBQStCLEtBQy9CVyxvQkFBQVgsb0JBQWlDLEtBQ2pDWSxnQkFBQVosb0JBQTZCLElBSXpCRSxRQUFBVyxpQkFHSlosMkJBQUFhLFVBQVVSLE1BQUFTLEtBQ05aLE9BQUFhLGVBQ0FaLFNBQUFhLGtCQUNBYixTQUFBYyxpQkFDQWhCLE9BQUFpQixRQUFRakIsT0FBQWtCLHFCQUF1QkMsU0FBVWpCLFNBQUFhLGtCQUFtQkssT0FBTyxJQUNuRXBCLE9BQUFpQixRQUFRZCxTQUFBa0Isa0JBQW9CQyxTQUFVbkIsU0FBQW9CLHVCQUN0Q3BCLFNBQUFxQixlQUNBbkIsWUFBQW9CLGtCQUNBbkIsY0FBQW9CLFdBQ0FuQixlQUFBb0IsWUFDQW5CLGtCQUFBb0IsZUFDQW5CLG9CQUFBb0IsaUJBQ0FuQixnQkFBQW9CLGVBWkovQixTQWFTLFNBQUFnQyxLQUFPLE1BQUFDLFNBQVFDLE1BQU1GLFFES3ZCLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FFRCxTQUFTbkMsT0FBUUMsUUFBU0MscUJFNUNoQyxZQUtBLElBQUFvQyxXQUFBcEMsb0JBQUEsRUFDQUQsU0FBQXNDLFFBQUFELFVBQUFDLE9BRUEsSUFBQUMsY0FBQXRDLG9CQUFBLEVBQ0FELFNBQUF3QyxXQUFBRCxhQUFBQyxXQUdBdkMsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsSUFDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FFQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEsS0FDQUEsb0JBQUEs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QUt3dkIsVUFDcEgsS0FBSyxHQUFJLzBCLEdBQUk4MEIsV0FBV3A2QixPQUFTLEVBQUdzRixHQUFLLEVBQUdBLEtBQVN0SSxFQUFJbzlCLFdBQVc5MEIsTUFBSWcxQixHQUFTLEVBQUpoQyxFQUFRdDdCLEVBQUVzOUIsR0FBS2hDLEVBQUksRUFBSXQ3QixFQUFFd1UsT0FBUTNHLElBQUt5dkIsR0FBS3Q5QixFQUFFd1UsT0FBUTNHLE9BQVN5dkIsRUFDaEosT0FBT2hDLEdBQUksR0FBS2dDLEdBQUsvOEIsT0FBT2dzQixlQUFlL1gsT0FBUTNHLElBQUt5dkIsR0FBSUEsR0FFNURJLFdBQWMzOUIsTUFBUUEsS0FBSzI5QixZQUFlLFNBQVVDLEVBQUdDLEdBQ3ZELE1BQXVCLGdCQUFaSixVQUFvRCxrQkFBckJBLFNBQVFLLFNBQWdDTCxRQUFRSyxTQUFTRixFQUFHQyxHQUF0RyxRbVRydGVMM2lDLE9BQUFGLG9CQUEwQixHQU8xQnFtQyxlQUFBLFdBQ0ksUUFBQUEsa0JBQ0luOEIsT0FBTzQ2QixTQUFTQyxLQUFPLFNBRS9CLE1BVEFzQixnQkFBQWpFLFlBQUNsaUMsT0FBQXVsQyxXQUNHLzJCLFNBQVUsVUFDVmczQixTQUFVLFVuVDZ0ZUwvQyxXQUFXLHlCQUNaMEQsa0JtVDN0ZUt0bUMsU0FBQXNtQyxlQUFjQSxnQm5UbXVlckIsU0FBU3ZtQyxPQUFRQyxTb1QxdWV2QkQsT0FBQUMsUUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzBdLFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgcGxhdGZvcm1fYnJvd3Nlcl9keW5hbWljXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGh0dHBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciByb3V0ZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBjb21tb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdHZhciBhcHBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg3KTtcblx0dmFyIG5iX25vdGlmeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTEpO1xuXHR2YXIgYXBwX3NlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg4KTtcblx0dmFyIHRhc2tfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDIpO1xuXHR2YXIgcHJvamVjdF9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5NSk7XG5cdHZhciByZWZlcmVuY2Vfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODkpO1xuXHR2YXIgc3RhZmZfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTApO1xuXHRpZiAodHJ1ZSkge1xuXHQgICAgY29yZV8xLmVuYWJsZVByb2RNb2RlKCk7XG5cdH1cblx0cGxhdGZvcm1fYnJvd3Nlcl9keW5hbWljXzEuYm9vdHN0cmFwKGFwcF8xLkFwcCwgW1xuXHQgICAgaHR0cF8xLkhUVFBfUFJPVklERVJTLFxuXHQgICAgcm91dGVyXzEuUk9VVEVSX0RJUkVDVElWRVMsXG5cdCAgICByb3V0ZXJfMS5ST1VURVJfUFJPVklERVJTLFxuXHQgICAgY29yZV8xLnByb3ZpZGUoY29yZV8xLlBMQVRGT1JNX0RJUkVDVElWRVMsIHsgdXNlVmFsdWU6IHJvdXRlcl8xLlJPVVRFUl9ESVJFQ1RJVkVTLCBtdWx0aTogdHJ1ZSB9KSxcblx0ICAgIGNvcmVfMS5wcm92aWRlKGNvbW1vbl8xLkxvY2F0aW9uU3RyYXRlZ3ksIHsgdXNlQ2xhc3M6IGNvbW1vbl8xLkhhc2hMb2NhdGlvblN0cmF0ZWd5IH0pLFxuXHQgICAgY29tbW9uXzEuRk9STV9QUk9WSURFUlMsXG5cdCAgICBuYl9ub3RpZnlfMS5OQk5vdGlmeUNvbXBvbmVudCxcblx0ICAgIGFwcF9zZXJ2aWNlXzEuQXBwU2VydmljZSxcblx0ICAgIHRhc2tfc2VydmljZV8xLlRhc2tTZXJ2aWNlLFxuXHQgICAgcHJvamVjdF9zZXJ2aWNlXzEuUHJvamVjdFNlcnZpY2UsXG5cdCAgICByZWZlcmVuY2Vfc2VydmljZV8xLlJlZmVyZW5jZVNlcnZpY2UsXG5cdCAgICBzdGFmZl9zZXJ2aWNlXzEuU3RhZmZTZXJ2aWNlXG5cdF0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTsgfSk7XG5cblxuLyoqKi8gfSxcbi8qIDEgKi8sXG4vKiAyICovLFxuLyogMyAqLyxcbi8qIDQgKi8sXG4vKiA1ICovLFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdC8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuXHQvLyBTdWJqZWN0IGltcG9ydGVkIGJlZm9yZSBPYnNlcnZhYmxlIHRvIGJ5cGFzcyBjaXJjdWxhciBkZXBlbmRlbmN5IGlzc3VlIHNpbmNlXG5cdC8vIFN1YmplY3QgZXh0ZW5kcyBPYnNlcnZhYmxlIGFuZCBPYnNlcnZhYmxlIHJlZmVyZW5jZXMgU3ViamVjdCBpbiBpdCdzXG5cdC8vIGRlZmluaXRpb25cblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdGV4cG9ydHMuU3ViamVjdCA9IFN1YmplY3RfMS5TdWJqZWN0O1xuXHQvKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0ZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGU7XG5cdC8vIHN0YXRpY3Ncblx0LyogdHNsaW50OmRpc2FibGU6bm8tdXNlLWJlZm9yZS1kZWNsYXJlICovXG5cdF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1Mik7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjgpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4Nyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oODkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oOTgpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTA1KTtcblx0Ly9vcGVyYXRvcnNcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTEyKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMTQpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTE4KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMjUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTI5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMzApO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTMzKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMzYpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTQxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNDMpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTQ3KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNDkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE1MSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTUzKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNTUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Nyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTU5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNjEpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTY2KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNzEpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTc1KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNzcpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTgxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxODMpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTg3KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxODkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTkxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxOTIpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE5Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTk0KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxOTUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE5OCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjAwKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMDIpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjA2KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMDgpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjExKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMTMpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjE3KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMTkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjIzKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMjUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjI5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMzEpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIzMyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjM1KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNDQpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI0Nik7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjQ4KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNTApO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI1Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjU1KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNTcpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI1OSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjYxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNjMpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI2NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjY3KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNjkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjczKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNzUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI3Nyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjc5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyODEpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI4Myk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjg0KTtcblx0LyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5cdHZhciBPcGVyYXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODYpO1xuXHRleHBvcnRzLk9wZXJhdG9yID0gT3BlcmF0b3JfMS5PcGVyYXRvcjtcblx0dmFyIFN1YnNjcmlwdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdGV4cG9ydHMuU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdGV4cG9ydHMuU3Vic2NyaWJlciA9IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyO1xuXHR2YXIgQXN5bmNTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0ZXhwb3J0cy5Bc3luY1N1YmplY3QgPSBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3Q7XG5cdHZhciBSZXBsYXlTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSk7XG5cdGV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IFJlcGxheVN1YmplY3RfMS5SZXBsYXlTdWJqZWN0O1xuXHR2YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNCk7XG5cdGV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gQmVoYXZpb3JTdWJqZWN0XzEuQmVoYXZpb3JTdWJqZWN0O1xuXHR2YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cdGV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEuQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xuXHR2YXIgTm90aWZpY2F0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KTtcblx0ZXhwb3J0cy5Ob3RpZmljYXRpb24gPSBOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb247XG5cdHZhciBFbXB0eUVycm9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NSk7XG5cdGV4cG9ydHMuRW1wdHlFcnJvciA9IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yO1xuXHR2YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUyKTtcblx0ZXhwb3J0cy5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG5cdHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdGV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yO1xuXHR2YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdGV4cG9ydHMuVW5zdWJzY3JpcHRpb25FcnJvciA9IFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yO1xuXHR2YXIgYXNhcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzgpO1xuXHR2YXIgYXN5bmNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xuXHR2YXIgcXVldWVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIyKTtcblx0dmFyIHJ4U3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdHZhciBpdGVyYXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdHZhciBvYnNlcnZhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdC8qIHRzbGludDplbmFibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5cdC8qKlxuXHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBSeC5TY2hlZHVsZXJcblx0ICogQHByb3BlcnR5IHtTY2hlZHVsZXJ9IHF1ZXVlIFNjaGVkdWxlcyBvbiBhIHF1ZXVlIGluIHRoZSBjdXJyZW50IGV2ZW50IGZyYW1lXG5cdCAqICh0cmFtcG9saW5lIHNjaGVkdWxlcikuIFVzZSB0aGlzIGZvciBpdGVyYXRpb24gb3BlcmF0aW9ucy5cblx0ICogQHByb3BlcnR5IHtTY2hlZHVsZXJ9IGFzYXAgU2NoZWR1bGVzIG9uIHRoZSBtaWNybyB0YXNrIHF1ZXVlLCB3aGljaCB1c2VzIHRoZVxuXHQgKiBmYXN0ZXN0IHRyYW5zcG9ydCBtZWNoYW5pc20gYXZhaWxhYmxlLCBlaXRoZXIgTm9kZS5qcycgYHByb2Nlc3MubmV4dFRpY2soKWBcblx0ICogb3IgV2ViIFdvcmtlciBNZXNzYWdlQ2hhbm5lbCBvciBzZXRUaW1lb3V0IG9yIG90aGVycy4gVXNlIHRoaXMgZm9yXG5cdCAqIGFzeW5jaHJvbm91cyBjb252ZXJzaW9ucy5cblx0ICogQHByb3BlcnR5IHtTY2hlZHVsZXJ9IGFzeW5jIFNjaGVkdWxlcyB3b3JrIHdpdGggYHNldEludGVydmFsYC4gVXNlIHRoaXMgZm9yXG5cdCAqIHRpbWUtYmFzZWQgb3BlcmF0aW9ucy5cblx0ICovXG5cdHZhciBTY2hlZHVsZXIgPSB7XG5cdCAgICBhc2FwOiBhc2FwXzEuYXNhcCxcblx0ICAgIGFzeW5jOiBhc3luY18xLmFzeW5jLFxuXHQgICAgcXVldWU6IHF1ZXVlXzEucXVldWVcblx0fTtcblx0ZXhwb3J0cy5TY2hlZHVsZXIgPSBTY2hlZHVsZXI7XG5cdC8qKlxuXHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBSeC5TeW1ib2xcblx0ICogQHByb3BlcnR5IHtTeW1ib2x8c3RyaW5nfSByeFN1YnNjcmliZXIgQSBzeW1ib2wgdG8gdXNlIGFzIGEgcHJvcGVydHkgbmFtZSB0b1xuXHQgKiByZXRyaWV2ZSBhbiBcIlJ4IHNhZmVcIiBPYnNlcnZlciBmcm9tIGFuIG9iamVjdC4gXCJSeCBzYWZldHlcIiBjYW4gYmUgZGVmaW5lZCBhc1xuXHQgKiBhbiBvYmplY3QgdGhhdCBoYXMgYWxsIG9mIHRoZSB0cmFpdHMgb2YgYW4gUnggU3Vic2NyaWJlciwgaW5jbHVkaW5nIHRoZVxuXHQgKiBhYmlsaXR5IHRvIGFkZCBhbmQgcmVtb3ZlIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHN1YnNjcmlwdGlvbiBjaGFpbiBhbmRcblx0ICogZ3VhcmFudGVlcyBpbnZvbHZpbmcgZXZlbnQgdHJpZ2dlcmluZyAoY2FuJ3QgXCJuZXh0XCIgYWZ0ZXIgdW5zdWJzY3JpcHRpb24sXG5cdCAqIGV0YykuXG5cdCAqIEBwcm9wZXJ0eSB7U3ltYm9sfHN0cmluZ30gb2JzZXJ2YWJsZSBBIHN5bWJvbCB0byB1c2UgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvXG5cdCAqIHJldHJpZXZlIGFuIE9ic2VydmFibGUgYXMgZGVmaW5lZCBieSB0aGUgW0VDTUFTY3JpcHQgXCJPYnNlcnZhYmxlXCIgc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZSkuXG5cdCAqIEBwcm9wZXJ0eSB7U3ltYm9sfHN0cmluZ30gaXRlcmF0b3IgVGhlIEVTNiBzeW1ib2wgdG8gdXNlIGFzIGEgcHJvcGVydHkgbmFtZVxuXHQgKiB0byByZXRyaWV2ZSBhbiBpdGVyYXRvciBmcm9tIGFuIG9iamVjdC5cblx0ICovXG5cdHZhciBTeW1ib2wgPSB7XG5cdCAgICByeFN1YnNjcmliZXI6IHJ4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyLFxuXHQgICAgb2JzZXJ2YWJsZTogb2JzZXJ2YWJsZSxcblx0ICAgIGl0ZXJhdG9yOiBpdGVyYXRvcl8xLiQkaXRlcmF0b3Jcblx0fTtcblx0ZXhwb3J0cy5TeW1ib2wgPSBTeW1ib2w7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ4LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBTdWJzY3JpcHRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHR2YXIgU3ViamVjdFN1YnNjcmlwdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cdHZhciByeFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHR2YXIgdGhyb3dFcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdC8qKlxuXHQgKiBAY2xhc3MgU3ViamVjdDxUPlxuXHQgKi9cblx0dmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcblx0ICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmhhc0Vycm9yZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmRpc3BhdGNoaW5nID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcblx0ICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBTdWJqZWN0KHRoaXMuZGVzdGluYXRpb24gfHwgdGhpcywgdGhpcyk7XG5cdCAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuXHQgICAgICAgIHJldHVybiBzdWJqZWN0O1xuXHQgICAgfTtcblx0ICAgIFN1YmplY3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBzdWJzY3JpcHRpb24pO1xuXHQgICAgfTtcblx0ICAgIFN1YmplY3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMsIHN1YnNjcmlwdGlvbik7XG5cdCAgICB9O1xuXHQgICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuXHQgICAgfTtcblx0ICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmhhc0Vycm9yZWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmVycm9yKHRoaXMuZXJyb3JWYWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy50aHJvd0lmVW5zdWJzY3JpYmVkKCk7XG5cdCAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbl8xLlN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG5cdCAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG5cdCAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFN1YmplY3QucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy50aHJvd0lmVW5zdWJzY3JpYmVkKCk7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5kaXNwYXRjaGluZyA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgdGhpcy5kaXNwYXRjaGluZyA9IGZhbHNlO1xuXHQgICAgICAgIGlmICh0aGlzLmhhc0Vycm9yZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXJyb3IodGhpcy5lcnJvclZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy50aHJvd0lmVW5zdWJzY3JpYmVkKCk7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuaGFzRXJyb3JlZCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5lcnJvclZhbHVlID0gZXJyO1xuXHQgICAgICAgIGlmICh0aGlzLmRpc3BhdGNoaW5nKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnRocm93SWZVbnN1YnNjcmliZWQoKTtcblx0ICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuXHQgICAgICAgIGlmICh0aGlzLmRpc3BhdGNoaW5nKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgU3ViamVjdE9ic2VydmFibGUodGhpcyk7XG5cdCAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG5cdCAgICB9O1xuXHQgICAgU3ViamVjdC5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fZmluYWxOZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU3ViamVjdC5wcm90b3R5cGUuX2ZpbmFsTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5zbGljZSgwKTtcblx0ICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb24pIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fZmluYWxFcnJvcihlcnIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5fZmluYWxFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSAtMTtcblx0ICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG5cdCAgICAgICAgLy8gb3B0aW1pemF0aW9uIHRvIGJsb2NrIG91ciBTdWJqZWN0U3Vic2NyaXB0aW9ucyBmcm9tXG5cdCAgICAgICAgLy8gc3BsaWNpbmcgdGhlbXNlbHZlcyBvdXQgb2YgdGhlIG9ic2VydmVycyBsaXN0IG9uZSBieSBvbmUuXG5cdCAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuXHQgICAgICAgIGlmIChvYnNlcnZlcnMpIHtcblx0ICAgICAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG5cdCAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG5cdCAgICAgICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb24pIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fZmluYWxDb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS5fZmluYWxDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSAtMTtcblx0ICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG5cdCAgICAgICAgLy8gb3B0aW1pemF0aW9uIHRvIGJsb2NrIG91ciBTdWJqZWN0U3Vic2NyaXB0aW9ucyBmcm9tXG5cdCAgICAgICAgLy8gc3BsaWNpbmcgdGhlbXNlbHZlcyBvdXQgb2YgdGhlIG9ic2VydmVycyBsaXN0IG9uZSBieSBvbmUuXG5cdCAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuXHQgICAgICAgIGlmIChvYnNlcnZlcnMpIHtcblx0ICAgICAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG5cdCAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG5cdCAgICAgICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZS50aHJvd0lmVW5zdWJzY3JpYmVkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LnByb3RvdHlwZVtyeFN1YnNjcmliZXJfMS4kJHJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcih0aGlzKTtcblx0ICAgIH07XG5cdCAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdWJqZWN0O1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuU3ViamVjdCA9IFN1YmplY3Q7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFN1YmplY3RPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTdWJqZWN0T2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFN1YmplY3RPYnNlcnZhYmxlKHNvdXJjZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFN1YmplY3RPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciB0b1N1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHR2YXIgJCRvYnNlcnZhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdC8qKlxuXHQgKiBBIHJlcHJlc2VudGF0aW9uIG9mIGFueSBzZXQgb2YgdmFsdWVzIG92ZXIgYW55IGFtb3VudCBvZiB0aW1lLiBUaGlzIHRoZSBtb3N0IGJhc2ljIGJ1aWxkaW5nIGJsb2NrXG5cdCAqIG9mIFJ4SlMuXG5cdCAqXG5cdCAqIEBjbGFzcyBPYnNlcnZhYmxlPFQ+XG5cdCAqL1xuXHR2YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBjb25zdHJ1Y3RvclxuXHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3Vic2NyaWJlIHRoZSBmdW5jdGlvbiB0aGF0IGlzICBjYWxsZWQgd2hlbiB0aGUgT2JzZXJ2YWJsZSBpc1xuXHQgICAgICogaW5pdGlhbGx5IHN1YnNjcmliZWQgdG8uIFRoaXMgZnVuY3Rpb24gaXMgZ2l2ZW4gYSBTdWJzY3JpYmVyLCB0byB3aGljaCBuZXcgdmFsdWVzXG5cdCAgICAgKiBjYW4gYmUgYG5leHRgZWQsIG9yIGFuIGBlcnJvcmAgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmFpc2UgYW4gZXJyb3IsIG9yXG5cdCAgICAgKiBgY29tcGxldGVgIGNhbiBiZSBjYWxsZWQgdG8gbm90aWZ5IG9mIGEgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuXHQgICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGEgbmV3IE9ic2VydmFibGUsIHdpdGggdGhpcyBPYnNlcnZhYmxlIGFzIHRoZSBzb3VyY2UsIGFuZCB0aGUgcGFzc2VkXG5cdCAgICAgKiBvcGVyYXRvciBkZWZpbmVkIGFzIHRoZSBuZXcgb2JzZXJ2YWJsZSdzIG9wZXJhdG9yLlxuXHQgICAgICogQG1ldGhvZCBsaWZ0XG5cdCAgICAgKiBAcGFyYW0ge09wZXJhdG9yfSBvcGVyYXRvciB0aGUgb3BlcmF0b3IgZGVmaW5pbmcgdGhlIG9wZXJhdGlvbiB0byB0YWtlIG9uIHRoZSBvYnNlcnZhYmxlXG5cdCAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhIG5ldyBvYnNlcnZhYmxlIHdpdGggdGhlIE9wZXJhdG9yIGFwcGxpZWRcblx0ICAgICAqL1xuXHQgICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuXHQgICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcblx0ICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG5cdCAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuXHQgICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogUmVnaXN0ZXJzIGhhbmRsZXJzIGZvciBoYW5kbGluZyBlbWl0dGVkIHZhbHVlcywgZXJyb3IgYW5kIGNvbXBsZXRpb25zIGZyb20gdGhlIG9ic2VydmFibGUsIGFuZFxuXHQgICAgICogIGV4ZWN1dGVzIHRoZSBvYnNlcnZhYmxlJ3Mgc3Vic2NyaWJlciBmdW5jdGlvbiwgd2hpY2ggd2lsbCB0YWtlIGFjdGlvbiB0byBzZXQgdXAgdGhlIHVuZGVybHlpbmcgZGF0YSBzdHJlYW1cblx0ICAgICAqIEBtZXRob2Qgc3Vic2NyaWJlXG5cdCAgICAgKiBAcGFyYW0ge1BhcnRpYWxPYnNlcnZlcnxGdW5jdGlvbn0gb2JzZXJ2ZXJPck5leHQgKG9wdGlvbmFsKSBlaXRoZXIgYW4gb2JzZXJ2ZXIgZGVmaW5pbmcgYWxsIGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQsXG5cdCAgICAgKiAgb3IgdGhlIGZpcnN0IG9mIHRocmVlIHBvc3NpYmxlIGhhbmRsZXJzLCB3aGljaCBpcyB0aGUgaGFuZGxlciBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGZyb20gdGhlIG9ic2VydmFibGUuXG5cdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAob3B0aW9uYWwpIGEgaGFuZGxlciBmb3IgYSB0ZXJtaW5hbCBldmVudCByZXN1bHRpbmcgZnJvbSBhbiBlcnJvci4gSWYgbm8gZXJyb3IgaGFuZGxlciBpcyBwcm92aWRlZCxcblx0ICAgICAqICB0aGUgZXJyb3Igd2lsbCBiZSB0aHJvd24gYXMgdW5oYW5kbGVkXG5cdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wbGV0ZSAob3B0aW9uYWwpIGEgaGFuZGxlciBmb3IgYSB0ZXJtaW5hbCBldmVudCByZXN1bHRpbmcgZnJvbSBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG5cdCAgICAgKiBAcmV0dXJuIHtJU3Vic2NyaXB0aW9ufSBhIHN1YnNjcmlwdGlvbiByZWZlcmVuY2UgdG8gdGhlIHJlZ2lzdGVyZWQgaGFuZGxlcnNcblx0ICAgICAqL1xuXHQgICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcblx0ICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm9wZXJhdG9yO1xuXHQgICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyXzEudG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuXHQgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yID8gb3BlcmF0b3IuY2FsbChzaW5rLCB0aGlzKSA6IHRoaXMuX3N1YnNjcmliZShzaW5rKSk7XG5cdCAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG5cdCAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgc2luay5zeW5jRXJyb3JWYWx1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gc2luaztcblx0ICAgIH07XG5cdCAgICAvKipcblx0ICAgICAqIEBtZXRob2QgZm9yRWFjaFxuXHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCBhIGhhbmRsZXIgZm9yIGVhY2ggdmFsdWUgZW1pdHRlZCBieSB0aGUgb2JzZXJ2YWJsZVxuXHQgICAgICogQHBhcmFtIHtQcm9taXNlQ29uc3RydWN0b3J9IFtQcm9taXNlQ3Rvcl0gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBQcm9taXNlXG5cdCAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBlaXRoZXIgcmVzb2x2ZXMgb24gb2JzZXJ2YWJsZSBjb21wbGV0aW9uIG9yXG5cdCAgICAgKiAgcmVqZWN0cyB3aXRoIHRoZSBoYW5kbGVkIGVycm9yXG5cdCAgICAgKi9cblx0ICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgUHJvbWlzZUN0b3IpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIGlmICghUHJvbWlzZUN0b3IpIHtcblx0ICAgICAgICAgICAgaWYgKHJvb3RfMS5yb290LlJ4ICYmIHJvb3RfMS5yb290LlJ4LmNvbmZpZyAmJiByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZSkge1xuXHQgICAgICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChyb290XzEucm9vdC5Qcm9taXNlKSB7XG5cdCAgICAgICAgICAgICAgICBQcm9taXNlQ3RvciA9IHJvb3RfMS5yb290LlByb21pc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFQcm9taXNlQ3Rvcikge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFByb21pc2UgaW1wbCBmb3VuZCcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3IFByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHN1YnNjcmlwdGlvbiwgdGhlbiB3ZSBjYW4gc3VybWlzZVxuXHQgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBuZXh0IGhhbmRsaW5nIGlzIGFzeW5jaHJvbm91cy4gQW55IGVycm9ycyB0aHJvd25cblx0ICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIGJlIHJlamVjdGVkIGV4cGxpY2l0bHkgYW5kIHVuc3Vic2NyaWJlIG11c3QgYmVcblx0ICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgbWFudWFsbHlcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgTk8gc3Vic2NyaXB0aW9uLCB0aGVuIHdlJ3JlIGdldHRpbmcgYSBuZXh0ZWRcblx0ICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZSBzeW5jaHJvbm91c2x5IGR1cmluZyBzdWJzY3JpcHRpb24uIFdlIGNhbiBqdXN0IGNhbGwgaXQuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgZXJyb3JzLCBPYnNlcnZhYmxlJ3MgYHN1YnNjcmliZWAgaW1wbGUgd2lsbCBlbnN1cmUgdGhlXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gdW5zdWJzY3JpcHRpb24gbG9naWMgaXMgY2FsbGVkLCB0aGVuIHN5bmNocm9ub3VzbHkgcmV0aHJvdyB0aGUgZXJyb3IuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gQWZ0ZXIgdGhhdCwgUHJvbWlzZSB3aWxsIHRyYXAgdGhlIGVycm9yIGFuZCBzZW5kIGl0XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gZG93biB0aGUgcmVqZWN0aW9uIHBhdGguXG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0ICAgICAqIEFuIGludGVyb3AgcG9pbnQgZGVmaW5lZCBieSB0aGUgZXM3LW9ic2VydmFibGUgc3BlYyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG5cdCAgICAgKiBAbWV0aG9kIFN5bWJvbC5vYnNlcnZhYmxlXG5cdCAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSB0aGlzIGluc3RhbmNlIG9mIHRoZSBvYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIE9ic2VydmFibGUucHJvdG90eXBlWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLy8gSEFDSzogU2luY2UgVHlwZVNjcmlwdCBpbmhlcml0cyBzdGF0aWMgcHJvcGVydGllcyB0b28sIHdlIGhhdmUgdG9cblx0ICAgIC8vIGZpZ2h0IGFnYWluc3QgVHlwZVNjcmlwdCBoZXJlIHNvIFN1YmplY3QgY2FuIGhhdmUgYSBkaWZmZXJlbnQgc3RhdGljIGNyZWF0ZSBzaWduYXR1cmVcblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhIG5ldyBjb2xkIE9ic2VydmFibGUgYnkgY2FsbGluZyB0aGUgT2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuXHQgICAgICogQHN0YXRpYyB0cnVlXG5cdCAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgICAgICogQG1ldGhvZCBjcmVhdGVcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZT8gdGhlIHN1YnNjcmliZXIgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIHRvIHRoZSBPYnNlcnZhYmxlIGNvbnN0cnVjdG9yXG5cdCAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhIG5ldyBjb2xkIG9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE9ic2VydmFibGU7XG5cdH0oKSk7XG5cdGV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlLCBnbG9iYWwpIHtcInVzZSBzdHJpY3RcIjtcblx0dmFyIG9iamVjdFR5cGVzID0ge1xuXHQgICAgJ2Jvb2xlYW4nOiBmYWxzZSxcblx0ICAgICdmdW5jdGlvbic6IHRydWUsXG5cdCAgICAnb2JqZWN0JzogdHJ1ZSxcblx0ICAgICdudW1iZXInOiBmYWxzZSxcblx0ICAgICdzdHJpbmcnOiBmYWxzZSxcblx0ICAgICd1bmRlZmluZWQnOiBmYWxzZVxuXHR9O1xuXHRleHBvcnRzLnJvb3QgPSAob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpIHx8IChvYmplY3RUeXBlc1t0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3cpO1xuXHQvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gb2JqZWN0VHlwZXNbdHlwZW9mIGdsb2JhbF0gJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpKSB7XG5cdCAgICBleHBvcnRzLnJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvb3QuanMubWFwXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKShtb2R1bGUpLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdFx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1vZHVsZTtcclxuXHR9XHJcblxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciByeFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHRmdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuXHQgICAgaWYgKG5leHRPck9ic2VydmVyICYmIHR5cGVvZiBuZXh0T3JPYnNlcnZlciA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgaW5zdGFuY2VvZiBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJfMS4kJHJ4U3Vic2NyaWJlcl0gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyXSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG5cdH1cblx0ZXhwb3J0cy50b1N1YnNjcmliZXIgPSB0b1N1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIGlzRnVuY3Rpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHR2YXIgU3Vic2NyaXB0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0dmFyIHJ4U3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdHZhciBPYnNlcnZlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGludGVyZmFjZSBhbmQgZXh0ZW5kcyB0aGVcblx0ICoge0BsaW5rIFN1YnNjcmlwdGlvbn0gY2xhc3MuIFdoaWxlIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGlzIHRoZSBwdWJsaWMgQVBJIGZvclxuXHQgKiBjb25zdW1pbmcgdGhlIHZhbHVlcyBvZiBhbiB7QGxpbmsgT2JzZXJ2YWJsZX0sIGFsbCBPYnNlcnZlcnMgZ2V0IGNvbnZlcnRlZCB0b1xuXHQgKiBhIFN1YnNjcmliZXIsIGluIG9yZGVyIHRvIHByb3ZpZGUgU3Vic2NyaXB0aW9uLWxpa2UgY2FwYWJpbGl0aWVzIHN1Y2ggYXNcblx0ICogYHVuc3Vic2NyaWJlYC4gU3Vic2NyaWJlciBpcyBhIGNvbW1vbiB0eXBlIGluIFJ4SlMsIGFuZCBjcnVjaWFsIGZvclxuXHQgKiBpbXBsZW1lbnRpbmcgb3BlcmF0b3JzLCBidXQgaXQgaXMgcmFyZWx5IHVzZWQgYXMgYSBwdWJsaWMgQVBJLlxuXHQgKlxuXHQgKiBAY2xhc3MgU3Vic2NyaWJlcjxUPlxuXHQgKi9cblx0dmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7T2JzZXJ2ZXJ8ZnVuY3Rpb24odmFsdWU6IFQpOiB2b2lkfSBbZGVzdGluYXRpb25Pck5leHRdIEEgcGFydGlhbGx5XG5cdCAgICAgKiBkZWZpbmVkIE9ic2VydmVyIG9yIGEgYG5leHRgIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbihlOiA/YW55KTogdm9pZH0gW2Vycm9yXSBUaGUgYGVycm9yYCBjYWxsYmFjayBvZiBhblxuXHQgICAgICogT2JzZXJ2ZXIuXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFtjb21wbGV0ZV0gVGhlIGBjb21wbGV0ZWAgY2FsbGJhY2sgb2YgYW5cblx0ICAgICAqIE9ic2VydmVyLlxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IE9ic2VydmVyXzEuZW1wdHk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbk9yTmV4dCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb25Pck5leHQgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5hZGQodGhpcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIodGhpcywgZGVzdGluYXRpb25Pck5leHQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIodGhpcywgZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEEgc3RhdGljIGZhY3RvcnkgZm9yIGEgU3Vic2NyaWJlciwgZ2l2ZW4gYSAocG90ZW50aWFsbHkgcGFydGlhbCkgZGVmaW5pdGlvblxuXHQgICAgICogb2YgYW4gT2JzZXJ2ZXIuXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHg6ID9UKTogdm9pZH0gW25leHRdIFRoZSBgbmV4dGAgY2FsbGJhY2sgb2YgYW4gT2JzZXJ2ZXIuXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGU6ID9hbnkpOiB2b2lkfSBbZXJyb3JdIFRoZSBgZXJyb3JgIGNhbGxiYWNrIG9mIGFuXG5cdCAgICAgKiBPYnNlcnZlci5cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gW2NvbXBsZXRlXSBUaGUgYGNvbXBsZXRlYCBjYWxsYmFjayBvZiBhblxuXHQgICAgICogT2JzZXJ2ZXIuXG5cdCAgICAgKiBAcmV0dXJuIHtTdWJzY3JpYmVyPFQ+fSBBIFN1YnNjcmliZXIgd3JhcHBpbmcgdGhlIChwYXJ0aWFsbHkgZGVmaW5lZClcblx0ICAgICAqIE9ic2VydmVyIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBhcmd1bWVudHMuXG5cdCAgICAgKi9cblx0ICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuXHQgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcblx0ICAgICAgICBzdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuXHQgICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIG9mIHR5cGUgYG5leHRgIGZyb21cblx0ICAgICAqIHRoZSBPYnNlcnZhYmxlLCB3aXRoIGEgdmFsdWUuIFRoZSBPYnNlcnZhYmxlIG1heSBjYWxsIHRoaXMgbWV0aG9kIDAgb3IgbW9yZVxuXHQgICAgICogdGltZXMuXG5cdCAgICAgKiBAcGFyYW0ge1R9IFt2YWx1ZV0gVGhlIGBuZXh0YCB2YWx1ZS5cblx0ICAgICAqIEByZXR1cm4ge3ZvaWR9XG5cdCAgICAgKi9cblx0ICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0ICAgICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvZiB0eXBlIGBlcnJvcmAgZnJvbVxuXHQgICAgICogdGhlIE9ic2VydmFibGUsIHdpdGggYW4gYXR0YWNoZWQge0BsaW5rIEVycm9yfS4gTm90aWZpZXMgdGhlIE9ic2VydmVyIHRoYXRcblx0ICAgICAqIHRoZSBPYnNlcnZhYmxlIGhhcyBleHBlcmllbmNlZCBhbiBlcnJvciBjb25kaXRpb24uXG5cdCAgICAgKiBAcGFyYW0ge2FueX0gW2Vycl0gVGhlIGBlcnJvcmAgZXhjZXB0aW9uLlxuXHQgICAgICogQHJldHVybiB7dm9pZH1cblx0ICAgICAqL1xuXHQgICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBhIHZhbHVlbGVzcyBub3RpZmljYXRpb24gb2YgdHlwZVxuXHQgICAgICogYGNvbXBsZXRlYCBmcm9tIHRoZSBPYnNlcnZhYmxlLiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdCB0aGUgT2JzZXJ2YWJsZVxuXHQgICAgICogaGFzIGZpbmlzaGVkIHNlbmRpbmcgcHVzaC1iYXNlZCBub3RpZmljYXRpb25zLlxuXHQgICAgICogQHJldHVybiB7dm9pZH1cblx0ICAgICAqL1xuXHQgICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuXHQgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcblx0ICAgIH07XG5cdCAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyXzEuJCRyeFN1YnNjcmliZXJdID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuXHRleHBvcnRzLlN1YnNjcmliZXIgPSBTdWJzY3JpYmVyO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50LCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcblx0ICAgICAgICB2YXIgbmV4dDtcblx0ICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cdCAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSkge1xuXHQgICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKG9ic2VydmVyT3JOZXh0KSB7XG5cdCAgICAgICAgICAgIGNvbnRleHQgPSBvYnNlcnZlck9yTmV4dDtcblx0ICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0Lm5leHQ7XG5cdCAgICAgICAgICAgIGVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3I7XG5cdCAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG5cdCAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihjb250ZXh0LnVuc3Vic2NyaWJlKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGQoY29udGV4dC51bnN1YnNjcmliZS5iaW5kKGNvbnRleHQpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb250ZXh0LnVuc3Vic2NyaWJlID0gdGhpcy51bnN1YnNjcmliZS5iaW5kKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcblx0ICAgICAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblx0ICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuXHQgICAgICAgIHRoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG5cdCAgICB9XG5cdCAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuXHQgICAgICAgICAgICB2YXIgX3BhcmVudCA9IHRoaXMuX3BhcmVudDtcblx0ICAgICAgICAgICAgaWYgKCFfcGFyZW50LnN5bmNFcnJvclRocm93YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnQsIHRoaXMuX25leHQsIHZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHZhciBfcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgIGlmICghX3BhcmVudC5zeW5jRXJyb3JUaHJvd2FibGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50LCB0aGlzLl9lcnJvciwgZXJyKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnQuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBfcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuXHQgICAgICAgICAgICAgICAgX3BhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHZhciBfcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcblx0ICAgICAgICAgICAgICAgIGlmICghX3BhcmVudC5zeW5jRXJyb3JUaHJvd2FibGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9jb21wbGV0ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudCwgdGhpcy5fY29tcGxldGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclVuc3ViID0gZnVuY3Rpb24gKGZuLCB2YWx1ZSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgdGhyb3cgZXJyO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuXHQgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH07XG5cdCAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBfcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuXHQgICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG5cdCAgICAgICAgX3BhcmVudC51bnN1YnNjcmliZSgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBpc0FycmF5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblx0dmFyIGlzT2JqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0dmFyIGlzRnVuY3Rpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHR2YXIgdHJ5Q2F0Y2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgZXJyb3JPYmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHR2YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdC8qKlxuXHQgKiBSZXByZXNlbnRzIGEgZGlzcG9zYWJsZSByZXNvdXJjZSwgc3VjaCBhcyB0aGUgZXhlY3V0aW9uIG9mIGFuIE9ic2VydmFibGUuIEFcblx0ICogU3Vic2NyaXB0aW9uIGhhcyBvbmUgaW1wb3J0YW50IG1ldGhvZCwgYHVuc3Vic2NyaWJlYCwgdGhhdCB0YWtlcyBubyBhcmd1bWVudFxuXHQgKiBhbmQganVzdCBkaXNwb3NlcyB0aGUgcmVzb3VyY2UgaGVsZCBieSB0aGUgc3Vic2NyaXB0aW9uLlxuXHQgKlxuXHQgKiBBZGRpdGlvbmFsbHksIHN1YnNjcmlwdGlvbnMgbWF5IGJlIGdyb3VwZWQgdG9nZXRoZXIgdGhyb3VnaCB0aGUgYGFkZCgpYFxuXHQgKiBtZXRob2QsIHdoaWNoIHdpbGwgYXR0YWNoIGEgY2hpbGQgU3Vic2NyaXB0aW9uIHRvIHRoZSBjdXJyZW50IFN1YnNjcmlwdGlvbi5cblx0ICogV2hlbiBhIFN1YnNjcmlwdGlvbiBpcyB1bnN1YnNjcmliZWQsIGFsbCBpdHMgY2hpbGRyZW4gKGFuZCBpdHMgZ3JhbmRjaGlsZHJlbilcblx0ICogd2lsbCBiZSB1bnN1YnNjcmliZWQgYXMgd2VsbC5cblx0ICpcblx0ICogQGNsYXNzIFN1YnNjcmlwdGlvblxuXHQgKi9cblx0dmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gW3Vuc3Vic2NyaWJlXSBBIGZ1bmN0aW9uIGRlc2NyaWJpbmcgaG93IHRvXG5cdCAgICAgKiBwZXJmb3JtIHRoZSBkaXNwb3NhbCBvZiByZXNvdXJjZXMgd2hlbiB0aGUgYHVuc3Vic2NyaWJlYCBtZXRob2QgaXMgY2FsbGVkLlxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24odW5zdWJzY3JpYmUpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0aGlzIFN1YnNjcmlwdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHVuc3Vic2NyaWJlZC5cblx0ICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBEaXNwb3NlcyB0aGUgcmVzb3VyY2VzIGhlbGQgYnkgdGhlIHN1YnNjcmlwdGlvbi4gTWF5LCBmb3IgaW5zdGFuY2UsIGNhbmNlbFxuXHQgICAgICogYW4gb25nb2luZyBPYnNlcnZhYmxlIGV4ZWN1dGlvbiBvciBjYW5jZWwgYW55IG90aGVyIHR5cGUgb2Ygd29yayB0aGF0XG5cdCAgICAgKiBzdGFydGVkIHdoZW4gdGhlIFN1YnNjcmlwdGlvbiB3YXMgY3JlYXRlZC5cblx0ICAgICAqIEByZXR1cm4ge3ZvaWR9XG5cdCAgICAgKi9cblx0ICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGhhc0Vycm9ycyA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBlcnJvcnM7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBfdW5zdWJzY3JpYmUgPSBfYS5fdW5zdWJzY3JpYmUsIF9zdWJzY3JpcHRpb25zID0gX2EuX3N1YnNjcmlwdGlvbnM7XG5cdCAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG5cdCAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcblx0ICAgICAgICAgICAgdmFyIHRyaWFsID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChfdW5zdWJzY3JpYmUpLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGlmICh0cmlhbCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIChlcnJvcnMgPSBlcnJvcnMgfHwgW10pLnB1c2goZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaXNBcnJheV8xLmlzQXJyYXkoX3N1YnNjcmlwdGlvbnMpKSB7XG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuXHQgICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcblx0ICAgICAgICAgICAgICAgIGlmIChpc09iamVjdF8xLmlzT2JqZWN0KHN1YikpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdHJpYWwgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHN1Yi51bnN1YnNjcmliZSkuY2FsbChzdWIpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0cmlhbCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgfHwgW107XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChlcnIuZXJyb3JzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGhhc0Vycm9ycykge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBBZGRzIGEgdGVhciBkb3duIHRvIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlKCkgb2YgdGhpc1xuXHQgICAgICogU3Vic2NyaXB0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIElmIHRoZSB0ZWFyIGRvd24gYmVpbmcgYWRkZWQgaXMgYSBzdWJzY3JpcHRpb24gdGhhdCBpcyBhbHJlYWR5XG5cdCAgICAgKiB1bnN1YnNjcmliZWQsIGlzIHRoZSBzYW1lIHJlZmVyZW5jZSBgYWRkYCBpcyBiZWluZyBjYWxsZWQgb24sIG9yIGlzXG5cdCAgICAgKiBgU3Vic2NyaXB0aW9uLkVNUFRZYCwgaXQgd2lsbCBub3QgYmUgYWRkZWQuXG5cdCAgICAgKlxuXHQgICAgICogSWYgdGhpcyBzdWJzY3JpcHRpb24gaXMgYWxyZWFkeSBpbiBhbiBgaXNVbnN1YnNjcmliZWRgIHN0YXRlLCB0aGUgcGFzc2VkXG5cdCAgICAgKiB0ZWFyIGRvd24gbG9naWMgd2lsbCBiZSBleGVjdXRlZCBpbW1lZGlhdGVseS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1RlYXJkb3duTG9naWN9IHRlYXJkb3duIFRoZSBhZGRpdGlvbmFsIGxvZ2ljIHRvIGV4ZWN1dGUgb25cblx0ICAgICAqIHRlYXJkb3duLlxuXHQgICAgICogQHJldHVybiB7U3Vic2NyaXB0aW9ufSBSZXR1cm5zIHRoZSBTdWJzY3JpcHRpb24gdXNlZCBvciBjcmVhdGVkIHRvIGJlXG5cdCAgICAgKiBhZGRlZCB0byB0aGUgaW5uZXIgc3Vic2NyaXB0aW9ucyBsaXN0LiBUaGlzIFN1YnNjcmlwdGlvbiBjYW4gYmUgdXNlZCB3aXRoXG5cdCAgICAgKiBgcmVtb3ZlKClgIHRvIHJlbW92ZSB0aGUgcGFzc2VkIHRlYXJkb3duIGxvZ2ljIGZyb20gdGhlIGlubmVyIHN1YnNjcmlwdGlvbnNcblx0ICAgICAqIGxpc3QuXG5cdCAgICAgKi9cblx0ICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG5cdCAgICAgICAgaWYgKCF0ZWFyZG93biB8fCAodGVhcmRvd24gPT09IHRoaXMpIHx8ICh0ZWFyZG93biA9PT0gU3Vic2NyaXB0aW9uLkVNUFRZKSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBzdWIgPSB0ZWFyZG93bjtcblx0ICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuXHQgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG5cdCAgICAgICAgICAgICAgICBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKHRlYXJkb3duKTtcblx0ICAgICAgICAgICAgY2FzZSAnb2JqZWN0Jzpcblx0ICAgICAgICAgICAgICAgIGlmIChzdWIuaXNVbnN1YnNjcmliZWQgfHwgdHlwZW9mIHN1Yi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N1YnNjcmlwdGlvbnMgfHwgKHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbXSkpLnB1c2goc3ViKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgdGVhcmRvd24gJyArIHRlYXJkb3duICsgJyBhZGRlZCB0byBTdWJzY3JpcHRpb24uJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBzdWI7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBSZW1vdmVzIGEgU3Vic2NyaXB0aW9uIGZyb20gdGhlIGludGVybmFsIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IHdpbGxcblx0ICAgICAqIHVuc3Vic2NyaWJlIGR1cmluZyB0aGUgdW5zdWJzY3JpYmUgcHJvY2VzcyBvZiB0aGlzIFN1YnNjcmlwdGlvbi5cblx0ICAgICAqIEBwYXJhbSB7U3Vic2NyaXB0aW9ufSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbiB0byByZW1vdmUuXG5cdCAgICAgKiBAcmV0dXJuIHt2b2lkfVxuXHQgICAgICovXG5cdCAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAvLyBIQUNLOiBUaGlzIG1pZ2h0IGJlIHJlZHVuZGFudCBiZWNhdXNlIG9mIHRoZSBsb2dpYyBpbiBgYWRkKClgXG5cdCAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiA9PSBudWxsIHx8IChzdWJzY3JpcHRpb24gPT09IHRoaXMpIHx8IChzdWJzY3JpcHRpb24gPT09IFN1YnNjcmlwdGlvbi5FTVBUWSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG5cdCAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcblx0ICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25JbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG5cdCAgICAgICAgZW1wdHkuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiBlbXB0eTtcblx0ICAgIH0obmV3IFN1YnNjcmlwdGlvbigpKSk7XG5cdCAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLlN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRleHBvcnRzLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInOyB9KTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0ZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuXHQgICAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG5cdH1cblx0ZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGVycm9yT2JqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIHRyeUNhdGNoVGFyZ2V0O1xuXHRmdW5jdGlvbiB0cnlDYXRjaGVyKCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICByZXR1cm4gdHJ5Q2F0Y2hUYXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0ICAgIGNhdGNoIChlKSB7XG5cdCAgICAgICAgZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lID0gZTtcblx0ICAgICAgICByZXR1cm4gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdDtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiB0cnlDYXRjaChmbikge1xuXHQgICAgdHJ5Q2F0Y2hUYXJnZXQgPSBmbjtcblx0ICAgIHJldHVybiB0cnlDYXRjaGVyO1xuXHR9XG5cdGV4cG9ydHMudHJ5Q2F0Y2ggPSB0cnlDYXRjaDtcblx0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10cnlDYXRjaC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0Ly8gdHlwZW9mIGFueSBzbyB0aGF0IGl0IHdlIGRvbid0IGhhdmUgdG8gY2FzdCB3aGVuIGNvbXBhcmluZyBhIHJlc3VsdCB0byB0aGUgZXJyb3Igb2JqZWN0XG5cdGV4cG9ydHMuZXJyb3JPYmplY3QgPSB7IGU6IHt9IH07XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yT2JqZWN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHQvKipcblx0ICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuXHQgKiBgdW5zdWJzY3JpYmVgIG9mIGEge0BsaW5rIFN1YnNjcmlwdGlvbn0uXG5cdCAqL1xuXHR2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoVW5zdWJzY3JpcHRpb25FcnJvciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuXHQgICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9ycyA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiAoKGkgKyAxKSArIFwiKSBcIiArIGVyci50b1N0cmluZygpKTsgfSkuam9pbignXFxuJykgOiAnJztcblx0ICAgIH1cblx0ICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9yO1xuXHR9KEVycm9yKSk7XG5cdGV4cG9ydHMuVW5zdWJzY3JpcHRpb25FcnJvciA9IFVuc3Vic2NyaXB0aW9uRXJyb3I7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciByb290XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuXHRleHBvcnRzLiQkcnhTdWJzY3JpYmVyID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09ICdmdW5jdGlvbicpID9cblx0ICAgIFN5bWJvbC5mb3IoJ3J4U3Vic2NyaWJlcicpIDogJ0BAcnhTdWJzY3JpYmVyJztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRleHBvcnRzLmVtcHR5ID0ge1xuXHQgICAgaXNVbnN1YnNjcmliZWQ6IHRydWUsXG5cdCAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgfSxcblx0ICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHRocm93IGVycjsgfSxcblx0ICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cblx0fTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIGdsb2JhbCB3aW5kb3cgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKShnbG9iYWwgfHwgd2luZG93IHx8IHRoaXMpO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9LFxuLyogMjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0XHR2YXIgcmVzdWx0O1xuXHRcdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblx0XG5cdFx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpcHRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTdWJqZWN0U3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmlwdGlvbihzdWJqZWN0LCBvYnNlcnZlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG5cdCAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuXHQgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG5cdCAgICAgICAgdmFyIG9ic2VydmVycyA9IHN1YmplY3Qub2JzZXJ2ZXJzO1xuXHQgICAgICAgIHRoaXMuc3ViamVjdCA9IG51bGw7XG5cdCAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMub2JzZXJ2ZXIpO1xuXHQgICAgICAgIGlmIChzdWJzY3JpYmVySW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2Uoc3Vic2NyaWJlckluZGV4LCAxKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG5cdH0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5cdGV4cG9ydHMuU3ViamVjdFN1YnNjcmlwdGlvbiA9IFN1YmplY3RTdWJzY3JpcHRpb247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIHRocm93RXJyb3IoZSkgeyB0aHJvdyBlOyB9XG5cdGV4cG9ydHMudGhyb3dFcnJvciA9IHRocm93RXJyb3I7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93RXJyb3IuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdC8qKlxuXHQgKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgaW52YWxpZCBiZWNhdXNlIHRoZSBvYmplY3QgaGFzIGJlZW5cblx0ICogdW5zdWJzY3JpYmVkLlxuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBTdWJqZWN0fVxuXHQgKiBAc2VlIHtAbGluayBCZWhhdmlvclN1YmplY3R9XG5cdCAqXG5cdCAqIEBjbGFzcyBPYmplY3RVbnN1YnNjcmliZWRFcnJvclxuXHQgKi9cblx0dmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhPYmplY3RVbnN1YnNjcmliZWRFcnJvciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsICdvYmplY3QgdW5zdWJzY3JpYmVkJyk7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcblx0ICAgIH1cblx0ICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcblx0fShFcnJvcikpO1xuXHRleHBvcnRzLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3I7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGJpbmRDYWxsYmFja18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmJpbmRDYWxsYmFjayA9IGJpbmRDYWxsYmFja18xLmJpbmRDYWxsYmFjaztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgQm91bmRDYWxsYmFja09ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHRleHBvcnRzLmJpbmRDYWxsYmFjayA9IEJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlXzEuQm91bmRDYWxsYmFja09ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kQ2FsbGJhY2suanMubWFwXG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdHJ5Q2F0Y2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgZXJyb3JPYmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHR2YXIgQXN5bmNTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKiBAaGlkZSB0cnVlXG5cdCAqL1xuXHR2YXIgQm91bmRDYWxsYmFja09ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQm91bmRDYWxsYmFja09ic2VydmFibGUoY2FsbGJhY2tGdW5jLCBzZWxlY3RvciwgYXJncywgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jYWxsYmFja0Z1bmMgPSBjYWxsYmFja0Z1bmM7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICAvKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXHQgICAgLyoqXG5cdCAgICAgKiBDb252ZXJ0cyBhIGNhbGxiYWNrIEFQSSB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5HaXZlIGl0IGEgZnVuY3Rpb24gYGZgIG9mIHR5cGUgYGYoeCwgY2FsbGJhY2spYCBhbmRcblx0ICAgICAqIGl0IHdpbGwgcmV0dXJuIGEgZnVuY3Rpb24gYGdgIHRoYXQgd2hlbiBjYWxsZWQgYXMgYGcoeClgIHdpbGwgb3V0cHV0IGFuXG5cdCAgICAgKiBPYnNlcnZhYmxlLjwvc3Bhbj5cblx0ICAgICAqXG5cdCAgICAgKiBgYmluZENhbGxiYWNrYCBpcyBub3QgYW4gb3BlcmF0b3IgYmVjYXVzZSBpdHMgaW5wdXQgYW5kIG91dHB1dCBhcmUgbm90XG5cdCAgICAgKiBPYnNlcnZhYmxlcy4gVGhlIGlucHV0IGlzIGEgZnVuY3Rpb24gYGZ1bmNgIHdpdGggc29tZSBwYXJhbWV0ZXJzLCBidXQgdGhlXG5cdCAgICAgKiBsYXN0IHBhcmFtZXRlciBtdXN0IGJlIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBgZnVuY2AgY2FsbHMgd2hlbiBpdCBpc1xuXHQgICAgICogZG9uZS4gVGhlIG91dHB1dCBvZiBgYmluZENhbGxiYWNrYCBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHNhbWVcblx0ICAgICAqIHBhcmFtZXRlcnMgYXMgYGZ1bmNgLCBleGNlcHQgdGhlIGxhc3Qgb25lICh0aGUgY2FsbGJhY2spLiBXaGVuIHRoZSBvdXRwdXRcblx0ICAgICAqIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFyZ3VtZW50cywgaXQgd2lsbCByZXR1cm4gYW4gT2JzZXJ2YWJsZSB3aGVyZSB0aGVcblx0ICAgICAqIHJlc3VsdHMgd2lsbCBiZSBkZWxpdmVyZWQgdG8uXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q29udmVydCBqUXVlcnkncyBnZXRKU09OIHRvIGFuIE9ic2VydmFibGUgQVBJPC9jYXB0aW9uPlxuXHQgICAgICogLy8gU3VwcG9zZSB3ZSBoYXZlIGpRdWVyeS5nZXRKU09OKCcvbXkvdXJsJywgY2FsbGJhY2spXG5cdCAgICAgKiB2YXIgZ2V0SlNPTkFzT2JzZXJ2YWJsZSA9IFJ4Lk9ic2VydmFibGUuYmluZENhbGxiYWNrKGpRdWVyeS5nZXRKU09OKTtcblx0ICAgICAqIHZhciByZXN1bHQgPSBnZXRKU09OQXNPYnNlcnZhYmxlKCcvbXkvdXJsJyk7XG5cdCAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCksIGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgYmluZE5vZGVDYWxsYmFja31cblx0ICAgICAqIEBzZWUge0BsaW5rIGZyb219XG5cdCAgICAgKiBAc2VlIHtAbGluayBmcm9tUHJvbWlzZX1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHdpdGggYSBjYWxsYmFjayBhcyB0aGUgbGFzdCBwYXJhbWV0ZXIuXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZWxlY3RvciBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBhcmd1bWVudHMgZnJvbSB0aGVcblx0ICAgICAqIGNhbGxiYWNrIGFuZCBtYXBzIHRob3NlIGEgdmFsdWUgdG8gZW1pdCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gVGhlIHNjaGVkdWxlciBvbiB3aGljaCB0byBzY2hlZHVsZSB0aGVcblx0ICAgICAqIGNhbGxiYWNrcy5cblx0ICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLnBhcmFtczogKik6IE9ic2VydmFibGV9IEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGVcblx0ICAgICAqIE9ic2VydmFibGUgdGhhdCBkZWxpdmVycyB0aGUgc2FtZSB2YWx1ZXMgdGhlIGNhbGxiYWNrIHdvdWxkIGRlbGl2ZXIuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIGJpbmRDYWxsYmFja1xuXHQgICAgICogQG93bmVyIE9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgQm91bmRDYWxsYmFja09ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGZ1bmMsIHNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkgeyBzZWxlY3RvciA9IHVuZGVmaW5lZDsgfVxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBhcmdzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBhcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgQm91bmRDYWxsYmFja09ic2VydmFibGUoZnVuYywgc2VsZWN0b3IsIGFyZ3MsIHNjaGVkdWxlcik7XG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBCb3VuZENhbGxiYWNrT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGNhbGxiYWNrRnVuYyA9IHRoaXMuY2FsbGJhY2tGdW5jO1xuXHQgICAgICAgIHZhciBhcmdzID0gdGhpcy5hcmdzO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcblx0ICAgICAgICBpZiAoIXNjaGVkdWxlcikge1xuXHQgICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHN1YmplY3QgPSB0aGlzLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXJGbigpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJBcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gaGFuZGxlckZuLnNvdXJjZTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBzb3VyY2Uuc2VsZWN0b3IsIHN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdDtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzZWxlY3RvcikuYXBwbHkodGhpcywgaW5uZXJBcmdzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdF8xID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQocmVzdWx0XzEpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQoaW5uZXJBcmdzLmxlbmd0aCA9PT0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgLy8gdXNlIG5hbWVkIGZ1bmN0aW9uIGluc3RhbmNlIHRvIGF2b2lkIGNsb3N1cmUuXG5cdCAgICAgICAgICAgICAgICBoYW5kbGVyLnNvdXJjZSA9IHRoaXM7XG5cdCAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChjYWxsYmFja0Z1bmMpLmFwcGx5KHRoaXMsIGFyZ3MuY29uY2F0KGhhbmRsZXIpKTtcblx0ICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwgeyBzb3VyY2U6IHRoaXMsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBCb3VuZENhbGxiYWNrT2JzZXJ2YWJsZTtcblx0fShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuXHRleHBvcnRzLkJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlID0gQm91bmRDYWxsYmFja09ic2VydmFibGU7XG5cdGZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICB2YXIgc291cmNlID0gc3RhdGUuc291cmNlLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcblx0ICAgIHZhciBjYWxsYmFja0Z1bmMgPSBzb3VyY2UuY2FsbGJhY2tGdW5jLCBhcmdzID0gc291cmNlLmFyZ3MsIHNjaGVkdWxlciA9IHNvdXJjZS5zY2hlZHVsZXI7XG5cdCAgICB2YXIgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0O1xuXHQgICAgaWYgKCFzdWJqZWN0KSB7XG5cdCAgICAgICAgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuXHQgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlckZuKCkge1xuXHQgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGhhbmRsZXJGbi5zb3VyY2U7XG5cdCAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHNvdXJjZS5zZWxlY3Rvciwgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0O1xuXHQgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMiA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goc2VsZWN0b3IpLmFwcGx5KHRoaXMsIGlubmVyQXJncyk7XG5cdCAgICAgICAgICAgICAgICBpZiAocmVzdWx0XzIgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSwgc3ViamVjdDogc3ViamVjdCB9KSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCAwLCB7IHZhbHVlOiByZXN1bHRfMiwgc3ViamVjdDogc3ViamVjdCB9KSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoID09PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuXHQgICAgICAgICAgICAgICAgc2VsZi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdmFsdWUsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgICAgICAvLyB1c2UgbmFtZWQgZnVuY3Rpb24gdG8gcGFzcyB2YWx1ZXMgaW4gd2l0aG91dCBjbG9zdXJlXG5cdCAgICAgICAgaGFuZGxlci5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goY2FsbGJhY2tGdW5jKS5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChoYW5kbGVyKSk7XG5cdCAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgc2VsZi5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuXHR9XG5cdGZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcblx0ICAgIHZhciB2YWx1ZSA9IGFyZy52YWx1ZSwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuXHQgICAgc3ViamVjdC5uZXh0KHZhbHVlKTtcblx0ICAgIHN1YmplY3QuY29tcGxldGUoKTtcblx0fVxuXHRmdW5jdGlvbiBkaXNwYXRjaEVycm9yKGFyZykge1xuXHQgICAgdmFyIGVyciA9IGFyZy5lcnIsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcblx0ICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcblx0fVxuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Cb3VuZENhbGxiYWNrT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDMwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdC8qKlxuXHQgKiBAY2xhc3MgQXN5bmNTdWJqZWN0PFQ+XG5cdCAqL1xuXHR2YXIgQXN5bmNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhBc3luY1N1YmplY3QsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBBc3luY1N1YmplY3QoKSB7XG5cdCAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5oYXNOZXh0ID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCAmJiB0aGlzLmhhc05leHQpIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRoaXMudmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG5cdCAgICB9O1xuXHQgICAgQXN5bmNTdWJqZWN0LnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xuXHQgICAgfTtcblx0ICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcblx0ICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcblx0ICAgICAgICAvLyBvcHRpbWl6YXRpb24gdG8gYmxvY2sgb3VyIFN1YmplY3RTdWJzY3JpcHRpb25zIGZyb21cblx0ICAgICAgICAvLyBzcGxpY2luZyB0aGVtc2VsdmVzIG91dCBvZiB0aGUgb2JzZXJ2ZXJzIGxpc3Qgb25lIGJ5IG9uZS5cblx0ICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5oYXNOZXh0KSB7XG5cdCAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbyA9IG9ic2VydmVyc1tpbmRleF07XG5cdCAgICAgICAgICAgICAgICBvLm5leHQodGhpcy52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICBvLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG5cdCAgICAgICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQXN5bmNTdWJqZWN0O1xuXHR9KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5cdGV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gQXN5bmNTdWJqZWN0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1N1YmplY3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgYmluZE5vZGVDYWxsYmFja18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmJpbmROb2RlQ2FsbGJhY2sgPSBiaW5kTm9kZUNhbGxiYWNrXzEuYmluZE5vZGVDYWxsYmFjaztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZE5vZGVDYWxsYmFjay5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdGV4cG9ydHMuYmluZE5vZGVDYWxsYmFjayA9IEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZV8xLkJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZS5jcmVhdGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmROb2RlQ2FsbGJhY2suanMubWFwXG5cbi8qKiovIH0sXG4vKiAzMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdHJ5Q2F0Y2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgZXJyb3JPYmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHR2YXIgQXN5bmNTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKiBAaGlkZSB0cnVlXG5cdCAqL1xuXHR2YXIgQm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUoY2FsbGJhY2tGdW5jLCBzZWxlY3RvciwgYXJncywgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jYWxsYmFja0Z1bmMgPSBjYWxsYmFja0Z1bmM7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICAvKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXHQgICAgLyoqXG5cdCAgICAgKiBDb252ZXJ0cyBhIE5vZGUuanMtc3R5bGUgY2FsbGJhY2sgQVBJIHRvIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuXG5cdCAgICAgKiBPYnNlcnZhYmxlLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGp1c3QgbGlrZSB7QGxpbmsgYmluZENhbGxiYWNrfSwgYnV0IHRoZVxuXHQgICAgICogY2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgb2YgdHlwZSBgY2FsbGJhY2soZXJyb3IsIHJlc3VsdClgLjwvc3Bhbj5cblx0ICAgICAqXG5cdCAgICAgKiBgYmluZE5vZGVDYWxsYmFja2AgaXMgbm90IGFuIG9wZXJhdG9yIGJlY2F1c2UgaXRzIGlucHV0IGFuZCBvdXRwdXQgYXJlIG5vdFxuXHQgICAgICogT2JzZXJ2YWJsZXMuIFRoZSBpbnB1dCBpcyBhIGZ1bmN0aW9uIGBmdW5jYCB3aXRoIHNvbWUgcGFyYW1ldGVycywgYnV0IHRoZVxuXHQgICAgICogbGFzdCBwYXJhbWV0ZXIgbXVzdCBiZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgYGZ1bmNgIGNhbGxzIHdoZW4gaXQgaXNcblx0ICAgICAqIGRvbmUuIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byBmb2xsb3cgTm9kZS5qcyBjb252ZW50aW9ucyxcblx0ICAgICAqIHdoZXJlIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgY2FsbGJhY2sgaXMgYW4gZXJyb3IsIHdoaWxlIHJlbWFpbmluZ1xuXHQgICAgICogYXJndW1lbnRzIGFyZSB0aGUgY2FsbGJhY2sgcmVzdWx0LiBUaGUgb3V0cHV0IG9mIGBiaW5kTm9kZUNhbGxiYWNrYCBpcyBhXG5cdCAgICAgKiBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBzYW1lIHBhcmFtZXRlcnMgYXMgYGZ1bmNgLCBleGNlcHQgdGhlIGxhc3Qgb25lICh0aGVcblx0ICAgICAqIGNhbGxiYWNrKS4gV2hlbiB0aGUgb3V0cHV0IGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFyZ3VtZW50cywgaXQgd2lsbFxuXHQgICAgICogcmV0dXJuIGFuIE9ic2VydmFibGUgd2hlcmUgdGhlIHJlc3VsdHMgd2lsbCBiZSBkZWxpdmVyZWQgdG8uXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGUgPGNhcHRpb24+UmVhZCBhIGZpbGUgZnJvbSB0aGUgZmlsZXN5c3RlbSBhbmQgZ2V0IHRoZSBkYXRhIGFzIGFuIE9ic2VydmFibGU8L2NhcHRpb24+XG5cdCAgICAgKiBpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cdCAgICAgKiB2YXIgcmVhZEZpbGVBc09ic2VydmFibGUgPSBSeC5PYnNlcnZhYmxlLmJpbmROb2RlQ2FsbGJhY2soZnMucmVhZEZpbGUpO1xuXHQgICAgICogdmFyIHJlc3VsdCA9IHJlYWRGaWxlQXNPYnNlcnZhYmxlKCcuL3JvYWROYW1lcy50eHQnLCAndXRmOCcpO1xuXHQgICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpLCBlID0+IGNvbnNvbGUuZXJyb3IoZSkpO1xuXHQgICAgICpcblx0ICAgICAqIEBzZWUge0BsaW5rIGJpbmRDYWxsYmFja31cblx0ICAgICAqIEBzZWUge0BsaW5rIGZyb219XG5cdCAgICAgKiBAc2VlIHtAbGluayBmcm9tUHJvbWlzZX1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHdpdGggYSBjYWxsYmFjayBhcyB0aGUgbGFzdCBwYXJhbWV0ZXIuXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZWxlY3RvciBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBhcmd1bWVudHMgZnJvbSB0aGVcblx0ICAgICAqIGNhbGxiYWNrIGFuZCBtYXBzIHRob3NlIGEgdmFsdWUgdG8gZW1pdCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gVGhlIHNjaGVkdWxlciBvbiB3aGljaCB0byBzY2hlZHVsZSB0aGVcblx0ICAgICAqIGNhbGxiYWNrcy5cblx0ICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLnBhcmFtczogKik6IE9ic2VydmFibGV9IEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGVcblx0ICAgICAqIE9ic2VydmFibGUgdGhhdCBkZWxpdmVycyB0aGUgc2FtZSB2YWx1ZXMgdGhlIE5vZGUuanMgY2FsbGJhY2sgd291bGRcblx0ICAgICAqIGRlbGl2ZXIuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIGJpbmROb2RlQ2FsbGJhY2tcblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZnVuYywgc2VsZWN0b3IsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7IHNlbGVjdG9yID0gdW5kZWZpbmVkOyB9XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUoZnVuYywgc2VsZWN0b3IsIGFyZ3MsIHNjaGVkdWxlcik7XG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciBjYWxsYmFja0Z1bmMgPSB0aGlzLmNhbGxiYWNrRnVuYztcblx0ICAgICAgICB2YXIgYXJncyA9IHRoaXMuYXJncztcblx0ICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG5cdCAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG5cdCAgICAgICAgaWYgKCFzY2hlZHVsZXIpIHtcblx0ICAgICAgICAgICAgaWYgKCFzdWJqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyRm4oKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGhhbmRsZXJGbi5zb3VyY2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gc291cmNlLnNlbGVjdG9yLCBzdWJqZWN0ID0gc291cmNlLnN1YmplY3Q7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IGlubmVyQXJncy5zaGlmdCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHNlbGVjdG9yKS5hcHBseSh0aGlzLCBpbm5lckFyZ3MpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0XzEgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dChyZXN1bHRfMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dChpbm5lckFyZ3MubGVuZ3RoID09PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAvLyB1c2UgbmFtZWQgZnVuY3Rpb24gaW5zdGFuY2UgdG8gYXZvaWQgY2xvc3VyZS5cblx0ICAgICAgICAgICAgICAgIGhhbmRsZXIuc291cmNlID0gdGhpcztcblx0ICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKGNhbGxiYWNrRnVuYykuYXBwbHkodGhpcywgYXJncy5jb25jYXQoaGFuZGxlcikpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IHNvdXJjZTogdGhpcywgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZTtcblx0fShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuXHRleHBvcnRzLkJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZSA9IEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZTtcblx0ZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcblx0ICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zb3VyY2UsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuXHQgICAgdmFyIGNhbGxiYWNrRnVuYyA9IHNvdXJjZS5jYWxsYmFja0Z1bmMsIGFyZ3MgPSBzb3VyY2UuYXJncywgc2NoZWR1bGVyID0gc291cmNlLnNjaGVkdWxlcjtcblx0ICAgIHZhciBzdWJqZWN0ID0gc291cmNlLnN1YmplY3Q7XG5cdCAgICBpZiAoIXN1YmplY3QpIHtcblx0ICAgICAgICBzdWJqZWN0ID0gc291cmNlLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG5cdCAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyRm4oKSB7XG5cdCAgICAgICAgICAgIHZhciBpbm5lckFyZ3MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgc291cmNlID0gaGFuZGxlckZuLnNvdXJjZTtcblx0ICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gc291cmNlLnNlbGVjdG9yLCBzdWJqZWN0ID0gc291cmNlLnN1YmplY3Q7XG5cdCAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcblx0ICAgICAgICAgICAgaWYgKGVycikge1xuXHQgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzIgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHNlbGVjdG9yKS5hcHBseSh0aGlzLCBpbm5lckFyZ3MpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlc3VsdF8yID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoRXJyb3IsIDAsIHsgZXJyOiBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogcmVzdWx0XzIsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA9PT0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncztcblx0ICAgICAgICAgICAgICAgIHNlbGYuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgLy8gdXNlIG5hbWVkIGZ1bmN0aW9uIHRvIHBhc3MgdmFsdWVzIGluIHdpdGhvdXQgY2xvc3VyZVxuXHQgICAgICAgIGhhbmRsZXIuc291cmNlID0gc291cmNlO1xuXHQgICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKGNhbGxiYWNrRnVuYykuYXBwbHkodGhpcywgYXJncy5jb25jYXQoaGFuZGxlcikpO1xuXHQgICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHNlbGYuYWRkKHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcblx0fVxuXHRmdW5jdGlvbiBkaXNwYXRjaE5leHQoYXJnKSB7XG5cdCAgICB2YXIgdmFsdWUgPSBhcmcudmFsdWUsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcblx0ICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG5cdCAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG5cdH1cblx0ZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihhcmcpIHtcblx0ICAgIHZhciBlcnIgPSBhcmcuZXJyLCBzdWJqZWN0ID0gYXJnLnN1YmplY3Q7XG5cdCAgICBzdWJqZWN0LmVycm9yKGVycik7XG5cdH1cblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Qm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGNvbWJpbmVMYXRlc3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3RTdGF0aWM7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBBcnJheU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgaXNBcnJheV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdHZhciBpc1NjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogQ29tYmluZXMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG8gY3JlYXRlIGFuIE9ic2VydmFibGUgd2hvc2UgdmFsdWVzIGFyZVxuXHQgKiBjYWxjdWxhdGVkIGZyb20gdGhlIGxhdGVzdCB2YWx1ZXMgb2YgZWFjaCBvZiBpdHMgaW5wdXQgT2JzZXJ2YWJsZXMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5XaGVuZXZlciBhbnkgaW5wdXQgT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLCBpdFxuXHQgKiBjb21wdXRlcyBhIGZvcm11bGEgdXNpbmcgdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBhbGwgdGhlIGlucHV0cywgdGhlbiBlbWl0c1xuXHQgKiB0aGUgb3V0cHV0IG9mIHRoYXQgZm9ybXVsYS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvY29tYmluZUxhdGVzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogYGNvbWJpbmVMYXRlc3RgIGNvbWJpbmVzIHRoZSB2YWx1ZXMgZnJvbSB0aGlzIE9ic2VydmFibGUgd2l0aCB2YWx1ZXMgZnJvbVxuXHQgKiBPYnNlcnZhYmxlcyBwYXNzZWQgYXMgYXJndW1lbnRzLiBUaGlzIGlzIGRvbmUgYnkgc3Vic2NyaWJpbmcgdG8gZWFjaFxuXHQgKiBPYnNlcnZhYmxlLCBpbiBvcmRlciwgYW5kIGNvbGxlY3RpbmcgYW4gYXJyYXkgb2YgZWFjaCBvZiB0aGUgbW9zdCByZWNlbnRcblx0ICogdmFsdWVzIGFueSB0aW1lIGFueSBvZiB0aGUgaW5wdXQgT2JzZXJ2YWJsZXMgZW1pdHMsIHRoZW4gZWl0aGVyIHRha2luZyB0aGF0XG5cdCAqIGFycmF5IGFuZCBwYXNzaW5nIGl0IGFzIGFyZ3VtZW50cyB0byBhbiBvcHRpb25hbCBgcHJvamVjdGAgZnVuY3Rpb24gYW5kXG5cdCAqIGVtaXR0aW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhhdCwgb3IganVzdCBlbWl0dGluZyB0aGUgYXJyYXkgb2YgcmVjZW50XG5cdCAqIHZhbHVlcyBkaXJlY3RseSBpZiB0aGVyZSBpcyBubyBgcHJvamVjdGAgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkR5bmFtaWNhbGx5IGNhbGN1bGF0ZSB0aGUgQm9keS1NYXNzIEluZGV4IGZyb20gYW4gT2JzZXJ2YWJsZSBvZiB3ZWlnaHQgYW5kIG9uZSBmb3IgaGVpZ2h0PC9jYXB0aW9uPlxuXHQgKiB2YXIgd2VpZ2h0ID0gUnguT2JzZXJ2YWJsZS5vZig3MCwgNzIsIDc2LCA3OSwgNzUpO1xuXHQgKiB2YXIgaGVpZ2h0ID0gUnguT2JzZXJ2YWJsZS5vZigxLjc2LCAxLjc3LCAxLjc4KTtcblx0ICogdmFyIGJtaSA9IHdlaWdodC5jb21iaW5lTGF0ZXN0KGhlaWdodCwgKHcsIGgpID0+IHcgLyAoaCAqIGgpKTtcblx0ICogYm1pLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKCdCTUkgaXMgJyArIHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgY29tYmluZUFsbH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2V9XG5cdCAqIEBzZWUge0BsaW5rIHdpdGhMYXRlc3RGcm9tfVxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGV9IG90aGVyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29tYmluZSB3aXRoIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gTW9yZSB0aGFuIG9uZSBpbnB1dCBPYnNlcnZhYmxlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnQuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtwcm9qZWN0XSBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byBwcm9qZWN0IHRoZSB2YWx1ZXMgZnJvbVxuXHQgKiB0aGUgY29tYmluZWQgbGF0ZXN0IHZhbHVlcyBpbnRvIGEgbmV3IHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBwcm9qZWN0ZWQgdmFsdWVzIGZyb20gdGhlIG1vc3QgcmVjZW50XG5cdCAqIHZhbHVlcyBmcm9tIGVhY2ggaW5wdXQgT2JzZXJ2YWJsZSwgb3IgYW4gYXJyYXkgb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlcyBmcm9tXG5cdCAqIGVhY2ggaW5wdXQgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCBjb21iaW5lTGF0ZXN0XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgdmFyIHByb2plY3QgPSBudWxsO1xuXHQgICAgaWYgKHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHByb2plY3QgPSBvYnNlcnZhYmxlcy5wb3AoKTtcblx0ICAgIH1cblx0ICAgIC8vIGlmIHRoZSBmaXJzdCBhbmQgb25seSBvdGhlciBhcmd1bWVudCBiZXNpZGVzIHRoZSByZXN1bHRTZWxlY3RvciBpcyBhbiBhcnJheVxuXHQgICAgLy8gYXNzdW1lIGl0J3MgYmVlbiBjYWxsZWQgd2l0aCBgY29tYmluZUxhdGVzdChbb2JzMSwgb2JzMiwgb2JzM10sIHByb2plY3QpYFxuXHQgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcblx0ICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuXHQgICAgfVxuXHQgICAgb2JzZXJ2YWJsZXMudW5zaGlmdCh0aGlzKTtcblx0ICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpO1xuXHR9XG5cdGV4cG9ydHMuY29tYmluZUxhdGVzdCA9IGNvbWJpbmVMYXRlc3Q7XG5cdC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cdC8qKlxuXHQgKiBDb21iaW5lcyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0byBjcmVhdGUgYW4gT2JzZXJ2YWJsZSB3aG9zZSB2YWx1ZXMgYXJlXG5cdCAqIGNhbGN1bGF0ZWQgZnJvbSB0aGUgbGF0ZXN0IHZhbHVlcyBvZiBlYWNoIG9mIGl0cyBpbnB1dCBPYnNlcnZhYmxlcy5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPldoZW5ldmVyIGFueSBpbnB1dCBPYnNlcnZhYmxlIGVtaXRzIGEgdmFsdWUsIGl0XG5cdCAqIGNvbXB1dGVzIGEgZm9ybXVsYSB1c2luZyB0aGUgbGF0ZXN0IHZhbHVlcyBmcm9tIGFsbCB0aGUgaW5wdXRzLCB0aGVuIGVtaXRzXG5cdCAqIHRoZSBvdXRwdXQgb2YgdGhhdCBmb3JtdWxhLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9jb21iaW5lTGF0ZXN0LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgY29tYmluZUxhdGVzdGAgY29tYmluZXMgdGhlIHZhbHVlcyBmcm9tIGFsbCB0aGUgT2JzZXJ2YWJsZXMgcGFzc2VkIGFzXG5cdCAqIGFyZ3VtZW50cy4gVGhpcyBpcyBkb25lIGJ5IHN1YnNjcmliaW5nIHRvIGVhY2ggT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGFuZFxuXHQgKiBjb2xsZWN0aW5nIGFuIGFycmF5IG9mIGVhY2ggb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlcyBhbnkgdGltZSBhbnkgb2YgdGhlXG5cdCAqIGlucHV0IE9ic2VydmFibGVzIGVtaXRzLCB0aGVuIGVpdGhlciB0YWtpbmcgdGhhdCBhcnJheSBhbmQgcGFzc2luZyBpdCBhc1xuXHQgKiBhcmd1bWVudHMgdG8gYW4gb3B0aW9uYWwgYHByb2plY3RgIGZ1bmN0aW9uIGFuZCBlbWl0dGluZyB0aGUgcmV0dXJuIHZhbHVlIG9mXG5cdCAqIHRoYXQsIG9yIGp1c3QgZW1pdHRpbmcgdGhlIGFycmF5IG9mIHJlY2VudCB2YWx1ZXMgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm9cblx0ICogYHByb2plY3RgIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5EeW5hbWljYWxseSBjYWxjdWxhdGUgdGhlIEJvZHktTWFzcyBJbmRleCBmcm9tIGFuIE9ic2VydmFibGUgb2Ygd2VpZ2h0IGFuZCBvbmUgZm9yIGhlaWdodDwvY2FwdGlvbj5cblx0ICogdmFyIHdlaWdodCA9IFJ4Lk9ic2VydmFibGUub2YoNzAsIDcyLCA3NiwgNzksIDc1KTtcblx0ICogdmFyIGhlaWdodCA9IFJ4Lk9ic2VydmFibGUub2YoMS43NiwgMS43NywgMS43OCk7XG5cdCAqIHZhciBibWkgPSBSeC5PYnNlcnZhYmxlLmNvbWJpbmVMYXRlc3Qod2VpZ2h0LCBoZWlnaHQsICh3LCBoKSA9PiB3IC8gKGggKiBoKSk7XG5cdCAqIGJtaS5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZygnQk1JIGlzICcgKyB4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGNvbWJpbmVBbGx9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlfVxuXHQgKiBAc2VlIHtAbGluayB3aXRoTGF0ZXN0RnJvbX1cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZhYmxlfSBvYnNlcnZhYmxlMSBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIGNvbWJpbmUgd2l0aCB0aGVcblx0ICogc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gb2JzZXJ2YWJsZTIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb21iaW5lIHdpdGggdGhlXG5cdCAqIHNvdXJjZSBPYnNlcnZhYmxlLiBNb3JlIHRoYW4gb25lIGlucHV0IE9ic2VydmFibGVzIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gW3Byb2plY3RdIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIHByb2plY3QgdGhlIHZhbHVlcyBmcm9tXG5cdCAqIHRoZSBjb21iaW5lZCBsYXRlc3QgdmFsdWVzIGludG8gYSBuZXcgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1udWxsXSBUaGUgU2NoZWR1bGVyIHRvIHVzZSBmb3Igc3Vic2NyaWJpbmcgdG9cblx0ICogZWFjaCBpbnB1dCBPYnNlcnZhYmxlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIHByb2plY3RlZCB2YWx1ZXMgZnJvbSB0aGUgbW9zdCByZWNlbnRcblx0ICogdmFsdWVzIGZyb20gZWFjaCBpbnB1dCBPYnNlcnZhYmxlLCBvciBhbiBhcnJheSBvZiB0aGUgbW9zdCByZWNlbnQgdmFsdWVzIGZyb21cblx0ICogZWFjaCBpbnB1dCBPYnNlcnZhYmxlLlxuXHQgKiBAc3RhdGljIHRydWVcblx0ICogQG5hbWUgY29tYmluZUxhdGVzdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gY29tYmluZUxhdGVzdFN0YXRpYygpIHtcblx0ICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBvYnNlcnZhYmxlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgIH1cblx0ICAgIHZhciBwcm9qZWN0ID0gbnVsbDtcblx0ICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuXHQgICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIob2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG5cdCAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG5cdCAgICB9XG5cdCAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcHJvamVjdCA9IG9ic2VydmFibGVzLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgLy8gaWYgdGhlIGZpcnN0IGFuZCBvbmx5IG90aGVyIGFyZ3VtZW50IGJlc2lkZXMgdGhlIHJlc3VsdFNlbGVjdG9yIGlzIGFuIGFycmF5XG5cdCAgICAvLyBhc3N1bWUgaXQncyBiZWVuIGNhbGxlZCB3aXRoIGBjb21iaW5lTGF0ZXN0KFtvYnMxLCBvYnMyLCBvYnMzXSwgcHJvamVjdClgXG5cdCAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXlfMS5pc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuXHQgICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZV8xLkFycmF5T2JzZXJ2YWJsZShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpO1xuXHR9XG5cdGV4cG9ydHMuY29tYmluZUxhdGVzdFN0YXRpYyA9IGNvbWJpbmVMYXRlc3RTdGF0aWM7XG5cdHZhciBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdE9wZXJhdG9yKHByb2plY3QpIHtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgfVxuXHQgICAgQ29tYmluZUxhdGVzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5Db21iaW5lTGF0ZXN0T3BlcmF0b3IgPSBDb21iaW5lTGF0ZXN0T3BlcmF0b3I7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0KSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gW107XG5cdCAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuXHQgICAgICAgIHRoaXMudG9SZXNwb25kID0gW107XG5cdCAgICB9XG5cdCAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuXHQgICAgICAgIHZhciB0b1Jlc3BvbmQgPSB0aGlzLnRvUmVzcG9uZDtcblx0ICAgICAgICB0b1Jlc3BvbmQucHVzaCh0b1Jlc3BvbmQubGVuZ3RoKTtcblx0ICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG5cdCAgICB9O1xuXHQgICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuXHQgICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG5cdCAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGxlbjtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcblx0ICAgICAgICBpZiAoKHRoaXMuYWN0aXZlIC09IDEpID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdCAgICAgICAgdmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcblx0ICAgICAgICB2YXIgdG9SZXNwb25kID0gdGhpcy50b1Jlc3BvbmQ7XG5cdCAgICAgICAgaWYgKHRvUmVzcG9uZC5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuXHQgICAgICAgICAgICBpZiAoZm91bmQgIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICB0b1Jlc3BvbmQuc3BsaWNlKGZvdW5kLCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KHZhbHVlcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWVzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByb2plY3QgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QuYXBwbHkodGhpcywgdmFsdWVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHRleHBvcnRzLkNvbWJpbmVMYXRlc3RTdWJzY3JpYmVyID0gQ29tYmluZUxhdGVzdFN1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAzNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgU2NhbGFyT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdHZhciBFbXB0eU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHR2YXIgaXNTY2hlZHVsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBBcnJheU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEFycmF5T2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEFycmF5T2JzZXJ2YWJsZShhcnJheSwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIGlmICghc2NoZWR1bGVyICYmIGFycmF5Lmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICB0aGlzLl9pc1NjYWxhciA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWUgPSBhcnJheVswXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBBcnJheU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGFycmF5LCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZShhcnJheSwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0ICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNvbWUgdmFsdWVzIHlvdSBzcGVjaWZ5IGFzIGFyZ3VtZW50cyxcblx0ICAgICAqIGltbWVkaWF0ZWx5IG9uZSBhZnRlciB0aGUgb3RoZXIsIGFuZCB0aGVuIGVtaXRzIGEgY29tcGxldGUgbm90aWZpY2F0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbWl0cyB0aGUgYXJndW1lbnRzIHlvdSBwcm92aWRlLCB0aGVuIGNvbXBsZXRlcy5cblx0ICAgICAqIDwvc3Bhbj5cblx0ICAgICAqXG5cdCAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL29mLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgICAgICpcblx0ICAgICAqIFRoaXMgc3RhdGljIG9wZXJhdG9yIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgYSBzaW1wbGUgT2JzZXJ2YWJsZSB0aGF0IG9ubHlcblx0ICAgICAqIGVtaXRzIHRoZSBhcmd1bWVudHMgZ2l2ZW4sIGFuZCB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uIHRoZXJlYWZ0ZXIuIEl0IGNhblxuXHQgICAgICogYmUgdXNlZCBmb3IgY29tcG9zaW5nIHdpdGggb3RoZXIgT2JzZXJ2YWJsZXMsIHN1Y2ggYXMgd2l0aCB7QGxpbmsgY29uY2F0fS5cblx0ICAgICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgYSBgbnVsbGAgU2NoZWR1bGVyLCB3aGljaCBtZWFucyB0aGUgYG5leHRgXG5cdCAgICAgKiBub3RpZmljYXRpb25zIGFyZSBzZW50IHN5bmNocm9ub3VzbHksIGFsdGhvdWdoIHdpdGggYSBkaWZmZXJlbnQgU2NoZWR1bGVyXG5cdCAgICAgKiBpdCBpcyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgd2hlbiB0aG9zZSBub3RpZmljYXRpb25zIHdpbGwgYmUgZGVsaXZlcmVkLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgMTAsIDIwLCAzMCwgdGhlbiAnYScsICdiJywgJ2MnLCB0aGVuIHN0YXJ0IHRpY2tpbmcgZXZlcnkgc2Vjb25kLjwvY2FwdGlvbj5cblx0ICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5vZigxMCwgMjAsIDMwKTtcblx0ICAgICAqIHZhciBsZXR0ZXJzID0gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKTtcblx0ICAgICAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG5cdCAgICAgKiB2YXIgcmVzdWx0ID0gbnVtYmVycy5jb25jYXQobGV0dGVycykuY29uY2F0KGludGVydmFsKTtcblx0ICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuXHQgICAgICogQHNlZSB7QGxpbmsgZW1wdHl9XG5cdCAgICAgKiBAc2VlIHtAbGluayBuZXZlcn1cblx0ICAgICAqIEBzZWUge0BsaW5rIHRocm93fVxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7Li4uVH0gdmFsdWVzIEFyZ3VtZW50cyB0aGF0IHJlcHJlc2VudCBgbmV4dGAgdmFsdWVzIHRvIGJlIGVtaXR0ZWQuXG5cdCAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQSB7QGxpbmsgU2NoZWR1bGVyfSB0byB1c2UgZm9yIHNjaGVkdWxpbmdcblx0ICAgICAqIHRoZSBlbWlzc2lvbnMgb2YgdGhlIGBuZXh0YCBub3RpZmljYXRpb25zLlxuXHQgICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGVhY2ggZ2l2ZW4gaW5wdXQgdmFsdWUuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIG9mXG5cdCAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgICAgICovXG5cdCAgICBBcnJheU9ic2VydmFibGUub2YgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGFycmF5ID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgYXJyYXlbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcblx0ICAgICAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihzY2hlZHVsZXIpKSB7XG5cdCAgICAgICAgICAgIGFycmF5LnBvcCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc2NoZWR1bGVyID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aDtcblx0ICAgICAgICBpZiAobGVuID4gMSkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZShhcnJheSwgc2NoZWR1bGVyKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAobGVuID09PSAxKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyT2JzZXJ2YWJsZV8xLlNjYWxhck9ic2VydmFibGUoYXJyYXlbMF0sIHNjaGVkdWxlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZShzY2hlZHVsZXIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBBcnJheU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcblx0ICAgICAgICB2YXIgYXJyYXkgPSBzdGF0ZS5hcnJheSwgaW5kZXggPSBzdGF0ZS5pbmRleCwgY291bnQgPSBzdGF0ZS5jb3VudCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG5cdCAgICAgICAgaWYgKGluZGV4ID49IGNvdW50KSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaW5kZXhdKTtcblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuXHQgICAgfTtcblx0ICAgIEFycmF5T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuXHQgICAgICAgIHZhciBjb3VudCA9IGFycmF5Lmxlbmd0aDtcblx0ICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG5cdCAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEFycmF5T2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuXHQgICAgICAgICAgICAgICAgYXJyYXk6IGFycmF5LCBpbmRleDogaW5kZXgsIGNvdW50OiBjb3VudCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQgJiYgIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBBcnJheU9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5BcnJheU9ic2VydmFibGUgPSBBcnJheU9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUFycmF5T2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIFNjYWxhck9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFNjYWxhck9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTY2FsYXJPYnNlcnZhYmxlKHZhbHVlLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICAgICAgdGhpcy5faXNTY2FsYXIgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgU2NhbGFyT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAodmFsdWUsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHJldHVybiBuZXcgU2NhbGFyT2JzZXJ2YWJsZSh2YWx1ZSwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBTY2FsYXJPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdCAgICAgICAgdmFyIGRvbmUgPSBzdGF0ZS5kb25lLCB2YWx1ZSA9IHN0YXRlLnZhbHVlLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcblx0ICAgICAgICBpZiAoZG9uZSkge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuXHQgICAgfTtcblx0ICAgIFNjYWxhck9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cdCAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuXHQgICAgICAgIGlmIChzY2hlZHVsZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShTY2FsYXJPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG5cdCAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSwgdmFsdWU6IHZhbHVlLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNjYWxhck9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5TY2FsYXJPYnNlcnZhYmxlID0gU2NhbGFyT2JzZXJ2YWJsZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9U2NhbGFyT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDM4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEVtcHR5T2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRW1wdHlPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRW1wdHlPYnNlcnZhYmxlKHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBubyBpdGVtcyB0byB0aGUgT2JzZXJ2ZXIgYW5kIGltbWVkaWF0ZWx5XG5cdCAgICAgKiBlbWl0cyBhIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SnVzdCBlbWl0cyAnY29tcGxldGUnLCBhbmQgbm90aGluZyBlbHNlLlxuXHQgICAgICogPC9zcGFuPlxuXHQgICAgICpcblx0ICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvZW1wdHkucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAgICAgKlxuXHQgICAgICogVGhpcyBzdGF0aWMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhIHNpbXBsZSBPYnNlcnZhYmxlIHRoYXQgb25seVxuXHQgICAgICogZW1pdHMgdGhlIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi4gSXQgY2FuIGJlIHVzZWQgZm9yIGNvbXBvc2luZyB3aXRoIG90aGVyXG5cdCAgICAgKiBPYnNlcnZhYmxlcywgc3VjaCBhcyBpbiBhIHtAbGluayBtZXJnZU1hcH0uXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCB0aGUgbnVtYmVyIDcsIHRoZW4gY29tcGxldGUuPC9jYXB0aW9uPlxuXHQgICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuZW1wdHkoKS5zdGFydFdpdGgoNyk7XG5cdCAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBhbmQgZmxhdHRlbiBvbmx5IG9kZCBudW1iZXJzIHRvIHRoZSBzZXF1ZW5jZSAnYScsICdiJywgJ2MnPC9jYXB0aW9uPlxuXHQgICAgICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICAgICAqIHZhciByZXN1bHQgPSBpbnRlcnZhbC5tZXJnZU1hcCh4ID0+XG5cdCAgICAgKiAgIHggJSAyID09PSAxID8gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKSA6IFJ4Lk9ic2VydmFibGUuZW1wdHkoKVxuXHQgICAgICogKTtcblx0ICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuXHQgICAgICogQHNlZSB7QGxpbmsgbmV2ZXJ9XG5cdCAgICAgKiBAc2VlIHtAbGluayBvZn1cblx0ICAgICAqIEBzZWUge0BsaW5rIHRocm93fVxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSBBIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuXHQgICAgICogdGhlIGVtaXNzaW9uIG9mIHRoZSBjb21wbGV0ZSBub3RpZmljYXRpb24uXG5cdCAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBcImVtcHR5XCIgT2JzZXJ2YWJsZTogZW1pdHMgb25seSB0aGUgY29tcGxldGVcblx0ICAgICAqIG5vdGlmaWNhdGlvbi5cblx0ICAgICAqIEBzdGF0aWMgdHJ1ZVxuXHQgICAgICogQG5hbWUgZW1wdHlcblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIEVtcHR5T2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBFbXB0eU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcblx0ICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICB9O1xuXHQgICAgRW1wdHlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG5cdCAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEVtcHR5T2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwgeyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRW1wdHlPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuRW1wdHlPYnNlcnZhYmxlID0gRW1wdHlPYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1FbXB0eU9ic2VydmFibGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnNjaGVkdWxlID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiA0MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhPdXRlclN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBPdXRlclN1YnNjcmliZXIoKSB7XG5cdCAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcblx0ICAgIH07XG5cdCAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBPdXRlclN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5PdXRlclN1YnNjcmliZXIgPSBPdXRlclN1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPU91dGVyU3Vic2NyaWJlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBpc0FycmF5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblx0dmFyIGlzUHJvbWlzZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgaXRlcmF0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHR2YXIgSW5uZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0dmFyICQkb2JzZXJ2YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHRmdW5jdGlvbiBzdWJzY3JpYmVUb1Jlc3VsdChvdXRlclN1YnNjcmliZXIsIHJlc3VsdCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuXHQgICAgdmFyIGRlc3RpbmF0aW9uID0gbmV3IElubmVyU3Vic2NyaWJlcl8xLklubmVyU3Vic2NyaWJlcihvdXRlclN1YnNjcmliZXIsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpO1xuXHQgICAgaWYgKGRlc3RpbmF0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG5cdCAgICAgICAgaWYgKHJlc3VsdC5faXNTY2FsYXIpIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXN1bHQudmFsdWUpO1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnN1YnNjcmliZShkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKGlzQXJyYXlfMS5pc0FycmF5KHJlc3VsdCkpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbiAmJiAhZGVzdGluYXRpb24uaXNVbnN1YnNjcmliZWQ7IGkrKykge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJlc3VsdFtpXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghZGVzdGluYXRpb24uaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UocmVzdWx0KSkge1xuXHQgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBkZXN0aW5hdGlvbi5lcnJvcihlcnIpOyB9KVxuXHQgICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgICAgIC8vIEVzY2FwaW5nIHRoZSBQcm9taXNlIHRyYXA6IGdsb2JhbGx5IHRocm93IHVuaGFuZGxlZCBlcnJvcnNcblx0ICAgICAgICAgICAgcm9vdF8xLnJvb3Quc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFtpdGVyYXRvcl8xLiQkaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHJlc3VsdDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgdmFyIGl0ZW0gPSBfYVtfaV07XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaXRlbSk7XG5cdCAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRbJCRvYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHZhciBvYnMgPSByZXN1bHRbJCRvYnNlcnZhYmxlXSgpO1xuXHQgICAgICAgIGlmICh0eXBlb2Ygb2JzLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcignaW52YWxpZCBvYnNlcnZhYmxlJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShuZXcgSW5uZXJTdWJzY3JpYmVyXzEuSW5uZXJTdWJzY3JpYmVyKG91dGVyU3Vic2NyaWJlciwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBUeXBlRXJyb3IoJ3Vua25vd24gdHlwZSByZXR1cm5lZCcpKTtcblx0ICAgIH1cblx0fVxuXHRleHBvcnRzLnN1YnNjcmliZVRvUmVzdWx0ID0gc3Vic2NyaWJlVG9SZXN1bHQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUmVzdWx0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcblx0ICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGV4cG9ydHMuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG5cbi8qKiovIH0sXG4vKiA0MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciByb290XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgaWYgKFN5bWJvbC5pdGVyYXRvcikge1xuXHQgICAgICAgIGV4cG9ydHMuJCRpdGVyYXRvciA9IFN5bWJvbC5pdGVyYXRvcjtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgZXhwb3J0cy4kJGl0ZXJhdG9yID0gU3ltYm9sLmZvcignaXRlcmF0b3InKTtcblx0ICAgIH1cblx0fVxuXHRlbHNlIHtcblx0ICAgIGlmIChyb290XzEucm9vdC5TZXQgJiYgdHlwZW9mIG5ldyByb290XzEucm9vdC5TZXQoKVsnQEBpdGVyYXRvciddID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgLy8gQnVnIGZvciBtb3ppbGxhIHZlcnNpb25cblx0ICAgICAgICBleHBvcnRzLiQkaXRlcmF0b3IgPSAnQEBpdGVyYXRvcic7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChyb290XzEucm9vdC5NYXApIHtcblx0ICAgICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuXHQgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocm9vdF8xLnJvb3QuTWFwLnByb3RvdHlwZSk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXHQgICAgICAgICAgICBpZiAoa2V5ICE9PSAnZW50cmllcycgJiYga2V5ICE9PSAnc2l6ZScgJiYgcm9vdF8xLnJvb3QuTWFwLnByb3RvdHlwZVtrZXldID09PSByb290XzEucm9vdC5NYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcblx0ICAgICAgICAgICAgICAgIGV4cG9ydHMuJCRpdGVyYXRvciA9IGtleTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgZXhwb3J0cy4kJGl0ZXJhdG9yID0gJ0BAaXRlcmF0b3InO1xuXHQgICAgfVxuXHR9XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIElubmVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoSW5uZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gSW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHQgICAgICAgIHRoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG5cdCAgICAgICAgdGhpcy5vdXRlckluZGV4ID0gb3V0ZXJJbmRleDtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgIH1cblx0ICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlOZXh0KHRoaXMub3V0ZXJWYWx1ZSwgdmFsdWUsIHRoaXMub3V0ZXJJbmRleCwgdGhpcy5pbmRleCsrLCB0aGlzKTtcblx0ICAgIH07XG5cdCAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUVycm9yKGVycm9yLCB0aGlzKTtcblx0ICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG5cdCAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5Jbm5lclN1YnNjcmliZXIgPSBJbm5lclN1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBjb25jYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5jb25jYXQgPSBjb25jYXRfMS5jb25jYXQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDQ2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGNvbmNhdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdGV4cG9ydHMuY29uY2F0ID0gY29uY2F0XzEuY29uY2F0U3RhdGljO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwXG5cbi8qKiovIH0sXG4vKiA0NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBpc1NjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdHZhciBBcnJheU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgbWVyZ2VBbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBvdXRwdXQgT2JzZXJ2YWJsZSB3aGljaCBzZXF1ZW50aWFsbHkgZW1pdHMgYWxsIHZhbHVlcyBmcm9tIGV2ZXJ5XG5cdCAqIGdpdmVuIGlucHV0IE9ic2VydmFibGUgYWZ0ZXIgdGhlIGN1cnJlbnQgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbmNhdGVuYXRlcyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieVxuXHQgKiBzZXF1ZW50aWFsbHkgZW1pdHRpbmcgdGhlaXIgdmFsdWVzLCBvbmUgT2JzZXJ2YWJsZSBhZnRlciB0aGUgb3RoZXIuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogSm9pbnMgdGhpcyBPYnNlcnZhYmxlIHdpdGggbXVsdGlwbGUgb3RoZXIgT2JzZXJ2YWJsZXMgYnkgc3Vic2NyaWJpbmcgdG8gdGhlbVxuXHQgKiBvbmUgYXQgYSB0aW1lLCBzdGFydGluZyB3aXRoIHRoZSBzb3VyY2UsIGFuZCBtZXJnaW5nIHRoZWlyIHJlc3VsdHMgaW50byB0aGVcblx0ICogb3V0cHV0IE9ic2VydmFibGUuIFdpbGwgd2FpdCBmb3IgZWFjaCBPYnNlcnZhYmxlIHRvIGNvbXBsZXRlIGJlZm9yZSBtb3Zpbmdcblx0ICogb24gdG8gdGhlIG5leHQuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIGEgdGltZXIgY291bnRpbmcgZnJvbSAwIHRvIDMgd2l0aCBhIHN5bmNocm9ub3VzIHNlcXVlbmNlIGZyb20gMSB0byAxMDwvY2FwdGlvbj5cblx0ICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDQpO1xuXHQgKiB2YXIgc2VxdWVuY2UgPSBSeC5PYnNlcnZhYmxlLnJhbmdlKDEsIDEwKTtcblx0ICogdmFyIHJlc3VsdCA9IHRpbWVyLmNvbmNhdChzZXF1ZW5jZSk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIDMgT2JzZXJ2YWJsZXM8L2NhcHRpb24+XG5cdCAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuXHQgKiB2YXIgdGltZXIyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgyMDAwKS50YWtlKDYpO1xuXHQgKiB2YXIgdGltZXIzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCg1MDApLnRha2UoMTApO1xuXHQgKiB2YXIgcmVzdWx0ID0gdGltZXIxLmNvbmNhdCh0aW1lcjIsIHRpbWVyMyk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwfVxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZhYmxlfSBvdGhlciBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIGNvbmNhdGVuYXRlIGFmdGVyIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gTW9yZSB0aGFuIG9uZSBpbnB1dCBPYnNlcnZhYmxlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnQuXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPW51bGxdIEFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byBzY2hlZHVsZSBlYWNoXG5cdCAqIE9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG9uLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbGwgdmFsdWVzIG9mIGVhY2ggcGFzc2VkIE9ic2VydmFibGUgbWVyZ2VkIGludG8gYVxuXHQgKiBzaW5nbGUgT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGluIHNlcmlhbCBmYXNoaW9uLlxuXHQgKiBAbWV0aG9kIGNvbmNhdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gY29uY2F0KCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNvbmNhdFN0YXRpYy5hcHBseSh2b2lkIDAsIFt0aGlzXS5jb25jYXQob2JzZXJ2YWJsZXMpKTtcblx0fVxuXHRleHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcblx0LyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggc2VxdWVudGlhbGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuXHQgKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIGFmdGVyIHRoZSBjdXJyZW50IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db25jYXRlbmF0ZXMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnlcblx0ICogc2VxdWVudGlhbGx5IGVtaXR0aW5nIHRoZWlyIHZhbHVlcywgb25lIE9ic2VydmFibGUgYWZ0ZXIgdGhlIG90aGVyLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9jb25jYXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEpvaW5zIG11bHRpcGxlIE9ic2VydmFibGVzIHRvZ2V0aGVyIGJ5IHN1YnNjcmliaW5nIHRvIHRoZW0gb25lIGF0IGEgdGltZSBhbmRcblx0ICogbWVyZ2luZyB0aGVpciByZXN1bHRzIGludG8gdGhlIG91dHB1dCBPYnNlcnZhYmxlLiBXaWxsIHdhaXQgZm9yIGVhY2hcblx0ICogT2JzZXJ2YWJsZSB0byBjb21wbGV0ZSBiZWZvcmUgbW92aW5nIG9uIHRvIHRoZSBuZXh0LlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db25jYXRlbmF0ZSBhIHRpbWVyIGNvdW50aW5nIGZyb20gMCB0byAzIHdpdGggYSBzeW5jaHJvbm91cyBzZXF1ZW5jZSBmcm9tIDEgdG8gMTA8L2NhcHRpb24+XG5cdCAqIHZhciB0aW1lciA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkudGFrZSg0KTtcblx0ICogdmFyIHNlcXVlbmNlID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCAxMCk7XG5cdCAqIHZhciByZXN1bHQgPSBSeC5PYnNlcnZhYmxlLmNvbmNhdCh0aW1lciwgc2VxdWVuY2UpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db25jYXRlbmF0ZSAzIE9ic2VydmFibGVzPC9jYXB0aW9uPlxuXHQgKiB2YXIgdGltZXIxID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKTtcblx0ICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcblx0ICogdmFyIHRpbWVyMyA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoNTAwKS50YWtlKDEwKTtcblx0ICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuY29uY2F0KHRpbWVyMSwgdGltZXIyLCB0aW1lcjMpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRBbGx9XG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcH1cblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwVG99XG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5wdXQxIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29uY2F0ZW5hdGUgd2l0aCBvdGhlcnMuXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5wdXQyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29uY2F0ZW5hdGUgd2l0aCBvdGhlcnMuXG5cdCAqIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1udWxsXSBBbiBvcHRpb25hbCBTY2hlZHVsZXIgdG8gc2NoZWR1bGUgZWFjaFxuXHQgKiBPYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBvbi5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQWxsIHZhbHVlcyBvZiBlYWNoIHBhc3NlZCBPYnNlcnZhYmxlIG1lcmdlZCBpbnRvIGFcblx0ICogc2luZ2xlIE9ic2VydmFibGUsIGluIG9yZGVyLCBpbiBzZXJpYWwgZmFzaGlvbi5cblx0ICogQHN0YXRpYyB0cnVlXG5cdCAqIEBuYW1lIGNvbmNhdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gY29uY2F0U3RhdGljKCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG5cdCAgICB2YXIgYXJncyA9IG9ic2VydmFibGVzO1xuXHQgICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoYXJnc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSkpIHtcblx0ICAgICAgICBzY2hlZHVsZXIgPSBhcmdzLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUob2JzZXJ2YWJsZXMsIHNjaGVkdWxlcikubGlmdChuZXcgbWVyZ2VBbGxfMS5NZXJnZUFsbE9wZXJhdG9yKDEpKTtcblx0fVxuXHRleHBvcnRzLmNvbmNhdFN0YXRpYyA9IGNvbmNhdFN0YXRpYztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgaGlnaGVyLW9yZGVyIE9ic2VydmFibGUgaW50byBhIGZpcnN0LW9yZGVyIE9ic2VydmFibGUgd2hpY2hcblx0ICogY29uY3VycmVudGx5IGRlbGl2ZXJzIGFsbCB2YWx1ZXMgdGhhdCBhcmUgZW1pdHRlZCBvbiB0aGUgaW5uZXIgT2JzZXJ2YWJsZXMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5GbGF0dGVucyBhbiBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9tZXJnZUFsbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogYG1lcmdlQWxsYCBzdWJzY3JpYmVzIHRvIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBPYnNlcnZhYmxlcywgYWxzbyBrbm93biBhc1xuXHQgKiBhIGhpZ2hlci1vcmRlciBPYnNlcnZhYmxlLiBFYWNoIHRpbWUgaXQgb2JzZXJ2ZXMgb25lIG9mIHRoZXNlIGVtaXR0ZWQgaW5uZXJcblx0ICogT2JzZXJ2YWJsZXMsIGl0IHN1YnNjcmliZXMgdG8gdGhhdCBhbmQgZGVsaXZlcnMgYWxsIHRoZSB2YWx1ZXMgZnJvbSB0aGVcblx0ICogaW5uZXIgT2JzZXJ2YWJsZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvbmx5XG5cdCAqIGNvbXBsZXRlcyBvbmNlIGFsbCBpbm5lciBPYnNlcnZhYmxlcyBoYXZlIGNvbXBsZXRlZC4gQW55IGVycm9yIGRlbGl2ZXJlZCBieVxuXHQgKiBhIGlubmVyIE9ic2VydmFibGUgd2lsbCBiZSBpbW1lZGlhdGVseSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+U3Bhd24gYSBuZXcgaW50ZXJ2YWwgT2JzZXJ2YWJsZSBmb3IgZWFjaCBjbGljayBldmVudCwgYW5kIGJsZW5kIHRoZWlyIG91dHB1dHMgYXMgb25lIE9ic2VydmFibGU8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBoaWdoZXJPcmRlciA9IGNsaWNrcy5tYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogdmFyIGZpcnN0T3JkZXIgPSBoaWdoZXJPcmRlci5tZXJnZUFsbCgpO1xuXHQgKiBmaXJzdE9yZGVyLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+Q291bnQgZnJvbSAwIHRvIDkgZXZlcnkgc2Vjb25kIGZvciBlYWNoIGNsaWNrLCBidXQgb25seSBhbGxvdyAyIGNvbmN1cnJlbnQgdGltZXJzPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgaGlnaGVyT3JkZXIgPSBjbGlja3MubWFwKChldikgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKSk7XG5cdCAqIHZhciBmaXJzdE9yZGVyID0gaGlnaGVyT3JkZXIubWVyZ2VBbGwoMik7XG5cdCAqIGZpcnN0T3JkZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb21iaW5lQWxsfVxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRBbGx9XG5cdCAqIEBzZWUge0BsaW5rIGV4aGF1c3R9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZU1hcH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2h9XG5cdCAqIEBzZWUge0BsaW5rIHppcEFsbH1cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV0gTWF4aW11bSBudW1iZXIgb2YgaW5uZXJcblx0ICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB2YWx1ZXMgY29taW5nIGZyb20gYWxsIHRoZVxuXHQgKiBpbm5lciBPYnNlcnZhYmxlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCBtZXJnZUFsbFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuXHQgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNZXJnZUFsbE9wZXJhdG9yKGNvbmN1cnJlbnQpKTtcblx0fVxuXHRleHBvcnRzLm1lcmdlQWxsID0gbWVyZ2VBbGw7XG5cdHZhciBNZXJnZUFsbE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1lcmdlQWxsT3BlcmF0b3IoY29uY3VycmVudCkge1xuXHQgICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG5cdCAgICB9XG5cdCAgICBNZXJnZUFsbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IE1lcmdlQWxsU3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5jb25jdXJyZW50KSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1lcmdlQWxsT3BlcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuTWVyZ2VBbGxPcGVyYXRvciA9IE1lcmdlQWxsT3BlcmF0b3I7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIE1lcmdlQWxsU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTWVyZ2VBbGxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gTWVyZ2VBbGxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25jdXJyZW50KSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHRoaXMuYWN0aXZlID0gMDtcblx0ICAgIH1cblx0ICAgIE1lcmdlQWxsU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuXHQgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuXHQgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG9ic2VydmFibGUpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2gob2JzZXJ2YWJsZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIE1lcmdlQWxsU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgTWVyZ2VBbGxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0ICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUtLTtcblx0ICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1lcmdlQWxsU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5NZXJnZUFsbFN1YnNjcmliZXIgPSBNZXJnZUFsbFN1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGRlZmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZGVmZXIgPSBkZWZlcl8xLmRlZmVyO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWZlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDUwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIERlZmVyT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdGV4cG9ydHMuZGVmZXIgPSBEZWZlck9ic2VydmFibGVfMS5EZWZlck9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWZlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDUxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBEZWZlck9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlZmVyT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIERlZmVyT2JzZXJ2YWJsZShvYnNlcnZhYmxlRmFjdG9yeSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMub2JzZXJ2YWJsZUZhY3RvcnkgPSBvYnNlcnZhYmxlRmFjdG9yeTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQsIG9uIHN1YnNjcmliZSwgY2FsbHMgYW4gT2JzZXJ2YWJsZSBmYWN0b3J5IHRvXG5cdCAgICAgKiBtYWtlIGFuIE9ic2VydmFibGUgZm9yIGVhY2ggbmV3IE9ic2VydmVyLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5DcmVhdGVzIHRoZSBPYnNlcnZhYmxlIGxhemlseSwgdGhhdCBpcywgb25seSB3aGVuIGl0XG5cdCAgICAgKiBpcyBzdWJzY3JpYmVkLlxuXHQgICAgICogPC9zcGFuPlxuXHQgICAgICpcblx0ICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvZGVmZXIucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAgICAgKlxuXHQgICAgICogYGRlZmVyYCBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0aGUgT2JzZXJ2YWJsZSBvbmx5IHdoZW4gdGhlIE9ic2VydmVyXG5cdCAgICAgKiBzdWJzY3JpYmVzLCBhbmQgY3JlYXRlIGEgZnJlc2ggT2JzZXJ2YWJsZSBmb3IgZWFjaCBPYnNlcnZlci4gSXQgd2FpdHMgdW50aWxcblx0ICAgICAqIGFuIE9ic2VydmVyIHN1YnNjcmliZXMgdG8gaXQsIGFuZCB0aGVuIGl0IGdlbmVyYXRlcyBhbiBPYnNlcnZhYmxlLFxuXHQgICAgICogdHlwaWNhbGx5IHdpdGggYW4gT2JzZXJ2YWJsZSBmYWN0b3J5IGZ1bmN0aW9uLiBJdCBkb2VzIHRoaXMgYWZyZXNoIGZvciBlYWNoXG5cdCAgICAgKiBzdWJzY3JpYmVyLCBzbyBhbHRob3VnaCBlYWNoIHN1YnNjcmliZXIgbWF5IHRoaW5rIGl0IGlzIHN1YnNjcmliaW5nIHRvIHRoZVxuXHQgICAgICogc2FtZSBPYnNlcnZhYmxlLCBpbiBmYWN0IGVhY2ggc3Vic2NyaWJlciBnZXRzIGl0cyBvd24gaW5kaXZpZHVhbFxuXHQgICAgICogT2JzZXJ2YWJsZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TdWJzY3JpYmUgdG8gZWl0aGVyIGFuIE9ic2VydmFibGUgb2YgY2xpY2tzIG9yIGFuIE9ic2VydmFibGUgb2YgaW50ZXJ2YWwsIGF0IHJhbmRvbTwvY2FwdGlvbj5cblx0ICAgICAqIHZhciBjbGlja3NPckludGVydmFsID0gUnguT2JzZXJ2YWJsZS5kZWZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgKiAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG5cdCAgICAgKiAgICAgcmV0dXJuIFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICAgICAqICAgfSBlbHNlIHtcblx0ICAgICAqICAgICByZXR1cm4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICAgICAqICAgfVxuXHQgICAgICogfSk7XG5cdCAgICAgKiBjbGlja3NPckludGVydmFsLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICAgICAqXG5cdCAgICAgKiBAc2VlIHtAbGluayBjcmVhdGV9XG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiBPYnNlcnZhYmxlfFByb21pc2V9IG9ic2VydmFibGVGYWN0b3J5IFRoZSBPYnNlcnZhYmxlXG5cdCAgICAgKiBmYWN0b3J5IGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZWFjaCBPYnNlcnZlciB0aGF0IHN1YnNjcmliZXMgdG8gdGhlIG91dHB1dFxuXHQgICAgICogT2JzZXJ2YWJsZS4gTWF5IGFsc28gcmV0dXJuIGEgUHJvbWlzZSwgd2hpY2ggd2lsbCBiZSBjb252ZXJ0ZWQgb24gdGhlIGZseVxuXHQgICAgICogdG8gYW4gT2JzZXJ2YWJsZS5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgd2hvc2UgT2JzZXJ2ZXJzJyBzdWJzY3JpcHRpb25zIHRyaWdnZXJcblx0ICAgICAqIGFuIGludm9jYXRpb24gb2YgdGhlIGdpdmVuIE9ic2VydmFibGUgZmFjdG9yeSBmdW5jdGlvbi5cblx0ICAgICAqIEBzdGF0aWMgdHJ1ZVxuXHQgICAgICogQG5hbWUgZGVmZXJcblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIERlZmVyT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZUZhY3RvcnkpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IERlZmVyT2JzZXJ2YWJsZShvYnNlcnZhYmxlRmFjdG9yeSk7XG5cdCAgICB9O1xuXHQgICAgRGVmZXJPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IERlZmVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9ic2VydmFibGVGYWN0b3J5KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGVmZXJPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuRGVmZXJPYnNlcnZhYmxlID0gRGVmZXJPYnNlcnZhYmxlO1xuXHR2YXIgRGVmZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhEZWZlclN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBEZWZlclN1YnNjcmliZXIoZGVzdGluYXRpb24sIGZhY3RvcnkpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5mYWN0b3J5ID0gZmFjdG9yeTtcblx0ICAgICAgICB0aGlzLnRyeURlZmVyKCk7XG5cdCAgICB9XG5cdCAgICBEZWZlclN1YnNjcmliZXIucHJvdG90eXBlLnRyeURlZmVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NhbGxGYWN0b3J5KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRGVmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY2FsbEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZmFjdG9yeSgpO1xuXHQgICAgICAgIGlmIChyZXN1bHQpIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERlZmVyU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmZXJPYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGVtcHR5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZW1wdHkgPSBlbXB0eV8xLmVtcHR5O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDUzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdGV4cG9ydHMuZW1wdHkgPSBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBmb3JrSm9pbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmZvcmtKb2luID0gZm9ya0pvaW5fMS5mb3JrSm9pbjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ya0pvaW4uanMubWFwXG5cbi8qKiovIH0sXG4vKiA1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBGb3JrSm9pbk9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXHRleHBvcnRzLmZvcmtKb2luID0gRm9ya0pvaW5PYnNlcnZhYmxlXzEuRm9ya0pvaW5PYnNlcnZhYmxlLmNyZWF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ya0pvaW4uanMubWFwXG5cbi8qKiovIH0sXG4vKiA1NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgRW1wdHlPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblx0dmFyIGlzQXJyYXlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKiBAaGlkZSB0cnVlXG5cdCAqL1xuXHR2YXIgRm9ya0pvaW5PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhGb3JrSm9pbk9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBGb3JrSm9pbk9ic2VydmFibGUoc291cmNlcywgcmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnNvdXJjZXMgPSBzb3VyY2VzO1xuXHQgICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHNvdXJjZXNcblx0ICAgICAqIEByZXR1cm4ge2FueX1cblx0ICAgICAqIEBzdGF0aWMgdHJ1ZVxuXHQgICAgICogQG5hbWUgZm9ya0pvaW5cblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIEZvcmtKb2luT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgICAgICBzb3VyY2VzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc291cmNlcyA9PT0gbnVsbCB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHRTZWxlY3RvciA9IG51bGw7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VzW3NvdXJjZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBzb3VyY2VzLnBvcCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBpZiB0aGUgZmlyc3QgYW5kIG9ubHkgb3RoZXIgYXJndW1lbnQgYmVzaWRlcyB0aGUgcmVzdWx0U2VsZWN0b3IgaXMgYW4gYXJyYXlcblx0ICAgICAgICAvLyBhc3N1bWUgaXQncyBiZWVuIGNhbGxlZCB3aXRoIGBmb3JrSm9pbihbb2JzMSwgb2JzMiwgb2JzM10sIHJlc3VsdFNlbGVjdG9yKWBcblx0ICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheV8xLmlzQXJyYXkoc291cmNlc1swXSkpIHtcblx0ICAgICAgICAgICAgc291cmNlcyA9IHNvdXJjZXNbMF07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3IEZvcmtKb2luT2JzZXJ2YWJsZShzb3VyY2VzLCByZXN1bHRTZWxlY3Rvcik7XG5cdCAgICB9O1xuXHQgICAgRm9ya0pvaW5PYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IEZvcmtKb2luU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZXMsIHRoaXMucmVzdWx0U2VsZWN0b3IpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBGb3JrSm9pbk9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5Gb3JrSm9pbk9ic2VydmFibGUgPSBGb3JrSm9pbk9ic2VydmFibGU7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEZvcmtKb2luU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRm9ya0pvaW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRm9ya0pvaW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzb3VyY2VzLCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnNvdXJjZXMgPSBzb3VyY2VzO1xuXHQgICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IDA7XG5cdCAgICAgICAgdGhpcy5oYXZlVmFsdWVzID0gMDtcblx0ICAgICAgICB2YXIgbGVuID0gc291cmNlcy5sZW5ndGg7XG5cdCAgICAgICAgdGhpcy50b3RhbCA9IGxlbjtcblx0ICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaV07XG5cdCAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgc291cmNlLCBudWxsLCBpKTtcblx0ICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5vdXRlckluZGV4ID0gaTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIEZvcmtKb2luU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcblx0ICAgICAgICBpZiAoIWlubmVyU3ViLl9oYXNWYWx1ZSkge1xuXHQgICAgICAgICAgICBpbm5lclN1Yi5faGFzVmFsdWUgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzLmhhdmVWYWx1ZXMrKztcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRm9ya0pvaW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG5cdCAgICAgICAgdmFyIF9hID0gdGhpcywgaGF2ZVZhbHVlcyA9IF9hLmhhdmVWYWx1ZXMsIHJlc3VsdFNlbGVjdG9yID0gX2EucmVzdWx0U2VsZWN0b3IsIHZhbHVlcyA9IF9hLnZhbHVlcztcblx0ICAgICAgICB2YXIgbGVuID0gdmFsdWVzLmxlbmd0aDtcblx0ICAgICAgICBpZiAoIWlubmVyU3ViLl9oYXNWYWx1ZSkge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY29tcGxldGVkKys7XG5cdCAgICAgICAgaWYgKHRoaXMuY29tcGxldGVkICE9PSBsZW4pIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaGF2ZVZhbHVlcyA9PT0gbGVuKSB7XG5cdCAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodGhpcywgdmFsdWVzKSA6IHZhbHVlcztcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZvcmtKb2luU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Rm9ya0pvaW5PYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGZyb21fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tID0gZnJvbV8xLmZyb207XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwXG5cbi8qKiovIH0sXG4vKiA1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBGcm9tT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7XG5cdGV4cG9ydHMuZnJvbSA9IEZyb21PYnNlcnZhYmxlXzEuRnJvbU9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgaXNBcnJheV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdHZhciBpc0Z1bmN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblx0dmFyIGlzUHJvbWlzZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cdHZhciBpc1NjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdHZhciBQcm9taXNlT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cdHZhciBJdGVyYXRvck9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXHR2YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIEFycmF5TGlrZU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpO1xuXHR2YXIgaXRlcmF0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG9ic2VydmVPbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cdHZhciAkJG9ic2VydmFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblx0dmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBGcm9tT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRnJvbU9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBGcm9tT2JzZXJ2YWJsZShpc2gsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG51bGwpO1xuXHQgICAgICAgIHRoaXMuaXNoID0gaXNoO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgZnJvbSBhbiBBcnJheSwgYW4gYXJyYXktbGlrZSBvYmplY3QsIGEgUHJvbWlzZSwgYW5cblx0ICAgICAqIGl0ZXJhYmxlIG9iamVjdCwgb3IgYW4gT2JzZXJ2YWJsZS1saWtlIG9iamVjdC5cblx0ICAgICAqXG5cdCAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+Q29udmVydHMgYWxtb3N0IGFueXRoaW5nIHRvIGFuIE9ic2VydmFibGUuPC9zcGFuPlxuXHQgICAgICpcblx0ICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvZnJvbS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICAgICAqXG5cdCAgICAgKiBDb252ZXJ0IHZhcmlvdXMgb3RoZXIgb2JqZWN0cyBhbmQgZGF0YSB0eXBlcyBpbnRvIE9ic2VydmFibGVzLiBgZnJvbWBcblx0ICAgICAqIGNvbnZlcnRzIGEgUHJvbWlzZSBvciBhbiBhcnJheS1saWtlIG9yIGFuXG5cdCAgICAgKiBbaXRlcmFibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmFibGUpXG5cdCAgICAgKiBvYmplY3QgaW50byBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIGl0ZW1zIGluIHRoYXQgcHJvbWlzZSBvciBhcnJheSBvclxuXHQgICAgICogaXRlcmFibGUuIEEgU3RyaW5nLCBpbiB0aGlzIGNvbnRleHQsIGlzIHRyZWF0ZWQgYXMgYW4gYXJyYXkgb2YgY2hhcmFjdGVycy5cblx0ICAgICAqIE9ic2VydmFibGUtbGlrZSBvYmplY3RzIChjb250YWlucyBhIGZ1bmN0aW9uIG5hbWVkIHdpdGggdGhlIEVTMjAxNSBTeW1ib2xcblx0ICAgICAqIGZvciBPYnNlcnZhYmxlKSBjYW4gYWxzbyBiZSBjb252ZXJ0ZWQgdGhyb3VnaCB0aGlzIG9wZXJhdG9yLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbnZlcnRzIGFuIGFycmF5IHRvIGFuIE9ic2VydmFibGU8L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgYXJyYXkgPSBbMTAsIDIwLCAzMF07XG5cdCAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS5mcm9tKGFycmF5KTtcblx0ICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q29udmVydCBhbiBpbmZpbml0ZSBpdGVyYWJsZSAoZnJvbSBhIGdlbmVyYXRvcikgdG8gYW4gT2JzZXJ2YWJsZTwvY2FwdGlvbj5cblx0ICAgICAqIGZ1bmN0aW9uKiBnZW5lcmF0ZURvdWJsZXMoc2VlZCkge1xuXHQgICAgICogICB2YXIgaSA9IHNlZWQ7XG5cdCAgICAgKiAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgKiAgICAgeWllbGQgaTtcblx0ICAgICAqICAgICBpID0gMiAqIGk7IC8vIGRvdWJsZSBpdFxuXHQgICAgICogICB9XG5cdCAgICAgKiB9XG5cdCAgICAgKlxuXHQgICAgICogdmFyIGl0ZXJhdG9yID0gZ2VuZXJhdGVEb3VibGVzKDMpO1xuXHQgICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuZnJvbShpdGVyYXRvcikudGFrZSgxMCk7XG5cdCAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgICAgICpcblx0ICAgICAqIEBzZWUge0BsaW5rIGNyZWF0ZX1cblx0ICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudH1cblx0ICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudFBhdHRlcm59XG5cdCAgICAgKiBAc2VlIHtAbGluayBmcm9tUHJvbWlzZX1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge09ic2VydmFibGVJbnB1dDxUPn0gaXNoIEEgc3Vic2NyaWJhYmxlIG9iamVjdCwgYSBQcm9taXNlLCBhblxuXHQgICAgICogT2JzZXJ2YWJsZS1saWtlLCBhbiBBcnJheSwgYW4gaXRlcmFibGUgb3IgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYmVcblx0ICAgICAqIGNvbnZlcnRlZC5cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogYW55LCBpOiBudW1iZXIpOiBUfSBbbWFwRm5dIEEgXCJtYXBcIiBmdW5jdGlvbiB0byBjYWxsXG5cdCAgICAgKiB3aGVuIGNvbnZlcnRpbmcgYXJyYXktbGlrZSBvYmplY3RzLCB3aGVyZSBgeGAgaXMgYSB2YWx1ZSBmcm9tIHRoZVxuXHQgICAgICogYXJyYXktbGlrZSBhbmQgYGlgIGlzIHRoZSBpbmRleCBvZiB0aGF0IHZhbHVlIGluIHRoZSBzZXF1ZW5jZS5cblx0ICAgICAqIEBwYXJhbSB7YW55fSBbdGhpc0FyZ10gVGhlIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGNhbGxpbmcgdGhlIGBtYXBGbmAsXG5cdCAgICAgKiBpZiBwcm92aWRlZC5cblx0ICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSBUaGUgc2NoZWR1bGVyIG9uIHdoaWNoIHRvIHNjaGVkdWxlIHRoZVxuXHQgICAgICogZW1pc3Npb25zIG9mIHZhbHVlcy5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IFRoZSBPYnNlcnZhYmxlIHdob3NlIHZhbHVlcyBhcmUgb3JpZ2luYWxseSBmcm9tIHRoZVxuXHQgICAgICogaW5wdXQgb2JqZWN0IHRoYXQgd2FzIGNvbnZlcnRlZC5cblx0ICAgICAqIEBzdGF0aWMgdHJ1ZVxuXHQgICAgICogQG5hbWUgZnJvbVxuXHQgICAgICogQG93bmVyIE9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgRnJvbU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGlzaCwgbWFwRm5PclNjaGVkdWxlciwgdGhpc0FyZywgbGFzdFNjaGVkdWxlcikge1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuXHQgICAgICAgIHZhciBtYXBGbiA9IG51bGw7XG5cdCAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG1hcEZuT3JTY2hlZHVsZXIpKSB7XG5cdCAgICAgICAgICAgIHNjaGVkdWxlciA9IGxhc3RTY2hlZHVsZXIgfHwgbnVsbDtcblx0ICAgICAgICAgICAgbWFwRm4gPSBtYXBGbk9yU2NoZWR1bGVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcblx0ICAgICAgICAgICAgc2NoZWR1bGVyID0gbWFwRm5PclNjaGVkdWxlcjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGlzaCAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgaXNoWyQkb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpc2ggaW5zdGFuY2VvZiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSAmJiAhc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzaDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnJvbU9ic2VydmFibGUoaXNoLCBzY2hlZHVsZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlfMS5pc0FycmF5KGlzaCkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKGlzaCwgc2NoZWR1bGVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UoaXNoKSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlT2JzZXJ2YWJsZV8xLlByb21pc2VPYnNlcnZhYmxlKGlzaCwgc2NoZWR1bGVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaXNoW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGlzaCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JPYnNlcnZhYmxlXzEuSXRlcmF0b3JPYnNlcnZhYmxlKGlzaCwgbnVsbCwgbnVsbCwgc2NoZWR1bGVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZShpc2gpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5TGlrZU9ic2VydmFibGVfMS5BcnJheUxpa2VPYnNlcnZhYmxlKGlzaCwgbWFwRm4sIHRoaXNBcmcsIHNjaGVkdWxlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoaXNoICE9PSBudWxsICYmIHR5cGVvZiBpc2ggfHwgaXNoKSArICcgaXMgbm90IG9ic2VydmFibGUnKTtcblx0ICAgIH07XG5cdCAgICBGcm9tT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGlzaCA9IHRoaXMuaXNoO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09IG51bGwpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGlzaFskJG9ic2VydmFibGVdKCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGlzaFskJG9ic2VydmFibGVdKCkuc3Vic2NyaWJlKG5ldyBvYnNlcnZlT25fMS5PYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgMCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRnJvbU9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5Gcm9tT2JzZXJ2YWJsZSA9IEZyb21PYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Gcm9tT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDYwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBQcm9taXNlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUHJvbWlzZU9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBQcm9taXNlT2JzZXJ2YWJsZShwcm9taXNlLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gbnVsbDsgfVxuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIENvbnZlcnRzIGEgUHJvbWlzZSB0byBhbiBPYnNlcnZhYmxlLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5SZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBqdXN0IGVtaXRzIHRoZSBQcm9taXNlJ3Ncblx0ICAgICAqIHJlc29sdmVkIHZhbHVlLCB0aGVuIGNvbXBsZXRlcy48L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogQ29udmVydHMgYW4gRVMyMDE1IFByb21pc2Ugb3IgYSBQcm9taXNlcy9BKyBzcGVjIGNvbXBsaWFudCBQcm9taXNlIHRvIGFuXG5cdCAgICAgKiBPYnNlcnZhYmxlLiBJZiB0aGUgUHJvbWlzZSByZXNvbHZlcyB3aXRoIGEgdmFsdWUsIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuXHQgICAgICogZW1pdHMgdGhhdCByZXNvbHZlZCB2YWx1ZSBhcyBhIGBuZXh0YCwgYW5kIHRoZW4gY29tcGxldGVzLiBJZiB0aGUgUHJvbWlzZVxuXHQgICAgICogaXMgcmVqZWN0ZWQsIHRoZW4gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzIHRoZSBjb3JyZXNwb25kaW5nIEVycm9yLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbnZlcnQgdGhlIFByb21pc2UgcmV0dXJuZWQgYnkgRmV0Y2ggdG8gYW4gT2JzZXJ2YWJsZTwvY2FwdGlvbj5cblx0ICAgICAqIHZhciByZXN1bHQgPSBSeC5PYnNlcnZhYmxlLmZyb21Qcm9taXNlKGZldGNoKCdodHRwOi8vbXlzZXJ2ZXIuY29tLycpKTtcblx0ICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSwgZSA9PiBjb25zb2xlLmVycm9yKGUpKTtcblx0ICAgICAqXG5cdCAgICAgKiBAc2VlIHtAbGluayBiaW5kQ2FsbGJhY2t9XG5cdCAgICAgKiBAc2VlIHtAbGluayBmcm9tfVxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7UHJvbWlzZTxUPn0gcHJvbWlzZSBUaGUgcHJvbWlzZSB0byBiZSBjb252ZXJ0ZWQuXG5cdCAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQW4gb3B0aW9uYWwgU2NoZWR1bGVyIHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuXHQgICAgICogdGhlIGRlbGl2ZXJ5IG9mIHRoZSByZXNvbHZlZCB2YWx1ZSAob3IgdGhlIHJlamVjdGlvbikuXG5cdCAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHdoaWNoIHdyYXBzIHRoZSBQcm9taXNlLlxuXHQgICAgICogQHN0YXRpYyB0cnVlXG5cdCAgICAgKiBAbmFtZSBmcm9tUHJvbWlzZVxuXHQgICAgICogQG93bmVyIE9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgUHJvbWlzZU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHByb21pc2UsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBudWxsOyB9XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlT2JzZXJ2YWJsZShwcm9taXNlLCBzY2hlZHVsZXIpO1xuXHQgICAgfTtcblx0ICAgIFByb21pc2VPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2lzU2NhbGFyKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2lzU2NhbGFyID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSB0aGUgcHJvbWlzZSB0cmFwLCB0aHJvdyB1bmhhbmRsZWQgZXJyb3JzXG5cdCAgICAgICAgICAgICAgICAgICAgcm9vdF8xLnJvb3Quc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2lzU2NhbGFyKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdGhpcy52YWx1ZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc1NjYWxhciA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEVycm9yLCAwLCB7IGVycjogZXJyLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KVxuXHQgICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgdGhlIHByb21pc2UgdHJhcCwgdGhyb3cgdW5oYW5kbGVkIGVycm9yc1xuXHQgICAgICAgICAgICAgICAgICAgIHJvb3RfMS5yb290LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH0pO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFByb21pc2VPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuUHJvbWlzZU9ic2VydmFibGUgPSBQcm9taXNlT2JzZXJ2YWJsZTtcblx0ZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KGFyZykge1xuXHQgICAgdmFyIHZhbHVlID0gYXJnLnZhbHVlLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG5cdCAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuXHQgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBkaXNwYXRjaEVycm9yKGFyZykge1xuXHQgICAgdmFyIGVyciA9IGFyZy5lcnIsIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcblx0ICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcblx0ICAgIH1cblx0fVxuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Qcm9taXNlT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDYxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBpc09iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgaXNGdW5jdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdHZhciBpdGVyYXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEl0ZXJhdG9yT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoSXRlcmF0b3JPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gSXRlcmF0b3JPYnNlcnZhYmxlKGl0ZXJhdG9yLCBwcm9qZWN0LCB0aGlzQXJnLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICBpZiAoaXRlcmF0b3IgPT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2l0ZXJhdG9yIGNhbm5vdCBiZSBudWxsLicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaXNPYmplY3RfMS5pc09iamVjdChwcm9qZWN0KSkge1xuXHQgICAgICAgICAgICB0aGlzLnRoaXNBcmcgPSBwcm9qZWN0O1xuXHQgICAgICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHRoaXNBcmc7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHByb2plY3QpKSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG5cdCAgICAgICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG5cdCAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChwcm9qZWN0ICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIHByb3ZpZGVkLCBgcHJvamVjdGAgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLml0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmF0b3IpO1xuXHQgICAgfVxuXHQgICAgSXRlcmF0b3JPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRvciwgcHJvamVjdCwgdGhpc0FyZywgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvck9ic2VydmFibGUoaXRlcmF0b3IsIHByb2plY3QsIHRoaXNBcmcsIHNjaGVkdWxlcik7XG5cdCAgICB9O1xuXHQgICAgSXRlcmF0b3JPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIGhhc0Vycm9yID0gc3RhdGUuaGFzRXJyb3IsIHRoaXNBcmcgPSBzdGF0ZS50aGlzQXJnLCBwcm9qZWN0ID0gc3RhdGUucHJvamVjdCwgaXRlcmF0b3IgPSBzdGF0ZS5pdGVyYXRvciwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG5cdCAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioc3RhdGUuZXJyb3IpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocHJvamVjdCkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHByb2plY3QpLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpbmRleCk7XG5cdCAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlLmVycm9yID0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lO1xuXHQgICAgICAgICAgICAgICAgc3RhdGUuaGFzRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZS5pbmRleCA9IGluZGV4ICsgMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG5cdCAgICAgICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuXHQgICAgfTtcblx0ICAgIEl0ZXJhdG9yT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBpdGVyYXRvciA9IF9hLml0ZXJhdG9yLCBwcm9qZWN0ID0gX2EucHJvamVjdCwgdGhpc0FyZyA9IF9hLnRoaXNBcmcsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoSXRlcmF0b3JPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG5cdCAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsIHRoaXNBcmc6IHRoaXNBcmcsIHByb2plY3Q6IHByb2plY3QsIGl0ZXJhdG9yOiBpdGVyYXRvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9qZWN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChwcm9qZWN0KS5jYWxsKHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgaW5kZXgrKyk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBJdGVyYXRvck9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5JdGVyYXRvck9ic2VydmFibGUgPSBJdGVyYXRvck9ic2VydmFibGU7XG5cdHZhciBTdHJpbmdJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTdHJpbmdJdGVyYXRvcihzdHIsIGlkeCwgbGVuKSB7XG5cdCAgICAgICAgaWYgKGlkeCA9PT0gdm9pZCAwKSB7IGlkeCA9IDA7IH1cblx0ICAgICAgICBpZiAobGVuID09PSB2b2lkIDApIHsgbGVuID0gc3RyLmxlbmd0aDsgfVxuXHQgICAgICAgIHRoaXMuc3RyID0gc3RyO1xuXHQgICAgICAgIHRoaXMuaWR4ID0gaWR4O1xuXHQgICAgICAgIHRoaXMubGVuID0gbGVuO1xuXHQgICAgfVxuXHQgICAgU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcyk7IH07XG5cdCAgICBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcblx0ICAgICAgICAgICAgZG9uZTogZmFsc2UsXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0ci5jaGFyQXQodGhpcy5pZHgrKylcblx0ICAgICAgICB9IDoge1xuXHQgICAgICAgICAgICBkb25lOiB0cnVlLFxuXHQgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3RyaW5nSXRlcmF0b3I7XG5cdH0oKSk7XG5cdHZhciBBcnJheUl0ZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFycmF5SXRlcmF0b3IoYXJyLCBpZHgsIGxlbikge1xuXHQgICAgICAgIGlmIChpZHggPT09IHZvaWQgMCkgeyBpZHggPSAwOyB9XG5cdCAgICAgICAgaWYgKGxlbiA9PT0gdm9pZCAwKSB7IGxlbiA9IHRvTGVuZ3RoKGFycik7IH1cblx0ICAgICAgICB0aGlzLmFyciA9IGFycjtcblx0ICAgICAgICB0aGlzLmlkeCA9IGlkeDtcblx0ICAgICAgICB0aGlzLmxlbiA9IGxlbjtcblx0ICAgIH1cblx0ICAgIEFycmF5SXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXHQgICAgQXJyYXlJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcblx0ICAgICAgICAgICAgZG9uZTogZmFsc2UsXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLmFyclt0aGlzLmlkeCsrXVxuXHQgICAgICAgIH0gOiB7XG5cdCAgICAgICAgICAgIGRvbmU6IHRydWUsXG5cdCAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBBcnJheUl0ZXJhdG9yO1xuXHR9KCkpO1xuXHRmdW5jdGlvbiBnZXRJdGVyYXRvcihvYmopIHtcblx0ICAgIHZhciBpID0gb2JqW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl07XG5cdCAgICBpZiAoIWkgJiYgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFN0cmluZ0l0ZXJhdG9yKG9iaik7XG5cdCAgICB9XG5cdCAgICBpZiAoIWkgJiYgb2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKG9iaik7XG5cdCAgICB9XG5cdCAgICBpZiAoIWkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QgaXMgbm90IGl0ZXJhYmxlJyk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gb2JqW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0oKTtcblx0fVxuXHR2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXHRmdW5jdGlvbiB0b0xlbmd0aChvKSB7XG5cdCAgICB2YXIgbGVuID0gK28ubGVuZ3RoO1xuXHQgICAgaWYgKGlzTmFOKGxlbikpIHtcblx0ICAgICAgICByZXR1cm4gMDtcblx0ICAgIH1cblx0ICAgIGlmIChsZW4gPT09IDAgfHwgIW51bWJlcklzRmluaXRlKGxlbikpIHtcblx0ICAgICAgICByZXR1cm4gbGVuO1xuXHQgICAgfVxuXHQgICAgbGVuID0gc2lnbihsZW4pICogTWF0aC5mbG9vcihNYXRoLmFicyhsZW4pKTtcblx0ICAgIGlmIChsZW4gPD0gMCkge1xuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgfVxuXHQgICAgaWYgKGxlbiA+IG1heFNhZmVJbnRlZ2VyKSB7XG5cdCAgICAgICAgcmV0dXJuIG1heFNhZmVJbnRlZ2VyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGxlbjtcblx0fVxuXHRmdW5jdGlvbiBudW1iZXJJc0Zpbml0ZSh2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgcm9vdF8xLnJvb3QuaXNGaW5pdGUodmFsdWUpO1xuXHR9XG5cdGZ1bmN0aW9uIHNpZ24odmFsdWUpIHtcblx0ICAgIHZhciB2YWx1ZUFzTnVtYmVyID0gK3ZhbHVlO1xuXHQgICAgaWYgKHZhbHVlQXNOdW1iZXIgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdmFsdWVBc051bWJlcjtcblx0ICAgIH1cblx0ICAgIGlmIChpc05hTih2YWx1ZUFzTnVtYmVyKSkge1xuXHQgICAgICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZhbHVlQXNOdW1iZXIgPCAwID8gLTEgOiAxO1xuXHR9XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUl0ZXJhdG9yT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDYyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBTY2FsYXJPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0dmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEFycmF5TGlrZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEFycmF5TGlrZU9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBBcnJheUxpa2VPYnNlcnZhYmxlKGFycmF5TGlrZSwgbWFwRm4sIHRoaXNBcmcsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuYXJyYXlMaWtlID0gYXJyYXlMaWtlO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIGlmICghbWFwRm4gJiYgIXNjaGVkdWxlciAmJiBhcnJheUxpa2UubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2lzU2NhbGFyID0gdHJ1ZTtcblx0ICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGFycmF5TGlrZVswXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG1hcEZuKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWFwRm4gPSBtYXBGbi5iaW5kKHRoaXNBcmcpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIEFycmF5TGlrZU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGFycmF5TGlrZSwgbWFwRm4sIHRoaXNBcmcsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHZhciBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuXHQgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAobGVuZ3RoID09PSAxICYmICFtYXBGbikge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhck9ic2VydmFibGVfMS5TY2FsYXJPYnNlcnZhYmxlKGFycmF5TGlrZVswXSwgc2NoZWR1bGVyKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlMaWtlT2JzZXJ2YWJsZShhcnJheUxpa2UsIG1hcEZuLCB0aGlzQXJnLCBzY2hlZHVsZXIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBBcnJheUxpa2VPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdCAgICAgICAgdmFyIGFycmF5TGlrZSA9IHN0YXRlLmFycmF5TGlrZSwgaW5kZXggPSBzdGF0ZS5pbmRleCwgbGVuZ3RoID0gc3RhdGUubGVuZ3RoLCBtYXBGbiA9IHN0YXRlLm1hcEZuLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHQgPSBtYXBGbiA/IG1hcEZuKGFycmF5TGlrZVtpbmRleF0sIGluZGV4KSA6IGFycmF5TGlrZVtpbmRleF07XG5cdCAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG5cdCAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG5cdCAgICB9O1xuXHQgICAgQXJyYXlMaWtlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBhcnJheUxpa2UgPSBfYS5hcnJheUxpa2UsIG1hcEZuID0gX2EubWFwRm4sIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcblx0ICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoQXJyYXlMaWtlT2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuXHQgICAgICAgICAgICAgICAgYXJyYXlMaWtlOiBhcnJheUxpa2UsIGluZGV4OiBpbmRleCwgbGVuZ3RoOiBsZW5ndGgsIG1hcEZuOiBtYXBGbiwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICYmICFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBtYXBGbiA/IG1hcEZuKGFycmF5TGlrZVtpXSwgaSkgOiBhcnJheUxpa2VbaV07XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBBcnJheUxpa2VPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuQXJyYXlMaWtlT2JzZXJ2YWJsZSA9IEFycmF5TGlrZU9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUFycmF5TGlrZU9ic2VydmFibGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiA2MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIE5vdGlmaWNhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XG5cdC8qKlxuXHQgKiBAc2VlIHtAbGluayBOb3RpZmljYXRpb259XG5cdCAqXG5cdCAqIEBwYXJhbSBzY2hlZHVsZXJcblx0ICogQHBhcmFtIGRlbGF5XG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8Uj58V2ViU29ja2V0U3ViamVjdDxUPnxPYnNlcnZhYmxlPFQ+fVxuXHQgKiBAbWV0aG9kIG9ic2VydmVPblxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcblx0ICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuXHR9XG5cdGV4cG9ydHMub2JzZXJ2ZU9uID0gb2JzZXJ2ZU9uO1xuXHR2YXIgT2JzZXJ2ZU9uT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkge1xuXHQgICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcblx0ICAgIH1cblx0ICAgIE9ic2VydmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNjaGVkdWxlciwgdGhpcy5kZWxheSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBPYnNlcnZlT25PcGVyYXRvcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5PYnNlcnZlT25PcGVyYXRvciA9IE9ic2VydmVPbk9wZXJhdG9yO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBPYnNlcnZlT25TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhPYnNlcnZlT25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gT2JzZXJ2ZU9uU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgc2NoZWR1bGVyLCBkZWxheSkge1xuXHQgICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG5cdCAgICB9XG5cdCAgICBPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuXHQgICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcblx0ICAgICAgICBub3RpZmljYXRpb24ub2JzZXJ2ZShkZXN0aW5hdGlvbik7XG5cdCAgICB9O1xuXHQgICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVNZXNzYWdlID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuXHQgICAgICAgIHRoaXMuYWRkKHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2gsIHRoaXMuZGVsYXksIG5ldyBPYnNlcnZlT25NZXNzYWdlKG5vdGlmaWNhdGlvbiwgdGhpcy5kZXN0aW5hdGlvbikpKTtcblx0ICAgIH07XG5cdCAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVNZXNzYWdlKE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0KHZhbHVlKSk7XG5cdCAgICB9O1xuXHQgICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVNZXNzYWdlKE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvcihlcnIpKTtcblx0ICAgIH07XG5cdCAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBPYnNlcnZlT25TdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdGV4cG9ydHMuT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IE9ic2VydmVPblN1YnNjcmliZXI7XG5cdHZhciBPYnNlcnZlT25NZXNzYWdlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE9ic2VydmVPbk1lc3NhZ2Uobm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbikge1xuXHQgICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xuXHR9KCkpO1xuXHRleHBvcnRzLk9ic2VydmVPbk1lc3NhZ2UgPSBPYnNlcnZlT25NZXNzYWdlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwXG5cbi8qKiovIH0sXG4vKiA2NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHQvKipcblx0ICogUmVwcmVzZW50cyBhIHB1c2gtYmFzZWQgZXZlbnQgb3IgdmFsdWUgdGhhdCBhbiB7QGxpbmsgT2JzZXJ2YWJsZX0gY2FuIGVtaXQuXG5cdCAqIFRoaXMgY2xhc3MgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igb3BlcmF0b3JzIHRoYXQgbWFuYWdlIG5vdGlmaWNhdGlvbnMsXG5cdCAqIGxpa2Uge0BsaW5rIG1hdGVyaWFsaXplfSwge0BsaW5rIGRlbWF0ZXJpYWxpemV9LCB7QGxpbmsgb2JzZXJ2ZU9ufSwgYW5kXG5cdCAqIG90aGVycy4gQmVzaWRlcyB3cmFwcGluZyB0aGUgYWN0dWFsIGRlbGl2ZXJlZCB2YWx1ZSwgaXQgYWxzbyBhbm5vdGF0ZXMgaXRcblx0ICogd2l0aCBtZXRhZGF0YSBvZiwgZm9yIGluc3RhbmNlLCB3aGF0IHR5cGUgb2YgcHVzaCBtZXNzYWdlIGl0IGlzIChgbmV4dGAsXG5cdCAqIGBlcnJvcmAsIG9yIGBjb21wbGV0ZWApLlxuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBtYXRlcmlhbGl6ZX1cblx0ICogQHNlZSB7QGxpbmsgZGVtYXRlcmlhbGl6ZX1cblx0ICogQHNlZSB7QGxpbmsgb2JzZXJ2ZU9ufVxuXHQgKlxuXHQgKiBAY2xhc3MgTm90aWZpY2F0aW9uPFQ+XG5cdCAqL1xuXHR2YXIgTm90aWZpY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXhjZXB0aW9uKSB7XG5cdCAgICAgICAgdGhpcy5raW5kID0ga2luZDtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdGhpcy5leGNlcHRpb24gPSBleGNlcHRpb247XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGtpbmQgPT09ICdOJztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogRGVsaXZlcnMgdG8gdGhlIGdpdmVuIGBvYnNlcnZlcmAgdGhlIHZhbHVlIHdyYXBwZWQgYnkgdGhpcyBOb3RpZmljYXRpb24uXG5cdCAgICAgKiBAcGFyYW0ge09ic2VydmVyfSBvYnNlcnZlclxuXHQgICAgICogQHJldHVyblxuXHQgICAgICovXG5cdCAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMua2luZCkge1xuXHQgICAgICAgICAgICBjYXNlICdOJzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQodGhpcy52YWx1ZSk7XG5cdCAgICAgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yICYmIG9ic2VydmVyLmVycm9yKHRoaXMuZXhjZXB0aW9uKTtcblx0ICAgICAgICAgICAgY2FzZSAnQyc6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY29tcGxldGUgJiYgb2JzZXJ2ZXIuY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBHaXZlbiBzb21lIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2tzLCBkZWxpdmVyIHRoZSB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGVcblx0ICAgICAqIGN1cnJlbnQgTm90aWZpY2F0aW9uIHRvIHRoZSBjb3JyZWN0bHkgY29ycmVzcG9uZGluZyBjYWxsYmFjay5cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQpOiB2b2lkfSBuZXh0IEFuIE9ic2VydmVyIGBuZXh0YCBjYWxsYmFjay5cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXJyOiBhbnkpOiB2b2lkfSBbZXJyb3JdIEFuIE9ic2VydmVyIGBlcnJvcmAgY2FsbGJhY2suXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFtjb21wbGV0ZV0gQW4gT2JzZXJ2ZXIgYGNvbXBsZXRlYCBjYWxsYmFjay5cblx0ICAgICAqIEByZXR1cm4ge2FueX1cblx0ICAgICAqL1xuXHQgICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcblx0ICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcblx0ICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcblx0ICAgICAgICAgICAgY2FzZSAnTic6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCAmJiBuZXh0KHRoaXMudmFsdWUpO1xuXHQgICAgICAgICAgICBjYXNlICdFJzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiBlcnJvciAmJiBlcnJvcih0aGlzLmV4Y2VwdGlvbik7XG5cdCAgICAgICAgICAgIGNhc2UgJ0MnOlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlICYmIGNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogVGFrZXMgYW4gT2JzZXJ2ZXIgb3IgaXRzIGluZGl2aWR1YWwgY2FsbGJhY2sgZnVuY3Rpb25zLCBhbmQgY2FsbHMgYG9ic2VydmVgXG5cdCAgICAgKiBvciBgZG9gIG1ldGhvZHMgYWNjb3JkaW5nbHkuXG5cdCAgICAgKiBAcGFyYW0ge09ic2VydmVyfGZ1bmN0aW9uKHZhbHVlOiBUKTogdm9pZH0gbmV4dE9yT2JzZXJ2ZXIgQW4gT2JzZXJ2ZXIgb3Jcblx0ICAgICAqIHRoZSBgbmV4dGAgY2FsbGJhY2suXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGVycjogYW55KTogdm9pZH0gW2Vycm9yXSBBbiBPYnNlcnZlciBgZXJyb3JgIGNhbGxiYWNrLlxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIEFuIE9ic2VydmVyIGBjb21wbGV0ZWAgY2FsbGJhY2suXG5cdCAgICAgKiBAcmV0dXJuIHthbnl9XG5cdCAgICAgKi9cblx0ICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcblx0ICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgJiYgdHlwZW9mIG5leHRPck9ic2VydmVyLm5leHQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2ZShuZXh0T3JPYnNlcnZlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIGEgc2ltcGxlIE9ic2VydmFibGUgdGhhdCBqdXN0IGRlbGl2ZXJzIHRoZSBub3RpZmljYXRpb24gcmVwcmVzZW50ZWRcblx0ICAgICAqIGJ5IHRoaXMgTm90aWZpY2F0aW9uIGluc3RhbmNlLlxuXHQgICAgICogQHJldHVybiB7YW55fVxuXHQgICAgICovXG5cdCAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLnRvT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcblx0ICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcblx0ICAgICAgICAgICAgY2FzZSAnTic6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUub2YodGhpcy52YWx1ZSk7XG5cdCAgICAgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnRocm93KHRoaXMuZXhjZXB0aW9uKTtcblx0ICAgICAgICAgICAgY2FzZSAnQyc6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZW1wdHkoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBBIHNob3J0Y3V0IHRvIGNyZWF0ZSBhIE5vdGlmaWNhdGlvbiBpbnN0YW5jZSBvZiB0aGUgdHlwZSBgbmV4dGAgZnJvbSBhXG5cdCAgICAgKiBnaXZlbiB2YWx1ZS5cblx0ICAgICAqIEBwYXJhbSB7VH0gdmFsdWUgVGhlIGBuZXh0YCB2YWx1ZS5cblx0ICAgICAqIEByZXR1cm4ge05vdGlmaWNhdGlvbjxUPn0gVGhlIFwibmV4dFwiIE5vdGlmaWNhdGlvbiByZXByZXNlbnRpbmcgdGhlXG5cdCAgICAgKiBhcmd1bWVudC5cblx0ICAgICAqL1xuXHQgICAgTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMudW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb247XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBBIHNob3J0Y3V0IHRvIGNyZWF0ZSBhIE5vdGlmaWNhdGlvbiBpbnN0YW5jZSBvZiB0aGUgdHlwZSBgZXJyb3JgIGZyb20gYVxuXHQgICAgICogZ2l2ZW4gZXJyb3IuXG5cdCAgICAgKiBAcGFyYW0ge2FueX0gW2Vycl0gVGhlIGBlcnJvcmAgZXhjZXB0aW9uLlxuXHQgICAgICogQHJldHVybiB7Tm90aWZpY2F0aW9uPFQ+fSBUaGUgXCJlcnJvclwiIE5vdGlmaWNhdGlvbiByZXByZXNlbnRpbmcgdGhlXG5cdCAgICAgKiBhcmd1bWVudC5cblx0ICAgICAqL1xuXHQgICAgTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnIpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogQSBzaG9ydGN1dCB0byBjcmVhdGUgYSBOb3RpZmljYXRpb24gaW5zdGFuY2Ugb2YgdGhlIHR5cGUgYGNvbXBsZXRlYC5cblx0ICAgICAqIEByZXR1cm4ge05vdGlmaWNhdGlvbjxhbnk+fSBUaGUgdmFsdWVsZXNzIFwiY29tcGxldGVcIiBOb3RpZmljYXRpb24uXG5cdCAgICAgKi9cblx0ICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZU5vdGlmaWNhdGlvbjtcblx0ICAgIH07XG5cdCAgICBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdDJyk7XG5cdCAgICBOb3RpZmljYXRpb24udW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdOJywgdW5kZWZpbmVkKTtcblx0ICAgIHJldHVybiBOb3RpZmljYXRpb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuTm90aWZpY2F0aW9uID0gTm90aWZpY2F0aW9uO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb24uanMubWFwXG5cbi8qKiovIH0sXG4vKiA2NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgZnJvbUV2ZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZnJvbUV2ZW50ID0gZnJvbUV2ZW50XzEuZnJvbUV2ZW50O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwXG5cbi8qKiovIH0sXG4vKiA2NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBGcm9tRXZlbnRPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcblx0ZXhwb3J0cy5mcm9tRXZlbnQgPSBGcm9tRXZlbnRPYnNlcnZhYmxlXzEuRnJvbUV2ZW50T2JzZXJ2YWJsZS5jcmVhdGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDY3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdHZhciBTdWJzY3JpcHRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHRmdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1taXR0ZXIoc291cmNlT2JqKSB7XG5cdCAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSB7XG5cdCAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5vbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLm9mZiA9PT0gJ2Z1bmN0aW9uJztcblx0fVxuXHRmdW5jdGlvbiBpc05vZGVMaXN0KHNvdXJjZU9iaikge1xuXHQgICAgcmV0dXJuICEhc291cmNlT2JqICYmIHNvdXJjZU9iai50b1N0cmluZygpID09PSAnW29iamVjdCBOb2RlTGlzdF0nO1xuXHR9XG5cdGZ1bmN0aW9uIGlzSFRNTENvbGxlY3Rpb24oc291cmNlT2JqKSB7XG5cdCAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgc291cmNlT2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXSc7XG5cdH1cblx0ZnVuY3Rpb24gaXNFdmVudFRhcmdldChzb3VyY2VPYmopIHtcblx0ICAgIHJldHVybiAhIXNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEZyb21FdmVudE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEZyb21FdmVudE9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBGcm9tRXZlbnRPYnNlcnZhYmxlKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBzZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc291cmNlT2JqID0gc291cmNlT2JqO1xuXHQgICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuXHQgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgZXZlbnRzIG9mIGEgc3BlY2lmaWMgdHlwZSBjb21pbmcgZnJvbSB0aGVcblx0ICAgICAqIGdpdmVuIGV2ZW50IHRhcmdldC5cblx0ICAgICAqXG5cdCAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+Q3JlYXRlcyBhbiBPYnNlcnZhYmxlIGZyb20gRE9NIGV2ZW50cywgb3IgTm9kZVxuXHQgICAgICogRXZlbnRFbWl0dGVyIGV2ZW50cyBvciBvdGhlcnMuPC9zcGFuPlxuXHQgICAgICpcblx0ICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvZnJvbUV2ZW50LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgICAgICpcblx0ICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBieSBhdHRhY2hpbmcgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYW4gXCJldmVudCB0YXJnZXRcIixcblx0ICAgICAqIHdoaWNoIG1heSBiZSBhbiBvYmplY3Qgd2l0aCBgYWRkRXZlbnRMaXN0ZW5lcmAgYW5kIGByZW1vdmVFdmVudExpc3RlbmVyYCxcblx0ICAgICAqIGEgTm9kZS5qcyBFdmVudEVtaXR0ZXIsIGEgalF1ZXJ5IHN0eWxlIEV2ZW50RW1pdHRlciwgYSBOb2RlTGlzdCBmcm9tIHRoZVxuXHQgICAgICogRE9NLCBvciBhbiBIVE1MQ29sbGVjdGlvbiBmcm9tIHRoZSBET00uIFRoZSBldmVudCBoYW5kbGVyIGlzIGF0dGFjaGVkIHdoZW5cblx0ICAgICAqIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBzdWJzY3JpYmVkLCBhbmQgcmVtb3ZlZCB3aGVuIHRoZSBTdWJzY3JpcHRpb24gaXNcblx0ICAgICAqIHVuc3Vic2NyaWJlZC5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0cyBjbGlja3MgaGFwcGVuaW5nIG9uIHRoZSBET00gZG9jdW1lbnQ8L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgICAgICogY2xpY2tzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICAgICAqXG5cdCAgICAgKiBAc2VlIHtAbGluayBmcm9tfVxuXHQgICAgICogQHNlZSB7QGxpbmsgZnJvbUV2ZW50UGF0dGVybn1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0TGlrZX0gdGFyZ2V0IFRoZSBET01FbGVtZW50LCBldmVudCB0YXJnZXQsIE5vZGUuanNcblx0ICAgICAqIEV2ZW50RW1pdHRlciwgTm9kZUxpc3Qgb3IgSFRNTENvbGxlY3Rpb24gdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVyIHRvLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSBvZiBpbnRlcmVzdCwgYmVpbmcgZW1pdHRlZCBieSB0aGVcblx0ICAgICAqIGB0YXJnZXRgLlxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbiguLi5hcmdzOiBhbnkpOiBUfSBbc2VsZWN0b3JdIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvXG5cdCAgICAgKiBwb3N0LXByb2Nlc3MgcmVzdWx0cy4gSXQgdGFrZXMgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZSBldmVudCBoYW5kbGVyIGFuZFxuXHQgICAgICogc2hvdWxkIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGU8VD59XG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIGZyb21FdmVudFxuXHQgICAgICogQG93bmVyIE9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgRnJvbUV2ZW50T2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIHNlbGVjdG9yKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBGcm9tRXZlbnRPYnNlcnZhYmxlKHRhcmdldCwgZXZlbnROYW1lLCBzZWxlY3Rvcik7XG5cdCAgICB9O1xuXHQgICAgRnJvbUV2ZW50T2JzZXJ2YWJsZS5zZXR1cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzb3VyY2VPYmosIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciB1bnN1YnNjcmliZTtcblx0ICAgICAgICBpZiAoaXNOb2RlTGlzdChzb3VyY2VPYmopIHx8IGlzSFRNTENvbGxlY3Rpb24oc291cmNlT2JqKSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlT2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBGcm9tRXZlbnRPYnNlcnZhYmxlLnNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9ialtpXSwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikpIHtcblx0ICAgICAgICAgICAgc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0ICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VPYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikpIHtcblx0ICAgICAgICAgICAgc291cmNlT2JqLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cdCAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlT2JqLm9mZihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc05vZGVTdHlsZUV2ZW50RW1taXR0ZXIoc291cmNlT2JqKSkge1xuXHQgICAgICAgICAgICBzb3VyY2VPYmouYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0ICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VPYmoucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3Vic2NyaWJlci5hZGQobmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkpO1xuXHQgICAgfTtcblx0ICAgIEZyb21FdmVudE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciBzb3VyY2VPYmogPSB0aGlzLnNvdXJjZU9iajtcblx0ICAgICAgICB2YXIgZXZlbnROYW1lID0gdGhpcy5ldmVudE5hbWU7XG5cdCAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3Rvcjtcblx0ICAgICAgICB2YXIgaGFuZGxlciA9IHNlbGVjdG9yID8gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzZWxlY3RvcikuYXBwbHkodm9pZCAwLCBhcmdzKTtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChlKTsgfTtcblx0ICAgICAgICBGcm9tRXZlbnRPYnNlcnZhYmxlLnNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRnJvbUV2ZW50T2JzZXJ2YWJsZTtcblx0fShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuXHRleHBvcnRzLkZyb21FdmVudE9ic2VydmFibGUgPSBGcm9tRXZlbnRPYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Gcm9tRXZlbnRPYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGZyb21FdmVudFBhdHRlcm5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tRXZlbnRQYXR0ZXJuID0gZnJvbUV2ZW50UGF0dGVybl8xLmZyb21FdmVudFBhdHRlcm47XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudFBhdHRlcm4uanMubWFwXG5cbi8qKiovIH0sXG4vKiA2OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cdGV4cG9ydHMuZnJvbUV2ZW50UGF0dGVybiA9IEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlXzEuRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnRQYXR0ZXJuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogNzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIFN1YnNjcmlwdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIsIHNlbGVjdG9yKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5hZGRIYW5kbGVyID0gYWRkSGFuZGxlcjtcblx0ICAgICAgICB0aGlzLnJlbW92ZUhhbmRsZXIgPSByZW1vdmVIYW5kbGVyO1xuXHQgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIGZyb20gYW4gQVBJIGJhc2VkIG9uIGFkZEhhbmRsZXIvcmVtb3ZlSGFuZGxlclxuXHQgICAgICogZnVuY3Rpb25zLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db252ZXJ0cyBhbnkgYWRkSGFuZGxlci9yZW1vdmVIYW5kbGVyIEFQSSB0byBhblxuXHQgICAgICogT2JzZXJ2YWJsZS48L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogPGltZyBzcmM9XCIuL2ltZy9mcm9tRXZlbnRQYXR0ZXJuLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgICAgICpcblx0ICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBieSB1c2luZyB0aGUgYGFkZEhhbmRsZXJgIGFuZCBgcmVtb3ZlSGFuZGxlcmBcblx0ICAgICAqIGZ1bmN0aW9ucyB0byBhZGQgYW5kIHJlbW92ZSB0aGUgaGFuZGxlcnMsIHdpdGggYW4gb3B0aW9uYWwgc2VsZWN0b3Jcblx0ICAgICAqIGZ1bmN0aW9uIHRvIHByb2plY3QgdGhlIGV2ZW50IGFyZ3VtZW50cyB0byBhIHJlc3VsdC4gVGhlIGBhZGRIYW5kbGVyYCBpc1xuXHQgICAgICogY2FsbGVkIHdoZW4gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGlzIHN1YnNjcmliZWQsIGFuZCBgcmVtb3ZlSGFuZGxlcmAgaXNcblx0ICAgICAqIGNhbGxlZCB3aGVuIHRoZSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIGNsaWNrcyBoYXBwZW5pbmcgb24gdGhlIERPTSBkb2N1bWVudDwvY2FwdGlvbj5cblx0ICAgICAqIGZ1bmN0aW9uIGFkZENsaWNrSGFuZGxlcihoYW5kbGVyKSB7XG5cdCAgICAgKiAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG5cdCAgICAgKiB9XG5cdCAgICAgKlxuXHQgICAgICogZnVuY3Rpb24gcmVtb3ZlQ2xpY2tIYW5kbGVyKGhhbmRsZXIpIHtcblx0ICAgICAqICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKTtcblx0ICAgICAqIH1cblx0ICAgICAqXG5cdCAgICAgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnRQYXR0ZXJuKFxuXHQgICAgICogICBhZGRDbGlja0hhbmRsZXIsXG5cdCAgICAgKiAgIHJlbW92ZUNsaWNrSGFuZGxlclxuXHQgICAgICogKTtcblx0ICAgICAqIGNsaWNrcy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgZnJvbX1cblx0ICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudH1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGhhbmRsZXI6IEZ1bmN0aW9uKTogYW55fSBhZGRIYW5kbGVyIEEgZnVuY3Rpb24gdGhhdCB0YWtlc1xuXHQgICAgICogYSBgaGFuZGxlcmAgZnVuY3Rpb24gYXMgYXJndW1lbnQgYW5kIGF0dGFjaGVzIGl0IHNvbWVob3cgdG8gdGhlIGFjdHVhbFxuXHQgICAgICogc291cmNlIG9mIGV2ZW50cy5cblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaGFuZGxlcjogRnVuY3Rpb24pOiB2b2lkfSByZW1vdmVIYW5kbGVyIEEgZnVuY3Rpb24gdGhhdFxuXHQgICAgICogdGFrZXMgYSBgaGFuZGxlcmAgZnVuY3Rpb24gYXMgYXJndW1lbnQgYW5kIHJlbW92ZXMgaXQgaW4gY2FzZSBpdCB3YXNcblx0ICAgICAqIHByZXZpb3VzbHkgYXR0YWNoZWQgdXNpbmcgYGFkZEhhbmRsZXJgLlxuXHQgICAgICogQHBhcmFtIHtmdW5jdGlvbiguLi5hcmdzOiBhbnkpOiBUfSBbc2VsZWN0b3JdIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvXG5cdCAgICAgKiBwb3N0LXByb2Nlc3MgcmVzdWx0cy4gSXQgdGFrZXMgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZSBldmVudCBoYW5kbGVyIGFuZFxuXHQgICAgICogc2hvdWxkIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGU8VD59XG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIGZyb21FdmVudFBhdHRlcm5cblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyLCBzZWxlY3Rvcikge1xuXHQgICAgICAgIHJldHVybiBuZXcgRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUoYWRkSGFuZGxlciwgcmVtb3ZlSGFuZGxlciwgc2VsZWN0b3IpO1xuXHQgICAgfTtcblx0ICAgIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgYWRkSGFuZGxlciA9IHRoaXMuYWRkSGFuZGxlcjtcblx0ICAgICAgICB2YXIgcmVtb3ZlSGFuZGxlciA9IHRoaXMucmVtb3ZlSGFuZGxlcjtcblx0ICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuXHQgICAgICAgIHZhciBoYW5kbGVyID0gc2VsZWN0b3IgPyBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzZWxlY3RvcikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihyZXN1bHQuZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gOiBmdW5jdGlvbiAoZSkgeyBzdWJzY3JpYmVyLm5leHQoZSk7IH07XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goYWRkSGFuZGxlcikoaGFuZGxlcik7XG5cdCAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHJlc3VsdC5lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3Vic2NyaWJlci5hZGQobmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vVE9ETzogZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRvIGZvcndhcmQgdG8gZXJyb3IgaGFuZGxlclxuXHQgICAgICAgICAgICByZW1vdmVIYW5kbGVyKGhhbmRsZXIpO1xuXHQgICAgICAgIH0pKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5Gcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZSA9IEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Gcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDcxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBmcm9tUHJvbWlzZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmZyb21Qcm9taXNlID0gZnJvbVByb21pc2VfMS5mcm9tUHJvbWlzZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVByb21pc2UuanMubWFwXG5cbi8qKiovIH0sXG4vKiA3MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBQcm9taXNlT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cdGV4cG9ydHMuZnJvbVByb21pc2UgPSBQcm9taXNlT2JzZXJ2YWJsZV8xLlByb21pc2VPYnNlcnZhYmxlLmNyZWF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVByb21pc2UuanMubWFwXG5cbi8qKiovIH0sXG4vKiA3MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgR2VuZXJhdGVPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZ2VuZXJhdGUgPSBHZW5lcmF0ZU9ic2VydmFibGVfMS5HZW5lcmF0ZU9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDc0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBpc1NjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdHZhciBzZWxmU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBHZW5lcmF0ZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEdlbmVyYXRlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEdlbmVyYXRlT2JzZXJ2YWJsZShpbml0aWFsU3RhdGUsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXHQgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuXHQgICAgICAgIHRoaXMuaXRlcmF0ZSA9IGl0ZXJhdGU7XG5cdCAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgR2VuZXJhdGVPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmF0ZU9ic2VydmFibGUoaW5pdGlhbFN0YXRlT3JPcHRpb25zLmluaXRpYWxTdGF0ZSwgaW5pdGlhbFN0YXRlT3JPcHRpb25zLmNvbmRpdGlvbiwgaW5pdGlhbFN0YXRlT3JPcHRpb25zLml0ZXJhdGUsIGluaXRpYWxTdGF0ZU9yT3B0aW9ucy5yZXN1bHRTZWxlY3RvciB8fCBzZWxmU2VsZWN0b3IsIGluaXRpYWxTdGF0ZU9yT3B0aW9ucy5zY2hlZHVsZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUgPT09IHVuZGVmaW5lZCB8fCBpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlT2JzZXJ2YWJsZShpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgc2VsZlNlbGVjdG9yLCByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGVPYnNlcnZhYmxlKGluaXRpYWxTdGF0ZU9yT3B0aW9ucywgY29uZGl0aW9uLCBpdGVyYXRlLCByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBHZW5lcmF0ZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlO1xuXHQgICAgICAgIGlmICh0aGlzLnNjaGVkdWxlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoR2VuZXJhdGVPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLFxuXHQgICAgICAgICAgICAgICAgaXRlcmF0ZTogdGhpcy5pdGVyYXRlLFxuXHQgICAgICAgICAgICAgICAgY29uZGl0aW9uOiB0aGlzLmNvbmRpdGlvbixcblx0ICAgICAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yOiB0aGlzLnJlc3VsdFNlbGVjdG9yLFxuXHQgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb25kaXRpb24gPSBfYS5jb25kaXRpb24sIHJlc3VsdFNlbGVjdG9yID0gX2EucmVzdWx0U2VsZWN0b3IsIGl0ZXJhdGUgPSBfYS5pdGVyYXRlO1xuXHQgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvbmRpdGlvblJlc3VsdCA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gY29uZGl0aW9uKHN0YXRlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRTZWxlY3RvcihzdGF0ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgc3RhdGUgPSBpdGVyYXRlKHN0YXRlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IHdoaWxlICh0cnVlKTtcblx0ICAgIH07XG5cdCAgICBHZW5lcmF0ZU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcblx0ICAgICAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIGNvbmRpdGlvbiA9IHN0YXRlLmNvbmRpdGlvbjtcblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzdGF0ZS5uZWVkSXRlcmF0ZSkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgc3RhdGUuc3RhdGUgPSBzdGF0ZS5pdGVyYXRlKHN0YXRlLnN0YXRlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHN0YXRlLm5lZWRJdGVyYXRlID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuXHQgICAgICAgICAgICB2YXIgY29uZGl0aW9uUmVzdWx0ID0gdm9pZCAwO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gY29uZGl0aW9uKHN0YXRlLnN0YXRlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcblx0ICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciB2YWx1ZTtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHN0YXRlLnJlc3VsdFNlbGVjdG9yKHN0YXRlLnN0YXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuXHQgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBHZW5lcmF0ZU9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5HZW5lcmF0ZU9ic2VydmFibGUgPSBHZW5lcmF0ZU9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyYXRlT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDc1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBpbnRlcnZhbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmludGVydmFsID0gaW50ZXJ2YWxfMS5pbnRlcnZhbDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwXG5cbi8qKiovIH0sXG4vKiA3NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBJbnRlcnZhbE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpO1xuXHRleHBvcnRzLmludGVydmFsID0gSW50ZXJ2YWxPYnNlcnZhYmxlXzEuSW50ZXJ2YWxPYnNlcnZhYmxlLmNyZWF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwXG5cbi8qKiovIH0sXG4vKiA3NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBpc051bWVyaWNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGFzeW5jXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKiBAaGlkZSB0cnVlXG5cdCAqL1xuXHR2YXIgSW50ZXJ2YWxPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhJbnRlcnZhbE9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBJbnRlcnZhbE9ic2VydmFibGUocGVyaW9kLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHsgcGVyaW9kID0gMDsgfVxuXHQgICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2Q7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICAgICAgaWYgKCFpc051bWVyaWNfMS5pc051bWVyaWMocGVyaW9kKSB8fCBwZXJpb2QgPCAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMucGVyaW9kID0gMDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICB0aGlzLnNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBzZXF1ZW50aWFsIG51bWJlcnMgZXZlcnkgc3BlY2lmaWVkXG5cdCAgICAgKiBpbnRlcnZhbCBvZiB0aW1lLCBvbiBhIHNwZWNpZmllZCBTY2hlZHVsZXIuXG5cdCAgICAgKlxuXHQgICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkVtaXRzIGluY3JlbWVudGFsIG51bWJlcnMgcGVyaW9kaWNhbGx5IGluIHRpbWUuXG5cdCAgICAgKiA8L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogPGltZyBzcmM9XCIuL2ltZy9pbnRlcnZhbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICAgICAqXG5cdCAgICAgKiBgaW50ZXJ2YWxgIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGFuIGluZmluaXRlIHNlcXVlbmNlIG9mXG5cdCAgICAgKiBhc2NlbmRpbmcgaW50ZWdlcnMsIHdpdGggYSBjb25zdGFudCBpbnRlcnZhbCBvZiB0aW1lIG9mIHlvdXIgY2hvb3Npbmdcblx0ICAgICAqIGJldHdlZW4gdGhvc2UgZW1pc3Npb25zLiBUaGUgZmlyc3QgZW1pc3Npb24gaXMgbm90IHNlbnQgaW1tZWRpYXRlbHksIGJ1dFxuXHQgICAgICogb25seSBhZnRlciB0aGUgZmlyc3QgcGVyaW9kIGhhcyBwYXNzZWQuIEJ5IGRlZmF1bHQsIHRoaXMgb3BlcmF0b3IgdXNlcyB0aGVcblx0ICAgICAqIGBhc3luY2AgU2NoZWR1bGVyIHRvIHByb3ZpZGUgYSBub3Rpb24gb2YgdGltZSwgYnV0IHlvdSBtYXkgcGFzcyBhbnlcblx0ICAgICAqIFNjaGVkdWxlciB0byBpdC5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0cyBhc2NlbmRpbmcgbnVtYmVycywgb25lIGV2ZXJ5IHNlY29uZCAoMTAwMG1zKTwvY2FwdGlvbj5cblx0ICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICAgICAqIG51bWJlcnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgICAgICpcblx0ICAgICAqIEBzZWUge0BsaW5rIHRpbWVyfVxuXHQgICAgICogQHNlZSB7QGxpbmsgZGVsYXl9XG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IFtwZXJpb2Q9MF0gVGhlIGludGVydmFsIHNpemUgaW4gbWlsbGlzZWNvbmRzIChieSBkZWZhdWx0KVxuXHQgICAgICogb3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkIGJ5IHRoZSBzY2hlZHVsZXIncyBjbG9jay5cblx0ICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgU2NoZWR1bGVyIHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuXHQgICAgICogdGhlIGVtaXNzaW9uIG9mIHZhbHVlcywgYW5kIHByb3ZpZGluZyBhIG5vdGlvbiBvZiBcInRpbWVcIi5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhIHNlcXVlbnRpYWwgbnVtYmVyIGVhY2ggdGltZVxuXHQgICAgICogaW50ZXJ2YWwuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIGludGVydmFsXG5cdCAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgICAgICovXG5cdCAgICBJbnRlcnZhbE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWxPYnNlcnZhYmxlKHBlcmlvZCwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBJbnRlcnZhbE9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZDtcblx0ICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5kZXgpO1xuXHQgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3RhdGUuaW5kZXggKz0gMTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlLCBwZXJpb2QpO1xuXHQgICAgfTtcblx0ICAgIEludGVydmFsT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgICB2YXIgcGVyaW9kID0gdGhpcy5wZXJpb2Q7XG5cdCAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuXHQgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShJbnRlcnZhbE9ic2VydmFibGUuZGlzcGF0Y2gsIHBlcmlvZCwge1xuXHQgICAgICAgICAgICBpbmRleDogaW5kZXgsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIHBlcmlvZDogcGVyaW9kXG5cdCAgICAgICAgfSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBJbnRlcnZhbE9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5JbnRlcnZhbE9ic2VydmFibGUgPSBJbnRlcnZhbE9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVydmFsT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDc4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGlzQXJyYXlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHRmdW5jdGlvbiBpc051bWVyaWModmFsKSB7XG5cdCAgICAvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG5cdCAgICAvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdCAgICAvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0ICAgIC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxuXHQgICAgcmV0dXJuICFpc0FycmF5XzEuaXNBcnJheSh2YWwpICYmICh2YWwgLSBwYXJzZUZsb2F0KHZhbCkgKyAxKSA+PSAwO1xuXHR9XG5cdGV4cG9ydHMuaXNOdW1lcmljID0gaXNOdW1lcmljO1xuXHQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTnVtZXJpYy5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDc5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEFzeW5jU2NoZWR1bGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKTtcblx0ZXhwb3J0cy5hc3luYyA9IG5ldyBBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKCk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogODAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgRnV0dXJlQWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKTtcblx0dmFyIFF1ZXVlU2NoZWR1bGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0dmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKCkge1xuXHQgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlTm93ID0gZnVuY3Rpb24gKHdvcmssIHN0YXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBGdXR1cmVBY3Rpb25fMS5GdXR1cmVBY3Rpb24odGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIDApO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcblx0fShRdWV1ZVNjaGVkdWxlcl8xLlF1ZXVlU2NoZWR1bGVyKSk7XG5cdGV4cG9ydHMuQXN5bmNTY2hlZHVsZXIgPSBBc3luY1NjaGVkdWxlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiA4MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciByb290XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgU3Vic2NyaXB0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgRnV0dXJlQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhGdXR1cmVBY3Rpb24sIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBGdXR1cmVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICAgICAgdGhpcy53b3JrID0gd29yaztcblx0ICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIEZ1dHVyZUFjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmVycm9yID0gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy53b3JrKHRoaXMuc3RhdGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBGdXR1cmVBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuXHQgICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuXHQgICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5fc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcblx0ICAgIH07XG5cdCAgICBGdXR1cmVBY3Rpb24ucHJvdG90eXBlLl9zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuXHQgICAgICAgIC8vIEFsd2F5cyByZXBsYWNlIHRoZSBjdXJyZW50IHN0YXRlIHdpdGggdGhlIG5ldyBzdGF0ZS5cblx0ICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG5cdCAgICAgICAgLy8gU2V0IHRoZSBwZW5kaW5nIGZsYWcgaW5kaWNhdGluZyB0aGF0IHRoaXMgYWN0aW9uIGhhcyBiZWVuIHNjaGVkdWxlZCwgb3Jcblx0ICAgICAgICAvLyBoYXMgcmVjdXJzaXZlbHkgcmVzY2hlZHVsZWQgaXRzZWxmLlxuXHQgICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG5cdCAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcblx0ICAgICAgICAvLyBJZiB0aGlzIGFjdGlvbiBoYXMgYW4gaW50ZXJ2YWxJRCBhbmQgdGhlIHNwZWNpZmllZCBkZWxheSBtYXRjaGVzIHRoZVxuXHQgICAgICAgIC8vIGRlbGF5IHdlIHVzZWQgdG8gY3JlYXRlIHRoZSBpbnRlcnZhbElELCBkb24ndCBjYWxsIGBzZXRJbnRlcnZhbGAgYWdhaW4uXG5cdCAgICAgICAgaWYgKGlkICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcblx0ICAgICAgICAvLyBJZiB0aGlzIGFjdGlvbiBoYXMgYW4gaW50ZXJ2YWxJRCwgYnV0IHdhcyByZXNjaGVkdWxlZCB3aXRoIGEgZGlmZmVyZW50XG5cdCAgICAgICAgLy8gYGRlbGF5YCB0aW1lLCBjYW5jZWwgdGhlIGN1cnJlbnQgaW50ZXJ2YWxJRCBhbmQgY2FsbCBgc2V0SW50ZXJ2YWxgIHdpdGhcblx0ICAgICAgICAvLyB0aGUgbmV3IGBkZWxheWAgdGltZS5cblx0ICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLmlkID0gbnVsbDtcblx0ICAgICAgICAgICAgcm9vdF8xLnJvb3QuY2xlYXJJbnRlcnZhbChpZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vXG5cdCAgICAgICAgLy8gSW1wb3J0YW50IGltcGxlbWVudGF0aW9uIG5vdGU6XG5cdCAgICAgICAgLy9cblx0ICAgICAgICAvLyBCeSBkZWZhdWx0LCBGdXR1cmVBY3Rpb24gb25seSBleGVjdXRlcyBvbmNlLiBIb3dldmVyLCBBY3Rpb25zIGhhdmUgdGhlXG5cdCAgICAgICAgLy8gYWJpbGl0eSB0byBiZSByZXNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGUgc2NoZWR1bGVkIGNhbGxiYWNrIChtaW1pY2tpbmdcblx0ICAgICAgICAvLyByZWN1cnNpb24gZm9yIGFzeW5jaHJvbm91cyBtZXRob2RzKS4gVGhpcyBhbGxvd3MgdXMgdG8gaW1wbGVtZW50IHNpbmdsZVxuXHQgICAgICAgIC8vIGFuZCByZXBlYXRlZCBhY3Rpb25zIHdpdGggdGhlIHNhbWUgY29kZSBwYXRoIHdpdGhvdXQgYWRkaW5nIEFQSSBzdXJmYWNlXG5cdCAgICAgICAgLy8gYXJlYSwgYW5kIGltcGxlbWVudCB0YWlsLWNhbGwgb3B0aW1pemF0aW9uIG92ZXIgYXN5bmNocm9ub3VzIGJvdW5kYXJpZXMuXG5cdCAgICAgICAgLy9cblx0ICAgICAgICAvLyBIb3dldmVyLCBKUyBydW50aW1lcyBtYWtlIGEgZGlzdGluY3Rpb24gYmV0d2VlbiBpbnRlcnZhbHMgc2NoZWR1bGVkIGJ5XG5cdCAgICAgICAgLy8gcmVwZWF0ZWRseSBjYWxsaW5nIGBzZXRUaW1lb3V0YCB2cy4gYSBzaW5nbGUgYHNldEludGVydmFsYCBjYWxsLCB3aXRoXG5cdCAgICAgICAgLy8gdGhlIGxhdHRlciBwcm92aWRpbmcgYSBiZXR0ZXIgZ3VhcmFudGVlIG9mIHByZWNpc2lvbi5cblx0ICAgICAgICAvL1xuXHQgICAgICAgIC8vIEluIG9yZGVyIHRvIGFjY29tbW9kYXRlIGJvdGggc2luZ2xlIGFuZCByZXBlYXRlZGx5IHJlc2NoZWR1bGVkIGFjdGlvbnMsXG5cdCAgICAgICAgLy8gdXNlIGBzZXRJbnRlcnZhbGAgaGVyZSBmb3IgYm90aCBjYXNlcy4gQnkgZGVmYXVsdCwgdGhlIGludGVydmFsIHdpbGwgYmVcblx0ICAgICAgICAvLyBjYW5jZWxlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLCBvciBpZiB0aGUgYWN0aW9uIHNjaGVkdWxlcyBpdHNlbGYgdG9cblx0ICAgICAgICAvLyBydW4gYWdhaW4gd2l0aCBhIGRpZmZlcmVudCBgZGVsYXlgIHRpbWUuXG5cdCAgICAgICAgLy9cblx0ICAgICAgICAvLyBJZiB0aGUgYWN0aW9uIHJlY3Vyc2l2ZWx5IHNjaGVkdWxlcyBpdHNlbGYgdG8gcnVuIGFnYWluIHdpdGggdGhlIHNhbWVcblx0ICAgICAgICAvLyBgZGVsYXlgIHRpbWUsIHRoZSBpbnRlcnZhbCBpcyBub3QgY2FuY2VsZWQsIGJ1dCBhbGxvd2VkIHRvIGxvb3AgYWdhaW4uXG5cdCAgICAgICAgLy8gVGhlIGNoZWNrIG9mIHdoZXRoZXIgdGhlIGludGVydmFsIHNob3VsZCBiZSBjYW5jZWxlZCBvciBub3QgaXMgcnVuIGV2ZXJ5XG5cdCAgICAgICAgLy8gdGltZSB0aGUgaW50ZXJ2YWwgaXMgZXhlY3V0ZWQuIFRoZSBmaXJzdCB0aW1lIGFuIGFjdGlvbiBmYWlscyB0b1xuXHQgICAgICAgIC8vIHJlc2NoZWR1bGUgaXRzZWxmLCB0aGUgaW50ZXJ2YWwgaXMgY2FuY2VsZWQuXG5cdCAgICAgICAgLy9cblx0ICAgICAgICB0aGlzLmlkID0gcm9vdF8xLnJvb3Quc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG5cdCAgICAgICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2goX3RoaXMpO1xuXHQgICAgICAgICAgICBzY2hlZHVsZXIuZmx1c2goKTtcblx0ICAgICAgICAgICAgLy9cblx0ICAgICAgICAgICAgLy8gVGVybWluYXRlIHRoaXMgaW50ZXJ2YWwgaWYgdGhlIGFjdGlvbiBkaWRuJ3QgcmVzY2hlZHVsZSBpdHNlbGYuXG5cdCAgICAgICAgICAgIC8vIERvbid0IGNhbGwgYHRoaXMudW5zdWJzY3JpYmUoKWAgaGVyZSwgYmVjYXVzZSB0aGUgYWN0aW9uIGNvdWxkIGJlXG5cdCAgICAgICAgICAgIC8vIHJlc2NoZWR1bGVkIGxhdGVyLiBGb3IgZXhhbXBsZTpcblx0ICAgICAgICAgICAgLy9cblx0ICAgICAgICAgICAgLy8gYGBgXG5cdCAgICAgICAgICAgIC8vIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiBkb1dvcmsoY291bnRlcikge1xuXHQgICAgICAgICAgICAvLyAgIC8qIC4uLiBJJ20gYSBidXN5IHdvcmtlciBiZWUgLi4uICovXG5cdCAgICAgICAgICAgIC8vICAgdmFyIG9yaWdpbmFsQWN0aW9uID0gdGhpcztcblx0ICAgICAgICAgICAgLy8gICAvKiB3YWl0IDEwMG1zIGJlZm9yZSByZXNjaGVkdWxpbmcgdGhpcyBhY3Rpb24gYWdhaW4gKi9cblx0ICAgICAgICAgICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gICAgIG9yaWdpbmFsQWN0aW9uLnNjaGVkdWxlKGNvdW50ZXIgKyAxKTtcblx0ICAgICAgICAgICAgLy8gICB9LCAxMDApO1xuXHQgICAgICAgICAgICAvLyB9LCAxMDAwKTtcblx0ICAgICAgICAgICAgLy8gYGBgXG5cdCAgICAgICAgICAgIGlmIChfdGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiBpZCAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5pZCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICByb290XzEucm9vdC5jbGVhckludGVydmFsKGlkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sIGRlbGF5KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICBGdXR1cmVBY3Rpb24ucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG5cdCAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcblx0ICAgICAgICB2YXIgaW5kZXggPSBhY3Rpb25zLmluZGV4T2YodGhpcyk7XG5cdCAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhpcy5pZCA9IG51bGw7XG5cdCAgICAgICAgICAgIHJvb3RfMS5yb290LmNsZWFySW50ZXJ2YWwoaWQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgICAgIGFjdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy53b3JrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZ1dHVyZUFjdGlvbjtcblx0fShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcblx0ZXhwb3J0cy5GdXR1cmVBY3Rpb24gPSBGdXR1cmVBY3Rpb247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUZ1dHVyZUFjdGlvbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDgyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFF1ZXVlQWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKTtcblx0dmFyIEZ1dHVyZUFjdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSk7XG5cdHZhciBRdWV1ZVNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBRdWV1ZVNjaGVkdWxlcigpIHtcblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdOyAvLyBYWFg6IHVzZSBgYW55YCB0byByZW1vdmUgdHlwZSBwYXJhbSBgVGAgZnJvbSBgVmlydHVhbFRpbWVTY2hlZHVsZXJgLlxuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVkSWQgPSBudWxsO1xuXHQgICAgfVxuXHQgICAgUXVldWVTY2hlZHVsZXIucHJvdG90eXBlLm5vdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcblx0ICAgIH07XG5cdCAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuc2NoZWR1bGVkSWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG5cdCAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG5cdCAgICAgICAgLy8gWFhYOiB1c2UgYGFueWAgdG8gcmVtb3ZlIHR5cGUgcGFyYW0gYFRgIGZyb20gYFZpcnR1YWxUaW1lU2NoZWR1bGVyYC5cblx0ICAgICAgICBmb3IgKHZhciBhY3Rpb24gPSBudWxsOyBhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCk7KSB7XG5cdCAgICAgICAgICAgIGFjdGlvbi5leGVjdXRlKCk7XG5cdCAgICAgICAgICAgIGlmIChhY3Rpb24uZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0ICAgIH07XG5cdCAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG5cdCAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG5cdCAgICAgICAgcmV0dXJuIChkZWxheSA8PSAwKSA/XG5cdCAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVOb3cod29yaywgc3RhdGUpIDpcblx0ICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUxhdGVyKHdvcmssIGRlbGF5LCBzdGF0ZSk7XG5cdCAgICB9O1xuXHQgICAgUXVldWVTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlTm93ID0gZnVuY3Rpb24gKHdvcmssIHN0YXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBRdWV1ZUFjdGlvbl8xLlF1ZXVlQWN0aW9uKHRoaXMsIHdvcmspLnNjaGVkdWxlKHN0YXRlKTtcblx0ICAgIH07XG5cdCAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGVMYXRlciA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IEZ1dHVyZUFjdGlvbl8xLkZ1dHVyZUFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBRdWV1ZVNjaGVkdWxlcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5RdWV1ZVNjaGVkdWxlciA9IFF1ZXVlU2NoZWR1bGVyO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZVNjaGVkdWxlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDgzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIEZ1dHVyZUFjdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFF1ZXVlQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhRdWV1ZUFjdGlvbiwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFF1ZXVlQWN0aW9uKCkge1xuXHQgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLl9zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcblx0ICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cblx0ICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zY2hlZHVsZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcblx0ICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG5cdCAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuXHQgICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG5cdCAgICAgICAgc2NoZWR1bGVyLmZsdXNoKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFF1ZXVlQWN0aW9uO1xuXHR9KEZ1dHVyZUFjdGlvbl8xLkZ1dHVyZUFjdGlvbikpO1xuXHRleHBvcnRzLlF1ZXVlQWN0aW9uID0gUXVldWVBY3Rpb247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXVlQWN0aW9uLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogODQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG1lcmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUubWVyZ2UgPSBtZXJnZV8xLm1lcmdlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDg1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIG1lcmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KTtcblx0ZXhwb3J0cy5tZXJnZSA9IG1lcmdlXzEubWVyZ2VTdGF0aWM7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogODYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIG1lcmdlQWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIGlzU2NoZWR1bGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggY29uY3VycmVudGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuXHQgKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnkgYmxlbmRpbmdcblx0ICogdGhlaXIgdmFsdWVzIGludG8gb25lIE9ic2VydmFibGUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgbWVyZ2VgIHN1YnNjcmliZXMgdG8gZWFjaCBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIChlaXRoZXIgdGhlIHNvdXJjZSBvciBhblxuXHQgKiBPYnNlcnZhYmxlIGdpdmVuIGFzIGFyZ3VtZW50KSwgYW5kIHNpbXBseSBmb3J3YXJkcyAod2l0aG91dCBkb2luZyBhbnlcblx0ICogdHJhbnNmb3JtYXRpb24pIGFsbCB0aGUgdmFsdWVzIGZyb20gYWxsIHRoZSBpbnB1dCBPYnNlcnZhYmxlcyB0byB0aGUgb3V0cHV0XG5cdCAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvbmx5IGNvbXBsZXRlcyBvbmNlIGFsbCBpbnB1dCBPYnNlcnZhYmxlc1xuXHQgKiBoYXZlIGNvbXBsZXRlZC4gQW55IGVycm9yIGRlbGl2ZXJlZCBieSBhbiBpbnB1dCBPYnNlcnZhYmxlIHdpbGwgYmUgaW1tZWRpYXRlbHlcblx0ICogZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1lcmdlIHRvZ2V0aGVyIHR3byBPYnNlcnZhYmxlczogMXMgaW50ZXJ2YWwgYW5kIGNsaWNrczwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICogdmFyIGNsaWNrc09yVGltZXIgPSBjbGlja3MubWVyZ2UodGltZXIpO1xuXHQgKiBjbGlja3NPclRpbWVyLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+TWVyZ2UgdG9nZXRoZXIgMyBPYnNlcnZhYmxlcywgYnV0IG9ubHkgMiBydW4gY29uY3VycmVudGx5PC9jYXB0aW9uPlxuXHQgKiB2YXIgdGltZXIxID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKTtcblx0ICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcblx0ICogdmFyIHRpbWVyMyA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoNTAwKS50YWtlKDEwKTtcblx0ICogdmFyIGNvbmN1cnJlbnQgPSAyOyAvLyB0aGUgYXJndW1lbnRcblx0ICogdmFyIG1lcmdlZCA9IHRpbWVyMS5tZXJnZSh0aW1lcjIsIHRpbWVyMywgY29uY3VycmVudCk7XG5cdCAqIG1lcmdlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlQWxsfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZU1hcH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGV9IG90aGVyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gbWVyZ2Ugd2l0aCB0aGUgc291cmNlXG5cdCAqIE9ic2VydmFibGUuIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSBNYXhpbXVtIG51bWJlciBvZiBpbnB1dFxuXHQgKiBPYnNlcnZhYmxlcyBiZWluZyBzdWJzY3JpYmVkIHRvIGNvbmN1cnJlbnRseS5cblx0ICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9bnVsbF0gVGhlIFNjaGVkdWxlciB0byB1c2UgZm9yIG1hbmFnaW5nXG5cdCAqIGNvbmN1cnJlbmN5IG9mIGlucHV0IE9ic2VydmFibGVzLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgdGhhdCBhcmUgdGhlIHJlc3VsdCBvZlxuXHQgKiBldmVyeSBpbnB1dCBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIG1lcmdlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBtZXJnZSgpIHtcblx0ICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBvYnNlcnZhYmxlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgIH1cblx0ICAgIG9ic2VydmFibGVzLnVuc2hpZnQodGhpcyk7XG5cdCAgICByZXR1cm4gbWVyZ2VTdGF0aWMuYXBwbHkodGhpcywgb2JzZXJ2YWJsZXMpO1xuXHR9XG5cdGV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcblx0LyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggY29uY3VycmVudGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuXHQgKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnkgYmxlbmRpbmdcblx0ICogdGhlaXIgdmFsdWVzIGludG8gb25lIE9ic2VydmFibGUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgbWVyZ2VgIHN1YnNjcmliZXMgdG8gZWFjaCBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIChhcyBhcmd1bWVudHMpLCBhbmQgc2ltcGx5XG5cdCAqIGZvcndhcmRzICh3aXRob3V0IGRvaW5nIGFueSB0cmFuc2Zvcm1hdGlvbikgYWxsIHRoZSB2YWx1ZXMgZnJvbSBhbGwgdGhlIGlucHV0XG5cdCAqIE9ic2VydmFibGVzIHRvIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIG9ubHkgY29tcGxldGVzXG5cdCAqIG9uY2UgYWxsIGlucHV0IE9ic2VydmFibGVzIGhhdmUgY29tcGxldGVkLiBBbnkgZXJyb3IgZGVsaXZlcmVkIGJ5IGFuIGlucHV0XG5cdCAqIE9ic2VydmFibGUgd2lsbCBiZSBpbW1lZGlhdGVseSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+TWVyZ2UgdG9nZXRoZXIgdHdvIE9ic2VydmFibGVzOiAxcyBpbnRlcnZhbCBhbmQgY2xpY2tzPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgdGltZXIgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgY2xpY2tzT3JUaW1lciA9IFJ4Lk9ic2VydmFibGUubWVyZ2UoY2xpY2tzLCB0aW1lcik7XG5cdCAqIGNsaWNrc09yVGltZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5NZXJnZSB0b2dldGhlciAzIE9ic2VydmFibGVzLCBidXQgb25seSAyIHJ1biBjb25jdXJyZW50bHk8L2NhcHRpb24+XG5cdCAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuXHQgKiB2YXIgdGltZXIyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgyMDAwKS50YWtlKDYpO1xuXHQgKiB2YXIgdGltZXIzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCg1MDApLnRha2UoMTApO1xuXHQgKiB2YXIgY29uY3VycmVudCA9IDI7IC8vIHRoZSBhcmd1bWVudFxuXHQgKiB2YXIgbWVyZ2VkID0gUnguT2JzZXJ2YWJsZS5tZXJnZSh0aW1lcjEsIHRpbWVyMiwgdGltZXIzLCBjb25jdXJyZW50KTtcblx0ICogbWVyZ2VkLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VBbGx9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZU1hcFRvfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZVNjYW59XG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5wdXQxIEFuIGlucHV0IE9ic2VydmFibGUgdG8gbWVyZ2Ugd2l0aCBvdGhlcnMuXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5wdXQyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gbWVyZ2Ugd2l0aCBvdGhlcnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbY29uY3VycmVudD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldIE1heGltdW0gbnVtYmVyIG9mIGlucHV0XG5cdCAqIE9ic2VydmFibGVzIGJlaW5nIHN1YnNjcmliZWQgdG8gY29uY3VycmVudGx5LlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1udWxsXSBUaGUgU2NoZWR1bGVyIHRvIHVzZSBmb3IgbWFuYWdpbmdcblx0ICogY29uY3VycmVuY3kgb2YgaW5wdXQgT2JzZXJ2YWJsZXMuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyB0aGF0IGFyZSB0aGUgcmVzdWx0IG9mXG5cdCAqIGV2ZXJ5IGlucHV0IE9ic2VydmFibGUuXG5cdCAqIEBzdGF0aWMgdHJ1ZVxuXHQgKiBAbmFtZSBtZXJnZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2VTdGF0aWMoKSB7XG5cdCAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcblx0ICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG5cdCAgICB9XG5cdCAgICB2YXIgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0ICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuXHQgICAgdmFyIGxhc3QgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcblx0ICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGxhc3QpKSB7XG5cdCAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG5cdCAgICAgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgICBjb25jdXJyZW50ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAodHlwZW9mIGxhc3QgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzLCBzY2hlZHVsZXIpLmxpZnQobmV3IG1lcmdlQWxsXzEuTWVyZ2VBbGxPcGVyYXRvcihjb25jdXJyZW50KSk7XG5cdH1cblx0ZXhwb3J0cy5tZXJnZVN0YXRpYyA9IG1lcmdlU3RhdGljO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDg3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciByYWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucmFjZSA9IHJhY2VfMS5yYWNlU3RhdGljO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgaXNBcnJheV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdHZhciBBcnJheU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIGZpcnN0IHNvdXJjZSBPYnNlcnZhYmxlIHRvIGVtaXQgYW4gaXRlbVxuXHQgKiBmcm9tIHRoZSBjb21iaW5hdGlvbiBvZiB0aGlzIE9ic2VydmFibGUgYW5kIHN1cHBsaWVkIE9ic2VydmFibGVzXG5cdCAqIEBwYXJhbSB7Li4uT2JzZXJ2YWJsZXN9IC4uLm9ic2VydmFibGVzIHNvdXJjZXMgdXNlZCB0byByYWNlIGZvciB3aGljaCBPYnNlcnZhYmxlIGVtaXRzIGZpcnN0LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgb3V0cHV0IG9mIHRoZSBmaXJzdCBPYnNlcnZhYmxlIHRvIGVtaXQgYW4gaXRlbS5cblx0ICogQG1ldGhvZCByYWNlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiByYWNlKCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgLy8gaWYgdGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gYXJyYXksIGl0IHdhcyBtb3N0IGxpa2VseSBjYWxsZWQgd2l0aFxuXHQgICAgLy8gYHBhaXIoW29iczEsIG9iczIsIC4uLl0pYFxuXHQgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcblx0ICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuXHQgICAgfVxuXHQgICAgb2JzZXJ2YWJsZXMudW5zaGlmdCh0aGlzKTtcblx0ICAgIHJldHVybiByYWNlU3RhdGljLmFwcGx5KHRoaXMsIG9ic2VydmFibGVzKTtcblx0fVxuXHRleHBvcnRzLnJhY2UgPSByYWNlO1xuXHRmdW5jdGlvbiByYWNlU3RhdGljKCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgLy8gaWYgdGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gYXJyYXksIGl0IHdhcyBtb3N0IGxpa2VseSBjYWxsZWQgd2l0aFxuXHQgICAgLy8gYHBhaXIoW29iczEsIG9iczIsIC4uLl0pYFxuXHQgICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgIGlmIChpc0FycmF5XzEuaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcblx0ICAgICAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZV8xLkFycmF5T2JzZXJ2YWJsZShvYnNlcnZhYmxlcykubGlmdChuZXcgUmFjZU9wZXJhdG9yKCkpO1xuXHR9XG5cdGV4cG9ydHMucmFjZVN0YXRpYyA9IHJhY2VTdGF0aWM7XG5cdHZhciBSYWNlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmFjZU9wZXJhdG9yKCkge1xuXHQgICAgfVxuXHQgICAgUmFjZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgUmFjZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSYWNlT3BlcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuUmFjZU9wZXJhdG9yID0gUmFjZU9wZXJhdG9yO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBSYWNlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmFjZVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBSYWNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmhhc0ZpcnN0ID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuXHQgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuXHQgICAgfVxuXHQgICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKG9ic2VydmFibGUpIHtcblx0ICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG5cdCAgICB9O1xuXHQgICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuXHQgICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG5cdCAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSk7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpcHRpb24pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBSYWNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIGlmICghdGhpcy5oYXNGaXJzdCkge1xuXHQgICAgICAgICAgICB0aGlzLmhhc0ZpcnN0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpICE9PSBvdXRlckluZGV4KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tpXTtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmFjZVN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdGV4cG9ydHMuUmFjZVN1YnNjcmliZXIgPSBSYWNlU3Vic2NyaWJlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDg5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBuZXZlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLm5ldmVyID0gbmV2ZXJfMS5uZXZlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9bmV2ZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiA5MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBOZXZlck9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpO1xuXHRleHBvcnRzLm5ldmVyID0gTmV2ZXJPYnNlcnZhYmxlXzEuTmV2ZXJPYnNlcnZhYmxlLmNyZWF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9bmV2ZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiA5MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbm9vcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIE5ldmVyT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTmV2ZXJPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gTmV2ZXJPYnNlcnZhYmxlKCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBubyBpdGVtcyB0byB0aGUgT2JzZXJ2ZXIuXG5cdCAgICAgKlxuXHQgICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkFuIE9ic2VydmFibGUgdGhhdCBuZXZlciBlbWl0cyBhbnl0aGluZy48L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogPGltZyBzcmM9XCIuL2ltZy9uZXZlci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICAgICAqXG5cdCAgICAgKiBUaGlzIHN0YXRpYyBvcGVyYXRvciBpcyB1c2VmdWwgZm9yIGNyZWF0aW5nIGEgc2ltcGxlIE9ic2VydmFibGUgdGhhdCBlbWl0c1xuXHQgICAgICogbmVpdGhlciB2YWx1ZXMgbm9yIGVycm9ycyBub3IgdGhlIGNvbXBsZXRpb24gbm90aWZpY2F0aW9uLiBJdCBjYW4gYmUgdXNlZFxuXHQgICAgICogZm9yIHRlc3RpbmcgcHVycG9zZXMgb3IgZm9yIGNvbXBvc2luZyB3aXRoIG90aGVyIE9ic2VydmFibGVzLiBQbGVhc2Ugbm90XG5cdCAgICAgKiB0aGF0IGJ5IG5ldmVyIGVtaXR0aW5nIGEgY29tcGxldGUgbm90aWZpY2F0aW9uLCB0aGlzIE9ic2VydmFibGUga2VlcHMgdGhlXG5cdCAgICAgKiBzdWJzY3JpcHRpb24gZnJvbSBiZWluZyBkaXNwb3NlZCBhdXRvbWF0aWNhbGx5LiBTdWJzY3JpcHRpb25zIG5lZWQgdG8gYmVcblx0ICAgICAqIG1hbnVhbGx5IGRpc3Bvc2VkLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgdGhlIG51bWJlciA3LCB0aGVuIG5ldmVyIGVtaXQgYW55dGhpbmcgZWxzZSAobm90IGV2ZW4gY29tcGxldGUpLjwvY2FwdGlvbj5cblx0ICAgICAqIGZ1bmN0aW9uIGluZm8oKSB7XG5cdCAgICAgKiAgIGNvbnNvbGUubG9nKCdXaWxsIG5vdCBiZSBjYWxsZWQnKTtcblx0ICAgICAqIH1cblx0ICAgICAqIHZhciByZXN1bHQgPSBSeC5PYnNlcnZhYmxlLm5ldmVyKCkuc3RhcnRXaXRoKDcpO1xuXHQgICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpLCBpbmZvLCBpbmZvKTtcblx0ICAgICAqXG5cdCAgICAgKiBAc2VlIHtAbGluayBjcmVhdGV9XG5cdCAgICAgKiBAc2VlIHtAbGluayBlbXB0eX1cblx0ICAgICAqIEBzZWUge0BsaW5rIG9mfVxuXHQgICAgICogQHNlZSB7QGxpbmsgdGhyb3d9XG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQSBcIm5ldmVyXCIgT2JzZXJ2YWJsZTogbmV2ZXIgZW1pdHMgYW55dGhpbmcuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIG5ldmVyXG5cdCAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgICAgICovXG5cdCAgICBOZXZlck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgTmV2ZXJPYnNlcnZhYmxlKCk7XG5cdCAgICB9O1xuXHQgICAgTmV2ZXJPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICBub29wXzEubm9vcCgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBOZXZlck9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5OZXZlck9ic2VydmFibGUgPSBOZXZlck9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPU5ldmVyT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDkyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0LyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cblx0ZnVuY3Rpb24gbm9vcCgpIHsgfVxuXHRleHBvcnRzLm5vb3AgPSBub29wO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogOTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG9mXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUub2YgPSBvZl8xLm9mO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1vZi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDk0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEFycmF5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdGV4cG9ydHMub2YgPSBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUub2Y7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogOTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHJhbmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucmFuZ2UgPSByYW5nZV8xLnJhbmdlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDk2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFJhbmdlT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Nyk7XG5cdGV4cG9ydHMucmFuZ2UgPSBSYW5nZU9ic2VydmFibGVfMS5SYW5nZU9ic2VydmFibGUuY3JlYXRlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDk3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIFJhbmdlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmFuZ2VPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gUmFuZ2VPYnNlcnZhYmxlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuXHQgICAgICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGEgc2VxdWVuY2Ugb2YgbnVtYmVycyB3aXRoaW4gYSBzcGVjaWZpZWRcblx0ICAgICAqIHJhbmdlLlxuXHQgICAgICpcblx0ICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbWl0cyBhIHNlcXVlbmNlIG9mIG51bWJlcnMgaW4gYSByYW5nZS48L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogPGltZyBzcmM9XCIuL2ltZy9yYW5nZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICAgICAqXG5cdCAgICAgKiBgcmFuZ2VgIG9wZXJhdG9yIGVtaXRzIGEgcmFuZ2Ugb2Ygc2VxdWVudGlhbCBpbnRlZ2VycywgaW4gb3JkZXIsIHdoZXJlIHlvdVxuXHQgICAgICogc2VsZWN0IHRoZSBgc3RhcnRgIG9mIHRoZSByYW5nZSBhbmQgaXRzIGBsZW5ndGhgLiBCeSBkZWZhdWx0LCB1c2VzIG5vXG5cdCAgICAgKiBTY2hlZHVsZXIgYW5kIGp1c3QgZGVsaXZlcnMgdGhlIG5vdGlmaWNhdGlvbnMgc3luY2hyb25vdXNseSwgYnV0IG1heSB1c2Vcblx0ICAgICAqIGFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byByZWd1bGF0ZSB0aG9zZSBkZWxpdmVyaWVzLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIHRoZSBudW1iZXJzIDEgdG8gMTA8L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgbnVtYmVycyA9IFJ4Lk9ic2VydmFibGUucmFuZ2UoMSwgMTApO1xuXHQgICAgICogbnVtYmVycy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgdGltZXJ9XG5cdCAgICAgKiBAc2VlIHtAbGluayBpbnRlcnZhbH1cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW50ZWdlciBpbiB0aGUgc2VxdWVuY2UuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NvdW50PTBdIFRoZSBudW1iZXIgb2Ygc2VxdWVudGlhbCBpbnRlZ2VycyB0byBnZW5lcmF0ZS5cblx0ICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSBBIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuXHQgICAgICogdGhlIGVtaXNzaW9ucyBvZiB0aGUgbm90aWZpY2F0aW9ucy5cblx0ICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgb2YgbnVtYmVycyB0aGF0IGVtaXRzIGEgZmluaXRlIHJhbmdlIG9mXG5cdCAgICAgKiBzZXF1ZW50aWFsIGludGVnZXJzLlxuXHQgICAgICogQHN0YXRpYyB0cnVlXG5cdCAgICAgKiBAbmFtZSByYW5nZVxuXHQgICAgICogQG93bmVyIE9ic2VydmFibGVcblx0ICAgICAqL1xuXHQgICAgUmFuZ2VPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdGFydCwgY291bnQsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuXHQgICAgICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7IGNvdW50ID0gMDsgfVxuXHQgICAgICAgIHJldHVybiBuZXcgUmFuZ2VPYnNlcnZhYmxlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBSYW5nZU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSBzdGF0ZS5zdGFydCwgaW5kZXggPSBzdGF0ZS5pbmRleCwgY291bnQgPSBzdGF0ZS5jb3VudCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG5cdCAgICAgICAgaWYgKGluZGV4ID49IGNvdW50KSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJzY3JpYmVyLm5leHQoc3RhcnQpO1xuXHQgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG5cdCAgICAgICAgc3RhdGUuc3RhcnQgPSBzdGFydCArIDE7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG5cdCAgICB9O1xuXHQgICAgUmFuZ2VPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQ7XG5cdCAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5fY291bnQ7XG5cdCAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuXHQgICAgICAgIGlmIChzY2hlZHVsZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShSYW5nZU9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHtcblx0ICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgY291bnQ6IGNvdW50LCBzdGFydDogc3RhcnQsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBkbyB7XG5cdCAgICAgICAgICAgICAgICBpZiAoaW5kZXgrKyA+PSBjb3VudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChzdGFydCsrKTtcblx0ICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmFuZ2VPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuUmFuZ2VPYnNlcnZhYmxlID0gUmFuZ2VPYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1SYW5nZU9ic2VydmFibGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiA5OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdGhyb3dfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS50aHJvdyA9IHRocm93XzEuX3Rocm93O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdy5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDk5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEVycm9yT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApO1xuXHRleHBvcnRzLl90aHJvdyA9IEVycm9yT2JzZXJ2YWJsZV8xLkVycm9yT2JzZXJ2YWJsZS5jcmVhdGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICogQGhpZGUgdHJ1ZVxuXHQgKi9cblx0dmFyIEVycm9yT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRXJyb3JPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRXJyb3JPYnNlcnZhYmxlKGVycm9yLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIG5vIGl0ZW1zIHRvIHRoZSBPYnNlcnZlciBhbmQgaW1tZWRpYXRlbHlcblx0ICAgICAqIGVtaXRzIGFuIGVycm9yIG5vdGlmaWNhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SnVzdCBlbWl0cyAnZXJyb3InLCBhbmQgbm90aGluZyBlbHNlLlxuXHQgICAgICogPC9zcGFuPlxuXHQgICAgICpcblx0ICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvdGhyb3cucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAgICAgKlxuXHQgICAgICogVGhpcyBzdGF0aWMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhIHNpbXBsZSBPYnNlcnZhYmxlIHRoYXQgb25seVxuXHQgICAgICogZW1pdHMgdGhlIGVycm9yIG5vdGlmaWNhdGlvbi4gSXQgY2FuIGJlIHVzZWQgZm9yIGNvbXBvc2luZyB3aXRoIG90aGVyXG5cdCAgICAgKiBPYnNlcnZhYmxlcywgc3VjaCBhcyBpbiBhIHtAbGluayBtZXJnZU1hcH0uXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCB0aGUgbnVtYmVyIDcsIHRoZW4gZW1pdCBhbiBlcnJvci48L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoJ29vcHMhJykpLnN0YXJ0V2l0aCg3KTtcblx0ICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSwgZSA9PiBjb25zb2xlLmVycm9yKGUpKTtcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgYW5kIGZsYXR0ZW5zIG51bWJlcnMgdG8gdGhlIHNlcXVlbmNlICdhJywgJ2InLCAnYycsIGJ1dCB0aHJvdyBhbiBlcnJvciBmb3IgMTM8L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgaW50ZXJ2YWwgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgICAgICogdmFyIHJlc3VsdCA9IGludGVydmFsLm1lcmdlTWFwKHggPT5cblx0ICAgICAqICAgeCA9PT0gMTMgP1xuXHQgICAgICogICAgIFJ4Lk9ic2VydmFibGUudGhyb3coJ1RoaXJ0ZWVucyBhcmUgYmFkJykgOlxuXHQgICAgICogICAgIFJ4Lk9ic2VydmFibGUub2YoJ2EnLCAnYicsICdjJylcblx0ICAgICAqICk7XG5cdCAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCksIGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG5cdCAgICAgKlxuXHQgICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuXHQgICAgICogQHNlZSB7QGxpbmsgZW1wdHl9XG5cdCAgICAgKiBAc2VlIHtAbGluayBuZXZlcn1cblx0ICAgICAqIEBzZWUge0BsaW5rIG9mfVxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7YW55fSBlcnJvciBUaGUgcGFydGljdWxhciBFcnJvciB0byBwYXNzIHRvIHRoZSBlcnJvciBub3RpZmljYXRpb24uXG5cdCAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQSB7QGxpbmsgU2NoZWR1bGVyfSB0byB1c2UgZm9yIHNjaGVkdWxpbmdcblx0ICAgICAqIHRoZSBlbWlzc2lvbiBvZiB0aGUgZXJyb3Igbm90aWZpY2F0aW9uLlxuXHQgICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gZXJyb3IgT2JzZXJ2YWJsZTogZW1pdHMgb25seSB0aGUgZXJyb3Igbm90aWZpY2F0aW9uXG5cdCAgICAgKiB1c2luZyB0aGUgZ2l2ZW4gZXJyb3IgYXJndW1lbnQuXG5cdCAgICAgKiBAc3RhdGljIHRydWVcblx0ICAgICAqIEBuYW1lIHRocm93XG5cdCAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgICAgICovXG5cdCAgICBFcnJvck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGVycm9yLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IEVycm9yT2JzZXJ2YWJsZShlcnJvciwgc2NoZWR1bGVyKTtcblx0ICAgIH07XG5cdCAgICBFcnJvck9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgdmFyIGVycm9yID0gYXJnLmVycm9yLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG5cdCAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG5cdCAgICB9O1xuXHQgICAgRXJyb3JPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmVycm9yO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoRXJyb3JPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG5cdCAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEVycm9yT2JzZXJ2YWJsZTtcblx0fShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuXHRleHBvcnRzLkVycm9yT2JzZXJ2YWJsZSA9IEVycm9yT2JzZXJ2YWJsZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JPYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0aW1lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS50aW1lciA9IHRpbWVyXzEudGltZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFRpbWVyT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDMpO1xuXHRleHBvcnRzLnRpbWVyID0gVGltZXJPYnNlcnZhYmxlXzEuVGltZXJPYnNlcnZhYmxlLmNyZWF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgaXNOdW1lcmljXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdHZhciBpc1NjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdHZhciBpc0RhdGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKiBAaGlkZSB0cnVlXG5cdCAqL1xuXHR2YXIgVGltZXJPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhUaW1lck9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBUaW1lck9ic2VydmFibGUoZHVlVGltZSwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5wZXJpb2QgPSAtMTtcblx0ICAgICAgICB0aGlzLmR1ZVRpbWUgPSAwO1xuXHQgICAgICAgIGlmIChpc051bWVyaWNfMS5pc051bWVyaWMocGVyaW9kKSkge1xuXHQgICAgICAgICAgICB0aGlzLnBlcmlvZCA9IE51bWJlcihwZXJpb2QpIDwgMSAmJiAxIHx8IE51bWJlcihwZXJpb2QpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHBlcmlvZCkpIHtcblx0ICAgICAgICAgICAgc2NoZWR1bGVyID0gcGVyaW9kO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIWlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuXHQgICAgICAgICAgICBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLmR1ZVRpbWUgPSBpc0RhdGVfMS5pc0RhdGUoZHVlVGltZSkgP1xuXHQgICAgICAgICAgICAoK2R1ZVRpbWUgLSB0aGlzLnNjaGVkdWxlci5ub3coKSkgOlxuXHQgICAgICAgICAgICBkdWVUaW1lO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgdGhhdCBzdGFydHMgZW1pdHRpbmcgYWZ0ZXIgYW4gYGluaXRpYWxEZWxheWAgYW5kXG5cdCAgICAgKiBlbWl0cyBldmVyIGluY3JlYXNpbmcgbnVtYmVycyBhZnRlciBlYWNoIGBwZXJpb2RgIG9mIHRpbWUgdGhlcmVhZnRlci5cblx0ICAgICAqXG5cdCAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXRzIGxpa2Uge0BsaW5rIGludGVydmFsfSwgYnV0IHlvdSBjYW4gc3BlY2lmeSB3aGVuXG5cdCAgICAgKiBzaG91bGQgdGhlIGVtaXNzaW9ucyBzdGFydC48L3NwYW4+XG5cdCAgICAgKlxuXHQgICAgICogPGltZyBzcmM9XCIuL2ltZy90aW1lci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICAgICAqXG5cdCAgICAgKiBgdGltZXJgIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGFuIGluZmluaXRlIHNlcXVlbmNlIG9mIGFzY2VuZGluZ1xuXHQgICAgICogaW50ZWdlcnMsIHdpdGggYSBjb25zdGFudCBpbnRlcnZhbCBvZiB0aW1lLCBgcGVyaW9kYCBvZiB5b3VyIGNob29zaW5nXG5cdCAgICAgKiBiZXR3ZWVuIHRob3NlIGVtaXNzaW9ucy4gVGhlIGZpcnN0IGVtaXNzaW9uIGhhcHBlbnMgYWZ0ZXIgdGhlIHNwZWNpZmllZFxuXHQgICAgICogYGluaXRpYWxEZWxheWAuIFRoZSBpbml0aWFsIGRlbGF5IG1heSBiZSBhIHtAbGluayBEYXRlfS4gQnkgZGVmYXVsdCwgdGhpc1xuXHQgICAgICogb3BlcmF0b3IgdXNlcyB0aGUgYGFzeW5jYCBTY2hlZHVsZXIgdG8gcHJvdmlkZSBhIG5vdGlvbiBvZiB0aW1lLCBidXQgeW91XG5cdCAgICAgKiBtYXkgcGFzcyBhbnkgU2NoZWR1bGVyIHRvIGl0LiBJZiBgcGVyaW9kYCBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgb3V0cHV0XG5cdCAgICAgKiBPYnNlcnZhYmxlIGVtaXRzIG9ubHkgb25lIHZhbHVlLCBgMGAuIE90aGVyd2lzZSwgaXQgZW1pdHMgYW4gaW5maW5pdGVcblx0ICAgICAqIHNlcXVlbmNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIGFzY2VuZGluZyBudW1iZXJzLCBvbmUgZXZlcnkgc2Vjb25kICgxMDAwbXMpLCBzdGFydGluZyBhZnRlciAzIHNlY29uZHM8L2NhcHRpb24+XG5cdCAgICAgKiB2YXIgbnVtYmVycyA9IFJ4Lk9ic2VydmFibGUudGltZXIoMzAwMCwgMTAwMCk7XG5cdCAgICAgKiBudW1iZXJzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0cyBvbmUgbnVtYmVyIGFmdGVyIGZpdmUgc2Vjb25kczwvY2FwdGlvbj5cblx0ICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS50aW1lcig1MDAwKTtcblx0ICAgICAqIG51bWJlcnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgICAgICpcblx0ICAgICAqIEBzZWUge0BsaW5rIGludGVydmFsfVxuXHQgICAgICogQHNlZSB7QGxpbmsgZGVsYXl9XG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ8RGF0ZX0gaW5pdGlhbERlbGF5IFRoZSBpbml0aWFsIGRlbGF5IHRpbWUgdG8gd2FpdCBiZWZvcmVcblx0ICAgICAqIGVtaXR0aW5nIHRoZSBmaXJzdCB2YWx1ZSBvZiBgMGAuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW3BlcmlvZF0gVGhlIHBlcmlvZCBvZiB0aW1lIGJldHdlZW4gZW1pc3Npb25zIG9mIHRoZVxuXHQgICAgICogc3Vic2VxdWVudCBudW1iZXJzLlxuXHQgICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9YXN5bmNdIFRoZSBTY2hlZHVsZXIgdG8gdXNlIGZvciBzY2hlZHVsaW5nXG5cdCAgICAgKiB0aGUgZW1pc3Npb24gb2YgdmFsdWVzLCBhbmQgcHJvdmlkaW5nIGEgbm90aW9uIG9mIFwidGltZVwiLlxuXHQgICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGEgYDBgIGFmdGVyIHRoZVxuXHQgICAgICogYGluaXRpYWxEZWxheWAgYW5kIGV2ZXIgaW5jcmVhc2luZyBudW1iZXJzIGFmdGVyIGVhY2ggYHBlcmlvZGAgb2YgdGltZVxuXHQgICAgICogdGhlcmVhZnRlci5cblx0ICAgICAqIEBzdGF0aWMgdHJ1ZVxuXHQgICAgICogQG5hbWUgdGltZXJcblx0ICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAgICAgKi9cblx0ICAgIFRpbWVyT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoaW5pdGlhbERlbGF5LCBwZXJpb2QsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIGlmIChpbml0aWFsRGVsYXkgPT09IHZvaWQgMCkgeyBpbml0aWFsRGVsYXkgPSAwOyB9XG5cdCAgICAgICAgcmV0dXJuIG5ldyBUaW1lck9ic2VydmFibGUoaW5pdGlhbERlbGF5LCBwZXJpb2QsIHNjaGVkdWxlcik7XG5cdCAgICB9O1xuXHQgICAgVGltZXJPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG5cdCAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXM7XG5cdCAgICAgICAgc3Vic2NyaWJlci5uZXh0KGluZGV4KTtcblx0ICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHBlcmlvZCA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG5cdCAgICAgICAgYWN0aW9uLnNjaGVkdWxlKHN0YXRlLCBwZXJpb2QpO1xuXHQgICAgfTtcblx0ICAgIFRpbWVyT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBwZXJpb2QgPSBfYS5wZXJpb2QsIGR1ZVRpbWUgPSBfYS5kdWVUaW1lLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG5cdCAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShUaW1lck9ic2VydmFibGUuZGlzcGF0Y2gsIGR1ZVRpbWUsIHtcblx0ICAgICAgICAgICAgaW5kZXg6IGluZGV4LCBwZXJpb2Q6IHBlcmlvZCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUaW1lck9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0ZXhwb3J0cy5UaW1lck9ic2VydmFibGUgPSBUaW1lck9ic2VydmFibGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpbWVyT2JzZXJ2YWJsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEwNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4oK3ZhbHVlKTtcblx0fVxuXHRleHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB6aXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuemlwID0gemlwXzEuemlwO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgemlwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNyk7XG5cdGV4cG9ydHMuemlwID0gemlwXzEuemlwU3RhdGljO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0dmFyIGlzQXJyYXlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHR2YXIgaXRlcmF0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHQvKipcblx0ICogQHBhcmFtIG9ic2VydmFibGVzXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59XG5cdCAqIEBtZXRob2QgemlwXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB6aXBQcm90bygpIHtcblx0ICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBvYnNlcnZhYmxlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgIH1cblx0ICAgIG9ic2VydmFibGVzLnVuc2hpZnQodGhpcyk7XG5cdCAgICByZXR1cm4gemlwU3RhdGljLmFwcGx5KHRoaXMsIG9ic2VydmFibGVzKTtcblx0fVxuXHRleHBvcnRzLnppcFByb3RvID0gemlwUHJvdG87XG5cdC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cdC8qKlxuXHQgKiBAcGFyYW0gb2JzZXJ2YWJsZXNcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxSPn1cblx0ICogQHN0YXRpYyB0cnVlXG5cdCAqIEBuYW1lIHppcFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gemlwU3RhdGljKCkge1xuXHQgICAgdmFyIG9ic2VydmFibGVzID0gW107XG5cdCAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgdmFyIHByb2plY3QgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcblx0ICAgIGlmICh0eXBlb2YgcHJvamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIG9ic2VydmFibGVzLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUob2JzZXJ2YWJsZXMpLmxpZnQobmV3IFppcE9wZXJhdG9yKHByb2plY3QpKTtcblx0fVxuXHRleHBvcnRzLnppcFN0YXRpYyA9IHppcFN0YXRpYztcblx0dmFyIFppcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFppcE9wZXJhdG9yKHByb2plY3QpIHtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgfVxuXHQgICAgWmlwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBaaXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBaaXBPcGVyYXRvcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5aaXBPcGVyYXRvciA9IFppcE9wZXJhdG9yO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBaaXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhaaXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gWmlwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdmFsdWVzKSB7XG5cdCAgICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7IHZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5pdGVyYXRvcnMgPSBbXTtcblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IDA7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gKHR5cGVvZiBwcm9qZWN0ID09PSAnZnVuY3Rpb24nKSA/IHByb2plY3QgOiBudWxsO1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuXHQgICAgfVxuXHQgICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIGlmIChpc0FycmF5XzEuaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0FycmF5SXRlcmF0b3IodmFsdWUpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0l0ZXJhdG9yKHZhbHVlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0oKSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFppcEJ1ZmZlckl0ZXJhdG9yKHRoaXMuZGVzdGluYXRpb24sIHRoaXMsIHZhbHVlLCBpbmRleCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuXHQgICAgICAgIHZhciBsZW4gPSBpdGVyYXRvcnMubGVuZ3RoO1xuXHQgICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JzW2ldO1xuXHQgICAgICAgICAgICBpZiAoaXRlcmF0b3Iuc3RpbGxVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkKGl0ZXJhdG9yLnN1YnNjcmliZShpdGVyYXRvciwgaSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUtLTsgLy8gbm90IGFuIG9ic2VydmFibGVcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlJbmFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuXHQgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLmNoZWNrSXRlcmF0b3JzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcblx0ICAgICAgICB2YXIgbGVuID0gaXRlcmF0b3JzLmxlbmd0aDtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIC8vIGFib3J0IGlmIG5vdCBhbGwgb2YgdGhlbSBoYXZlIHZhbHVlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JzW2ldO1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLmhhc1ZhbHVlID09PSAnZnVuY3Rpb24nICYmICFpdGVyYXRvci5oYXNWYWx1ZSgpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHNob3VsZENvbXBsZXRlID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcblx0ICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIGl0J3MgY29tcGxldGVkIG5vdyB0aGF0IHlvdSd2ZSBnb3R0ZW5cblx0ICAgICAgICAgICAgLy8gdGhlIG5leHQgdmFsdWUuXG5cdCAgICAgICAgICAgIGlmIChpdGVyYXRvci5oYXNDb21wbGV0ZWQoKSkge1xuXHQgICAgICAgICAgICAgICAgc2hvdWxkQ29tcGxldGUgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuXHQgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBhcmdzLnB1c2gocmVzdWx0LnZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMucHJvamVjdCkge1xuXHQgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChhcmdzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHNob3VsZENvbXBsZXRlKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0O1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFppcFN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5aaXBTdWJzY3JpYmVyID0gWmlwU3Vic2NyaWJlcjtcblx0dmFyIFN0YXRpY0l0ZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFN0YXRpY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG5cdCAgICAgICAgdGhpcy5pdGVyYXRvciA9IGl0ZXJhdG9yO1xuXHQgICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgIH1cblx0ICAgIFN0YXRpY0l0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH07XG5cdCAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5uZXh0UmVzdWx0O1xuXHQgICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IHRoaXMuaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9O1xuXHQgICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbmV4dFJlc3VsdCA9IHRoaXMubmV4dFJlc3VsdDtcblx0ICAgICAgICByZXR1cm4gbmV4dFJlc3VsdCAmJiBuZXh0UmVzdWx0LmRvbmU7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFN0YXRpY0l0ZXJhdG9yO1xuXHR9KCkpO1xuXHR2YXIgU3RhdGljQXJyYXlJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTdGF0aWNBcnJheUl0ZXJhdG9yKGFycmF5KSB7XG5cdCAgICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgICAgIHRoaXMubGVuZ3RoID0gMDtcblx0ICAgICAgICB0aGlzLmxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0ICAgIH1cblx0ICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBpID0gdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdCAgICAgICAgcmV0dXJuIGkgPCB0aGlzLmxlbmd0aCA/IHsgdmFsdWU6IGFycmF5W2ldLCBkb25lOiBmYWxzZSB9IDogeyBkb25lOiB0cnVlIH07XG5cdCAgICB9O1xuXHQgICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID4gdGhpcy5pbmRleDtcblx0ICAgIH07XG5cdCAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID09PSB0aGlzLmluZGV4O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdGF0aWNBcnJheUl0ZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBaaXBCdWZmZXJJdGVyYXRvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoWmlwQnVmZmVySXRlcmF0b3IsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBaaXBCdWZmZXJJdGVyYXRvcihkZXN0aW5hdGlvbiwgcGFyZW50LCBvYnNlcnZhYmxlLCBpbmRleCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcblx0ICAgICAgICB0aGlzLnN0aWxsVW5zdWJzY3JpYmVkID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHRoaXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLy8gTk9URTogdGhlcmUgaXMgYWN0dWFsbHkgYSBuYW1lIGNvbGxpc2lvbiBoZXJlIHdpdGggU3Vic2NyaWJlci5uZXh0IGFuZCBJdGVyYXRvci5uZXh0XG5cdCAgICAvLyAgICB0aGlzIGlzIGxlZ2l0IGJlY2F1c2UgYG5leHQoKWAgd2lsbCBuZXZlciBiZSBjYWxsZWQgYnkgYSBzdWJzY3JpcHRpb24gaW4gdGhpcyBjYXNlLlxuXHQgICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuXHQgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwICYmIHRoaXMuaXNDb21wbGV0ZSkge1xuXHQgICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogYnVmZmVyLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH07XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID4gMDtcblx0ICAgIH07XG5cdCAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuaGFzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDAgJiYgdGhpcy5pc0NvbXBsZXRlO1xuXHQgICAgfTtcblx0ICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlJbmFjdGl2ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goaW5uZXJWYWx1ZSk7XG5cdCAgICAgICAgdGhpcy5wYXJlbnQuY2hlY2tJdGVyYXRvcnMoKTtcblx0ICAgIH07XG5cdCAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuXHQgICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHRoaXMub2JzZXJ2YWJsZSwgdGhpcywgaW5kZXgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBaaXBCdWZmZXJJdGVyYXRvcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBidWZmZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA5KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmJ1ZmZlciA9IGJ1ZmZlcl8xLmJ1ZmZlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgdW50aWwgYGNsb3NpbmdOb3RpZmllcmAgZW1pdHMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db2xsZWN0cyB2YWx1ZXMgZnJvbSB0aGUgcGFzdCBhcyBhbiBhcnJheSwgYW5kIGVtaXRzXG5cdCAqIHRoYXQgYXJyYXkgb25seSB3aGVuIGFub3RoZXIgT2JzZXJ2YWJsZSBlbWl0cy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBCdWZmZXJzIHRoZSBpbmNvbWluZyBPYnNlcnZhYmxlIHZhbHVlcyB1bnRpbCB0aGUgZ2l2ZW4gYGNsb3NpbmdOb3RpZmllcmBcblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLCBhdCB3aGljaCBwb2ludCBpdCBlbWl0cyB0aGUgYnVmZmVyIG9uIHRoZSBvdXRwdXRcblx0ICogT2JzZXJ2YWJsZSBhbmQgc3RhcnRzIGEgbmV3IGJ1ZmZlciBpbnRlcm5hbGx5LCBhd2FpdGluZyB0aGUgbmV4dCB0aW1lXG5cdCAqIGBjbG9zaW5nTm90aWZpZXJgIGVtaXRzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5PbiBldmVyeSBjbGljaywgZW1pdCBhcnJheSBvZiBtb3N0IHJlY2VudCBpbnRlcnZhbCBldmVudHM8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG5cdCAqIHZhciBidWZmZXJlZCA9IGludGVydmFsLmJ1ZmZlcihjbGlja3MpO1xuXHQgKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlckNvdW50fVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJUb2dnbGV9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlcldoZW59XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd31cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZhYmxlPGFueT59IGNsb3NpbmdOb3RpZmllciBBbiBPYnNlcnZhYmxlIHRoYXQgc2lnbmFscyB0aGVcblx0ICogYnVmZmVyIHRvIGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFRbXT59IEFuIE9ic2VydmFibGUgb2YgYnVmZmVycywgd2hpY2ggYXJlIGFycmF5cyBvZlxuXHQgKiB2YWx1ZXMuXG5cdCAqIEBtZXRob2QgYnVmZmVyXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBidWZmZXIoY2xvc2luZ05vdGlmaWVyKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBCdWZmZXJPcGVyYXRvcihjbG9zaW5nTm90aWZpZXIpKTtcblx0fVxuXHRleHBvcnRzLmJ1ZmZlciA9IGJ1ZmZlcjtcblx0dmFyIEJ1ZmZlck9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEJ1ZmZlck9wZXJhdG9yKGNsb3NpbmdOb3RpZmllcikge1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ05vdGlmaWVyO1xuXHQgICAgfVxuXHQgICAgQnVmZmVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBCdWZmZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2xvc2luZ05vdGlmaWVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEJ1ZmZlck9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBCdWZmZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhCdWZmZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQnVmZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ05vdGlmaWVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG5cdCAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcblx0ICAgIH1cblx0ICAgIEJ1ZmZlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBCdWZmZXJTdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGJ1ZmZlckNvdW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50XzEuYnVmZmVyQ291bnQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlckNvdW50LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogQnVmZmVycyB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIHVudGlsIHRoZSBzaXplIGhpdHMgdGhlIG1heGltdW1cblx0ICogYGJ1ZmZlclNpemVgIGdpdmVuLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+Q29sbGVjdHMgdmFsdWVzIGZyb20gdGhlIHBhc3QgYXMgYW4gYXJyYXksIGFuZCBlbWl0c1xuXHQgKiB0aGF0IGFycmF5IG9ubHkgd2hlbiBpdHMgc2l6ZSByZWFjaGVzIGBidWZmZXJTaXplYC48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyQ291bnQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEJ1ZmZlcnMgYSBudW1iZXIgb2YgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGJ5IGBidWZmZXJTaXplYCB0aGVuXG5cdCAqIGVtaXRzIHRoZSBidWZmZXIgYW5kIGNsZWFycyBpdCwgYW5kIHN0YXJ0cyBhIG5ldyBidWZmZXIgZWFjaFxuXHQgKiBgc3RhcnRCdWZmZXJFdmVyeWAgdmFsdWVzLiBJZiBgc3RhcnRCdWZmZXJFdmVyeWAgaXMgbm90IHByb3ZpZGVkIG9yIGlzXG5cdCAqIGBudWxsYCwgdGhlbiBuZXcgYnVmZmVycyBhcmUgc3RhcnRlZCBpbW1lZGlhdGVseSBhdCB0aGUgc3RhcnQgb2YgdGhlIHNvdXJjZVxuXHQgKiBhbmQgd2hlbiBlYWNoIGJ1ZmZlciBjbG9zZXMgYW5kIGlzIGVtaXR0ZWQuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgdGhlIGxhc3QgdHdvIGNsaWNrIGV2ZW50cyBhcyBhbiBhcnJheTwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGJ1ZmZlcmVkID0gY2xpY2tzLmJ1ZmZlckNvdW50KDIpO1xuXHQgKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk9uIGV2ZXJ5IGNsaWNrLCBlbWl0IHRoZSBsYXN0IHR3byBjbGljayBldmVudHMgYXMgYW4gYXJyYXk8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBidWZmZXJlZCA9IGNsaWNrcy5idWZmZXJDb3VudCgyLCAxKTtcblx0ICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJ9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlclRpbWV9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyV2hlbn1cblx0ICogQHNlZSB7QGxpbmsgcGFpcndpc2V9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd0NvdW50fVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYnVmZmVyU2l6ZSBUaGUgbWF4aW11bSBzaXplIG9mIHRoZSBidWZmZXIgZW1pdHRlZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydEJ1ZmZlckV2ZXJ5XSBJbnRlcnZhbCBhdCB3aGljaCB0byBzdGFydCBhIG5ldyBidWZmZXIuXG5cdCAqIEZvciBleGFtcGxlIGlmIGBzdGFydEJ1ZmZlckV2ZXJ5YCBpcyBgMmAsIHRoZW4gYSBuZXcgYnVmZmVyIHdpbGwgYmUgc3RhcnRlZFxuXHQgKiBvbiBldmVyeSBvdGhlciB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UuIEEgbmV3IGJ1ZmZlciBpcyBzdGFydGVkIGF0IHRoZVxuXHQgKiBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBieSBkZWZhdWx0LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFRbXT59IEFuIE9ic2VydmFibGUgb2YgYXJyYXlzIG9mIGJ1ZmZlcmVkIHZhbHVlcy5cblx0ICogQG1ldGhvZCBidWZmZXJDb3VudFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gYnVmZmVyQ291bnQoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuXHQgICAgaWYgKHN0YXJ0QnVmZmVyRXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydEJ1ZmZlckV2ZXJ5ID0gbnVsbDsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgQnVmZmVyQ291bnRPcGVyYXRvcihidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSk7XG5cdH1cblx0ZXhwb3J0cy5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50O1xuXHR2YXIgQnVmZmVyQ291bnRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBCdWZmZXJDb3VudE9wZXJhdG9yKGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcblx0ICAgICAgICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuXHQgICAgICAgIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnk7XG5cdCAgICB9XG5cdCAgICBCdWZmZXJDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQnVmZmVyQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYnVmZmVyU2l6ZSwgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5KSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEJ1ZmZlckNvdW50T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEJ1ZmZlckNvdW50U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQnVmZmVyQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQnVmZmVyQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG5cdCAgICAgICAgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcblx0ICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbW11dO1xuXHQgICAgICAgIHRoaXMuY291bnQgPSAwO1xuXHQgICAgfVxuXHQgICAgQnVmZmVyQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBjb3VudCA9ICh0aGlzLmNvdW50ICs9IDEpO1xuXHQgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG5cdCAgICAgICAgdmFyIGJ1ZmZlclNpemUgPSB0aGlzLmJ1ZmZlclNpemU7XG5cdCAgICAgICAgdmFyIHN0YXJ0QnVmZmVyRXZlcnkgPSAodGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID09IG51bGwpID8gYnVmZmVyU2l6ZSA6IHRoaXMuc3RhcnRCdWZmZXJFdmVyeTtcblx0ICAgICAgICB2YXIgYnVmZmVycyA9IHRoaXMuYnVmZmVycztcblx0ICAgICAgICB2YXIgbGVuID0gYnVmZmVycy5sZW5ndGg7XG5cdCAgICAgICAgdmFyIHJlbW92ZSA9IC0xO1xuXHQgICAgICAgIGlmIChjb3VudCAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcblx0ICAgICAgICAgICAgYnVmZmVycy5wdXNoKFtdKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpXTtcblx0ICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gYnVmZmVyU2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgcmVtb3ZlID0gaTtcblx0ICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocmVtb3ZlICE9PSAtMSkge1xuXHQgICAgICAgICAgICBidWZmZXJzLnNwbGljZShyZW1vdmUsIDEpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBCdWZmZXJDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHZhciBidWZmZXJzID0gdGhpcy5idWZmZXJzO1xuXHQgICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnMuc2hpZnQoKTtcblx0ICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQnVmZmVyQ291bnRTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlckNvdW50LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBidWZmZXJUaW1lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5idWZmZXJUaW1lID0gYnVmZmVyVGltZV8xLmJ1ZmZlclRpbWU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdC8qKlxuXHQgKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgZm9yIGEgc3BlY2lmaWMgdGltZSBwZXJpb2QuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db2xsZWN0cyB2YWx1ZXMgZnJvbSB0aGUgcGFzdCBhcyBhbiBhcnJheSwgYW5kIGVtaXRzXG5cdCAqIHRob3NlIGFycmF5cyBwZXJpb2RpY2FsbHkgaW4gdGltZS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyVGltZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQnVmZmVycyB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIGZvciBhIHNwZWNpZmljIHRpbWUgZHVyYXRpb24gYGJ1ZmZlclRpbWVTcGFuYC5cblx0ICogVW5sZXNzIHRoZSBvcHRpb25hbCBhcmd1bWVudCBgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbGAgaXMgZ2l2ZW4sIGl0IGVtaXRzIGFuZFxuXHQgKiByZXNldHMgdGhlIGJ1ZmZlciBldmVyeSBgYnVmZmVyVGltZVNwYW5gIG1pbGxpc2Vjb25kcy4gSWZcblx0ICogYGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWxgIGlzIGdpdmVuLCB0aGlzIG9wZXJhdG9yIG9wZW5zIHRoZSBidWZmZXIgZXZlcnlcblx0ICogYGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWxgIG1pbGxpc2Vjb25kcyBhbmQgY2xvc2VzIChlbWl0cyBhbmQgcmVzZXRzKSB0aGVcblx0ICogYnVmZmVyIGV2ZXJ5IGBidWZmZXJUaW1lU3BhbmAgbWlsbGlzZWNvbmRzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FdmVyeSBzZWNvbmQsIGVtaXQgYW4gYXJyYXkgb2YgdGhlIHJlY2VudCBjbGljayBldmVudHM8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBidWZmZXJlZCA9IGNsaWNrcy5idWZmZXJUaW1lKDEwMDApO1xuXHQgKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkV2ZXJ5IDUgc2Vjb25kcywgZW1pdCB0aGUgY2xpY2sgZXZlbnRzIGZyb20gdGhlIG5leHQgMiBzZWNvbmRzPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyVGltZSgyMDAwLCA1MDAwKTtcblx0ICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJ9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlckNvdW50fVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJUb2dnbGV9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlcldoZW59XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1RpbWV9XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJUaW1lU3BhbiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZmlsbCBlYWNoIGJ1ZmZlciBhcnJheS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtidWZmZXJDcmVhdGlvbkludGVydmFsXSBUaGUgaW50ZXJ2YWwgYXQgd2hpY2ggdG8gc3RhcnQgbmV3XG5cdCAqIGJ1ZmZlcnMuXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgc2NoZWR1bGVyIG9uIHdoaWNoIHRvIHNjaGVkdWxlIHRoZVxuXHQgKiBpbnRlcnZhbHMgdGhhdCBkZXRlcm1pbmUgYnVmZmVyIGJvdW5kYXJpZXMuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8VFtdPn0gQW4gb2JzZXJ2YWJsZSBvZiBhcnJheXMgb2YgYnVmZmVyZWQgdmFsdWVzLlxuXHQgKiBAbWV0aG9kIGJ1ZmZlclRpbWVcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGJ1ZmZlclRpbWUoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHNjaGVkdWxlcikge1xuXHQgICAgaWYgKGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPT09IHZvaWQgMCkgeyBidWZmZXJDcmVhdGlvbkludGVydmFsID0gbnVsbDsgfVxuXHQgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSk7XG5cdH1cblx0ZXhwb3J0cy5idWZmZXJUaW1lID0gYnVmZmVyVGltZTtcblx0dmFyIEJ1ZmZlclRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBCdWZmZXJUaW1lT3BlcmF0b3IoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyVGltZVNwYW4gPSBidWZmZXJUaW1lU3Bhbjtcblx0ICAgICAgICB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgQnVmZmVyVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQnVmZmVyVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5idWZmZXJUaW1lU3BhbiwgdGhpcy5idWZmZXJDcmVhdGlvbkludGVydmFsLCB0aGlzLnNjaGVkdWxlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBCdWZmZXJUaW1lT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEJ1ZmZlclRpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhCdWZmZXJUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEJ1ZmZlclRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyVGltZVNwYW4gPSBidWZmZXJUaW1lU3Bhbjtcblx0ICAgICAgICB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuXHQgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLm9wZW5CdWZmZXIoKTtcblx0ICAgICAgICBpZiAoYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiBidWZmZXJDcmVhdGlvbkludGVydmFsID49IDApIHtcblx0ICAgICAgICAgICAgdmFyIGNsb3NlU3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIGJ1ZmZlcjogYnVmZmVyIH07XG5cdCAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw6IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IHRoaXMsIHNjaGVkdWxlcjogc2NoZWR1bGVyIH07XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlckNsb3NlLCBidWZmZXJUaW1lU3BhbiwgY2xvc2VTdGF0ZSkpO1xuXHQgICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDcmVhdGlvbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgY3JlYXRpb25TdGF0ZSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCBidWZmZXI6IGJ1ZmZlciwgYnVmZmVyVGltZVNwYW46IGJ1ZmZlclRpbWVTcGFuIH07XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnM7XG5cdCAgICAgICAgdmFyIGxlbiA9IGJ1ZmZlcnMubGVuZ3RoO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgYnVmZmVyc1tpXS5wdXNoKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICB0aGlzLmJ1ZmZlcnMubGVuZ3RoID0gMDtcblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJzID0gX2EuYnVmZmVycywgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcblx0ICAgICAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYnVmZmVycy5zaGlmdCgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcblx0ICAgIH07XG5cdCAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuYnVmZmVycyA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG5cdCAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcblx0ICAgIH07XG5cdCAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VCdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG5cdCAgICAgICAgdmFyIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnM7XG5cdCAgICAgICAgYnVmZmVycy5zcGxpY2UoYnVmZmVycy5pbmRleE9mKGJ1ZmZlciksIDEpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBCdWZmZXJUaW1lU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHRmdW5jdGlvbiBkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seShzdGF0ZSkge1xuXHQgICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuXHQgICAgdmFyIHByZXZCdWZmZXIgPSBzdGF0ZS5idWZmZXI7XG5cdCAgICBpZiAocHJldkJ1ZmZlcikge1xuXHQgICAgICAgIHN1YnNjcmliZXIuY2xvc2VCdWZmZXIocHJldkJ1ZmZlcik7XG5cdCAgICB9XG5cdCAgICBzdGF0ZS5idWZmZXIgPSBzdWJzY3JpYmVyLm9wZW5CdWZmZXIoKTtcblx0ICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHN0YXRlLmJ1ZmZlclRpbWVTcGFuKTtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBkaXNwYXRjaEJ1ZmZlckNyZWF0aW9uKHN0YXRlKSB7XG5cdCAgICB2YXIgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIGJ1ZmZlclRpbWVTcGFuID0gc3RhdGUuYnVmZmVyVGltZVNwYW4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG5cdCAgICB2YXIgYnVmZmVyID0gc3Vic2NyaWJlci5vcGVuQnVmZmVyKCk7XG5cdCAgICB2YXIgYWN0aW9uID0gdGhpcztcblx0ICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgIGFjdGlvbi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyQ2xvc2UsIGJ1ZmZlclRpbWVTcGFuLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGJ1ZmZlcjogYnVmZmVyIH0pKTtcblx0ICAgICAgICBhY3Rpb24uc2NoZWR1bGUoc3RhdGUsIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwpO1xuXHQgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ2xvc2UoYXJnKSB7XG5cdCAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCBidWZmZXIgPSBhcmcuYnVmZmVyO1xuXHQgICAgc3Vic2NyaWJlci5jbG9zZUJ1ZmZlcihidWZmZXIpO1xuXHR9XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGJ1ZmZlclRvZ2dsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuYnVmZmVyVG9nZ2xlID0gYnVmZmVyVG9nZ2xlXzEuYnVmZmVyVG9nZ2xlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaXB0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdC8qKlxuXHQgKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgc3RhcnRpbmcgZnJvbSBhbiBlbWlzc2lvbiBmcm9tXG5cdCAqIGBvcGVuaW5nc2AgYW5kIGVuZGluZyB3aGVuIHRoZSBvdXRwdXQgb2YgYGNsb3NpbmdTZWxlY3RvcmAgZW1pdHMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db2xsZWN0cyB2YWx1ZXMgZnJvbSB0aGUgcGFzdCBhcyBhbiBhcnJheS4gU3RhcnRzXG5cdCAqIGNvbGxlY3Rpbmcgb25seSB3aGVuIGBvcGVuaW5nYCBlbWl0cywgYW5kIGNhbGxzIHRoZSBgY2xvc2luZ1NlbGVjdG9yYFxuXHQgKiBmdW5jdGlvbiB0byBnZXQgYW4gT2JzZXJ2YWJsZSB0aGF0IHRlbGxzIHdoZW4gdG8gY2xvc2UgdGhlIGJ1ZmZlci48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyVG9nZ2xlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBCdWZmZXJzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgYnkgb3BlbmluZyB0aGUgYnVmZmVyIHZpYSBzaWduYWxzIGZyb20gYW5cblx0ICogT2JzZXJ2YWJsZSBwcm92aWRlZCB0byBgb3BlbmluZ3NgLCBhbmQgY2xvc2luZyBhbmQgc2VuZGluZyB0aGUgYnVmZmVycyB3aGVuXG5cdCAqIGEgU3Vic2NyaWJhYmxlIG9yIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGBjbG9zaW5nU2VsZWN0b3JgIGZ1bmN0aW9uIGVtaXRzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FdmVyeSBvdGhlciBzZWNvbmQsIGVtaXQgdGhlIGNsaWNrIGV2ZW50cyBmcm9tIHRoZSBuZXh0IDUwMG1zPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgb3BlbmluZ3MgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyVG9nZ2xlKG9wZW5pbmdzLCBpID0+XG5cdCAqICAgaSAlIDIgPyBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkgOiBSeC5PYnNlcnZhYmxlLmVtcHR5KClcblx0ICogKTtcblx0ICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJ9XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlckNvdW50fVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJXaGVufVxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3dUb2dnbGV9XG5cdCAqXG5cdCAqIEBwYXJhbSB7U3Vic2NyaWJhYmxlT3JQcm9taXNlPE8+fSBvcGVuaW5ncyBBIFN1YnNjcmliYWJsZSBvciBQcm9taXNlIG9mIG5vdGlmaWNhdGlvbnMgdG8gc3RhcnQgbmV3XG5cdCAqIGJ1ZmZlcnMuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IE8pOiBTdWJzY3JpYmFibGVPclByb21pc2V9IGNsb3NpbmdTZWxlY3RvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXNcblx0ICogdGhlIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIGBvcGVuaW5nc2Agb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIFN1YnNjcmliYWJsZSBvciBQcm9taXNlLFxuXHQgKiB3aGljaCwgd2hlbiBpdCBlbWl0cywgc2lnbmFscyB0aGF0IHRoZSBhc3NvY2lhdGVkIGJ1ZmZlciBzaG91bGQgYmUgZW1pdHRlZFxuXHQgKiBhbmQgY2xlYXJlZC5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUW10+fSBBbiBvYnNlcnZhYmxlIG9mIGFycmF5cyBvZiBidWZmZXJlZCB2YWx1ZXMuXG5cdCAqIEBtZXRob2QgYnVmZmVyVG9nZ2xlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBidWZmZXJUb2dnbGUob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgQnVmZmVyVG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuYnVmZmVyVG9nZ2xlID0gYnVmZmVyVG9nZ2xlO1xuXHR2YXIgQnVmZmVyVG9nZ2xlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcblx0ICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBCdWZmZXJUb2dnbGVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuY29udGV4dHMgPSBbXTtcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG9wZW5pbmdzKSk7XG5cdCAgICB9XG5cdCAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG5cdCAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIGNvbnRleHRzW2ldLmJ1ZmZlci5wdXNoKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG5cdCAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0cy5zaGlmdCgpO1xuXHQgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICBjb250ZXh0LmJ1ZmZlciA9IG51bGw7XG5cdCAgICAgICAgICAgIGNvbnRleHQuc3Vic2NyaXB0aW9uID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG5cdCAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuXHQgICAgfTtcblx0ICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuXHQgICAgICAgIHdoaWxlIChjb250ZXh0cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHMuc2hpZnQoKTtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGNvbnRleHQuYnVmZmVyKTtcblx0ICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgY29udGV4dC5idWZmZXIgPSBudWxsO1xuXHQgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuXHQgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIG91dGVyVmFsdWUgPyB0aGlzLmNsb3NlQnVmZmVyKG91dGVyVmFsdWUpIDogdGhpcy5vcGVuQnVmZmVyKGlubmVyVmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5jbG9zZUJ1ZmZlcihpbm5lclN1Yi5jb250ZXh0KTtcblx0ICAgIH07XG5cdCAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuQnVmZmVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdmFyIGNsb3NpbmdTZWxlY3RvciA9IHRoaXMuY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ1NlbGVjdG9yLmNhbGwodGhpcywgdmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAoY2xvc2luZ05vdGlmaWVyKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZShjbG9zaW5nTm90aWZpZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VCdWZmZXIgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuXHQgICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG5cdCAgICAgICAgaWYgKGNvbnRleHRzICYmIGNvbnRleHQpIHtcblx0ICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGNvbnRleHQuYnVmZmVyLCBzdWJzY3JpcHRpb24gPSBjb250ZXh0LnN1YnNjcmlwdGlvbjtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG5cdCAgICAgICAgICAgIGNvbnRleHRzLnNwbGljZShjb250ZXh0cy5pbmRleE9mKGNvbnRleHQpLCAxKTtcblx0ICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChjbG9zaW5nTm90aWZpZXIpIHtcblx0ICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuXHQgICAgICAgIHZhciBidWZmZXIgPSBbXTtcblx0ICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuXHQgICAgICAgIHZhciBjb250ZXh0ID0geyBidWZmZXI6IGJ1ZmZlciwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfTtcblx0ICAgICAgICBjb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuXHQgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0KTtcblx0ICAgICAgICBpZiAoIWlubmVyU3Vic2NyaXB0aW9uIHx8IGlubmVyU3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoY29udGV4dCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5jb250ZXh0ID0gY29udGV4dDtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuXHQgICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRvZ2dsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDExNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgYnVmZmVyV2hlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuYnVmZmVyV2hlbiA9IGJ1ZmZlcldoZW5fMS5idWZmZXJXaGVuO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmlwdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogQnVmZmVycyB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzLCB1c2luZyBhIGZhY3RvcnkgZnVuY3Rpb24gb2YgY2xvc2luZ1xuXHQgKiBPYnNlcnZhYmxlcyB0byBkZXRlcm1pbmUgd2hlbiB0byBjbG9zZSwgZW1pdCwgYW5kIHJlc2V0IHRoZSBidWZmZXIuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db2xsZWN0cyB2YWx1ZXMgZnJvbSB0aGUgcGFzdCBhcyBhbiBhcnJheS4gV2hlbiBpdFxuXHQgKiBzdGFydHMgY29sbGVjdGluZyB2YWx1ZXMsIGl0IGNhbGxzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdFxuXHQgKiB0ZWxscyB3aGVuIHRvIGNsb3NlIHRoZSBidWZmZXIgYW5kIHJlc3RhcnQgY29sbGVjdGluZy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyV2hlbi5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogT3BlbnMgYSBidWZmZXIgaW1tZWRpYXRlbHksIHRoZW4gY2xvc2VzIHRoZSBidWZmZXIgd2hlbiB0aGUgb2JzZXJ2YWJsZVxuXHQgKiByZXR1cm5lZCBieSBjYWxsaW5nIGBjbG9zaW5nU2VsZWN0b3JgIGZ1bmN0aW9uIGVtaXRzIGEgdmFsdWUuIFdoZW4gaXQgY2xvc2VzXG5cdCAqIHRoZSBidWZmZXIsIGl0IGltbWVkaWF0ZWx5IG9wZW5zIGEgbmV3IGJ1ZmZlciBhbmQgcmVwZWF0cyB0aGUgcHJvY2Vzcy5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBhbiBhcnJheSBvZiB0aGUgbGFzdCBjbGlja3MgZXZlcnkgWzEtNV0gcmFuZG9tIHNlY29uZHM8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBidWZmZXJlZCA9IGNsaWNrcy5idWZmZXJXaGVuKCgpID0+XG5cdCAqICAgUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwICsgTWF0aC5yYW5kb20oKSAqIDQwMDApXG5cdCAqICk7XG5cdCAqIGJ1ZmZlcmVkLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyfVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJDb3VudH1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyVGltZX1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyVG9nZ2xlfVxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3dXaGVufVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IE9ic2VydmFibGV9IGNsb3NpbmdTZWxlY3RvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm9cblx0ICogYXJndW1lbnRzIGFuZCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBzaWduYWxzIGJ1ZmZlciBjbG9zdXJlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFRbXT59IEFuIG9ic2VydmFibGUgb2YgYXJyYXlzIG9mIGJ1ZmZlcmVkIHZhbHVlcy5cblx0ICogQG1ldGhvZCBidWZmZXJXaGVuXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBidWZmZXJXaGVuKGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgQnVmZmVyV2hlbk9wZXJhdG9yKGNsb3NpbmdTZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuYnVmZmVyV2hlbiA9IGJ1ZmZlcldoZW47XG5cdHZhciBCdWZmZXJXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQnVmZmVyV2hlbk9wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgQnVmZmVyV2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQnVmZmVyV2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jbG9zaW5nU2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQnVmZmVyV2hlbk9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBCdWZmZXJXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQnVmZmVyV2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBCdWZmZXJXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcblx0ICAgIH1cblx0ICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuXHQgICAgICAgIGlmIChidWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuXHQgICAgfTtcblx0ICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG5cdCAgICB9O1xuXHQgICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLnN1YnNjcmliaW5nKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMub3BlbkJ1ZmZlcigpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbkJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmlwdGlvbiA9IHRoaXMuY2xvc2luZ1N1YnNjcmlwdGlvbjtcblx0ICAgICAgICBpZiAoY2xvc2luZ1N1YnNjcmlwdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLnJlbW92ZShjbG9zaW5nU3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdCAgICAgICAgaWYgKHRoaXMuYnVmZmVyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXIgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMuY2xvc2luZ1NlbGVjdG9yKSgpO1xuXHQgICAgICAgIGlmIChjbG9zaW5nTm90aWZpZXIgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcblx0ICAgICAgICAgICAgdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uID0gY2xvc2luZ1N1YnNjcmlwdGlvbjtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSB0cnVlO1xuXHQgICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuXHQgICAgICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBCdWZmZXJXaGVuU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyV2hlbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDExOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgY2FjaGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmNhY2hlID0gY2FjaGVfMS5jYWNoZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgcHVibGlzaFJlcGxheV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xuXHQvKipcblx0ICogQHBhcmFtIGJ1ZmZlclNpemVcblx0ICogQHBhcmFtIHdpbmRvd1RpbWVcblx0ICogQHBhcmFtIHNjaGVkdWxlclxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59XG5cdCAqIEBtZXRob2QgY2FjaGVcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGNhY2hlKGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuXHQgICAgaWYgKGJ1ZmZlclNpemUgPT09IHZvaWQgMCkgeyBidWZmZXJTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICBpZiAod2luZG93VGltZSA9PT0gdm9pZCAwKSB7IHdpbmRvd1RpbWUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cblx0ICAgIHJldHVybiBwdWJsaXNoUmVwbGF5XzEucHVibGlzaFJlcGxheS5jYWxsKHRoaXMsIGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikucmVmQ291bnQoKTtcblx0fVxuXHRleHBvcnRzLmNhY2hlID0gY2FjaGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFJlcGxheVN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTtcblx0dmFyIG11bHRpY2FzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xuXHQvKipcblx0ICogQHBhcmFtIGJ1ZmZlclNpemVcblx0ICogQHBhcmFtIHdpbmRvd1RpbWVcblx0ICogQHBhcmFtIHNjaGVkdWxlclxuXHQgKiBAcmV0dXJuIHtDb25uZWN0YWJsZU9ic2VydmFibGU8VD59XG5cdCAqIEBtZXRob2QgcHVibGlzaFJlcGxheVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcHVibGlzaFJlcGxheShidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcblx0ICAgIGlmIChidWZmZXJTaXplID09PSB2b2lkIDApIHsgYnVmZmVyU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuXHQgICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkgeyB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0LmNhbGwodGhpcywgbmV3IFJlcGxheVN1YmplY3RfMS5SZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikpO1xuXHR9XG5cdGV4cG9ydHMucHVibGlzaFJlcGxheSA9IHB1Ymxpc2hSZXBsYXk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIHF1ZXVlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7XG5cdHZhciBvYnNlcnZlT25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXHQvKipcblx0ICogQGNsYXNzIFJlcGxheVN1YmplY3Q8VD5cblx0ICovXG5cdHZhciBSZXBsYXlTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhSZXBsYXlTdWJqZWN0LCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAoYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7IGJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cblx0ICAgICAgICBpZiAod2luZG93VGltZSA9PT0gdm9pZCAwKSB7IHdpbmRvd1RpbWUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmV2ZW50cyA9IFtdO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemUgPCAxID8gMSA6IGJ1ZmZlclNpemU7XG5cdCAgICAgICAgdGhpcy5fd2luZG93VGltZSA9IHdpbmRvd1RpbWUgPCAxID8gMSA6IHdpbmRvd1RpbWU7XG5cdCAgICB9XG5cdCAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBub3cgPSB0aGlzLl9nZXROb3coKTtcblx0ICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKG5ldyBSZXBsYXlFdmVudChub3csIHZhbHVlKSk7XG5cdCAgICAgICAgdGhpcy5fdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMobm93KTtcblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciBldmVudHMgPSB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cyh0aGlzLl9nZXROb3coKSk7XG5cdCAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuXHQgICAgICAgIGlmIChzY2hlZHVsZXIpIHtcblx0ICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlciA9IG5ldyBvYnNlcnZlT25fMS5PYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHNjaGVkdWxlcikpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgaW5kZXggPSAtMTtcblx0ICAgICAgICB2YXIgbGVuID0gZXZlbnRzLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbiAmJiAhc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZXZlbnRzW2luZGV4XS52YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcblx0ICAgIH07XG5cdCAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fZ2V0Tm93ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiAodGhpcy5zY2hlZHVsZXIgfHwgcXVldWVfMS5xdWV1ZSkubm93KCk7XG5cdCAgICB9O1xuXHQgICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzID0gZnVuY3Rpb24gKG5vdykge1xuXHQgICAgICAgIHZhciBidWZmZXJTaXplID0gdGhpcy5idWZmZXJTaXplO1xuXHQgICAgICAgIHZhciBfd2luZG93VGltZSA9IHRoaXMuX3dpbmRvd1RpbWU7XG5cdCAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzO1xuXHQgICAgICAgIHZhciBldmVudHNDb3VudCA9IGV2ZW50cy5sZW5ndGg7XG5cdCAgICAgICAgdmFyIHNwbGljZUNvdW50ID0gMDtcblx0ICAgICAgICAvLyBUcmltIGV2ZW50cyB0aGF0IGZhbGwgb3V0IG9mIHRoZSB0aW1lIHdpbmRvdy5cblx0ICAgICAgICAvLyBTdGFydCBhdCB0aGUgZnJvbnQgb2YgdGhlIGxpc3QuIEJyZWFrIGVhcmx5IG9uY2Vcblx0ICAgICAgICAvLyB3ZSBlbmNvdW50ZXIgYW4gZXZlbnQgdGhhdCBmYWxscyB3aXRoaW4gdGhlIHdpbmRvdy5cblx0ICAgICAgICB3aGlsZSAoc3BsaWNlQ291bnQgPCBldmVudHNDb3VudCkge1xuXHQgICAgICAgICAgICBpZiAoKG5vdyAtIGV2ZW50c1tzcGxpY2VDb3VudF0udGltZSkgPCBfd2luZG93VGltZSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgc3BsaWNlQ291bnQgKz0gMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGV2ZW50c0NvdW50ID4gYnVmZmVyU2l6ZSkge1xuXHQgICAgICAgICAgICBzcGxpY2VDb3VudCA9IE1hdGgubWF4KHNwbGljZUNvdW50LCBldmVudHNDb3VudCAtIGJ1ZmZlclNpemUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc3BsaWNlQ291bnQgPiAwKSB7XG5cdCAgICAgICAgICAgIGV2ZW50cy5zcGxpY2UoMCwgc3BsaWNlQ291bnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXZlbnRzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZXBsYXlTdWJqZWN0O1xuXHR9KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5cdGV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IFJlcGxheVN1YmplY3Q7XG5cdHZhciBSZXBsYXlFdmVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBSZXBsYXlFdmVudCh0aW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFJlcGxheUV2ZW50O1xuXHR9KCkpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1SZXBsYXlTdWJqZWN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFF1ZXVlU2NoZWR1bGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0ZXhwb3J0cy5xdWV1ZSA9IG5ldyBRdWV1ZVNjaGVkdWxlcl8xLlF1ZXVlU2NoZWR1bGVyKCk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjQpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2YgaW52b2tpbmcgYSBzcGVjaWZpZWQgc2VsZWN0b3Igb24gaXRlbXNcblx0ICogZW1pdHRlZCBieSBhIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB0aGF0IHNoYXJlcyBhIHNpbmdsZSBzdWJzY3JpcHRpb24gdG8gdGhlIHVuZGVybHlpbmcgc3RyZWFtLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL211bHRpY2FzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgLSBhIGZ1bmN0aW9uIHRoYXQgY2FuIHVzZSB0aGUgbXVsdGljYXN0ZWQgc291cmNlIHN0cmVhbVxuXHQgKiBhcyBtYW55IHRpbWVzIGFzIG5lZWRlZCwgd2l0aG91dCBjYXVzaW5nIG11bHRpcGxlIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBzdHJlYW0uXG5cdCAqIFN1YnNjcmliZXJzIHRvIHRoZSBnaXZlbiBzb3VyY2Ugd2lsbCByZWNlaXZlIGFsbCBub3RpZmljYXRpb25zIG9mIHRoZSBzb3VyY2UgZnJvbSB0aGVcblx0ICogdGltZSBvZiB0aGUgc3Vic2NyaXB0aW9uIGZvcndhcmQuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0cyBvZiBpbnZva2luZyB0aGUgc2VsZWN0b3Jcblx0ICogb24gdGhlIGl0ZW1zIGVtaXR0ZWQgYnkgYSBgQ29ubmVjdGFibGVPYnNlcnZhYmxlYCB0aGF0IHNoYXJlcyBhIHNpbmdsZSBzdWJzY3JpcHRpb24gdG9cblx0ICogdGhlIHVuZGVybHlpbmcgc3RyZWFtLlxuXHQgKiBAbWV0aG9kIG11bHRpY2FzdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gbXVsdGljYXN0KHN1YmplY3RPclN1YmplY3RGYWN0b3J5KSB7XG5cdCAgICB2YXIgc3ViamVjdEZhY3Rvcnk7XG5cdCAgICBpZiAodHlwZW9mIHN1YmplY3RPclN1YmplY3RGYWN0b3J5ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHN1YmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gc3ViamVjdEZhY3RvcnkoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBDb25uZWN0YWJsZU9ic2VydmFibGVfMS5Db25uZWN0YWJsZU9ic2VydmFibGUodGhpcywgc3ViamVjdEZhY3RvcnkpO1xuXHR9XG5cdGV4cG9ydHMubXVsdGljYXN0ID0gbXVsdGljYXN0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aWNhc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgU3Vic2NyaXB0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0LyoqXG5cdCAqIEBjbGFzcyBDb25uZWN0YWJsZU9ic2VydmFibGU8VD5cblx0ICovXG5cdHZhciBDb25uZWN0YWJsZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIENvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIHN1YmplY3RGYWN0b3J5KSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuXHQgICAgfVxuXHQgICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5nZXRTdWJqZWN0KCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuXHQgICAgfTtcblx0ICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcblx0ICAgICAgICBpZiAoc3ViamVjdCAmJiAhc3ViamVjdC5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3ViamVjdDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuICh0aGlzLnN1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCkpO1xuXHQgICAgfTtcblx0ICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG5cdCAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMuZ2V0U3ViamVjdCgpKTtcblx0ICAgICAgICBzdWJzY3JpcHRpb24uYWRkKG5ldyBDb25uZWN0YWJsZVN1YnNjcmlwdGlvbih0aGlzKSk7XG5cdCAgICAgICAgcmV0dXJuICh0aGlzLnN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbik7XG5cdCAgICB9O1xuXHQgICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5yZWZDb3VudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFJlZkNvdW50T2JzZXJ2YWJsZSh0aGlzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0ICAgICAqIFRoaXMgbWV0aG9kIGlzIG9wZW5lZCBmb3IgYENvbm5lY3RhYmxlU3Vic2NyaXB0aW9uYC5cblx0ICAgICAqIE5vdCB0byBjYWxsIGZyb20gb3RoZXJzLlxuXHQgICAgICovXG5cdCAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLl9jbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnN1YmplY3QgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBDb25uZWN0YWJsZVN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQ29ubmVjdGFibGVTdWJzY3JpcHRpb24sIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBDb25uZWN0YWJsZVN1YnNjcmlwdGlvbihjb25uZWN0YWJsZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcblx0ICAgIH1cblx0ICAgIENvbm5lY3RhYmxlU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcblx0ICAgICAgICBjb25uZWN0YWJsZS5fY2xvc2VTdWJzY3JpcHRpb24oKTtcblx0ICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQ29ubmVjdGFibGVTdWJzY3JpcHRpb247XG5cdH0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFJlZkNvdW50T2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmVmQ291bnRPYnNlcnZhYmxlLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gUmVmQ291bnRPYnNlcnZhYmxlKGNvbm5lY3RhYmxlLCByZWZDb3VudCkge1xuXHQgICAgICAgIGlmIChyZWZDb3VudCA9PT0gdm9pZCAwKSB7IHJlZkNvdW50ID0gMDsgfVxuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcblx0ICAgICAgICB0aGlzLnJlZkNvdW50ID0gcmVmQ291bnQ7XG5cdCAgICB9XG5cdCAgICBSZWZDb3VudE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuXHQgICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG5cdCAgICAgICAgdmFyIHJlZkNvdW50U3Vic2NyaWJlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcyk7XG5cdCAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbm5lY3RhYmxlLnN1YnNjcmliZShyZWZDb3VudFN1YnNjcmliZXIpO1xuXHQgICAgICAgIGlmICghc3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkICYmICsrdGhpcy5yZWZDb3VudCA9PT0gMSkge1xuXHQgICAgICAgICAgICByZWZDb3VudFN1YnNjcmliZXIuY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmVmQ291bnRPYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFJlZkNvdW50U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmVmQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gUmVmQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCByZWZDb3VudE9ic2VydmFibGUpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBudWxsKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG5cdCAgICAgICAgdGhpcy5yZWZDb3VudE9ic2VydmFibGUgPSByZWZDb3VudE9ic2VydmFibGU7XG5cdCAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gcmVmQ291bnRPYnNlcnZhYmxlLmNvbm5lY3Rpb247XG5cdCAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy5fcmVzZXRDb25uZWN0YWJsZSgpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9yZXNldENvbm5lY3RhYmxlKCk7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Jlc2V0Q29ubmVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLnJlZkNvdW50T2JzZXJ2YWJsZTtcblx0ICAgICAgICB2YXIgb2JzQ29ubmVjdGlvbiA9IG9ic2VydmFibGUuY29ubmVjdGlvbjtcblx0ICAgICAgICB2YXIgc3ViQ29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcblx0ICAgICAgICBpZiAoc3ViQ29ubmVjdGlvbiAmJiBzdWJDb25uZWN0aW9uID09PSBvYnNDb25uZWN0aW9uKSB7XG5cdCAgICAgICAgICAgIG9ic2VydmFibGUucmVmQ291bnQgPSAwO1xuXHQgICAgICAgICAgICBvYnNDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIG9ic2VydmFibGUuY29ubmVjdGlvbiA9IG51bGw7XG5cdCAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLnJlZkNvdW50T2JzZXJ2YWJsZTtcblx0ICAgICAgICBpZiAob2JzZXJ2YWJsZS5yZWZDb3VudCA9PT0gMCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICgtLW9ic2VydmFibGUucmVmQ291bnQgPT09IDApIHtcblx0ICAgICAgICAgICAgdmFyIG9ic0Nvbm5lY3Rpb24gPSBvYnNlcnZhYmxlLmNvbm5lY3Rpb247XG5cdCAgICAgICAgICAgIHZhciBzdWJDb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uO1xuXHQgICAgICAgICAgICBpZiAoc3ViQ29ubmVjdGlvbiAmJiBzdWJDb25uZWN0aW9uID09PSBvYnNDb25uZWN0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICBvYnNDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmNvbm5lY3Rpb24gPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGFibGVPYnNlcnZhYmxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTI1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBjYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY2F0Y2ggPSBjYXRjaF8xLl9jYXRjaDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2guanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBDYXRjaGVzIGVycm9ycyBvbiB0aGUgb2JzZXJ2YWJsZSB0byBiZSBoYW5kbGVkIGJ5IHJldHVybmluZyBhIG5ldyBvYnNlcnZhYmxlIG9yIHRocm93aW5nIGFuIGVycm9yLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZWxlY3RvciBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYXMgYXJndW1lbnRzIGBlcnJgLCB3aGljaCBpcyB0aGUgZXJyb3IsIGFuZCBgY2F1Z2h0YCwgd2hpY2hcblx0ICogIGlzIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSwgaW4gY2FzZSB5b3UnZCBsaWtlIHRvIFwicmV0cnlcIiB0aGF0IG9ic2VydmFibGUgYnkgcmV0dXJuaW5nIGl0IGFnYWluLiBXaGF0ZXZlciBvYnNlcnZhYmxlXG5cdCAqICBpcyByZXR1cm5lZCBieSB0aGUgYHNlbGVjdG9yYCB3aWxsIGJlIHVzZWQgdG8gY29udGludWUgdGhlIG9ic2VydmFibGUgY2hhaW4uXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIG9ic2VydmFibGUgdGhhdCBvcmlnaW5hdGVzIGZyb20gZWl0aGVyIHRoZSBzb3VyY2Ugb3IgdGhlIG9ic2VydmFibGUgcmV0dXJuZWQgYnkgdGhlXG5cdCAqICBjYXRjaCBgc2VsZWN0b3JgIGZ1bmN0aW9uLlxuXHQgKiBAbWV0aG9kIGNhdGNoXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBfY2F0Y2goc2VsZWN0b3IpIHtcblx0ICAgIHZhciBvcGVyYXRvciA9IG5ldyBDYXRjaE9wZXJhdG9yKHNlbGVjdG9yKTtcblx0ICAgIHZhciBjYXVnaHQgPSB0aGlzLmxpZnQob3BlcmF0b3IpO1xuXHQgICAgcmV0dXJuIChvcGVyYXRvci5jYXVnaHQgPSBjYXVnaHQpO1xuXHR9XG5cdGV4cG9ydHMuX2NhdGNoID0gX2NhdGNoO1xuXHR2YXIgQ2F0Y2hPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBDYXRjaE9wZXJhdG9yKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgQ2F0Y2hPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IENhdGNoU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmNhdWdodCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBDYXRjaE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBDYXRjaFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKENhdGNoU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIENhdGNoU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgc2VsZWN0b3IsIGNhdWdodCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jYXVnaHQgPSBjYXVnaHQ7XG5cdCAgICB9XG5cdCAgICAvLyBOT1RFOiBvdmVycmlkaW5nIGBlcnJvcmAgaW5zdGVhZCBvZiBgX2Vycm9yYCBiZWNhdXNlIHdlIGRvbid0IHdhbnRcblx0ICAgIC8vIHRvIGhhdmUgdGhpcyBmbGFnIHRoaXMgc3Vic2NyaWJlciBhcyBgaXNTdG9wcGVkYC5cblx0ICAgIENhdGNoU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5zZWxlY3RvcihlcnIsIHRoaXMuY2F1Z2h0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQ2F0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG5cdCAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ucmVtb3ZlKHRoaXMpO1xuXHQgICAgICAgIHJlc3VsdC5zdWJzY3JpYmUodGhpcy5kZXN0aW5hdGlvbik7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIENhdGNoU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jYXRjaC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgY29tYmluZUFsbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29tYmluZUFsbCA9IGNvbWJpbmVBbGxfMS5jb21iaW5lQWxsO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lQWxsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGNvbWJpbmVMYXRlc3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHQvKipcblx0ICogQ29udmVydHMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSBpbnRvIGEgZmlyc3Qtb3JkZXIgT2JzZXJ2YWJsZSBieSB3YWl0aW5nXG5cdCAqIGZvciB0aGUgb3V0ZXIgT2JzZXJ2YWJsZSB0byBjb21wbGV0ZSwgdGhlbiBhcHBseWluZyB7QGxpbmsgY29tYmluZUxhdGVzdH0uXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5GbGF0dGVucyBhbiBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzIGJ5IGFwcGx5aW5nXG5cdCAqIHtAbGluayBjb21iaW5lTGF0ZXN0fSB3aGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzIGNvbXBsZXRlcy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvY29tYmluZUFsbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogVGFrZXMgYW4gT2JzZXJ2YWJsZSBvZiBPYnNlcnZhYmxlcywgYW5kIGNvbGxlY3RzIGFsbCBPYnNlcnZhYmxlcyBmcm9tIGl0LlxuXHQgKiBPbmNlIHRoZSBvdXRlciBPYnNlcnZhYmxlIGNvbXBsZXRlcywgaXQgc3Vic2NyaWJlcyB0byBhbGwgY29sbGVjdGVkXG5cdCAqIE9ic2VydmFibGVzIGFuZCBjb21iaW5lcyB0aGVpciB2YWx1ZXMgdXNpbmcgdGhlIHtAbGluayBjb21iaW5lTGF0ZXN0fVxuXHQgKiBzdHJhdGVneSwgc3VjaCB0aGF0OlxuXHQgKiAtIEV2ZXJ5IHRpbWUgYW4gaW5uZXIgT2JzZXJ2YWJsZSBlbWl0cywgdGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzLlxuXHQgKiAtIFdoZW4gdGhlIHJldHVybmVkIG9ic2VydmFibGUgZW1pdHMsIGl0IGVtaXRzIGFsbCBvZiB0aGUgbGF0ZXN0IHZhbHVlcyBieTpcblx0ICogICAtIElmIGEgYHByb2plY3RgIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBjYWxsZWQgd2l0aCBlYWNoIHJlY2VudCB2YWx1ZVxuXHQgKiAgICAgZnJvbSBlYWNoIGlubmVyIE9ic2VydmFibGUgaW4gd2hhdGV2ZXIgb3JkZXIgdGhleSBhcnJpdmVkLCBhbmQgdGhlIHJlc3VsdFxuXHQgKiAgICAgb2YgdGhlIGBwcm9qZWN0YCBmdW5jdGlvbiBpcyB3aGF0IGlzIGVtaXR0ZWQgYnkgdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKiAgIC0gSWYgdGhlcmUgaXMgbm8gYHByb2plY3RgIGZ1bmN0aW9uLCBhbiBhcnJheSBvZiBhbGwgb2YgdGhlIG1vc3QgcmVjZW50XG5cdCAqICAgICB2YWx1ZXMgaXMgZW1pdHRlZCBieSB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCB0d28gY2xpY2sgZXZlbnRzIHRvIGEgZmluaXRlIGludGVydmFsIE9ic2VydmFibGUsIHRoZW4gYXBwbHkgY29tYmluZUFsbDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGhpZ2hlck9yZGVyID0gY2xpY2tzLm1hcChldiA9PlxuXHQgKiAgIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoTWF0aC5yYW5kb20oKSoyMDAwKS50YWtlKDMpXG5cdCAqICkudGFrZSgyKTtcblx0ICogdmFyIHJlc3VsdCA9IGhpZ2hlck9yZGVyLmNvbWJpbmVBbGwoKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgY29tYmluZUxhdGVzdH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VBbGx9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtwcm9qZWN0XSBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byBtYXAgdGhlIG1vc3QgcmVjZW50XG5cdCAqIHZhbHVlcyBmcm9tIGVhY2ggaW5uZXIgT2JzZXJ2YWJsZSBpbnRvIGEgbmV3IHJlc3VsdC4gVGFrZXMgZWFjaCBvZiB0aGUgbW9zdFxuXHQgKiByZWNlbnQgdmFsdWVzIGZyb20gZWFjaCBjb2xsZWN0ZWQgaW5uZXIgT2JzZXJ2YWJsZSBhcyBhcmd1bWVudHMsIGluIG9yZGVyLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIHByb2plY3RlZCByZXN1bHRzIG9yIGFycmF5cyBvZiByZWNlbnRcblx0ICogdmFsdWVzLlxuXHQgKiBAbWV0aG9kIGNvbWJpbmVBbGxcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGNvbWJpbmVBbGwocHJvamVjdCkge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgY29tYmluZUxhdGVzdF8xLkNvbWJpbmVMYXRlc3RPcGVyYXRvcihwcm9qZWN0KSk7XG5cdH1cblx0ZXhwb3J0cy5jb21iaW5lQWxsID0gY29tYmluZUFsbDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUFsbC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgY29tYmluZUxhdGVzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGNvbmNhdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jb25jYXQgPSBjb25jYXRfMS5jb25jYXQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgY29uY2F0QWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jb25jYXRBbGwgPSBjb25jYXRBbGxfMS5jb25jYXRBbGw7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEzMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBtZXJnZUFsbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGhpZ2hlci1vcmRlciBPYnNlcnZhYmxlIGludG8gYSBmaXJzdC1vcmRlciBPYnNlcnZhYmxlIGJ5XG5cdCAqIGNvbmNhdGVuYXRpbmcgdGhlIGlubmVyIE9ic2VydmFibGVzIGluIG9yZGVyLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgYW4gT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlcyBieSBwdXR0aW5nIG9uZVxuXHQgKiBpbm5lciBPYnNlcnZhYmxlIGFmdGVyIHRoZSBvdGhlci48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvY29uY2F0QWxsLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBKb2lucyBldmVyeSBPYnNlcnZhYmxlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSAoYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSksIGluXG5cdCAqIGEgc2VyaWFsIGZhc2hpb24uIEl0IHN1YnNjcmliZXMgdG8gZWFjaCBpbm5lciBPYnNlcnZhYmxlIG9ubHkgYWZ0ZXIgdGhlXG5cdCAqIHByZXZpb3VzIGlubmVyIE9ic2VydmFibGUgaGFzIGNvbXBsZXRlZCwgYW5kIG1lcmdlcyBhbGwgb2YgdGhlaXIgdmFsdWVzIGludG9cblx0ICogdGhlIHJldHVybmVkIG9ic2VydmFibGUuXG5cdCAqXG5cdCAqIF9fV2FybmluZzpfXyBJZiB0aGUgc291cmNlIE9ic2VydmFibGUgZW1pdHMgT2JzZXJ2YWJsZXMgcXVpY2tseSBhbmRcblx0ICogZW5kbGVzc2x5LCBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVzIGl0IGVtaXRzIGdlbmVyYWxseSBjb21wbGV0ZSBzbG93ZXIgdGhhblxuXHQgKiB0aGUgc291cmNlIGVtaXRzLCB5b3UgY2FuIHJ1biBpbnRvIG1lbW9yeSBpc3N1ZXMgYXMgdGhlIGluY29taW5nIE9ic2VydmFibGVzXG5cdCAqIGNvbGxlY3QgaW4gYW4gdW5ib3VuZGVkIGJ1ZmZlci5cblx0ICpcblx0ICogTm90ZTogYGNvbmNhdEFsbGAgaXMgZXF1aXZhbGVudCB0byBgbWVyZ2VBbGxgIHdpdGggY29uY3VycmVuY3kgcGFyYW1ldGVyIHNldFxuXHQgKiB0byBgMWAuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkZvciBlYWNoIGNsaWNrIGV2ZW50LCB0aWNrIGV2ZXJ5IHNlY29uZCBmcm9tIDAgdG8gMywgd2l0aCBubyBjb25jdXJyZW5jeTwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGhpZ2hlck9yZGVyID0gY2xpY2tzLm1hcChldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoNCkpO1xuXHQgKiB2YXIgZmlyc3RPcmRlciA9IGhpZ2hlck9yZGVyLmNvbmNhdEFsbCgpO1xuXHQgKiBmaXJzdE9yZGVyLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgY29tYmluZUFsbH1cblx0ICogQHNlZSB7QGxpbmsgY29uY2F0fVxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcFRvfVxuXHQgKiBAc2VlIHtAbGluayBleGhhdXN0fVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cblx0ICogQHNlZSB7QGxpbmsgc3dpdGNofVxuXHQgKiBAc2VlIHtAbGluayB6aXBBbGx9XG5cdCAqXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgZW1pdHRpbmcgdmFsdWVzIGZyb20gYWxsIHRoZSBpbm5lclxuXHQgKiBPYnNlcnZhYmxlcyBjb25jYXRlbmF0ZWQuXG5cdCAqIEBtZXRob2QgY29uY2F0QWxsXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBjb25jYXRBbGwoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBtZXJnZUFsbF8xLk1lcmdlQWxsT3BlcmF0b3IoMSkpO1xuXHR9XG5cdGV4cG9ydHMuY29uY2F0QWxsID0gY29uY2F0QWxsO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMzMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGNvbmNhdE1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzQpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29uY2F0TWFwID0gY29uY2F0TWFwXzEuY29uY2F0TWFwO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgbWVyZ2VNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTM1KTtcblx0LyoqXG5cdCAqIFByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIGFuIE9ic2VydmFibGUgd2hpY2ggaXMgbWVyZ2VkIGluIHRoZSBvdXRwdXRcblx0ICogT2JzZXJ2YWJsZSwgaW4gYSBzZXJpYWxpemVkIGZhc2hpb24gd2FpdGluZyBmb3IgZWFjaCBvbmUgdG8gY29tcGxldGUgYmVmb3JlXG5cdCAqIG1lcmdpbmcgdGhlIG5leHQuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5NYXBzIGVhY2ggdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSwgdGhlbiBmbGF0dGVucyBhbGwgb2Zcblx0ICogdGhlc2UgaW5uZXIgT2JzZXJ2YWJsZXMgdXNpbmcge0BsaW5rIGNvbmNhdEFsbH0uPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdE1hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgYmFzZWQgb24gYXBwbHlpbmcgYSBmdW5jdGlvbiB0aGF0IHlvdVxuXHQgKiBzdXBwbHkgdG8gZWFjaCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGVyZSB0aGF0IGZ1bmN0aW9uXG5cdCAqIHJldHVybnMgYW4gKHNvLWNhbGxlZCBcImlubmVyXCIpIE9ic2VydmFibGUuIEVhY2ggbmV3IGlubmVyIE9ic2VydmFibGUgaXNcblx0ICogY29uY2F0ZW5hdGVkIHdpdGggdGhlIHByZXZpb3VzIGlubmVyIE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIF9fV2FybmluZzpfXyBpZiBzb3VyY2UgdmFsdWVzIGFycml2ZSBlbmRsZXNzbHkgYW5kIGZhc3RlciB0aGFuIHRoZWlyXG5cdCAqIGNvcnJlc3BvbmRpbmcgaW5uZXIgT2JzZXJ2YWJsZXMgY2FuIGNvbXBsZXRlLCBpdCB3aWxsIHJlc3VsdCBpbiBtZW1vcnkgaXNzdWVzXG5cdCAqIGFzIGlubmVyIE9ic2VydmFibGVzIGFtYXNzIGluIGFuIHVuYm91bmRlZCBidWZmZXIgd2FpdGluZyBmb3IgdGhlaXIgdHVybiB0b1xuXHQgKiBiZSBzdWJzY3JpYmVkIHRvLlxuXHQgKlxuXHQgKiBOb3RlOiBgY29uY2F0TWFwYCBpcyBlcXVpdmFsZW50IHRvIGBtZXJnZU1hcGAgd2l0aCBjb25jdXJyZW5jeSBwYXJhbWV0ZXIgc2V0XG5cdCAqIHRvIGAxYC5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+Rm9yIGVhY2ggY2xpY2sgZXZlbnQsIHRpY2sgZXZlcnkgc2Vjb25kIGZyb20gMCB0byAzLCB3aXRoIG5vIGNvbmN1cnJlbmN5PC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLmNvbmNhdE1hcChldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoNCkpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb25jYXR9XG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwVG99XG5cdCAqIEBzZWUge0BsaW5rIGV4aGF1c3RNYXB9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsID9pbmRleDogbnVtYmVyKTogT2JzZXJ2YWJsZX0gcHJvamVjdCBBIGZ1bmN0aW9uXG5cdCAqIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXR1cm5zIGFuXG5cdCAqIE9ic2VydmFibGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cblx0ICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuXHQgKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSAob3V0ZXIpIGVtaXNzaW9uIGFuZCB0aGUgaW5uZXIgT2JzZXJ2YWJsZVxuXHQgKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG5cdCAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuXHQgKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gb2JzZXJ2YWJsZSBvZiB2YWx1ZXMgbWVyZ2VkIGZyb20gdGhlIHByb2plY3RlZFxuXHQgKiBPYnNlcnZhYmxlcyBhcyB0aGV5IHdlcmUgc3Vic2NyaWJlZCB0bywgb25lIGF0IGEgdGltZS4gT3B0aW9uYWxseSwgdGhlc2Vcblx0ICogdmFsdWVzIG1heSBoYXZlIGJlZW4gcHJvamVjdGVkIGZyb20gYSBwYXNzZWQgYHByb2plY3RSZXN1bHRgIGFyZ3VtZW50LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGVcblx0ICogcHJvamVjdGlvbiBmdW5jdGlvbiAoYW5kIHRoZSBvcHRpb25hbCBgcmVzdWx0U2VsZWN0b3JgKSB0byBlYWNoIGl0ZW0gZW1pdHRlZFxuXHQgKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIHRha2luZyB2YWx1ZXMgZnJvbSBlYWNoIHByb2plY3RlZCBpbm5lclxuXHQgKiBPYnNlcnZhYmxlIHNlcXVlbnRpYWxseS5cblx0ICogQG1ldGhvZCBjb25jYXRNYXBcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGNvbmNhdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgbWVyZ2VNYXBfMS5NZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCAxKSk7XG5cdH1cblx0ZXhwb3J0cy5jb25jYXRNYXAgPSBjb25jYXRNYXA7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHQvKipcblx0ICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgaW4gdGhlIG91dHB1dFxuXHQgKiBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TWFwcyBlYWNoIHZhbHVlIHRvIGFuIE9ic2VydmFibGUsIHRoZW4gZmxhdHRlbnMgYWxsIG9mXG5cdCAqIHRoZXNlIGlubmVyIE9ic2VydmFibGVzIHVzaW5nIHtAbGluayBtZXJnZUFsbH0uPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlTWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBiYXNlZCBvbiBhcHBseWluZyBhIGZ1bmN0aW9uIHRoYXQgeW91XG5cdCAqIHN1cHBseSB0byBlYWNoIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHdoZXJlIHRoYXQgZnVuY3Rpb25cblx0ICogcmV0dXJucyBhbiBPYnNlcnZhYmxlLCBhbmQgdGhlbiBtZXJnaW5nIHRob3NlIHJlc3VsdGluZyBPYnNlcnZhYmxlcyBhbmRcblx0ICogZW1pdHRpbmcgdGhlIHJlc3VsdHMgb2YgdGhpcyBtZXJnZXIuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBhbmQgZmxhdHRlbiBlYWNoIGxldHRlciB0byBhbiBPYnNlcnZhYmxlIHRpY2tpbmcgZXZlcnkgMSBzZWNvbmQ8L2NhcHRpb24+XG5cdCAqIHZhciBsZXR0ZXJzID0gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKTtcblx0ICogdmFyIHJlc3VsdCA9IGxldHRlcnMubWVyZ2VNYXAoeCA9PlxuXHQgKiAgIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkubWFwKGkgPT4geCtpKVxuXHQgKiApO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG5cdCAqIEBzZWUge0BsaW5rIGV4aGF1c3RNYXB9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsID9pbmRleDogbnVtYmVyKTogT2JzZXJ2YWJsZX0gcHJvamVjdCBBIGZ1bmN0aW9uXG5cdCAqIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXR1cm5zIGFuXG5cdCAqIE9ic2VydmFibGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cblx0ICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuXHQgKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSAob3V0ZXIpIGVtaXNzaW9uIGFuZCB0aGUgaW5uZXIgT2JzZXJ2YWJsZVxuXHQgKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG5cdCAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuXHQgKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV0gTWF4aW11bSBudW1iZXIgb2YgaW5wdXRcblx0ICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZVxuXHQgKiBwcm9qZWN0aW9uIGZ1bmN0aW9uIChhbmQgdGhlIG9wdGlvbmFsIGByZXN1bHRTZWxlY3RvcmApIHRvIGVhY2ggaXRlbSBlbWl0dGVkXG5cdCAqIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBhbmQgbWVyZ2luZyB0aGUgcmVzdWx0cyBvZiB0aGUgT2JzZXJ2YWJsZXMgb2J0YWluZWRcblx0ICogZnJvbSB0aGlzIHRyYW5zZm9ybWF0aW9uLlxuXHQgKiBAbWV0aG9kIG1lcmdlTWFwXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuXHQgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3Rvcjtcblx0ICAgICAgICByZXN1bHRTZWxlY3RvciA9IG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSk7XG5cdH1cblx0ZXhwb3J0cy5tZXJnZU1hcCA9IG1lcmdlTWFwO1xuXHR2YXIgTWVyZ2VNYXBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG5cdCAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcblx0ICAgIH1cblx0ICAgIE1lcmdlTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTWVyZ2VNYXBTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByb2plY3QsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuY29uY3VycmVudCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBNZXJnZU1hcE9wZXJhdG9yO1xuXHR9KCkpO1xuXHRleHBvcnRzLk1lcmdlTWFwT3BlcmF0b3IgPSBNZXJnZU1hcE9wZXJhdG9yO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBNZXJnZU1hcFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKE1lcmdlTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIE1lcmdlTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcblx0ICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcblx0ICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgfVxuXHQgICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuYWN0aXZlKys7XG5cdCAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuXHQgICAgfTtcblx0ICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKGlzaCwgdmFsdWUsIGluZGV4KSB7XG5cdCAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBpc2gsIHZhbHVlLCBpbmRleCkpO1xuXHQgICAgfTtcblx0ICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbm90aWZ5UmVzdWx0U2VsZWN0b3Iob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25vdGlmeVJlc3VsdFNlbGVjdG9yID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0O1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0U2VsZWN0b3Iob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuXHQgICAgfTtcblx0ICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcblx0ICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdCAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuXHQgICAgICAgIHRoaXMuYWN0aXZlLS07XG5cdCAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmhhc0NvbXBsZXRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBNZXJnZU1hcFN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdGV4cG9ydHMuTWVyZ2VNYXBTdWJzY3JpYmVyID0gTWVyZ2VNYXBTdWJzY3JpYmVyO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEzNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgY29uY2F0TWFwVG9fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTM3KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmNvbmNhdE1hcFRvID0gY29uY2F0TWFwVG9fMS5jb25jYXRNYXBUbztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwVG8uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxMzcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgbWVyZ2VNYXBUb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzgpO1xuXHQvKipcblx0ICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gdGhlIHNhbWUgT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgbXVsdGlwbGVcblx0ICogdGltZXMgaW4gYSBzZXJpYWxpemVkIGZhc2hpb24gb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBjb25jYXRNYXB9LCBidXQgbWFwcyBlYWNoIHZhbHVlXG5cdCAqIGFsd2F5cyB0byB0aGUgc2FtZSBpbm5lciBPYnNlcnZhYmxlLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9jb25jYXRNYXBUby5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogTWFwcyBlYWNoIHNvdXJjZSB2YWx1ZSB0byB0aGUgZ2l2ZW4gT2JzZXJ2YWJsZSBgaW5uZXJPYnNlcnZhYmxlYCByZWdhcmRsZXNzXG5cdCAqIG9mIHRoZSBzb3VyY2UgdmFsdWUsIGFuZCB0aGVuIGZsYXR0ZW5zIHRob3NlIHJlc3VsdGluZyBPYnNlcnZhYmxlcyBpbnRvIG9uZVxuXHQgKiBzaW5nbGUgT2JzZXJ2YWJsZSwgd2hpY2ggaXMgdGhlIG91dHB1dCBPYnNlcnZhYmxlLiBFYWNoIG5ldyBgaW5uZXJPYnNlcnZhYmxlYFxuXHQgKiBpbnN0YW5jZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBjb25jYXRlbmF0ZWQgd2l0aCB0aGUgcHJldmlvdXNcblx0ICogYGlubmVyT2JzZXJ2YWJsZWAgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIF9fV2FybmluZzpfXyBpZiBzb3VyY2UgdmFsdWVzIGFycml2ZSBlbmRsZXNzbHkgYW5kIGZhc3RlciB0aGFuIHRoZWlyXG5cdCAqIGNvcnJlc3BvbmRpbmcgaW5uZXIgT2JzZXJ2YWJsZXMgY2FuIGNvbXBsZXRlLCBpdCB3aWxsIHJlc3VsdCBpbiBtZW1vcnkgaXNzdWVzXG5cdCAqIGFzIGlubmVyIE9ic2VydmFibGVzIGFtYXNzIGluIGFuIHVuYm91bmRlZCBidWZmZXIgd2FpdGluZyBmb3IgdGhlaXIgdHVybiB0b1xuXHQgKiBiZSBzdWJzY3JpYmVkIHRvLlxuXHQgKlxuXHQgKiBOb3RlOiBgY29uY2F0TWFwVG9gIGlzIGVxdWl2YWxlbnQgdG8gYG1lcmdlTWFwVG9gIHdpdGggY29uY3VycmVuY3kgcGFyYW1ldGVyXG5cdCAqIHNldCB0byBgMWAuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkZvciBlYWNoIGNsaWNrIGV2ZW50LCB0aWNrIGV2ZXJ5IHNlY29uZCBmcm9tIDAgdG8gMywgd2l0aCBubyBjb25jdXJyZW5jeTwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy5jb25jYXRNYXBUbyhSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoNCkpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb25jYXR9XG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZU1hcFRvfVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2hNYXBUb31cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZhYmxlfSBpbm5lck9ic2VydmFibGUgQW4gT2JzZXJ2YWJsZSB0byByZXBsYWNlIGVhY2ggdmFsdWUgZnJvbVxuXHQgKiB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cblx0ICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuXHQgKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSAob3V0ZXIpIGVtaXNzaW9uIGFuZCB0aGUgaW5uZXIgT2JzZXJ2YWJsZVxuXHQgKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG5cdCAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuXHQgKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBvZiB2YWx1ZXMgbWVyZ2VkIHRvZ2V0aGVyIGJ5IGpvaW5pbmcgdGhlXG5cdCAqIHBhc3NlZCBvYnNlcnZhYmxlIHdpdGggaXRzZWxmLCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkXG5cdCAqIGZyb20gdGhlIHNvdXJjZS5cblx0ICogQG1ldGhvZCBjb25jYXRNYXBUb1xuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gY29uY2F0TWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgbWVyZ2VNYXBUb18xLk1lcmdlTWFwVG9PcGVyYXRvcihpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yLCAxKSk7XG5cdH1cblx0ZXhwb3J0cy5jb25jYXRNYXBUbyA9IGNvbmNhdE1hcFRvO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXBUby5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDEzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gdGhlIHNhbWUgT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgbXVsdGlwbGVcblx0ICogdGltZXMgaW4gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBtZXJnZU1hcH0sIGJ1dCBtYXBzIGVhY2ggdmFsdWUgYWx3YXlzXG5cdCAqIHRvIHRoZSBzYW1lIGlubmVyIE9ic2VydmFibGUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlTWFwVG8ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIE1hcHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gdGhlIGdpdmVuIE9ic2VydmFibGUgYGlubmVyT2JzZXJ2YWJsZWAgcmVnYXJkbGVzc1xuXHQgKiBvZiB0aGUgc291cmNlIHZhbHVlLCBhbmQgdGhlbiBtZXJnZXMgdGhvc2UgcmVzdWx0aW5nIE9ic2VydmFibGVzIGludG8gb25lXG5cdCAqIHNpbmdsZSBPYnNlcnZhYmxlLCB3aGljaCBpcyB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkZvciBlYWNoIGNsaWNrIGV2ZW50LCBzdGFydCBhbiBpbnRlcnZhbCBPYnNlcnZhYmxlIHRpY2tpbmcgZXZlcnkgMSBzZWNvbmQ8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3MubWVyZ2VNYXBUbyhSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwVG99XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VNYXB9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cblx0ICogQHNlZSB7QGxpbmsgc3dpdGNoTWFwVG99XG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5uZXJPYnNlcnZhYmxlIEFuIE9ic2VydmFibGUgdG8gcmVwbGFjZSBlYWNoIHZhbHVlIGZyb21cblx0ICogdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKG91dGVyVmFsdWU6IFQsIGlubmVyVmFsdWU6IEksIG91dGVySW5kZXg6IG51bWJlciwgaW5uZXJJbmRleDogbnVtYmVyKTogYW55fSBbcmVzdWx0U2VsZWN0b3JdXG5cdCAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcblx0ICogYW5kIHRoZSBpbmRpY2VzIG9mIHRoZSBzb3VyY2UgKG91dGVyKSBlbWlzc2lvbiBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVcblx0ICogZW1pc3Npb24uIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXJlOlxuXHQgKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2Vcblx0ICogLSBgaW5uZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcblx0ICogLSBgb3V0ZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2Vcblx0ICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbY29uY3VycmVudD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldIE1heGltdW0gbnVtYmVyIG9mIGlucHV0XG5cdCAqIE9ic2VydmFibGVzIGJlaW5nIHN1YnNjcmliZWQgdG8gY29uY3VycmVudGx5LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgZnJvbSB0aGUgZ2l2ZW5cblx0ICogYGlubmVyT2JzZXJ2YWJsZWAgKGFuZCBvcHRpb25hbGx5IHRyYW5zZm9ybWVkIHRocm91Z2ggYHJlc3VsdFNlbGVjdG9yYCkgZXZlcnlcblx0ICogdGltZSBhIHZhbHVlIGlzIGVtaXR0ZWQgb24gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIG1lcmdlTWFwVG9cblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuXHQgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG5cdCAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3Rvcjtcblx0ICAgICAgICByZXN1bHRTZWxlY3RvciA9IG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNZXJnZU1hcFRvT3BlcmF0b3IoaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkpO1xuXHR9XG5cdGV4cG9ydHMubWVyZ2VNYXBUbyA9IG1lcmdlTWFwVG87XG5cdC8vIFRPRE86IEZpZ3VyZSBvdXQgY29ycmVjdCBzaWduYXR1cmUgaGVyZTogYW4gT3BlcmF0b3I8T2JzZXJ2YWJsZTxUPiwgUj5cblx0Ly8gICAgICAgbmVlZHMgdG8gaW1wbGVtZW50IGNhbGwob2JzZXJ2ZXI6IFN1YnNjcmliZXI8Uj4pOiBTdWJzY3JpYmVyPE9ic2VydmFibGU8VD4+XG5cdHZhciBNZXJnZU1hcFRvT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTWVyZ2VNYXBUb09wZXJhdG9yKGlzaCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcblx0ICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cblx0ICAgICAgICB0aGlzLmlzaCA9IGlzaDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcblx0ICAgIH1cblx0ICAgIE1lcmdlTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBNZXJnZU1hcFRvU3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5pc2gsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuY29uY3VycmVudCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBNZXJnZU1hcFRvT3BlcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuTWVyZ2VNYXBUb09wZXJhdG9yID0gTWVyZ2VNYXBUb09wZXJhdG9yO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBNZXJnZU1hcFRvU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTWVyZ2VNYXBUb1N1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBNZXJnZU1hcFRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgaXNoLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuXHQgICAgICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmlzaCA9IGlzaDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcblx0ICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgfVxuXHQgICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHRoaXMucmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcblx0ICAgICAgICAgICAgdmFyIGlzaCA9IHRoaXMuaXNoO1xuXHQgICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuXHQgICAgICAgICAgICB0aGlzLl9pbm5lclN1Yihpc2gsIGRlc3RpbmF0aW9uLCByZXN1bHRTZWxlY3RvciwgdmFsdWUsIGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBNZXJnZU1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKGlzaCwgZGVzdGluYXRpb24sIHJlc3VsdFNlbGVjdG9yLCB2YWx1ZSwgaW5kZXgpIHtcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGlzaCwgdmFsdWUsIGluZGV4KSk7XG5cdCAgICB9O1xuXHQgICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG5cdCAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIE1lcmdlTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdmFyIF9hID0gdGhpcywgcmVzdWx0U2VsZWN0b3IgPSBfYS5yZXN1bHRTZWxlY3RvciwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcblx0ICAgICAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy50cnlTZWxlY3RSZXN1bHQob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBNZXJnZU1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5U2VsZWN0UmVzdWx0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCByZXN1bHRTZWxlY3RvciA9IF9hLnJlc3VsdFNlbGVjdG9yLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0U2VsZWN0b3Iob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG5cdCAgICB9O1xuXHQgICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBNZXJnZU1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcblx0ICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdCAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuXHQgICAgICAgIHRoaXMuYWN0aXZlLS07XG5cdCAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmhhc0NvbXBsZXRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBNZXJnZU1hcFRvU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5NZXJnZU1hcFRvU3Vic2NyaWJlciA9IE1lcmdlTWFwVG9TdWJzY3JpYmVyO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcFRvLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBjb3VudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDApO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY291bnQgPSBjb3VudF8xLmNvdW50O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE0MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0LyoqXG5cdCAqIENvdW50cyB0aGUgbnVtYmVyIG9mIGVtaXNzaW9ucyBvbiB0aGUgc291cmNlIGFuZCBlbWl0cyB0aGF0IG51bWJlciB3aGVuIHRoZVxuXHQgKiBzb3VyY2UgY29tcGxldGVzLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+VGVsbHMgaG93IG1hbnkgdmFsdWVzIHdlcmUgZW1pdHRlZCwgd2hlbiB0aGUgc291cmNlXG5cdCAqIGNvbXBsZXRlcy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvY291bnQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBjb3VudGAgdHJhbnNmb3JtcyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdmFsdWVzIGludG8gYW4gT2JzZXJ2YWJsZSB0aGF0XG5cdCAqIGVtaXRzIGEgc2luZ2xlIHZhbHVlIHRoYXQgcmVwcmVzZW50cyB0aGUgbnVtYmVyIG9mIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZVxuXHQgKiBzb3VyY2UgT2JzZXJ2YWJsZS4gSWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRlcm1pbmF0ZXMgd2l0aCBhbiBlcnJvciwgYGNvdW50YFxuXHQgKiB3aWxsIHBhc3MgdGhpcyBlcnJvciBub3RpZmljYXRpb24gYWxvbmcgd2l0aG91dCBlbWl0dGluZyBhbiB2YWx1ZSBmaXJzdC4gSWZcblx0ICogdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGRvZXMgbm90IHRlcm1pbmF0ZSBhdCBhbGwsIGBjb3VudGAgd2lsbCBuZWl0aGVyIGVtaXRcblx0ICogYSB2YWx1ZSBub3IgdGVybWluYXRlLiBUaGlzIG9wZXJhdG9yIHRha2VzIGFuIG9wdGlvbmFsIGBwcmVkaWNhdGVgIGZ1bmN0aW9uXG5cdCAqIGFzIGFyZ3VtZW50LCBpbiB3aGljaCBjYXNlIHRoZSBvdXRwdXQgZW1pc3Npb24gd2lsbCByZXByZXNlbnQgdGhlIG51bWJlciBvZlxuXHQgKiBzb3VyY2UgdmFsdWVzIHRoYXQgbWF0Y2hlZCBgdHJ1ZWAgd2l0aCB0aGUgYHByZWRpY2F0ZWAuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkNvdW50cyBob3cgbWFueSBzZWNvbmRzIGhhdmUgcGFzc2VkIGJlZm9yZSB0aGUgZmlyc3QgY2xpY2sgaGFwcGVuZWQ8L2NhcHRpb24+XG5cdCAqIHZhciBzZWNvbmRzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHNlY29uZHNCZWZvcmVDbGljayA9IHNlY29uZHMudGFrZVVudGlsKGNsaWNrcyk7XG5cdCAqIHZhciByZXN1bHQgPSBzZWNvbmRzQmVmb3JlQ2xpY2suY291bnQoKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+Q291bnRzIGhvdyBtYW55IG9kZCBudW1iZXJzIGFyZSB0aGVyZSBiZXR3ZWVuIDEgYW5kIDc8L2NhcHRpb24+XG5cdCAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCA3KTtcblx0ICogdmFyIHJlc3VsdCA9IG51bWJlcnMuY291bnQoaSA9PiBpICUgMiA9PT0gMSk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIG1heH1cblx0ICogQHNlZSB7QGxpbmsgbWlufVxuXHQgKiBAc2VlIHtAbGluayByZWR1Y2V9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGk6IG51bWJlciwgc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogYm9vbGVhbn0gW3ByZWRpY2F0ZV0gQVxuXHQgKiBib29sZWFuIGZ1bmN0aW9uIHRvIHNlbGVjdCB3aGF0IHZhbHVlcyBhcmUgdG8gYmUgY291bnRlZC4gSXQgaXMgcHJvdmlkZWQgd2l0aFxuXHQgKiBhcmd1bWVudHMgb2Y6XG5cdCAqIC0gYHZhbHVlYDogdGhlIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiAtIGBpbmRleGA6IHRoZSAoemVyby1iYXNlZCkgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogLSBgc291cmNlYDogdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGluc3RhbmNlIGl0c2VsZi5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBvbmUgbnVtYmVyIHRoYXQgcmVwcmVzZW50cyB0aGUgY291bnQgYXNcblx0ICogZGVzY3JpYmVkIGFib3ZlLlxuXHQgKiBAbWV0aG9kIGNvdW50XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBjb3VudChwcmVkaWNhdGUpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IENvdW50T3BlcmF0b3IocHJlZGljYXRlLCB0aGlzKSk7XG5cdH1cblx0ZXhwb3J0cy5jb3VudCA9IGNvdW50O1xuXHR2YXIgQ291bnRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBDb3VudE9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICBDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnNvdXJjZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBDb3VudE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKENvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IDA7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICB9XG5cdCAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RyeVByZWRpY2F0ZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNvdW50Kys7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByZWRpY2F0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKywgdGhpcy5zb3VyY2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocmVzdWx0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuY291bnQrKztcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuY291bnQpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gQ291bnRTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBkZW1hdGVyaWFsaXplXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0Mik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kZW1hdGVyaWFsaXplID0gZGVtYXRlcmlhbGl6ZV8xLmRlbWF0ZXJpYWxpemU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCB0cmFuc2Zvcm1zIE5vdGlmaWNhdGlvbiBvYmplY3RzIGludG8gdGhlIGl0ZW1zIG9yIG5vdGlmaWNhdGlvbnMgdGhleSByZXByZXNlbnQuXG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIE5vdGlmaWNhdGlvbn1cblx0ICpcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGFuZCBub3RpZmljYXRpb25zIGVtYmVkZGVkIGluIE5vdGlmaWNhdGlvbiBvYmplY3RzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIGRlbWF0ZXJpYWxpemVcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGRlbWF0ZXJpYWxpemUoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG5cdH1cblx0ZXhwb3J0cy5kZW1hdGVyaWFsaXplID0gZGVtYXRlcmlhbGl6ZTtcblx0dmFyIERlTWF0ZXJpYWxpemVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSB7XG5cdCAgICB9XG5cdCAgICBEZU1hdGVyaWFsaXplT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERlTWF0ZXJpYWxpemVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICB9XG5cdCAgICBEZU1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YWx1ZS5vYnNlcnZlKHRoaXMuZGVzdGluYXRpb24pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZW1hdGVyaWFsaXplLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBkZWJvdW5jZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDQpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVib3VuY2UgPSBkZWJvdW5jZV8xLmRlYm91bmNlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE0NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogRW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbmx5IGFmdGVyIGEgcGFydGljdWxhciB0aW1lIHNwYW5cblx0ICogZGV0ZXJtaW5lZCBieSBhbm90aGVyIE9ic2VydmFibGUgaGFzIHBhc3NlZCB3aXRob3V0IGFub3RoZXIgc291cmNlIGVtaXNzaW9uLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBkZWJvdW5jZVRpbWV9LCBidXQgdGhlIHRpbWUgc3BhbiBvZlxuXHQgKiBlbWlzc2lvbiBzaWxlbmNlIGlzIGRldGVybWluZWQgYnkgYSBzZWNvbmQgT2JzZXJ2YWJsZS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvZGVib3VuY2UucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBkZWJvdW5jZWAgZGVsYXlzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IGRyb3BzIHByZXZpb3VzXG5cdCAqIHBlbmRpbmcgZGVsYXllZCBlbWlzc2lvbnMgaWYgYSBuZXcgdmFsdWUgYXJyaXZlcyBvbiB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIFRoaXMgb3BlcmF0b3Iga2VlcHMgdHJhY2sgb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlIGZyb20gdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlLCBhbmQgc3Bhd25zIGEgZHVyYXRpb24gT2JzZXJ2YWJsZSBieSBjYWxsaW5nIHRoZVxuXHQgKiBgZHVyYXRpb25TZWxlY3RvcmAgZnVuY3Rpb24uIFRoZSB2YWx1ZSBpcyBlbWl0dGVkIG9ubHkgd2hlbiB0aGUgZHVyYXRpb25cblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcywgYW5kIGlmIG5vIG90aGVyIHZhbHVlIHdhcyBlbWl0dGVkIG9uXG5cdCAqIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBzaW5jZSB0aGUgZHVyYXRpb24gT2JzZXJ2YWJsZSB3YXMgc3Bhd25lZC4gSWYgYSBuZXdcblx0ICogdmFsdWUgYXBwZWFycyBiZWZvcmUgdGhlIGR1cmF0aW9uIE9ic2VydmFibGUgZW1pdHMsIHRoZSBwcmV2aW91cyB2YWx1ZSB3aWxsXG5cdCAqIGJlIGRyb3BwZWQgYW5kIHdpbGwgbm90IGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiBMaWtlIHtAbGluayBkZWJvdW5jZVRpbWV9LCB0aGlzIGlzIGEgcmF0ZS1saW1pdGluZyBvcGVyYXRvciwgYW5kIGFsc28gYVxuXHQgKiBkZWxheS1saWtlIG9wZXJhdG9yIHNpbmNlIG91dHB1dCBlbWlzc2lvbnMgZG8gbm90IG5lY2Vzc2FyaWx5IG9jY3VyIGF0IHRoZVxuXHQgKiBzYW1lIHRpbWUgYXMgdGhleSBkaWQgb24gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBtb3N0IHJlY2VudCBjbGljayBhZnRlciBhIGJ1cnN0IG9mIGNsaWNrczwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy5kZWJvdW5jZSgoKSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYXVkaXR9XG5cdCAqIEBzZWUge0BsaW5rIGRlYm91bmNlVGltZX1cblx0ICogQHNlZSB7QGxpbmsgZGVsYXlXaGVufVxuXHQgKiBAc2VlIHtAbGluayB0aHJvdHRsZX1cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IE9ic2VydmFibGV8UHJvbWlzZX0gZHVyYXRpb25TZWxlY3RvciBBIGZ1bmN0aW9uXG5cdCAqIHRoYXQgcmVjZWl2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgZm9yIGNvbXB1dGluZyB0aGUgdGltZW91dFxuXHQgKiBkdXJhdGlvbiBmb3IgZWFjaCBzb3VyY2UgdmFsdWUsIHJldHVybmVkIGFzIGFuIE9ic2VydmFibGUgb3IgYSBQcm9taXNlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZGVsYXlzIHRoZSBlbWlzc2lvbnMgb2YgdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlIGJ5IHRoZSBzcGVjaWZpZWQgZHVyYXRpb24gT2JzZXJ2YWJsZSByZXR1cm5lZCBieVxuXHQgKiBgZHVyYXRpb25TZWxlY3RvcmAsIGFuZCBtYXkgZHJvcCBzb21lIHZhbHVlcyBpZiB0aGV5IG9jY3VyIHRvbyBmcmVxdWVudGx5LlxuXHQgKiBAbWV0aG9kIGRlYm91bmNlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWJvdW5jZShkdXJhdGlvblNlbGVjdG9yKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBEZWJvdW5jZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpKTtcblx0fVxuXHRleHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XG5cdHZhciBEZWJvdW5jZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG5cdCAgICB9XG5cdCAgICBEZWJvdW5jZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVib3VuY2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBEZWJvdW5jZU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBEZWJvdW5jZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlYm91bmNlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIERlYm91bmNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gbnVsbDtcblx0ICAgIH1cblx0ICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yLmNhbGwodGhpcywgdmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlLCByZXN1bHQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuXHQgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKTtcblx0ICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcblx0ICAgIH07XG5cdCAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG5cdCAgICB9O1xuXHQgICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcblx0ICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb247XG5cdCAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuXHQgICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBEZWJvdW5jZVN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBkZWJvdW5jZVRpbWVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmRlYm91bmNlVGltZSA9IGRlYm91bmNlVGltZV8xLmRlYm91bmNlVGltZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQ2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgYXN5bmNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xuXHQvKipcblx0ICogRW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbmx5IGFmdGVyIGEgcGFydGljdWxhciB0aW1lIHNwYW5cblx0ICogaGFzIHBhc3NlZCB3aXRob3V0IGFub3RoZXIgc291cmNlIGVtaXNzaW9uLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBkZWxheX0sIGJ1dCBwYXNzZXMgb25seSB0aGUgbW9zdFxuXHQgKiByZWNlbnQgdmFsdWUgZnJvbSBlYWNoIGJ1cnN0IG9mIGVtaXNzaW9ucy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvZGVib3VuY2VUaW1lLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgZGVib3VuY2VUaW1lYCBkZWxheXMgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBidXQgZHJvcHNcblx0ICogcHJldmlvdXMgcGVuZGluZyBkZWxheWVkIGVtaXNzaW9ucyBpZiBhIG5ldyB2YWx1ZSBhcnJpdmVzIG9uIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gVGhpcyBvcGVyYXRvciBrZWVwcyB0cmFjayBvZiB0aGUgbW9zdCByZWNlbnQgdmFsdWUgZnJvbSB0aGVcblx0ICogc291cmNlIE9ic2VydmFibGUsIGFuZCBlbWl0cyB0aGF0IG9ubHkgd2hlbiBgZHVlVGltZWAgZW5vdWdoIHRpbWUgaGFzIHBhc3NlZFxuXHQgKiB3aXRob3V0IGFueSBvdGhlciB2YWx1ZSBhcHBlYXJpbmcgb24gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBhIG5ldyB2YWx1ZVxuXHQgKiBhcHBlYXJzIGJlZm9yZSBgZHVlVGltZWAgc2lsZW5jZSBvY2N1cnMsIHRoZSBwcmV2aW91cyB2YWx1ZSB3aWxsIGJlIGRyb3BwZWRcblx0ICogYW5kIHdpbGwgbm90IGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiBUaGlzIGlzIGEgcmF0ZS1saW1pdGluZyBvcGVyYXRvciwgYmVjYXVzZSBpdCBpcyBpbXBvc3NpYmxlIGZvciBtb3JlIHRoYW4gb25lXG5cdCAqIHZhbHVlIHRvIGJlIGVtaXR0ZWQgaW4gYW55IHRpbWUgd2luZG93IG9mIGR1cmF0aW9uIGBkdWVUaW1lYCwgYnV0IGl0IGlzIGFsc29cblx0ICogYSBkZWxheS1saWtlIG9wZXJhdG9yIHNpbmNlIG91dHB1dCBlbWlzc2lvbnMgZG8gbm90IG9jY3VyIGF0IHRoZSBzYW1lIHRpbWUgYXNcblx0ICogdGhleSBkaWQgb24gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBPcHRpb25hbGx5IHRha2VzIGEge0BsaW5rIFNjaGVkdWxlcn0gZm9yXG5cdCAqIG1hbmFnaW5nIHRpbWVycy5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCB0aGUgbW9zdCByZWNlbnQgY2xpY2sgYWZ0ZXIgYSBidXJzdCBvZiBjbGlja3M8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3MuZGVib3VuY2VUaW1lKDEwMDApO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBhdWRpdFRpbWV9XG5cdCAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuXHQgKiBAc2VlIHtAbGluayBkZWxheX1cblx0ICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cblx0ICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVlVGltZSBUaGUgdGltZW91dCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgKG9yIHRoZSB0aW1lXG5cdCAqIHVuaXQgZGV0ZXJtaW5lZCBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYCkgZm9yIHRoZSB3aW5kb3cgb2Zcblx0ICogdGltZSByZXF1aXJlZCB0byB3YWl0IGZvciBlbWlzc2lvbiBzaWxlbmNlIGJlZm9yZSBlbWl0dGluZyB0aGUgbW9zdCByZWNlbnRcblx0ICogc291cmNlIHZhbHVlLlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1hc3luY10gVGhlIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Jcblx0ICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgdGltZW91dCBmb3IgZWFjaCB2YWx1ZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGRlbGF5cyB0aGUgZW1pc3Npb25zIG9mIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBieSB0aGUgc3BlY2lmaWVkIGBkdWVUaW1lYCwgYW5kIG1heSBkcm9wIHNvbWUgdmFsdWVzIGlmIHRoZXkgb2NjdXJcblx0ICogdG9vIGZyZXF1ZW50bHkuXG5cdCAqIEBtZXRob2QgZGVib3VuY2VUaW1lXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWJvdW5jZVRpbWUoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSk7XG5cdH1cblx0ZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWU7XG5cdHZhciBEZWJvdW5jZVRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVPcGVyYXRvcihkdWVUaW1lLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICB0aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgRGVib3VuY2VUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVlVGltZSwgdGhpcy5zY2hlZHVsZXIpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGVib3VuY2VUaW1lT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIERlYm91bmNlVGltZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlYm91bmNlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdWVUaW1lLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5kdWVUaW1lID0gZHVlVGltZTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG5cdCAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmFkZCh0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdWVUaW1lLCB0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZGVib3VuY2VkTmV4dCgpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5kZWJvdW5jZWROZXh0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZSgpO1xuXHQgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG5cdCAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhckRlYm91bmNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkZWJvdW5jZWRTdWJzY3JpcHRpb24gPSB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbjtcblx0ICAgICAgICBpZiAoZGVib3VuY2VkU3Vic2NyaXB0aW9uICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKGRlYm91bmNlZFN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgICAgIGRlYm91bmNlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdGZ1bmN0aW9uIGRpc3BhdGNoTmV4dChzdWJzY3JpYmVyKSB7XG5cdCAgICBzdWJzY3JpYmVyLmRlYm91bmNlZE5leHQoKTtcblx0fVxuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGRlZmF1bHRJZkVtcHR5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kZWZhdWx0SWZFbXB0eSA9IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRJZkVtcHR5LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogRW1pdHMgYSBnaXZlbiB2YWx1ZSBpZiB0aGUgc291cmNlIE9ic2VydmFibGUgY29tcGxldGVzIHdpdGhvdXQgZW1pdHRpbmcgYW55XG5cdCAqIGBuZXh0YCB2YWx1ZSwgb3RoZXJ3aXNlIG1pcnJvcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHR1cm5zIG91dCB0byBiZSBlbXB0eSwgdGhlblxuXHQgKiB0aGlzIG9wZXJhdG9yIHdpbGwgZW1pdCBhIGRlZmF1bHQgdmFsdWUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2RlZmF1bHRJZkVtcHR5LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgZGVmYXVsdElmRW1wdHlgIGVtaXRzIHRoZSB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgb3IgYVxuXHQgKiBzcGVjaWZpZWQgZGVmYXVsdCB2YWx1ZSBpZiB0aGUgc291cmNlIE9ic2VydmFibGUgaXMgZW1wdHkgKGNvbXBsZXRlcyB3aXRob3V0XG5cdCAqIGhhdmluZyBlbWl0dGVkIGFueSBgbmV4dGAgdmFsdWUpLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5JZiBubyBjbGlja3MgaGFwcGVuIGluIDUgc2Vjb25kcywgdGhlbiBlbWl0IFwibm8gY2xpY2tzXCI8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBjbGlja3NCZWZvcmVGaXZlID0gY2xpY2tzLnRha2VVbnRpbChSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMDApKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrc0JlZm9yZUZpdmUuZGVmYXVsdElmRW1wdHkoJ25vIGNsaWNrcycpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBlbXB0eX1cblx0ICogQHNlZSB7QGxpbmsgbGFzdH1cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IFtkZWZhdWx0VmFsdWU9bnVsbF0gVGhlIGRlZmF1bHQgdmFsdWUgdXNlZCBpZiB0aGUgc291cmNlXG5cdCAqIE9ic2VydmFibGUgaXMgZW1wdHkuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBlaXRoZXIgdGhlIHNwZWNpZmllZFxuXHQgKiBgZGVmYXVsdFZhbHVlYCBpZiB0aGUgc291cmNlIE9ic2VydmFibGUgZW1pdHMgbm8gaXRlbXMsIG9yIHRoZSB2YWx1ZXMgZW1pdHRlZFxuXHQgKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBtZXRob2QgZGVmYXVsdElmRW1wdHlcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkge1xuXHQgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdm9pZCAwKSB7IGRlZmF1bHRWYWx1ZSA9IG51bGw7IH1cblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IERlZmF1bHRJZkVtcHR5T3BlcmF0b3IoZGVmYXVsdFZhbHVlKSk7XG5cdH1cblx0ZXhwb3J0cy5kZWZhdWx0SWZFbXB0eSA9IGRlZmF1bHRJZkVtcHR5O1xuXHR2YXIgRGVmYXVsdElmRW1wdHlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yKGRlZmF1bHRWYWx1ZSkge1xuXHQgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuXHQgICAgfVxuXHQgICAgRGVmYXVsdElmRW1wdHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlZmF1bHRWYWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuXHQgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRydWU7XG5cdCAgICB9XG5cdCAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5pc0VtcHR5ID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgIH07XG5cdCAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRJZkVtcHR5LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTQ5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBkZWxheV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTApO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVsYXkgPSBkZWxheV8xLmRlbGF5O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE1MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdHZhciBpc0RhdGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgTm90aWZpY2F0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KTtcblx0LyoqXG5cdCAqIERlbGF5cyB0aGUgZW1pc3Npb24gb2YgaXRlbXMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgYSBnaXZlbiB0aW1lb3V0IG9yXG5cdCAqIHVudGlsIGEgZ2l2ZW4gRGF0ZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlRpbWUgc2hpZnRzIGVhY2ggaXRlbSBieSBzb21lIHNwZWNpZmllZCBhbW91bnQgb2Zcblx0ICogbWlsbGlzZWNvbmRzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9kZWxheS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogSWYgdGhlIGRlbGF5IGFyZ3VtZW50IGlzIGEgTnVtYmVyLCB0aGlzIG9wZXJhdG9yIHRpbWUgc2hpZnRzIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBieSB0aGF0IGFtb3VudCBvZiB0aW1lIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMuIFRoZSByZWxhdGl2ZVxuXHQgKiB0aW1lIGludGVydmFscyBiZXR3ZWVuIHRoZSB2YWx1ZXMgYXJlIHByZXNlcnZlZC5cblx0ICpcblx0ICogSWYgdGhlIGRlbGF5IGFyZ3VtZW50IGlzIGEgRGF0ZSwgdGhpcyBvcGVyYXRvciB0aW1lIHNoaWZ0cyB0aGUgc3RhcnQgb2YgdGhlXG5cdCAqIE9ic2VydmFibGUgZXhlY3V0aW9uIHVudGlsIHRoZSBnaXZlbiBkYXRlIG9jY3Vycy5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RGVsYXkgZWFjaCBjbGljayBieSBvbmUgc2Vjb25kPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgZGVsYXllZENsaWNrcyA9IGNsaWNrcy5kZWxheSgxMDAwKTsgLy8gZWFjaCBjbGljayBlbWl0dGVkIGFmdGVyIDEgc2Vjb25kXG5cdCAqIGRlbGF5ZWRDbGlja3Muc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5EZWxheSBhbGwgY2xpY2tzIHVudGlsIGEgZnV0dXJlIGRhdGUgaGFwcGVuczwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGRhdGUgPSBuZXcgRGF0ZSgnTWFyY2ggMTUsIDIwNTAgMTI6MDA6MDAnKTsgLy8gaW4gdGhlIGZ1dHVyZVxuXHQgKiB2YXIgZGVsYXllZENsaWNrcyA9IGNsaWNrcy5kZWxheShkYXRlKTsgLy8gY2xpY2sgZW1pdHRlZCBvbmx5IGFmdGVyIHRoYXQgZGF0ZVxuXHQgKiBkZWxheWVkQ2xpY2tzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZGVib3VuY2VUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBkZWxheVdoZW59XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfERhdGV9IGRlbGF5IFRoZSBkZWxheSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgKGEgYG51bWJlcmApIG9yXG5cdCAqIGEgYERhdGVgIHVudGlsIHdoaWNoIHRoZSBlbWlzc2lvbiBvZiB0aGUgc291cmNlIGl0ZW1zIGlzIGRlbGF5ZWQuXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgU2NoZWR1bGVyIHRvIHVzZSBmb3Jcblx0ICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgdGltZS1zaGlmdCBmb3IgZWFjaCBpdGVtLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZGVsYXlzIHRoZSBlbWlzc2lvbnMgb2YgdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlIGJ5IHRoZSBzcGVjaWZpZWQgdGltZW91dCBvciBEYXRlLlxuXHQgKiBAbWV0aG9kIGRlbGF5XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWxheShkZWxheSwgc2NoZWR1bGVyKSB7XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgdmFyIGFic29sdXRlRGVsYXkgPSBpc0RhdGVfMS5pc0RhdGUoZGVsYXkpO1xuXHQgICAgdmFyIGRlbGF5Rm9yID0gYWJzb2x1dGVEZWxheSA/ICgrZGVsYXkgLSBzY2hlZHVsZXIubm93KCkpIDogTWF0aC5hYnMoZGVsYXkpO1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRGVsYXlPcGVyYXRvcihkZWxheUZvciwgc2NoZWR1bGVyKSk7XG5cdH1cblx0ZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xuXHR2YXIgRGVsYXlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEZWxheU9wZXJhdG9yKGRlbGF5LCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICBEZWxheU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVsYXlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVsYXksIHRoaXMuc2NoZWR1bGVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERlbGF5T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIERlbGF5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRGVsYXlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRGVsYXlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWxheSwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLnF1ZXVlID0gW107XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmVycm9yZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIERlbGF5U3Vic2NyaWJlci5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zb3VyY2U7XG5cdCAgICAgICAgdmFyIHF1ZXVlID0gc291cmNlLnF1ZXVlO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG5cdCAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gc3RhdGUuZGVzdGluYXRpb247XG5cdCAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDAgJiYgKHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpIDw9IDApIHtcblx0ICAgICAgICAgICAgcXVldWUuc2hpZnQoKS5ub3RpZmljYXRpb24ub2JzZXJ2ZShkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHZhciBkZWxheV8xID0gTWF0aC5tYXgoMCwgcXVldWVbMF0udGltZSAtIHNjaGVkdWxlci5ub3coKSk7XG5cdCAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIGRlbGF5XzEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc291cmNlLmFjdGl2ZSA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9zY2hlZHVsZSA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKERlbGF5U3Vic2NyaWJlci5kaXNwYXRjaCwgdGhpcy5kZWxheSwge1xuXHQgICAgICAgICAgICBzb3VyY2U6IHRoaXMsIGRlc3RpbmF0aW9uOiB0aGlzLmRlc3RpbmF0aW9uLCBzY2hlZHVsZXI6IHNjaGVkdWxlclxuXHQgICAgICAgIH0pKTtcblx0ICAgIH07XG5cdCAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuXHQgICAgICAgIGlmICh0aGlzLmVycm9yZWQgPT09IHRydWUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG5cdCAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgRGVsYXlNZXNzYWdlKHNjaGVkdWxlci5ub3coKSArIHRoaXMuZGVsYXksIG5vdGlmaWNhdGlvbik7XG5cdCAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuXHQgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGUoc2NoZWR1bGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcblx0ICAgIH07XG5cdCAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICB0aGlzLmVycm9yZWQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMucXVldWUgPSBbXTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICB9O1xuXHQgICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZU5vdGlmaWNhdGlvbihOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERlbGF5U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHR2YXIgRGVsYXlNZXNzYWdlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIERlbGF5TWVzc2FnZSh0aW1lLCBub3RpZmljYXRpb24pIHtcblx0ICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuXHQgICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIERlbGF5TWVzc2FnZTtcblx0fSgpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGRlbGF5V2hlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVsYXlXaGVuID0gZGVsYXlXaGVuXzEuZGVsYXlXaGVuO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIERlbGF5cyB0aGUgZW1pc3Npb24gb2YgaXRlbXMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgYSBnaXZlbiB0aW1lIHNwYW5cblx0ICogZGV0ZXJtaW5lZCBieSB0aGUgZW1pc3Npb25zIG9mIGFub3RoZXIgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgZGVsYXl9LCBidXQgdGhlIHRpbWUgc3BhbiBvZiB0aGVcblx0ICogZGVsYXkgZHVyYXRpb24gaXMgZGV0ZXJtaW5lZCBieSBhIHNlY29uZCBPYnNlcnZhYmxlLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9kZWxheVdoZW4ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBkZWxheVdoZW5gIHRpbWUgc2hpZnRzIGVhY2ggZW1pdHRlZCB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBieSBhXG5cdCAqIHRpbWUgc3BhbiBkZXRlcm1pbmVkIGJ5IGFub3RoZXIgT2JzZXJ2YWJsZS4gV2hlbiB0aGUgc291cmNlIGVtaXRzIGEgdmFsdWUsXG5cdCAqIHRoZSBgZGVsYXlEdXJhdGlvblNlbGVjdG9yYCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgc291cmNlIHZhbHVlIGFzXG5cdCAqIGFyZ3VtZW50LCBhbmQgc2hvdWxkIHJldHVybiBhbiBPYnNlcnZhYmxlLCBjYWxsZWQgdGhlIFwiZHVyYXRpb25cIiBPYnNlcnZhYmxlLlxuXHQgKiBUaGUgc291cmNlIHZhbHVlIGlzIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIG9ubHkgd2hlbiB0aGUgZHVyYXRpb25cblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcy5cblx0ICpcblx0ICogT3B0aW9uYWxseSwgYGRlbGF5V2hlbmAgdGFrZXMgYSBzZWNvbmQgYXJndW1lbnQsIGBzdWJzY3JpcHRpb25EZWxheWAsIHdoaWNoXG5cdCAqIGlzIGFuIE9ic2VydmFibGUuIFdoZW4gYHN1YnNjcmlwdGlvbkRlbGF5YCBlbWl0cyBpdHMgZmlyc3QgdmFsdWUgb3Jcblx0ICogY29tcGxldGVzLCB0aGUgc291cmNlIE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZCB0byBhbmQgc3RhcnRzIGJlaGF2aW5nIGxpa2Vcblx0ICogZGVzY3JpYmVkIGluIHRoZSBwcmV2aW91cyBwYXJhZ3JhcGguIElmIGBzdWJzY3JpcHRpb25EZWxheWAgaXMgbm90IHByb3ZpZGVkLFxuXHQgKiBgZGVsYXlXaGVuYCB3aWxsIHN1YnNjcmliZSB0byB0aGUgc291cmNlIE9ic2VydmFibGUgYXMgc29vbiBhcyB0aGUgb3V0cHV0XG5cdCAqIE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZC5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RGVsYXkgZWFjaCBjbGljayBieSBhIHJhbmRvbSBhbW91bnQgb2YgdGltZSwgYmV0d2VlbiAwIGFuZCA1IHNlY29uZHM8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBkZWxheWVkQ2xpY2tzID0gY2xpY2tzLmRlbGF5V2hlbihldmVudCA9PlxuXHQgKiAgIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoTWF0aC5yYW5kb20oKSAqIDUwMDApXG5cdCAqICk7XG5cdCAqIGRlbGF5ZWRDbGlja3Muc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBkZWJvdW5jZX1cblx0ICogQHNlZSB7QGxpbmsgZGVsYXl9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQpOiBPYnNlcnZhYmxlfSBkZWxheUR1cmF0aW9uU2VsZWN0b3IgQSBmdW5jdGlvbiB0aGF0XG5cdCAqIHJldHVybnMgYW4gT2JzZXJ2YWJsZSBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgd2hpY2hcblx0ICogaXMgdGhlbiB1c2VkIHRvIGRlbGF5IHRoZSBlbWlzc2lvbiBvZiB0aGF0IGl0ZW0gb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlXG5cdCAqIHVudGlsIHRoZSBPYnNlcnZhYmxlIHJldHVybmVkIGZyb20gdGhpcyBmdW5jdGlvbiBlbWl0cyBhIHZhbHVlLlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGV9IHN1YnNjcmlwdGlvbkRlbGF5IEFuIE9ic2VydmFibGUgdGhhdCB0cmlnZ2VycyB0aGVcblx0ICogc3Vic2NyaXB0aW9uIHRvIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbmNlIGl0IGVtaXRzIGFueSB2YWx1ZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGRlbGF5cyB0aGUgZW1pc3Npb25zIG9mIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBieSBhbiBhbW91bnQgb2YgdGltZSBzcGVjaWZpZWQgYnkgdGhlIE9ic2VydmFibGUgcmV0dXJuZWQgYnlcblx0ICogYGRlbGF5RHVyYXRpb25TZWxlY3RvcmAuXG5cdCAqIEBtZXRob2QgZGVsYXlXaGVuXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuXHQgICAgaWYgKHN1YnNjcmlwdGlvbkRlbGF5KSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUodGhpcywgc3Vic2NyaXB0aW9uRGVsYXkpXG5cdCAgICAgICAgICAgIC5saWZ0KG5ldyBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuZGVsYXlXaGVuID0gZGVsYXlXaGVuO1xuXHR2YXIgRGVsYXlXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRGVsYXlXaGVuT3BlcmF0b3IoZGVsYXlEdXJhdGlvblNlbGVjdG9yKSB7XG5cdCAgICAgICAgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG5cdCAgICB9XG5cdCAgICBEZWxheVdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IERlbGF5V2hlblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGVsYXlXaGVuT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIERlbGF5V2hlblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKERlbGF5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBEZWxheVdoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkZWxheUR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zID0gW107XG5cdCAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcblx0ICAgIH1cblx0ICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQob3V0ZXJWYWx1ZSk7XG5cdCAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oaW5uZXJTdWIpO1xuXHQgICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG5cdCAgICB9O1xuXHQgICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihpbm5lclN1Yik7XG5cdCAgICAgICAgaWYgKHZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHZhciBkZWxheU5vdGlmaWVyID0gdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IodmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAoZGVsYXlOb3RpZmllcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50cnlEZWxheShkZWxheU5vdGlmaWVyLCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSWR4ID0gdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gbnVsbDtcblx0ICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWR4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWVzW3N1YnNjcmlwdGlvbklkeF07XG5cdCAgICAgICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbklkeCwgMSk7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWVzLnNwbGljZShzdWJzY3JpcHRpb25JZHgsIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICB9O1xuXHQgICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RGVsYXkgPSBmdW5jdGlvbiAoZGVsYXlOb3RpZmllciwgdmFsdWUpIHtcblx0ICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGRlbGF5Tm90aWZpZXIsIHZhbHVlKTtcblx0ICAgICAgICB0aGlzLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5wdXNoKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTtcblx0ICAgIH07XG5cdCAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS50cnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQgJiYgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGVsYXlXaGVuU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUoc291cmNlLCBzdWJzY3JpcHRpb25EZWxheSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uRGVsYXkgPSBzdWJzY3JpcHRpb25EZWxheTtcblx0ICAgIH1cblx0ICAgIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25EZWxheS5zdWJzY3JpYmUobmV3IFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGU7XG5cdH0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIocGFyZW50LCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgICAgICB0aGlzLnNvdXJjZVN1YnNjcmliZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodW51c2VkKSB7XG5cdCAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1NvdXJjZSgpO1xuXHQgICAgfTtcblx0ICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICB0aGlzLnBhcmVudC5lcnJvcihlcnIpO1xuXHQgICAgfTtcblx0ICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Tb3VyY2UoKTtcblx0ICAgIH07XG5cdCAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5zb3VyY2VTdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc291cmNlU3Vic2NyaWJlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMucGFyZW50KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1NCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgdHJ5Q2F0Y2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgZXJyb3JPYmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgYWxsIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRoYXQgYXJlIGRpc3RpbmN0IGJ5IGNvbXBhcmlzb24gZnJvbSB0aGUgcHJldmlvdXMgaXRlbS5cblx0ICogSWYgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGl0IHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoIGl0ZW0gdG8gdGVzdCBmb3Igd2hldGhlciBvciBub3QgdGhhdCB2YWx1ZSBzaG91bGQgYmUgZW1pdHRlZC5cblx0ICogSWYgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIGlzIG5vdCBwcm92aWRlZCwgYW4gZXF1YWxpdHkgY2hlY2sgaXMgdXNlZCBieSBkZWZhdWx0LlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY29tcGFyZV0gb3B0aW9uYWwgY29tcGFyaXNvbiBmdW5jdGlvbiBjYWxsZWQgdG8gdGVzdCBpZiBhbiBpdGVtIGlzIGRpc3RpbmN0IGZyb20gdGhlIHByZXZpb3VzIGl0ZW0gaW4gdGhlIHNvdXJjZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGggZGlzdGluY3QgdmFsdWVzLlxuXHQgKiBAbWV0aG9kIGRpc3RpbmN0VW50aWxDaGFuZ2VkXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuZGlzdGluY3RVbnRpbENoYW5nZWQgPSBkaXN0aW5jdFVudGlsQ2hhbmdlZDtcblx0dmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG5cdCAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvbXBhcmUsIHRoaXMua2V5U2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbXBhcmUsIGtleVNlbGVjdG9yKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLmhhc0tleSA9IGZhbHNlO1xuXHQgICAgICAgIGlmICh0eXBlb2YgY29tcGFyZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG5cdCAgICAgICAgcmV0dXJuIHggPT09IHk7XG5cdCAgICB9O1xuXHQgICAgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBrZXlTZWxlY3RvciA9IHRoaXMua2V5U2VsZWN0b3I7XG5cdCAgICAgICAgdmFyIGtleSA9IHZhbHVlO1xuXHQgICAgICAgIGlmIChrZXlTZWxlY3Rvcikge1xuXHQgICAgICAgICAgICBrZXkgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMua2V5U2VsZWN0b3IpKHZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKGtleSA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzS2V5KSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2godGhpcy5jb21wYXJlKSh0aGlzLmtleSwga2V5KTtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5oYXNLZXkgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoQm9vbGVhbihyZXN1bHQpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgICB0aGlzLmtleSA9IGtleTtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgZG9fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTU2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmRvID0gZG9fMS5fZG87XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTU2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogUGVyZm9ybSBhIHNpZGUgZWZmZWN0IGZvciBldmVyeSBlbWlzc2lvbiBvbiB0aGUgc291cmNlIE9ic2VydmFibGUsIGJ1dCByZXR1cm5cblx0ICogYW4gT2JzZXJ2YWJsZSB0aGF0IGlzIGlkZW50aWNhbCB0byB0aGUgc291cmNlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SW50ZXJjZXB0cyBlYWNoIGVtaXNzaW9uIG9uIHRoZSBzb3VyY2UgYW5kIHJ1bnMgYVxuXHQgKiBmdW5jdGlvbiwgYnV0IHJldHVybnMgYW4gb3V0cHV0IHdoaWNoIGlzIGlkZW50aWNhbCB0byB0aGUgc291cmNlLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9kby5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhIG1pcnJvcmVkIE9ic2VydmFibGUgb2YgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBidXQgbW9kaWZpZWQgc28gdGhhdFxuXHQgKiB0aGUgcHJvdmlkZWQgT2JzZXJ2ZXIgaXMgY2FsbGVkIHRvIHBlcmZvcm0gYSBzaWRlIGVmZmVjdCBmb3IgZXZlcnkgdmFsdWUsXG5cdCAqIGVycm9yLCBhbmQgY29tcGxldGlvbiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UuIEFueSBlcnJvcnMgdGhhdCBhcmUgdGhyb3duIGluXG5cdCAqIHRoZSBhZm9yZW1lbnRpb25lZCBPYnNlcnZlciBvciBoYW5kbGVycyBhcmUgc2FmZWx5IHNlbnQgZG93biB0aGUgZXJyb3IgcGF0aFxuXHQgKiBvZiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIFRoaXMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcgeW91ciBPYnNlcnZhYmxlcyBmb3IgdGhlIGNvcnJlY3QgdmFsdWVzXG5cdCAqIG9yIHBlcmZvcm1pbmcgb3RoZXIgc2lkZSBlZmZlY3RzLlxuXHQgKlxuXHQgKiBOb3RlOiB0aGlzIGlzIGRpZmZlcmVudCB0byBhIGBzdWJzY3JpYmVgIG9uIHRoZSBPYnNlcnZhYmxlLiBJZiB0aGUgT2JzZXJ2YWJsZVxuXHQgKiByZXR1cm5lZCBieSBgZG9gIGlzIG5vdCBzdWJzY3JpYmVkLCB0aGUgc2lkZSBlZmZlY3RzIHNwZWNpZmllZCBieSB0aGVcblx0ICogT2JzZXJ2ZXIgd2lsbCBuZXZlciBoYXBwZW4uIGBkb2AgdGhlcmVmb3JlIHNpbXBseSBzcGllcyBvbiBleGlzdGluZ1xuXHQgKiBleGVjdXRpb24sIGl0IGRvZXMgbm90IHRyaWdnZXIgYW4gZXhlY3V0aW9uIHRvIGhhcHBlbiBsaWtlIGBzdWJzY3JpYmVgIGRvZXMuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBldmVyeSBldmVyeSBjbGljayB0byB0aGUgY2xpZW50WCBwb3NpdGlvbiBvZiB0aGF0IGNsaWNrLCB3aGlsZSBhbHNvIGxvZ2dpbmcgdGhlIGNsaWNrIGV2ZW50PC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcG9zaXRpb25zID0gY2xpY2tzXG5cdCAqICAgLmRvKGV2ID0+IGNvbnNvbGUubG9nKGV2KSlcblx0ICogICAubWFwKGV2ID0+IGV2LmNsaWVudFgpO1xuXHQgKiBwb3NpdGlvbnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBtYXB9XG5cdCAqIEBzZWUge0BsaW5rIHN1YnNjcmliZX1cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZlcnxmdW5jdGlvbn0gW25leHRPck9ic2VydmVyXSBBIG5vcm1hbCBPYnNlcnZlciBvYmplY3Qgb3IgYVxuXHQgKiBjYWxsYmFjayBmb3IgYG5leHRgLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGZvciBlcnJvcnMgaW4gdGhlIHNvdXJjZS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gW2NvbXBsZXRlXSBDYWxsYmFjayBmb3IgdGhlIGNvbXBsZXRpb24gb2YgdGhlIHNvdXJjZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBpZGVudGljYWwgdG8gdGhlIHNvdXJjZSwgYnV0IHJ1bnMgdGhlXG5cdCAqIHNwZWNpZmllZCBPYnNlcnZlciBvciBjYWxsYmFjayhzKSBmb3IgZWFjaCBpdGVtLlxuXHQgKiBAbWV0aG9kIGRvXG5cdCAqIEBuYW1lIGRvXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBfZG8obmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSk7XG5cdH1cblx0ZXhwb3J0cy5fZG8gPSBfZG87XG5cdHZhciBEb09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIERvT3BlcmF0b3IobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuXHQgICAgICAgIHRoaXMubmV4dE9yT2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcblx0ICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG5cdCAgICAgICAgdGhpcy5jb21wbGV0ZSA9IGNvbXBsZXRlO1xuXHQgICAgfVxuXHQgICAgRG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IERvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5leHRPck9ic2VydmVyLCB0aGlzLmVycm9yLCB0aGlzLmNvbXBsZXRlKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIERvT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIERvU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHZhciBzYWZlU3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcblx0ICAgICAgICBzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuYWRkKHNhZmVTdWJzY3JpYmVyKTtcblx0ICAgICAgICB0aGlzLnNhZmVTdWJzY3JpYmVyID0gc2FmZVN1YnNjcmliZXI7XG5cdCAgICB9XG5cdCAgICBEb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHNhZmVTdWJzY3JpYmVyID0gdGhpcy5zYWZlU3Vic2NyaWJlcjtcblx0ICAgICAgICBzYWZlU3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcblx0ICAgICAgICBpZiAoc2FmZVN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3Ioc2FmZVN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdmFyIHNhZmVTdWJzY3JpYmVyID0gdGhpcy5zYWZlU3Vic2NyaWJlcjtcblx0ICAgICAgICBzYWZlU3Vic2NyaWJlci5lcnJvcihlcnIpO1xuXHQgICAgICAgIGlmIChzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd24pIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIERvU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzYWZlU3Vic2NyaWJlciA9IHRoaXMuc2FmZVN1YnNjcmliZXI7XG5cdCAgICAgICAgc2FmZVN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0ICAgICAgICBpZiAoc2FmZVN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3Ioc2FmZVN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRG9TdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTU3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBleHBhbmRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTU4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmV4cGFuZCA9IGV4cGFuZF8xLmV4cGFuZDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwYW5kLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTU4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIHRyeUNhdGNoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0dmFyIGVycm9yT2JqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgd2hlcmUgZm9yIGVhY2ggaXRlbSBpbiB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZSBzdXBwbGllZCBmdW5jdGlvbiBpcyBhcHBsaWVkIHRvIGVhY2ggaXRlbSxcblx0ICogcmVzdWx0aW5nIGluIGEgbmV3IHZhbHVlIHRvIHRoZW4gYmUgYXBwbGllZCBhZ2FpbiB3aXRoIHRoZSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvamVjdCB0aGUgZnVuY3Rpb24gZm9yIHByb2plY3RpbmcgdGhlIG5leHQgZW1pdHRlZCBpdGVtIG9mIHRoZSBPYnNlcnZhYmxlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnRdIHRoZSBtYXggbnVtYmVyIG9mIG9ic2VydmFibGVzIHRoYXQgY2FuIGJlIGNyZWF0ZWQgY29uY3VycmVudGx5LiBkZWZhdWx0cyB0byBpbmZpbml0eS5cblx0ICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIFRoZSBTY2hlZHVsZXIgdG8gdXNlIGZvciBtYW5hZ2luZyB0aGUgZXhwYW5zaW9ucy5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSBjb250YWluaW5nIHRoZSBleHBhbnNpb25zIG9mIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCBleHBhbmRcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGV4cGFuZChwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcblx0ICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuXHQgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IHVuZGVmaW5lZDsgfVxuXHQgICAgY29uY3VycmVudCA9IChjb25jdXJyZW50IHx8IDApIDwgMSA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IGNvbmN1cnJlbnQ7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBFeHBhbmRPcGVyYXRvcihwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpKTtcblx0fVxuXHRleHBvcnRzLmV4cGFuZCA9IGV4cGFuZDtcblx0dmFyIEV4cGFuZE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG5cdCAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgIH1cblx0ICAgIEV4cGFuZE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRXhwYW5kU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMuY29uY3VycmVudCwgdGhpcy5zY2hlZHVsZXIpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gRXhwYW5kT3BlcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRXhwYW5kT3BlcmF0b3IgPSBFeHBhbmRPcGVyYXRvcjtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgRXhwYW5kU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRXhwYW5kU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEV4cGFuZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuXHQgICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKGNvbmN1cnJlbnQgPCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcblx0ICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuXHQgICAgICAgIHZhciBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXIsIHJlc3VsdCA9IGFyZy5yZXN1bHQsIHZhbHVlID0gYXJnLnZhbHVlLCBpbmRleCA9IGFyZy5pbmRleDtcblx0ICAgICAgICBzdWJzY3JpYmVyLnN1YnNjcmliZVRvUHJvamVjdGlvbihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG5cdCAgICB9O1xuXHQgICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGlmIChkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcblx0ICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMucHJvamVjdCkodmFsdWUsIGluZGV4KTtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5zY2hlZHVsZXIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgcmVzdWx0OiByZXN1bHQsIHZhbHVlOiB2YWx1ZSwgaW5kZXg6IGluZGV4IH07XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoLCAwLCBzdGF0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUrKztcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdmFsdWUsIGluZGV4KSk7XG5cdCAgICB9O1xuXHQgICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5fbmV4dChpbm5lclZhbHVlKTtcblx0ICAgIH07XG5cdCAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0ICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUtLTtcblx0ICAgICAgICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRXhwYW5kU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0ZXhwb3J0cy5FeHBhbmRTdWJzY3JpYmVyID0gRXhwYW5kU3Vic2NyaWJlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwYW5kLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTU5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBmaWx0ZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYwKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZpbHRlciA9IGZpbHRlcl8xLmZpbHRlcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTYwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogRmlsdGVyIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGJ5IG9ubHkgZW1pdHRpbmcgdGhvc2UgdGhhdFxuXHQgKiBzYXRpc2Z5IGEgc3BlY2lmaWVkIHByZWRpY2F0ZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxpa2Vcblx0ICogW0FycmF5LnByb3RvdHlwZS5maWx0ZXIoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVyKSxcblx0ICogaXQgb25seSBlbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBpZiBpdCBwYXNzZXMgYSBjcml0ZXJpb24gZnVuY3Rpb24uPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2ZpbHRlci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogU2ltaWxhciB0byB0aGUgd2VsbC1rbm93biBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kLCB0aGlzIG9wZXJhdG9yXG5cdCAqIHRha2VzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcGFzc2VzIHRoZW0gdGhyb3VnaCBhIGBwcmVkaWNhdGVgXG5cdCAqIGZ1bmN0aW9uIGFuZCBvbmx5IGVtaXRzIHRob3NlIHZhbHVlcyB0aGF0IHlpZWxkZWQgYHRydWVgLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IG9ubHkgY2xpY2sgZXZlbnRzIHdob3NlIHRhcmdldCB3YXMgYSBESVYgZWxlbWVudDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGNsaWNrc09uRGl2cyA9IGNsaWNrcy5maWx0ZXIoZXYgPT4gZXYudGFyZ2V0LnRhZ05hbWUgPT09ICdESVYnKTtcblx0ICogY2xpY2tzT25EaXZzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZGlzdGluY3R9XG5cdCAqIEBzZWUge0BsaW5rIGRpc3RpbmN0S2V5fVxuXHQgKiBAc2VlIHtAbGluayBkaXN0aW5jdFVudGlsQ2hhbmdlZH1cblx0ICogQHNlZSB7QGxpbmsgZGlzdGluY3RVbnRpbEtleUNoYW5nZWR9XG5cdCAqIEBzZWUge0BsaW5rIGlnbm9yZUVsZW1lbnRzfVxuXHQgKiBAc2VlIHtAbGluayBwYXJ0aXRpb259XG5cdCAqIEBzZWUge0BsaW5rIHNraXB9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGUgQSBmdW5jdGlvbiB0aGF0XG5cdCAqIGV2YWx1YXRlcyBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBpdCByZXR1cm5zIGB0cnVlYCxcblx0ICogdGhlIHZhbHVlIGlzIGVtaXR0ZWQsIGlmIGBmYWxzZWAgdGhlIHZhbHVlIGlzIG5vdCBwYXNzZWQgdG8gdGhlIG91dHB1dFxuXHQgKiBPYnNlcnZhYmxlLiBUaGUgYGluZGV4YCBwYXJhbWV0ZXIgaXMgdGhlIG51bWJlciBgaWAgZm9yIHRoZSBpLXRoIHNvdXJjZVxuXHQgKiBlbWlzc2lvbiB0aGF0IGhhcyBoYXBwZW5lZCBzaW5jZSB0aGUgc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXJcblx0ICogYDBgLlxuXHQgKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRldGVybWluZSB0aGUgdmFsdWUgb2YgYHRoaXNgXG5cdCAqIGluIHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIHRoYXQgd2VyZVxuXHQgKiBhbGxvd2VkIGJ5IHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cblx0ICogQG1ldGhvZCBmaWx0ZXJcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykpO1xuXHR9XG5cdGV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuXHR2YXIgRmlsdGVyT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRmlsdGVyT3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnKSB7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcblx0ICAgIH1cblx0ICAgIEZpbHRlck9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRmlsdGVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZpbHRlck9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBGaWx0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhGaWx0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRmlsdGVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuXHQgICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IDA7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICB9XG5cdCAgICAvLyB0aGUgdHJ5IGNhdGNoIGJsb2NrIGJlbG93IGlzIGxlZnQgc3BlY2lmaWNhbGx5IGZvclxuXHQgICAgLy8gb3B0aW1pemF0aW9uIGFuZCBwZXJmIHJlYXNvbnMuIGEgdHJ5Q2F0Y2hlciBpcyBub3QgbmVjZXNzYXJ5IGhlcmUuXG5cdCAgICBGaWx0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmNvdW50KyspO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocmVzdWx0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBGaWx0ZXJTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE2MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgZmluYWxseV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZmluYWxseSA9IGZpbmFsbHlfMS5fZmluYWxseTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluYWxseS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE2MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIFN1YnNjcmlwdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IHdpbGwgY2FsbCBhIHNwZWNpZmllZCBmdW5jdGlvbiB3aGVuXG5cdCAqIHRoZSBzb3VyY2UgdGVybWluYXRlcyBvbiBjb21wbGV0ZSBvciBlcnJvci5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZmluYWxseVNlbGVjdG9yIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHNvdXJjZSB0ZXJtaW5hdGVzLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgc291cmNlLCBidXQgd2lsbCBjYWxsIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24gb24gdGVybWluYXRpb24uXG5cdCAqIEBtZXRob2QgZmluYWxseVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gX2ZpbmFsbHkoZmluYWxseVNlbGVjdG9yKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBGaW5hbGx5T3BlcmF0b3IoZmluYWxseVNlbGVjdG9yKSk7XG5cdH1cblx0ZXhwb3J0cy5fZmluYWxseSA9IF9maW5hbGx5O1xuXHR2YXIgRmluYWxseU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEZpbmFsbHlPcGVyYXRvcihmaW5hbGx5U2VsZWN0b3IpIHtcblx0ICAgICAgICB0aGlzLmZpbmFsbHlTZWxlY3RvciA9IGZpbmFsbHlTZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIEZpbmFsbHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEZpbmFsbHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZmluYWxseVNlbGVjdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZpbmFsbHlPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgRmluYWxseVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEZpbmFsbHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRmluYWxseVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGZpbmFsbHlTZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmFkZChuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKGZpbmFsbHlTZWxlY3RvcikpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEZpbmFsbHlTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmFsbHkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGZpcnN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5maXJzdCA9IGZpcnN0XzEuZmlyc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTY0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgRW1wdHlFcnJvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjUpO1xuXHQvKipcblx0ICogRW1pdHMgb25seSB0aGUgZmlyc3QgdmFsdWUgKG9yIHRoZSBmaXJzdCB2YWx1ZSB0aGF0IG1lZXRzIHNvbWUgY29uZGl0aW9uKVxuXHQgKiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkVtaXRzIG9ubHkgdGhlIGZpcnN0IHZhbHVlLiBPciBlbWl0cyBvbmx5IHRoZSBmaXJzdFxuXHQgKiB2YWx1ZSB0aGF0IHBhc3NlcyBzb21lIHRlc3QuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2ZpcnN0LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGBmaXJzdGAgZW1pdHMgdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSwgdGhlbiBjb21wbGV0ZXMuIElmIGNhbGxlZCB3aXRoIGEgYHByZWRpY2F0ZWAgZnVuY3Rpb24sIGBmaXJzdGBcblx0ICogZW1pdHMgdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSBzb3VyY2UgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgY29uZGl0aW9uLiBJdFxuXHQgKiBtYXkgYWxzbyB0YWtlIGEgYHJlc3VsdFNlbGVjdG9yYCBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSBvdXRwdXQgdmFsdWUgZnJvbVxuXHQgKiB0aGUgaW5wdXQgdmFsdWUsIGFuZCBhIGBkZWZhdWx0VmFsdWVgIHRvIGVtaXQgaW4gY2FzZSB0aGUgc291cmNlIGNvbXBsZXRlc1xuXHQgKiBiZWZvcmUgaXQgaXMgYWJsZSB0byBlbWl0IGEgdmFsaWQgdmFsdWUuIFRocm93cyBhbiBlcnJvciBpZiBgZGVmYXVsdFZhbHVlYFxuXHQgKiB3YXMgbm90IHByb3ZpZGVkIGFuZCBhIG1hdGNoaW5nIGVsZW1lbnQgaXMgbm90IGZvdW5kLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IG9ubHkgdGhlIGZpcnN0IGNsaWNrIHRoYXQgaGFwcGVucyBvbiB0aGUgRE9NPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLmZpcnN0KCk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIHRoZSBmaXJzdCBjbGljayB0aGF0IGhhcHBlbnMgb24gYSBESVY8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3MuZmlyc3QoZXYgPT4gZXYudGFyZ2V0LnRhZ05hbWUgPT09ICdESVYnKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZmlsdGVyfVxuXHQgKiBAc2VlIHtAbGluayBmaW5kfVxuXHQgKiBAc2VlIHtAbGluayB0YWtlfVxuXHQgKlxuXHQgKiBAdGhyb3dzIHtFbXB0eUVycm9yfSBEZWxpdmVycyBhbiBFbXB0eUVycm9yIHRvIHRoZSBPYnNlcnZlcidzIGBlcnJvcmBcblx0ICogY2FsbGJhY2sgaWYgdGhlIE9ic2VydmFibGUgY29tcGxldGVzIGJlZm9yZSBhbnkgYG5leHRgIG5vdGlmaWNhdGlvbiB3YXMgc2VudC5cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogYm9vbGVhbn0gW3ByZWRpY2F0ZV1cblx0ICogQW4gb3B0aW9uYWwgZnVuY3Rpb24gY2FsbGVkIHdpdGggZWFjaCBpdGVtIHRvIHRlc3QgZm9yIGNvbmRpdGlvbiBtYXRjaGluZy5cblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IFJ9IFtyZXN1bHRTZWxlY3Rvcl0gQSBmdW5jdGlvbiB0b1xuXHQgKiBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuXHQgKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGlzXG5cdCAqIGZ1bmN0aW9uIGFyZTpcblx0ICogLSBgdmFsdWVgOiB0aGUgdmFsdWUgdGhhdCB3YXMgZW1pdHRlZCBvbiB0aGUgc291cmNlLlxuXHQgKiAtIGBpbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHNvdXJjZS5cblx0ICogQHBhcmFtIHtSfSBbZGVmYXVsdFZhbHVlXSBUaGUgZGVmYXVsdCB2YWx1ZSBlbWl0dGVkIGluIGNhc2Ugbm8gdmFsaWQgdmFsdWVcblx0ICogd2FzIGZvdW5kIG9uIHRoZSBzb3VyY2UuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8VHxSPn0gYW4gT2JzZXJ2YWJsZSBvZiB0aGUgZmlyc3QgaXRlbSB0aGF0IG1hdGNoZXMgdGhlXG5cdCAqIGNvbmRpdGlvbi5cblx0ICogQG1ldGhvZCBmaXJzdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gZmlyc3QocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBGaXJzdE9wZXJhdG9yKHByZWRpY2F0ZSwgcmVzdWx0U2VsZWN0b3IsIGRlZmF1bHRWYWx1ZSwgdGhpcykpO1xuXHR9XG5cdGV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcblx0dmFyIEZpcnN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRmlyc3RPcGVyYXRvcihwcmVkaWNhdGUsIHJlc3VsdFNlbGVjdG9yLCBkZWZhdWx0VmFsdWUsIHNvdXJjZSkge1xuXHQgICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuXHQgICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIEZpcnN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRmlyc3RTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5yZXN1bHRTZWxlY3RvciwgdGhpcy5kZWZhdWx0VmFsdWUsIHRoaXMuc291cmNlKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZpcnN0T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEZpcnN0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoRmlyc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRmlyc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHJlc3VsdFNlbGVjdG9yLCBkZWZhdWx0VmFsdWUsIHNvdXJjZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG5cdCAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RyeVByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fZW1pdCh2YWx1ZSwgaW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgICAgICAgICB0aGlzLl9lbWl0KHZhbHVlLCBpbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2VtaXQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG5cdCAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9lbWl0RmluYWwodmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVJlc3VsdFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9lbWl0RmluYWwocmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICBGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl9lbWl0RmluYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuXHQgICAgfTtcblx0ICAgIEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG5cdCAgICAgICAgaWYgKCF0aGlzLmhhc0NvbXBsZXRlZCAmJiB0eXBlb2YgdGhpcy5kZWZhdWx0VmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodGhpcy5kZWZhdWx0VmFsdWUpO1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICghdGhpcy5oYXNDb21wbGV0ZWQpIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IobmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZpcnN0U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE2NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdC8qKlxuXHQgKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBPYnNlcnZhYmxlIG9yIGEgc2VxdWVuY2Ugd2FzIHF1ZXJpZWQgYnV0IGhhcyBub1xuXHQgKiBlbGVtZW50cy5cblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZmlyc3R9XG5cdCAqIEBzZWUge0BsaW5rIGxhc3R9XG5cdCAqIEBzZWUge0BsaW5rIHNpbmdsZX1cblx0ICpcblx0ICogQGNsYXNzIEVtcHR5RXJyb3Jcblx0ICovXG5cdHZhciBFbXB0eUVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhFbXB0eUVycm9yLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gRW1wdHlFcnJvcigpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCAnbm8gZWxlbWVudHMgaW4gc2VxdWVuY2UnKTtcblx0ICAgICAgICB0aGlzLm5hbWUgPSAnRW1wdHlFcnJvcic7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRW1wdHlFcnJvcjtcblx0fShFcnJvcikpO1xuXHRleHBvcnRzLkVtcHR5RXJyb3IgPSBFbXB0eUVycm9yO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1FbXB0eUVycm9yLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTY2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBncm91cEJ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nyk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5ncm91cEJ5ID0gZ3JvdXBCeV8xLmdyb3VwQnk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwQnkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBTdWJzY3JpcHRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciBNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY4KTtcblx0dmFyIEZhc3RNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcwKTtcblx0LyoqXG5cdCAqIEdyb3VwcyB0aGUgaXRlbXMgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlIGFjY29yZGluZyB0byBhIHNwZWNpZmllZCBjcml0ZXJpb24sXG5cdCAqIGFuZCBlbWl0cyB0aGVzZSBncm91cGVkIGl0ZW1zIGFzIGBHcm91cGVkT2JzZXJ2YWJsZXNgLCBvbmVcblx0ICoge0BsaW5rIEdyb3VwZWRPYnNlcnZhYmxlfSBwZXIgZ3JvdXAuXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvZ3JvdXBCeS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IEt9IGtleVNlbGVjdG9yIGEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB0aGUga2V5XG5cdCAqIGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQpOiBSfSBbZWxlbWVudFNlbGVjdG9yXSBhIGZ1bmN0aW9uIHRoYXQgZXh0cmFjdHMgdGhlXG5cdCAqIHJldHVybiBlbGVtZW50IGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oZ3JvdXBlZDogR3JvdXBlZE9ic2VydmFibGU8SyxSPik6IE9ic2VydmFibGU8YW55Pn0gW2R1cmF0aW9uU2VsZWN0b3JdXG5cdCAqIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdG8gZGV0ZXJtaW5lIGhvdyBsb25nIGVhY2ggZ3JvdXAgc2hvdWxkXG5cdCAqIGV4aXN0LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPEdyb3VwZWRPYnNlcnZhYmxlPEssUj4+fSBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHNcblx0ICogR3JvdXBlZE9ic2VydmFibGVzLCBlYWNoIG9mIHdoaWNoIGNvcnJlc3BvbmRzIHRvIGEgdW5pcXVlIGtleSB2YWx1ZSBhbmQgZWFjaFxuXHQgKiBvZiB3aGljaCBlbWl0cyB0aG9zZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aGF0IHNoYXJlIHRoYXQga2V5XG5cdCAqIHZhbHVlLlxuXHQgKiBAbWV0aG9kIGdyb3VwQnlcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGdyb3VwQnkoa2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgZHVyYXRpb25TZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKHRoaXMsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IpKTtcblx0fVxuXHRleHBvcnRzLmdyb3VwQnkgPSBncm91cEJ5O1xuXHR2YXIgR3JvdXBCeU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEdyb3VwQnlPcGVyYXRvcihzb3VyY2UsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIEdyb3VwQnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEdyb3VwQnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZWxlbWVudFNlbGVjdG9yLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gR3JvdXBCeU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBHcm91cEJ5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoR3JvdXBCeVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBHcm91cEJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgZHVyYXRpb25TZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLmVsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuZ3JvdXBzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmNvdW50ID0gMDtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG5cdCAgICAgICAgdGhpcy5hZGQoZGVzdGluYXRpb24pO1xuXHQgICAgfVxuXHQgICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGtleTtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBrZXkgPSB0aGlzLmtleVNlbGVjdG9yKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fZ3JvdXAodmFsdWUsIGtleSk7XG5cdCAgICB9O1xuXHQgICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9ncm91cCA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG5cdCAgICAgICAgdmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXHQgICAgICAgIGlmICghZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgIGdyb3VwcyA9IHRoaXMuZ3JvdXBzID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBuZXcgRmFzdE1hcF8xLkZhc3RNYXAoKSA6IG5ldyBNYXBfMS5NYXAoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzLmdldChrZXkpO1xuXHQgICAgICAgIGlmICghZ3JvdXApIHtcblx0ICAgICAgICAgICAgZ3JvdXBzLnNldChrZXksIGdyb3VwID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpO1xuXHQgICAgICAgICAgICB2YXIgZ3JvdXBlZE9ic2VydmFibGUgPSBuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCwgdGhpcyk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdER1cmF0aW9uKGtleSwgZ3JvdXApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChncm91cGVkT2JzZXJ2YWJsZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmVsZW1lbnRTZWxlY3Rvcikge1xuXHQgICAgICAgICAgICB0aGlzLl9zZWxlY3RFbGVtZW50KHZhbHVlLCBncm91cCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnRyeUdyb3VwTmV4dCh2YWx1ZSwgZ3JvdXApO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX3NlbGVjdEVsZW1lbnQgPSBmdW5jdGlvbiAodmFsdWUsIGdyb3VwKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmVsZW1lbnRTZWxlY3Rvcih2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMudHJ5R3JvdXBOZXh0KHJlc3VsdCwgZ3JvdXApO1xuXHQgICAgfTtcblx0ICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fc2VsZWN0RHVyYXRpb24gPSBmdW5jdGlvbiAoa2V5LCBncm91cCkge1xuXHQgICAgICAgIHZhciBkdXJhdGlvbjtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25TZWxlY3RvcihuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmFkZChkdXJhdGlvbi5zdWJzY3JpYmUobmV3IEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHRoaXMpKSk7XG5cdCAgICB9O1xuXHQgICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUdyb3VwTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgZ3JvdXApIHtcblx0ICAgICAgICBpZiAoIWdyb3VwLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIGdyb3VwLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3Vwcztcblx0ICAgICAgICBpZiAoZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG5cdCAgICAgICAgICAgICAgICBncm91cC5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3Vwcztcblx0ICAgICAgICBpZiAoZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG5cdCAgICAgICAgICAgICAgICBncm91cC5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUucmVtb3ZlR3JvdXAgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgdGhpcy5ncm91cHMuZGVsZXRlKGtleSk7XG5cdCAgICB9O1xuXHQgICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCAmJiAhdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYXR0ZW1wdGVkVG9VbnN1YnNjcmliZSA9IHRydWU7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEdyb3VwQnlTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhHcm91cER1cmF0aW9uU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHBhcmVudCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuXHQgICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgIH1cblx0ICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMudHJ5RXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdmFyIGdyb3VwID0gdGhpcy5ncm91cDtcblx0ICAgICAgICBpZiAoIWdyb3VwLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIGdyb3VwLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUdyb3VwKHRoaXMua2V5KTtcblx0ICAgIH07XG5cdCAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGdyb3VwID0gdGhpcy5ncm91cDtcblx0ICAgICAgICBpZiAoIWdyb3VwLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIGdyb3VwLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUdyb3VwKHRoaXMua2V5KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gR3JvdXBEdXJhdGlvblN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0LyoqXG5cdCAqIEFuIE9ic2VydmFibGUgcmVwcmVzZW50aW5nIHZhbHVlcyBiZWxvbmdpbmcgdG8gdGhlIHNhbWUgZ3JvdXAgcmVwcmVzZW50ZWQgYnlcblx0ICogYSBjb21tb24ga2V5LiBUaGUgdmFsdWVzIGVtaXR0ZWQgYnkgYSBHcm91cGVkT2JzZXJ2YWJsZSBjb21lIGZyb20gdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlLiBUaGUgY29tbW9uIGtleSBpcyBhdmFpbGFibGUgYXMgdGhlIGZpZWxkIGBrZXlgIG9uIGFcblx0ICogR3JvdXBlZE9ic2VydmFibGUgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBjbGFzcyBHcm91cGVkT2JzZXJ2YWJsZTxLLCBUPlxuXHQgKi9cblx0dmFyIEdyb3VwZWRPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhHcm91cGVkT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEdyb3VwZWRPYnNlcnZhYmxlKGtleSwgZ3JvdXBTdWJqZWN0LCByZWZDb3VudFN1YnNjcmlwdGlvbikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuXHQgICAgICAgIHRoaXMuZ3JvdXBTdWJqZWN0ID0gZ3JvdXBTdWJqZWN0O1xuXHQgICAgICAgIHRoaXMucmVmQ291bnRTdWJzY3JpcHRpb24gPSByZWZDb3VudFN1YnNjcmlwdGlvbjtcblx0ICAgIH1cblx0ICAgIEdyb3VwZWRPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcblx0ICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuXHQgICAgICAgIHZhciBfYSA9IHRoaXMsIHJlZkNvdW50U3Vic2NyaXB0aW9uID0gX2EucmVmQ291bnRTdWJzY3JpcHRpb24sIGdyb3VwU3ViamVjdCA9IF9hLmdyb3VwU3ViamVjdDtcblx0ICAgICAgICBpZiAocmVmQ291bnRTdWJzY3JpcHRpb24gJiYgIXJlZkNvdW50U3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQobmV3IElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24ocmVmQ291bnRTdWJzY3JpcHRpb24pKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChncm91cFN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcblx0ICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBHcm91cGVkT2JzZXJ2YWJsZTtcblx0fShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuXHRleHBvcnRzLkdyb3VwZWRPYnNlcnZhYmxlID0gR3JvdXBlZE9ic2VydmFibGU7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24sIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uKHBhcmVudCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHQgICAgICAgIHBhcmVudC5jb3VudCsrO1xuXHQgICAgfVxuXHQgICAgSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXHQgICAgICAgIGlmICghcGFyZW50LmlzVW5zdWJzY3JpYmVkICYmICF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgcGFyZW50LmNvdW50IC09IDE7XG5cdCAgICAgICAgICAgIGlmIChwYXJlbnQuY291bnQgPT09IDAgJiYgcGFyZW50LmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUpIHtcblx0ICAgICAgICAgICAgICAgIHBhcmVudC51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uO1xuXHR9KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1ncm91cEJ5LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTY4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBNYXBQb2x5ZmlsbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjkpO1xuXHRleHBvcnRzLk1hcCA9IHJvb3RfMS5yb290Lk1hcCB8fCAoZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFwUG9seWZpbGxfMS5NYXBQb2x5ZmlsbDsgfSkoKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTY5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE1hcFBvbHlmaWxsID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1hcFBvbHlmaWxsKCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG5cdCAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XG5cdCAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuXHQgICAgfVxuXHQgICAgTWFwUG9seWZpbGwucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuXHQgICAgICAgIHJldHVybiBpID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMuX3ZhbHVlc1tpXTtcblx0ICAgIH07XG5cdCAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuXHQgICAgICAgIGlmIChpID09PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcblx0ICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godmFsdWUpO1xuXHQgICAgICAgICAgICB0aGlzLnNpemUrKztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpXSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgIHZhciBpID0gdGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG5cdCAgICAgICAgaWYgKGkgPT09IC0xKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fdmFsdWVzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICB0aGlzLl9rZXlzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICB0aGlzLnNpemUtLTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH07XG5cdCAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGggPSAwO1xuXHQgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGggPSAwO1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG5cdCAgICB9O1xuXHQgICAgTWFwUG9seWZpbGwucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2IsIHRoaXNBcmcpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgIGNiLmNhbGwodGhpc0FyZywgdGhpcy5fdmFsdWVzW2ldLCB0aGlzLl9rZXlzW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hcFBvbHlmaWxsO1xuXHR9KCkpO1xuXHRleHBvcnRzLk1hcFBvbHlmaWxsID0gTWFwUG9seWZpbGw7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPU1hcFBvbHlmaWxsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTcwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEZhc3RNYXAgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRmFzdE1hcCgpIHtcblx0ICAgICAgICB0aGlzLnZhbHVlcyA9IHt9O1xuXHQgICAgfVxuXHQgICAgRmFzdE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgIHRoaXMudmFsdWVzW2tleV0gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfTtcblx0ICAgIEZhc3RNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy52YWx1ZXNba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIEZhc3RNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNba2V5XTtcblx0ICAgIH07XG5cdCAgICBGYXN0TWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNiLCB0aGlzQXJnKSB7XG5cdCAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZXMpIHtcblx0ICAgICAgICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHZhbHVlc1trZXldICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBjYi5jYWxsKHRoaXNBcmcsIHZhbHVlc1trZXldLCBrZXkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIEZhc3RNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0ge307XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEZhc3RNYXA7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRmFzdE1hcCA9IEZhc3RNYXA7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhc3RNYXAuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGlnbm9yZUVsZW1lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Mik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5pZ25vcmVFbGVtZW50cyA9IGlnbm9yZUVsZW1lbnRzXzEuaWdub3JlRWxlbWVudHM7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZUVsZW1lbnRzLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTcyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgbm9vcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7XG5cdC8qKlxuXHQgKiBJZ25vcmVzIGFsbCBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBhbmQgb25seSBwYXNzZXMgY2FsbHMgb2YgYGNvbXBsZXRlYCBvciBgZXJyb3JgLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2lnbm9yZUVsZW1lbnRzLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBlbXB0eSBPYnNlcnZhYmxlIHRoYXQgb25seSBjYWxscyBgY29tcGxldGVgXG5cdCAqIG9yIGBlcnJvcmAsIGJhc2VkIG9uIHdoaWNoIG9uZSBpcyBjYWxsZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIGlnbm9yZUVsZW1lbnRzXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBpZ25vcmVFbGVtZW50cygpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSk7XG5cdH1cblx0ZXhwb3J0cy5pZ25vcmVFbGVtZW50cyA9IGlnbm9yZUVsZW1lbnRzO1xuXHQ7XG5cdHZhciBJZ25vcmVFbGVtZW50c09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSB7XG5cdCAgICB9XG5cdCAgICBJZ25vcmVFbGVtZW50c09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gSWdub3JlRWxlbWVudHNPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoKSB7XG5cdCAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgICBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHVudXNlZCkge1xuXHQgICAgICAgIG5vb3BfMS5ub29wKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE3MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgYXVkaXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc0KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmF1ZGl0ID0gYXVkaXRfMS5hdWRpdDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgdHJ5Q2F0Y2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgZXJyb3JPYmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIElnbm9yZXMgc291cmNlIHZhbHVlcyBmb3IgYSBkdXJhdGlvbiBkZXRlcm1pbmVkIGJ5IGFub3RoZXIgT2JzZXJ2YWJsZSwgdGhlblxuXHQgKiBlbWl0cyB0aGUgbW9zdCByZWNlbnQgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZW4gcmVwZWF0cyB0aGlzXG5cdCAqIHByb2Nlc3MuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGF1ZGl0VGltZX0sIGJ1dCB0aGUgc2lsZW5jaW5nXG5cdCAqIGR1cmF0aW9uIGlzIGRldGVybWluZWQgYnkgYSBzZWNvbmQgT2JzZXJ2YWJsZS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvYXVkaXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBhdWRpdGAgaXMgc2ltaWxhciB0byBgdGhyb3R0bGVgLCBidXQgZW1pdHMgdGhlIGxhc3QgdmFsdWUgZnJvbSB0aGUgc2lsZW5jZWRcblx0ICogdGltZSB3aW5kb3csIGluc3RlYWQgb2YgdGhlIGZpcnN0IHZhbHVlLiBgYXVkaXRgIGVtaXRzIHRoZSBtb3N0IHJlY2VudCB2YWx1ZVxuXHQgKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYXMgc29vbiBhcyBpdHMgaW50ZXJuYWxcblx0ICogdGltZXIgYmVjb21lcyBkaXNhYmxlZCwgYW5kIGlnbm9yZXMgc291cmNlIHZhbHVlcyB3aGlsZSB0aGUgdGltZXIgaXMgZW5hYmxlZC5cblx0ICogSW5pdGlhbGx5LCB0aGUgdGltZXIgaXMgZGlzYWJsZWQuIEFzIHNvb24gYXMgdGhlIGZpcnN0IHNvdXJjZSB2YWx1ZSBhcnJpdmVzLFxuXHQgKiB0aGUgdGltZXIgaXMgZW5hYmxlZCBieSBjYWxsaW5nIHRoZSBgZHVyYXRpb25TZWxlY3RvcmAgZnVuY3Rpb24gd2l0aCB0aGVcblx0ICogc291cmNlIHZhbHVlLCB3aGljaCByZXR1cm5zIHRoZSBcImR1cmF0aW9uXCIgT2JzZXJ2YWJsZS4gV2hlbiB0aGUgZHVyYXRpb25cblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcywgdGhlIHRpbWVyIGlzIGRpc2FibGVkLCB0aGVuIHRoZSBtb3N0XG5cdCAqIHJlY2VudCBzb3VyY2UgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGlzIHByb2Nlc3Ncblx0ICogcmVwZWF0cyBmb3IgdGhlIG5leHQgc291cmNlIHZhbHVlLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrcyBhdCBhIHJhdGUgb2YgYXQgbW9zdCBvbmUgY2xpY2sgcGVyIHNlY29uZDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy5hdWRpdChldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYXVkaXRUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBkZWJvdW5jZX1cblx0ICogQHNlZSB7QGxpbmsgZGVsYXlXaGVufVxuXHQgKiBAc2VlIHtAbGluayBzYW1wbGV9XG5cdCAqIEBzZWUge0BsaW5rIHRocm90dGxlfVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUKTogT2JzZXJ2YWJsZXxQcm9taXNlfSBkdXJhdGlvblNlbGVjdG9yIEEgZnVuY3Rpb25cblx0ICogdGhhdCByZWNlaXZlcyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBmb3IgY29tcHV0aW5nIHRoZSBzaWxlbmNpbmdcblx0ICogZHVyYXRpb24sIHJldHVybmVkIGFzIGFuIE9ic2VydmFibGUgb3IgYSBQcm9taXNlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgcGVyZm9ybXMgcmF0ZS1saW1pdGluZyBvZlxuXHQgKiBlbWlzc2lvbnMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBtZXRob2QgYXVkaXRcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGF1ZGl0KGR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuYXVkaXQgPSBhdWRpdDtcblx0dmFyIEF1ZGl0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQXVkaXRPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSB7XG5cdCAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIEF1ZGl0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBBdWRpdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEF1ZGl0T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIEF1ZGl0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQXVkaXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQXVkaXRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdXJhdGlvblNlbGVjdG9yKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2godGhpcy5kdXJhdGlvblNlbGVjdG9yKSh2YWx1ZSk7XG5cdCAgICAgICAgICAgIGlmIChkdXJhdGlvbiA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBfYSA9IHRoaXMsIHZhbHVlID0gX2EudmFsdWUsIGhhc1ZhbHVlID0gX2EuaGFzVmFsdWUsIHRocm90dGxlZCA9IF9hLnRocm90dGxlZDtcblx0ICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCkge1xuXHQgICAgICAgIHRoaXMuY2xlYXJUaHJvdHRsZSgpO1xuXHQgICAgfTtcblx0ICAgIEF1ZGl0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEF1ZGl0U3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGF1ZGl0VGltZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuYXVkaXRUaW1lID0gYXVkaXRUaW1lXzEuYXVkaXRUaW1lO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdFRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgYXN5bmNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBJZ25vcmVzIHNvdXJjZSB2YWx1ZXMgZm9yIGBkdXJhdGlvbmAgbWlsbGlzZWNvbmRzLCB0aGVuIGVtaXRzIHRoZSBtb3N0IHJlY2VudFxuXHQgKiB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgdGhlbiByZXBlYXRzIHRoaXMgcHJvY2Vzcy5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPldoZW4gaXQgc2VlcyBhIHNvdXJjZSB2YWx1ZXMsIGl0IGlnbm9yZXMgdGhhdCBwbHVzXG5cdCAqIHRoZSBuZXh0IG9uZXMgZm9yIGBkdXJhdGlvbmAgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBpdCBlbWl0cyB0aGUgbW9zdCByZWNlbnRcblx0ICogdmFsdWUgZnJvbSB0aGUgc291cmNlLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9hdWRpdFRpbWUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBhdWRpdFRpbWVgIGlzIHNpbWlsYXIgdG8gYHRocm90dGxlVGltZWAsIGJ1dCBlbWl0cyB0aGUgbGFzdCB2YWx1ZSBmcm9tIHRoZVxuXHQgKiBzaWxlbmNlZCB0aW1lIHdpbmRvdywgaW5zdGVhZCBvZiB0aGUgZmlyc3QgdmFsdWUuIGBhdWRpdFRpbWVgIGVtaXRzIHRoZSBtb3N0XG5cdCAqIHJlY2VudCB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYXMgc29vbiBhc1xuXHQgKiBpdHMgaW50ZXJuYWwgdGltZXIgYmVjb21lcyBkaXNhYmxlZCwgYW5kIGlnbm9yZXMgc291cmNlIHZhbHVlcyB3aGlsZSB0aGVcblx0ICogdGltZXIgaXMgZW5hYmxlZC4gSW5pdGlhbGx5LCB0aGUgdGltZXIgaXMgZGlzYWJsZWQuIEFzIHNvb24gYXMgdGhlIGZpcnN0XG5cdCAqIHNvdXJjZSB2YWx1ZSBhcnJpdmVzLCB0aGUgdGltZXIgaXMgZW5hYmxlZC4gQWZ0ZXIgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMgKG9yXG5cdCAqIHRoZSB0aW1lIHVuaXQgZGV0ZXJtaW5lZCBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYCkgaGFzIHBhc3NlZCxcblx0ICogdGhlIHRpbWVyIGlzIGRpc2FibGVkLCB0aGVuIHRoZSBtb3N0IHJlY2VudCBzb3VyY2UgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGVcblx0ICogb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGlzIHByb2Nlc3MgcmVwZWF0cyBmb3IgdGhlIG5leHQgc291cmNlIHZhbHVlLlxuXHQgKiBPcHRpb25hbGx5IHRha2VzIGEge0BsaW5rIFNjaGVkdWxlcn0gZm9yIG1hbmFnaW5nIHRpbWVycy5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBjbGlja3MgYXQgYSByYXRlIG9mIGF0IG1vc3Qgb25lIGNsaWNrIHBlciBzZWNvbmQ8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3MuYXVkaXRUaW1lKDEwMDApO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBhdWRpdH1cblx0ICogQHNlZSB7QGxpbmsgZGVib3VuY2VUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBkZWxheX1cblx0ICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cblx0ICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gVGltZSB0byB3YWl0IGJlZm9yZSBlbWl0dGluZyB0aGUgbW9zdCByZWNlbnQgc291cmNlXG5cdCAqIHZhbHVlLCBtZWFzdXJlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkIGludGVybmFsbHlcblx0ICogYnkgdGhlIG9wdGlvbmFsIGBzY2hlZHVsZXJgLlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1hc3luY10gVGhlIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Jcblx0ICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgcmF0ZS1saW1pdGluZyBiZWhhdmlvci5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IHBlcmZvcm1zIHJhdGUtbGltaXRpbmcgb2Zcblx0ICogZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIGF1ZGl0VGltZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gYXVkaXRUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcblx0ICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBBdWRpdFRpbWVPcGVyYXRvcihkdXJhdGlvbiwgc2NoZWR1bGVyKSk7XG5cdH1cblx0ZXhwb3J0cy5hdWRpdFRpbWUgPSBhdWRpdFRpbWU7XG5cdHZhciBBdWRpdFRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBBdWRpdFRpbWVPcGVyYXRvcihkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgQXVkaXRUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBBdWRpdFRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb24sIHRoaXMuc2NoZWR1bGVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEF1ZGl0VGltZU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBBdWRpdFRpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhBdWRpdFRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQXVkaXRUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgQXVkaXRUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG5cdCAgICAgICAgaWYgKCF0aGlzLnRocm90dGxlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdXJhdGlvbiwgdGhpcykpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBBdWRpdFRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBfYSA9IHRoaXMsIHZhbHVlID0gX2EudmFsdWUsIGhhc1ZhbHVlID0gX2EuaGFzVmFsdWUsIHRocm90dGxlZCA9IF9hLnRocm90dGxlZDtcblx0ICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gQXVkaXRUaW1lU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHRmdW5jdGlvbiBkaXNwYXRjaE5leHQoc3Vic2NyaWJlcikge1xuXHQgICAgc3Vic2NyaWJlci5jbGVhclRocm90dGxlKCk7XG5cdH1cblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXRUaW1lLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTc3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBsYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5sYXN0ID0gbGFzdF8xLmxhc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBFbXB0eUVycm9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NSk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBvbmx5IHRoZSBsYXN0IGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEl0IG9wdGlvbmFsbHkgdGFrZXMgYSBwcmVkaWNhdGUgZnVuY3Rpb24gYXMgYSBwYXJhbWV0ZXIsIGluIHdoaWNoIGNhc2UsIHJhdGhlciB0aGFuIGVtaXR0aW5nXG5cdCAqIHRoZSBsYXN0IGl0ZW0gZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZSByZXN1bHRpbmcgT2JzZXJ2YWJsZSB3aWxsIGVtaXQgdGhlIGxhc3QgaXRlbVxuXHQgKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aGF0IHNhdGlzZmllcyB0aGUgcHJlZGljYXRlLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL2xhc3QucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEB0aHJvd3Mge0VtcHR5RXJyb3J9IERlbGl2ZXJzIGFuIEVtcHR5RXJyb3IgdG8gdGhlIE9ic2VydmVyJ3MgYGVycm9yYFxuXHQgKiBjYWxsYmFjayBpZiB0aGUgT2JzZXJ2YWJsZSBjb21wbGV0ZXMgYmVmb3JlIGFueSBgbmV4dGAgbm90aWZpY2F0aW9uIHdhcyBzZW50LlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcmVkaWNhdGUgLSB0aGUgY29uZGl0aW9uIGFueSBzb3VyY2UgZW1pdHRlZCBpdGVtIGhhcyB0byBzYXRpc2Z5LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgb25seSB0aGUgbGFzdCBpdGVtIHNhdGlzZnlpbmcgdGhlIGdpdmVuIGNvbmRpdGlvblxuXHQgKiBmcm9tIHRoZSBzb3VyY2UsIG9yIGFuIE5vU3VjaEVsZW1lbnRFeGNlcHRpb24gaWYgbm8gc3VjaCBpdGVtcyBhcmUgZW1pdHRlZC5cblx0ICogQHRocm93cyAtIFRocm93cyBpZiBubyBpdGVtcyB0aGF0IG1hdGNoIHRoZSBwcmVkaWNhdGUgYXJlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIGxhc3Rcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIGxhc3QocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBMYXN0T3BlcmF0b3IocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlLCB0aGlzKSk7XG5cdH1cblx0ZXhwb3J0cy5sYXN0ID0gbGFzdDtcblx0dmFyIExhc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBMYXN0T3BlcmF0b3IocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlLCBzb3VyY2UpIHtcblx0ICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICBMYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTGFzdFN1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnJlc3VsdFNlbGVjdG9yLCB0aGlzLmRlZmF1bHRWYWx1ZSwgdGhpcy5zb3VyY2UpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gTGFzdE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBMYXN0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTGFzdFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG5cdCAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcblx0ICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fdHJ5UHJlZGljYXRlKHZhbHVlLCBpbmRleCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlSZXN1bHRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0O1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSByZXN1bHQ7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodGhpcy5sYXN0VmFsdWUpO1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IobmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIExhc3RTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxNzkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGxldF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODApO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubGV0ID0gbGV0XzEubGV0UHJvdG87XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5sZXRCaW5kID0gbGV0XzEubGV0UHJvdG87XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWxldC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE4MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdC8qKlxuXHQgKiBAcGFyYW0gZnVuY1xuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fVxuXHQgKiBAbWV0aG9kIGxldFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gbGV0UHJvdG8oZnVuYykge1xuXHQgICAgcmV0dXJuIGZ1bmModGhpcyk7XG5cdH1cblx0ZXhwb3J0cy5sZXRQcm90byA9IGxldFByb3RvO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1sZXQuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxODEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGV2ZXJ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Mik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5ldmVyeSA9IGV2ZXJ5XzEuZXZlcnk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZXJ5LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMTgyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2hldGhlciBvciBub3QgZXZlcnkgaXRlbSBvZiB0aGUgc291cmNlIHNhdGlzZmllcyB0aGUgY29uZGl0aW9uIHNwZWNpZmllZC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gcHJlZGljYXRlIGEgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIGlmIGFuIGl0ZW0gbWVldHMgYSBzcGVjaWZpZWQgY29uZGl0aW9uLlxuXHQgKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIG9wdGlvbmFsIG9iamVjdCB0byB1c2UgZm9yIGB0aGlzYCBpbiB0aGUgY2FsbGJhY2tcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSBvZiBib29sZWFucyB0aGF0IGRldGVybWluZXMgaWYgYWxsIGl0ZW1zIG9mIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBtZWV0IHRoZSBjb25kaXRpb24gc3BlY2lmaWVkLlxuXHQgKiBAbWV0aG9kIGV2ZXJ5XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBldmVyeShwcmVkaWNhdGUsIHRoaXNBcmcpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEV2ZXJ5T3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnLCB0aGlzKSk7XG5cdH1cblx0ZXhwb3J0cy5ldmVyeSA9IGV2ZXJ5O1xuXHR2YXIgRXZlcnlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBFdmVyeU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIEV2ZXJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRXZlcnlTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnLCB0aGlzLnNvdXJjZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBFdmVyeU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBFdmVyeVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEV2ZXJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEV2ZXJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG5cdCAgICB9XG5cdCAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZXJ5VmFsdWVNYXRjaCkge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChldmVyeVZhbHVlTWF0Y2gpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5pbmRleCsrLCB0aGlzLnNvdXJjZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghcmVzdWx0KSB7XG5cdCAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUoZmFsc2UpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKHRydWUpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBFdmVyeVN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlcnkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxODMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODQpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWFwID0gbWFwXzEubWFwO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxODQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgZ2l2ZW4gYHByb2plY3RgIGZ1bmN0aW9uIHRvIGVhY2ggdmFsdWUgZW1pdHRlZCBieSB0aGUgc291cmNlXG5cdCAqIE9ic2VydmFibGUsIGFuZCBlbWl0cyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBhcyBhbiBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZSBbQXJyYXkucHJvdG90eXBlLm1hcCgpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9tYXApLFxuXHQgKiBpdCBwYXNzZXMgZWFjaCBzb3VyY2UgdmFsdWUgdGhyb3VnaCBhIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRvIGdldFxuXHQgKiBjb3JyZXNwb25kaW5nIG91dHB1dCB2YWx1ZXMuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogU2ltaWxhciB0byB0aGUgd2VsbCBrbm93biBgQXJyYXkucHJvdG90eXBlLm1hcGAgZnVuY3Rpb24sIHRoaXMgb3BlcmF0b3Jcblx0ICogYXBwbGllcyBhIHByb2plY3Rpb24gdG8gZWFjaCB2YWx1ZSBhbmQgZW1pdHMgdGhhdCBwcm9qZWN0aW9uIGluIHRoZSBvdXRwdXRcblx0ICogT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+TWFwIGV2ZXJ5IGV2ZXJ5IGNsaWNrIHRvIHRoZSBjbGllbnRYIHBvc2l0aW9uIG9mIHRoYXQgY2xpY2s8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBwb3NpdGlvbnMgPSBjbGlja3MubWFwKGV2ID0+IGV2LmNsaWVudFgpO1xuXHQgKiBwb3NpdGlvbnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBtYXBUb31cblx0ICogQHNlZSB7QGxpbmsgcGx1Y2t9XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIpOiBSfSBwcm9qZWN0IFRoZSBmdW5jdGlvbiB0byBhcHBseVxuXHQgKiB0byBlYWNoIGB2YWx1ZWAgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIFRoZSBgaW5kZXhgIHBhcmFtZXRlciBpc1xuXHQgKiB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggZW1pc3Npb24gdGhhdCBoYXMgaGFwcGVuZWQgc2luY2UgdGhlXG5cdCAqIHN1YnNjcmlwdGlvbiwgc3RhcnRpbmcgZnJvbSB0aGUgbnVtYmVyIGAwYC5cblx0ICogQHBhcmFtIHthbnl9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBhcmd1bWVudCB0byBkZWZpbmUgd2hhdCBgdGhpc2AgaXMgaW4gdGhlXG5cdCAqIGBwcm9qZWN0YCBmdW5jdGlvbi5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxSPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSB2YWx1ZXMgZnJvbSB0aGUgc291cmNlXG5cdCAqIE9ic2VydmFibGUgdHJhbnNmb3JtZWQgYnkgdGhlIGdpdmVuIGBwcm9qZWN0YCBmdW5jdGlvbi5cblx0ICogQG1ldGhvZCBtYXBcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG5cdCAgICBpZiAodHlwZW9mIHByb2plY3QgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4gQXJlIHlvdSBsb29raW5nIGZvciBgbWFwVG8oKWA/Jyk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSk7XG5cdH1cblx0ZXhwb3J0cy5tYXAgPSBtYXA7XG5cdHZhciBNYXBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSB7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuXHQgICAgfVxuXHQgICAgTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy50aGlzQXJnKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hcE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBNYXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdGhpc0FyZykge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgICAgIHRoaXMuY291bnQgPSAwO1xuXHQgICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblx0ICAgIH1cblx0ICAgIC8vIE5PVEU6IFRoaXMgbG9va3MgdW5vcHRpbWl6ZWQsIGJ1dCBpdCdzIGFjdHVhbGx5IHB1cnBvc2VmdWxseSBOT1Rcblx0ICAgIC8vIHVzaW5nIHRyeS9jYXRjaCBvcHRpbWl6YXRpb25zLlxuXHQgICAgTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0O1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBNYXBTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE4NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWFwVG9fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1hcFRvID0gbWFwVG9fMS5tYXBUbztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxODYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgZ2l2ZW4gY29uc3RhbnQgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGV2ZXJ5IHRpbWUgdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlIGVtaXRzIGEgdmFsdWUuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MaWtlIHtAbGluayBtYXB9LCBidXQgaXQgbWFwcyBldmVyeSBzb3VyY2UgdmFsdWUgdG9cblx0ICogdGhlIHNhbWUgb3V0cHV0IHZhbHVlIGV2ZXJ5IHRpbWUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21hcFRvLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBUYWtlcyBhIGNvbnN0YW50IGB2YWx1ZWAgYXMgYXJndW1lbnQsIGFuZCBlbWl0cyB0aGF0IHdoZW5ldmVyIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLiBJbiBvdGhlciB3b3JkcywgaWdub3JlcyB0aGUgYWN0dWFsIHNvdXJjZSB2YWx1ZSxcblx0ICogYW5kIHNpbXBseSB1c2VzIHRoZSBlbWlzc2lvbiBtb21lbnQgdG8ga25vdyB3aGVuIHRvIGVtaXQgdGhlIGdpdmVuIGB2YWx1ZWAuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBldmVyeSBldmVyeSBjbGljayB0byB0aGUgc3RyaW5nICdIaSc8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBncmVldGluZ3MgPSBjbGlja3MubWFwVG8oJ0hpJyk7XG5cdCAqIGdyZWV0aW5ncy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIG1hcH1cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXAgZWFjaCBzb3VyY2UgdmFsdWUgdG8uXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgZ2l2ZW4gYHZhbHVlYCBldmVyeSB0aW1lXG5cdCAqIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBlbWl0cyBzb21ldGhpbmcuXG5cdCAqIEBtZXRob2QgbWFwVG9cblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIG1hcFRvKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNYXBUb09wZXJhdG9yKHZhbHVlKSk7XG5cdH1cblx0ZXhwb3J0cy5tYXBUbyA9IG1hcFRvO1xuXHR2YXIgTWFwVG9PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNYXBUb09wZXJhdG9yKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IE1hcFRvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnZhbHVlKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hcFRvT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIE1hcFRvU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTWFwVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gTWFwVG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB2YWx1ZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgICBNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy52YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hcFRvU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE4NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWF0ZXJpYWxpemVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1hdGVyaWFsaXplID0gbWF0ZXJpYWxpemVfMS5tYXRlcmlhbGl6ZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0ZXJpYWxpemUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBOb3RpZmljYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVwcmVzZW50cyBhbGwgb2YgdGhlIGVtaXNzaW9ucyBhbmQgbm90aWZpY2F0aW9uc1xuXHQgKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpbnRvIGVtaXNzaW9ucyBtYXJrZWQgd2l0aCB0aGVpciBvcmlnaW5hbCB0eXBlc1xuXHQgKiB3aXRoaW4gYSBgTm90aWZpY2F0aW9uYCBvYmplY3RzLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL21hdGVyaWFsaXplLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBOb3RpZmljYXRpb259XG5cdCAqXG5cdCAqIEBzY2hlZHVsZXIgbWF0ZXJpYWxpemUgZG9lcyBub3Qgb3BlcmF0ZSBieSBkZWZhdWx0IG9uIGEgcGFydGljdWxhciBTY2hlZHVsZXIuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8Tm90aWZpY2F0aW9uPFQ+Pn0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIHRoYXQgYXJlIHRoZSByZXN1bHQgb2Zcblx0ICogbWF0ZXJpYWxpemluZyB0aGUgaXRlbXMgYW5kIG5vdGlmaWNhdGlvbnMgb2YgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIG1hdGVyaWFsaXplXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXRlcmlhbGl6ZSgpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IE1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG5cdH1cblx0ZXhwb3J0cy5tYXRlcmlhbGl6ZSA9IG1hdGVyaWFsaXplO1xuXHR2YXIgTWF0ZXJpYWxpemVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNYXRlcmlhbGl6ZU9wZXJhdG9yKCkge1xuXHQgICAgfVxuXHQgICAgTWF0ZXJpYWxpemVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IE1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hdGVyaWFsaXplT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIE1hdGVyaWFsaXplU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoTWF0ZXJpYWxpemVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gTWF0ZXJpYWxpemVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgfVxuXHQgICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIE1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG5cdCAgICAgICAgZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG5cdCAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIE1hdGVyaWFsaXplU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tYXRlcmlhbGl6ZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE4OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWVyZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWVyZ2UgPSBtZXJnZV8xLm1lcmdlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWVyZ2VBbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWVyZ2VBbGwgPSBtZXJnZUFsbF8xLm1lcmdlQWxsO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWVyZ2VNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTM1KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1lcmdlTWFwID0gbWVyZ2VNYXBfMS5tZXJnZU1hcDtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZsYXRNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbWVyZ2VNYXBUb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZmxhdE1hcFRvID0gbWVyZ2VNYXBUb18xLm1lcmdlTWFwVG87XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tZXJnZU1hcFRvID0gbWVyZ2VNYXBUb18xLm1lcmdlTWFwVG87XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwVG8uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxOTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG11bHRpY2FzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubXVsdGljYXN0ID0gbXVsdGljYXN0XzEubXVsdGljYXN0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aWNhc3QuanMubWFwXG5cbi8qKiovIH0sXG4vKiAxOTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIG9ic2VydmVPbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5vYnNlcnZlT24gPSBvYnNlcnZlT25fMS5vYnNlcnZlT247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgcGFydGl0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5Nik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBwYXJ0aXRpb25fMS5wYXJ0aXRpb247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRpdGlvbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBub3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTk3KTtcblx0dmFyIGZpbHRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjApO1xuXHQvKipcblx0ICogU3BsaXRzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpbnRvIHR3bywgb25lIHdpdGggdmFsdWVzIHRoYXQgc2F0aXNmeSBhXG5cdCAqIHByZWRpY2F0ZSwgYW5kIGFub3RoZXIgd2l0aCB2YWx1ZXMgdGhhdCBkb24ndCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGZpbHRlcn0sIGJ1dCByZXR1cm5zIHR3byBPYnNlcnZhYmxlczpcblx0ICogb25lIGxpa2UgdGhlIG91dHB1dCBvZiB7QGxpbmsgZmlsdGVyfSwgYW5kIHRoZSBvdGhlciB3aXRoIHZhbHVlcyB0aGF0IGRpZCBub3Rcblx0ICogcGFzcyB0aGUgY29uZGl0aW9uLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9wYXJ0aXRpb24ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBwYXJ0aXRpb25gIG91dHB1dHMgYW4gYXJyYXkgd2l0aCB0d28gT2JzZXJ2YWJsZXMgdGhhdCBwYXJ0aXRpb24gdGhlIHZhbHVlc1xuXHQgKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aHJvdWdoIHRoZSBnaXZlbiBgcHJlZGljYXRlYCBmdW5jdGlvbi4gVGhlIGZpcnN0XG5cdCAqIE9ic2VydmFibGUgaW4gdGhhdCBhcnJheSBlbWl0cyBzb3VyY2UgdmFsdWVzIGZvciB3aGljaCB0aGUgcHJlZGljYXRlIGFyZ3VtZW50XG5cdCAqIHJldHVybnMgdHJ1ZS4gVGhlIHNlY29uZCBPYnNlcnZhYmxlIGVtaXRzIHNvdXJjZSB2YWx1ZXMgZm9yIHdoaWNoIHRoZVxuXHQgKiBwcmVkaWNhdGUgcmV0dXJucyBmYWxzZS4gVGhlIGZpcnN0IGJlaGF2ZXMgbGlrZSB7QGxpbmsgZmlsdGVyfSBhbmQgdGhlIHNlY29uZFxuXHQgKiBiZWhhdmVzIGxpa2Uge0BsaW5rIGZpbHRlcn0gd2l0aCB0aGUgcHJlZGljYXRlIG5lZ2F0ZWQuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPlBhcnRpdGlvbiBjbGljayBldmVudHMgaW50byB0aG9zZSBvbiBESVYgZWxlbWVudHMgYW5kIHRob3NlIGVsc2V3aGVyZTwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHBhcnRzID0gY2xpY2tzLnBhcnRpdGlvbihldiA9PiBldi50YXJnZXQudGFnTmFtZSA9PT0gJ0RJVicpO1xuXHQgKiB2YXIgY2xpY2tzT25EaXZzID0gcGFydHNbMF07XG5cdCAqIHZhciBjbGlja3NFbHNld2hlcmUgPSBwYXJ0c1sxXTtcblx0ICogY2xpY2tzT25EaXZzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKCdESVYgY2xpY2tlZDogJywgeCkpO1xuXHQgKiBjbGlja3NFbHNld2hlcmUuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coJ090aGVyIGNsaWNrZWQ6ICcsIHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZmlsdGVyfVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdGhhdFxuXHQgKiBldmFsdWF0ZXMgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gSWYgaXQgcmV0dXJucyBgdHJ1ZWAsXG5cdCAqIHRoZSB2YWx1ZSBpcyBlbWl0dGVkIG9uIHRoZSBmaXJzdCBPYnNlcnZhYmxlIGluIHRoZSByZXR1cm5lZCBhcnJheSwgaWZcblx0ICogYGZhbHNlYCB0aGUgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc2Vjb25kIE9ic2VydmFibGUgaW4gdGhlIGFycmF5LiBUaGVcblx0ICogYGluZGV4YCBwYXJhbWV0ZXIgaXMgdGhlIG51bWJlciBgaWAgZm9yIHRoZSBpLXRoIHNvdXJjZSBlbWlzc2lvbiB0aGF0IGhhc1xuXHQgKiBoYXBwZW5lZCBzaW5jZSB0aGUgc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXIgYDBgLlxuXHQgKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRldGVybWluZSB0aGUgdmFsdWUgb2YgYHRoaXNgXG5cdCAqIGluIHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cblx0ICogQHJldHVybiB7W09ic2VydmFibGU8VD4sIE9ic2VydmFibGU8VD5dfSBBbiBhcnJheSB3aXRoIHR3byBPYnNlcnZhYmxlczogb25lXG5cdCAqIHdpdGggdmFsdWVzIHRoYXQgcGFzc2VkIHRoZSBwcmVkaWNhdGUsIGFuZCBhbm90aGVyIHdpdGggdmFsdWVzIHRoYXQgZGlkIG5vdFxuXHQgKiBwYXNzIHRoZSBwcmVkaWNhdGUuXG5cdCAqIEBtZXRob2QgcGFydGl0aW9uXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBwYXJ0aXRpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG5cdCAgICByZXR1cm4gW1xuXHQgICAgICAgIGZpbHRlcl8xLmZpbHRlci5jYWxsKHRoaXMsIHByZWRpY2F0ZSksXG5cdCAgICAgICAgZmlsdGVyXzEuZmlsdGVyLmNhbGwodGhpcywgbm90XzEubm90KHByZWRpY2F0ZSwgdGhpc0FyZykpXG5cdCAgICBdO1xuXHR9XG5cdGV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwXG5cbi8qKiovIH0sXG4vKiAxOTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiBub3QocHJlZCwgdGhpc0FyZykge1xuXHQgICAgZnVuY3Rpb24gbm90UHJlZCgpIHtcblx0ICAgICAgICByZXR1cm4gIShub3RQcmVkLnByZWQuYXBwbHkobm90UHJlZC50aGlzQXJnLCBhcmd1bWVudHMpKTtcblx0ICAgIH1cblx0ICAgIG5vdFByZWQucHJlZCA9IHByZWQ7XG5cdCAgICBub3RQcmVkLnRoaXNBcmcgPSB0aGlzQXJnO1xuXHQgICAgcmV0dXJuIG5vdFByZWQ7XG5cdH1cblx0ZXhwb3J0cy5ub3QgPSBub3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDE5OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgcGx1Y2tfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTk5KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnBsdWNrID0gcGx1Y2tfMS5wbHVjaztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Y2suanMubWFwXG5cbi8qKiovIH0sXG4vKiAxOTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgbWFwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NCk7XG5cdC8qKlxuXHQgKiBNYXBzIGVhY2ggc291cmNlIHZhbHVlIChhbiBvYmplY3QpIHRvIGl0cyBzcGVjaWZpZWQgbmVzdGVkIHByb3BlcnR5LlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZSB7QGxpbmsgbWFwfSwgYnV0IG1lYW50IG9ubHkgZm9yIHBpY2tpbmcgb25lIG9mXG5cdCAqIHRoZSBuZXN0ZWQgcHJvcGVydGllcyBvZiBldmVyeSBlbWl0dGVkIG9iamVjdC48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvcGx1Y2sucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEdpdmVuIGEgbGlzdCBvZiBzdHJpbmdzIGRlc2NyaWJpbmcgYSBwYXRoIHRvIGFuIG9iamVjdCBwcm9wZXJ0eSwgcmV0cmlldmVzXG5cdCAqIHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBuZXN0ZWQgcHJvcGVydHkgZnJvbSBhbGwgdmFsdWVzIGluIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gSWYgYSBwcm9wZXJ0eSBjYW4ndCBiZSByZXNvbHZlZCwgaXQgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgZm9yXG5cdCAqIHRoYXQgdmFsdWUuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBldmVyeSBldmVyeSBjbGljayB0byB0aGUgdGFnTmFtZSBvZiB0aGUgY2xpY2tlZCB0YXJnZXQgZWxlbWVudDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHRhZ05hbWVzID0gY2xpY2tzLnBsdWNrKCd0YXJnZXQnLCAndGFnTmFtZScpO1xuXHQgKiB0YWdOYW1lcy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIG1hcH1cblx0ICpcblx0ICogQHBhcmFtIHsuLi5zdHJpbmd9IHByb3BlcnRpZXMgVGhlIG5lc3RlZCBwcm9wZXJ0aWVzIHRvIHBsdWNrIGZyb20gZWFjaCBzb3VyY2Vcblx0ICogdmFsdWUgKGFuIG9iamVjdCkuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSBvZiBwcm9wZXJ0eSB2YWx1ZXMgZnJvbSB0aGVcblx0ICogc291cmNlIHZhbHVlcy5cblx0ICogQG1ldGhvZCBwbHVja1xuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcGx1Y2soKSB7XG5cdCAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBwcm9wZXJ0aWVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgdmFyIGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoO1xuXHQgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignTGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtYXBfMS5tYXAuY2FsbCh0aGlzLCBwbHVja2VyKHByb3BlcnRpZXMsIGxlbmd0aCkpO1xuXHR9XG5cdGV4cG9ydHMucGx1Y2sgPSBwbHVjaztcblx0ZnVuY3Rpb24gcGx1Y2tlcihwcm9wcywgbGVuZ3RoKSB7XG5cdCAgICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gKHgpIHtcblx0ICAgICAgICB2YXIgY3VycmVudFByb3AgPSB4O1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHAgPSBjdXJyZW50UHJvcFtwcm9wc1tpXV07XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnRQcm9wID0gcDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBtYXBwZXI7XG5cdH1cblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Y2suanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHB1Ymxpc2hfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjAxKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnB1Ymxpc2ggPSBwdWJsaXNoXzEucHVibGlzaDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIwMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIgbXVsdGljYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgQ29ubmVjdGFibGVPYnNlcnZhYmxlLCB3aGljaCBpcyBhIHZhcmlldHkgb2YgT2JzZXJ2YWJsZSB0aGF0IHdhaXRzIHVudGlsIGl0cyBjb25uZWN0IG1ldGhvZCBpcyBjYWxsZWRcblx0ICogYmVmb3JlIGl0IGJlZ2lucyBlbWl0dGluZyBpdGVtcyB0byB0aG9zZSBPYnNlcnZlcnMgdGhhdCBoYXZlIHN1YnNjcmliZWQgdG8gaXQuXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvcHVibGlzaC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQHJldHVybiBhIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB0aGF0IHVwb24gY29ubmVjdGlvbiBjYXVzZXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRvIGVtaXQgaXRlbXMgdG8gaXRzIE9ic2VydmVycy5cblx0ICogQG1ldGhvZCBwdWJsaXNoXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBwdWJsaXNoKCkge1xuXHQgICAgcmV0dXJuIG11bHRpY2FzdF8xLm11bHRpY2FzdC5jYWxsKHRoaXMsIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpKTtcblx0fVxuXHRleHBvcnRzLnB1Ymxpc2ggPSBwdWJsaXNoO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBwdWJsaXNoQmVoYXZpb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjAzKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnB1Ymxpc2hCZWhhdmlvciA9IHB1Ymxpc2hCZWhhdmlvcl8xLnB1Ymxpc2hCZWhhdmlvcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaEJlaGF2aW9yLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEJlaGF2aW9yU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDQpO1xuXHR2YXIgbXVsdGljYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyk7XG5cdC8qKlxuXHQgKiBAcGFyYW0gdmFsdWVcblx0ICogQHJldHVybiB7Q29ubmVjdGFibGVPYnNlcnZhYmxlPFQ+fVxuXHQgKiBAbWV0aG9kIHB1Ymxpc2hCZWhhdmlvclxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcHVibGlzaEJlaGF2aW9yKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0LmNhbGwodGhpcywgbmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdCh2YWx1ZSkpO1xuXHR9XG5cdGV4cG9ydHMucHVibGlzaEJlaGF2aW9yID0gcHVibGlzaEJlaGF2aW9yO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoQmVoYXZpb3IuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIHRocm93RXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXHR2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHQvKipcblx0ICogQGNsYXNzIEJlaGF2aW9yU3ViamVjdDxUPlxuXHQgKi9cblx0dmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQmVoYXZpb3JTdWJqZWN0KF92YWx1ZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuXHQgICAgfVxuXHQgICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5oYXNFcnJvcmVkKSB7XG5cdCAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKHRoaXMuZXJyb3JWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgdGhyb3dFcnJvcl8xLnRocm93RXJyb3IobmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuXHQgICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuXHQgICAgfTtcblx0ICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9uZXh0LmNhbGwodGhpcywgdGhpcy5fdmFsdWUgPSB2YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy5oYXNFcnJvcmVkID0gdHJ1ZTtcblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIHRoaXMuZXJyb3JWYWx1ZSA9IGVycik7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEJlaGF2aW9yU3ViamVjdDtcblx0fShTdWJqZWN0XzEuU3ViamVjdCkpO1xuXHRleHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBwdWJsaXNoUmVwbGF5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wdWJsaXNoUmVwbGF5ID0gcHVibGlzaFJlcGxheV8xLnB1Ymxpc2hSZXBsYXk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHB1Ymxpc2hMYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNyk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wdWJsaXNoTGFzdCA9IHB1Ymxpc2hMYXN0XzEucHVibGlzaExhc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hMYXN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIEFzeW5jU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdHZhciBtdWx0aWNhc3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblx0LyoqXG5cdCAqIEByZXR1cm4ge0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPn1cblx0ICogQG1ldGhvZCBwdWJsaXNoTGFzdFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcHVibGlzaExhc3QoKSB7XG5cdCAgICByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0LmNhbGwodGhpcywgbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpKTtcblx0fVxuXHRleHBvcnRzLnB1Ymxpc2hMYXN0ID0gcHVibGlzaExhc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hMYXN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciByYWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnJhY2UgPSByYWNlXzEucmFjZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIwOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgcmVkdWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5yZWR1Y2UgPSByZWR1Y2VfMS5yZWR1Y2U7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHVjZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGFwcGxpZXMgYSBzcGVjaWZpZWQgYWNjdW11bGF0b3IgZnVuY3Rpb24gdG8gdGhlIGZpcnN0IGl0ZW0gZW1pdHRlZCBieSBhIHNvdXJjZSBPYnNlcnZhYmxlLFxuXHQgKiB0aGVuIGZlZWRzIHRoZSByZXN1bHQgb2YgdGhhdCBmdW5jdGlvbiBhbG9uZyB3aXRoIHRoZSBzZWNvbmQgaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpbnRvIHRoZSBzYW1lXG5cdCAqIGZ1bmN0aW9uLCBhbmQgc28gb24gdW50aWwgYWxsIGl0ZW1zIGhhdmUgYmVlbiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYW5kIGVtaXRzIHRoZSBmaW5hbCByZXN1bHQgZnJvbVxuXHQgKiB0aGUgZmluYWwgY2FsbCB0byB5b3VyIGZ1bmN0aW9uIGFzIGl0cyBzb2xlIGl0ZW0uXG5cdCAqIFRoaXMgdGVjaG5pcXVlLCB3aGljaCBpcyBjYWxsZWQgXCJyZWR1Y2VcIiBoZXJlLCBpcyBzb21ldGltZXMgY2FsbGVkIFwiYWdncmVnYXRlLFwiIFwiZm9sZCxcIiBcImFjY3VtdWxhdGUsXCIgXCJjb21wcmVzcyxcIiBvclxuXHQgKiBcImluamVjdFwiIGluIG90aGVyIHByb2dyYW1taW5nIGNvbnRleHRzLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3JlZHVjZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQHBhcmFtIHtpbml0aWFsVmFsdWV9IHRoZSBpbml0aWFsIChzZWVkKSBhY2N1bXVsYXRvciB2YWx1ZVxuXHQgKiBAcGFyYW0ge2FjY3VtdWxhdG9yfSBhbiBhY2N1bXVsYXRvciBmdW5jdGlvbiB0byBiZSBpbnZva2VkIG9uIGVhY2ggaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgdGhlXG5cdCAqIHJlc3VsdCBvZiB3aGljaCB3aWxsIGJlIHVzZWQgaW4gdGhlIG5leHQgYWNjdW11bGF0b3IgY2FsbC5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGEgc2luZ2xlIGl0ZW0gdGhhdCBpcyB0aGUgcmVzdWx0IG9mIGFjY3VtdWxhdGluZyB0aGUgb3V0cHV0IGZyb20gdGhlXG5cdCAqIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIHJlZHVjZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcmVkdWNlKHByb2plY3QsIHNlZWQpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFJlZHVjZU9wZXJhdG9yKHByb2plY3QsIHNlZWQpKTtcblx0fVxuXHRleHBvcnRzLnJlZHVjZSA9IHJlZHVjZTtcblx0dmFyIFJlZHVjZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFJlZHVjZU9wZXJhdG9yKHByb2plY3QsIHNlZWQpIHtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG5cdCAgICB9XG5cdCAgICBSZWR1Y2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFJlZHVjZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnNlZWQpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmVkdWNlT3BlcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuUmVkdWNlT3BlcmF0b3IgPSBSZWR1Y2VPcGVyYXRvcjtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgUmVkdWNlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmVkdWNlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFJlZHVjZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIHNlZWQpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYWNjID0gc2VlZDtcblx0ICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXHQgICAgICAgIHRoaXMuaGFzU2VlZCA9IHR5cGVvZiBzZWVkICE9PSAndW5kZWZpbmVkJztcblx0ICAgIH1cblx0ICAgIFJlZHVjZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUgfHwgKHRoaXMuaGFzVmFsdWUgPSB0aGlzLmhhc1NlZWQpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RyeVJlZHVjZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmFjYyA9IHZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgUmVkdWNlU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVJlZHVjZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHRoaXMuYWNjLCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuYWNjID0gcmVzdWx0O1xuXHQgICAgfTtcblx0ICAgIFJlZHVjZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSB8fCB0aGlzLmhhc1NlZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuYWNjKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZWR1Y2VTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdGV4cG9ydHMuUmVkdWNlU3Vic2NyaWJlciA9IFJlZHVjZVN1YnNjcmliZXI7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHVjZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgcmVwZWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5yZXBlYXQgPSByZXBlYXRfMS5yZXBlYXQ7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCByZXBlYXRzIHRoZSBzdHJlYW0gb2YgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYXQgbW9zdCBjb3VudCB0aW1lcyxcblx0ICogb24gYSBwYXJ0aWN1bGFyIFNjaGVkdWxlci5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9yZXBlYXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSB0aGUgU2NoZWR1bGVyIHRvIGVtaXQgdGhlIGl0ZW1zIG9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2NvdW50XSB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpdGVtcyBhcmUgcmVwZWF0ZWQsIGEgY291bnQgb2YgMCB3aWxsIHlpZWxkXG5cdCAqIGFuIGVtcHR5IE9ic2VydmFibGUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCByZXBlYXRzIHRoZSBzdHJlYW0gb2YgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYXQgbW9zdFxuXHQgKiBjb3VudCB0aW1lcy5cblx0ICogQG1ldGhvZCByZXBlYXRcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuXHQgICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuXHQgICAgaWYgKGNvdW50ID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUoKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKGNvdW50IDwgMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFJlcGVhdE9wZXJhdG9yKC0xLCB0aGlzKSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBSZXBlYXRPcGVyYXRvcihjb3VudCAtIDEsIHRoaXMpKTtcblx0ICAgIH1cblx0fVxuXHRleHBvcnRzLnJlcGVhdCA9IHJlcGVhdDtcblx0dmFyIFJlcGVhdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFJlcGVhdE9wZXJhdG9yKGNvdW50LCBzb3VyY2UpIHtcblx0ICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICBSZXBlYXRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFJlcGVhdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmVwZWF0T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFJlcGVhdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFJlcGVhdFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBSZXBlYXRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb3VudCwgc291cmNlKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIFJlcGVhdFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcblx0ICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuXHQgICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY291bnQgPiAtMSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50IC0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZSh0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFJlcGVhdFN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciByZXRyeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTQpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUucmV0cnkgPSByZXRyeV8xLnJldHJ5O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXN1YnNjcmliaW5nIHRvIGl0IGlmIGl0IGNhbGxzIGBlcnJvcmAgYW5kIHRoZVxuXHQgKiBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGZvciB0aGF0IHNwZWNpZmljIGV4Y2VwdGlvbiBhbmQgcmV0cnkgY291bnQuXG5cdCAqIElmIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBjYWxscyBgZXJyb3JgLCB0aGlzIG1ldGhvZCB3aWxsIHJlc3Vic2NyaWJlIHRvIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBmb3IgYSBtYXhpbXVtIG9mXG5cdCAqIGNvdW50IHJlc3Vic2NyaXB0aW9ucyAoZ2l2ZW4gYXMgYSBudW1iZXIgcGFyYW1ldGVyKSByYXRoZXIgdGhhbiBwcm9wYWdhdGluZyB0aGUgYGVycm9yYCBjYWxsLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3JldHJ5LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBBbnkgYW5kIGFsbCBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB3aWxsIGJlIGVtaXR0ZWQgYnkgdGhlIHJlc3VsdGluZyBPYnNlcnZhYmxlLCBldmVuIHRob3NlIGVtaXR0ZWRcblx0ICogZHVyaW5nIGZhaWxlZCBzdWJzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgaWYgYW4gT2JzZXJ2YWJsZSBmYWlscyBhdCBmaXJzdCBidXQgZW1pdHMgWzEsIDJdIHRoZW4gc3VjY2VlZHMgdGhlIHNlY29uZFxuXHQgKiB0aW1lIGFuZCBlbWl0czogWzEsIDIsIDMsIDQsIDVdIHRoZW4gdGhlIGNvbXBsZXRlIHN0cmVhbSBvZiBlbWlzc2lvbnMgYW5kIG5vdGlmaWNhdGlvbnNcblx0ICogd291bGQgYmU6IFsxLCAyLCAxLCAyLCAzLCA0LCA1LCBgY29tcGxldGVgXS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBiZWZvcmUgZmFpbGluZy5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIG1vZGlmaWVkIHdpdGggdGhlIHJldHJ5IGxvZ2ljLlxuXHQgKiBAbWV0aG9kIHJldHJ5XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiByZXRyeShjb3VudCkge1xuXHQgICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgUmV0cnlPcGVyYXRvcihjb3VudCwgdGhpcykpO1xuXHR9XG5cdGV4cG9ydHMucmV0cnkgPSByZXRyeTtcblx0dmFyIFJldHJ5T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmV0cnlPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgfVxuXHQgICAgUmV0cnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFJldHJ5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvdW50LCB0aGlzLnNvdXJjZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZXRyeU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBSZXRyeVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFJldHJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFJldHJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY291bnQsIHNvdXJjZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICBSZXRyeVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcblx0ICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuXHQgICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZXJyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChjb3VudCA+IC0xKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgLSAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gUmV0cnlTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciByZXRyeVdoZW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjE2KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnJldHJ5V2hlbiA9IHJldHJ5V2hlbl8xLnJldHJ5V2hlbjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlXaGVuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSB3aXRoIHRoZSBleGNlcHRpb24gb2YgYW4gYGVycm9yYC5cblx0ICogQW4gYGVycm9yYCB3aWxsIGNhdXNlIHRoZSBlbWlzc2lvbiBvZiB0aGUgVGhyb3dhYmxlIHRoYXQgY2F1c2UgdGhlIGVycm9yIHRvIHRoZSBPYnNlcnZhYmxlIHJldHVybmVkIGZyb21cblx0ICogbm90aWZpY2F0aW9uSGFuZGxlci4gSWYgdGhhdCBPYnNlcnZhYmxlIGNhbGxzIG9uQ29tcGxldGUgb3IgYGVycm9yYCB0aGVuIHJldHJ5IHdpbGwgY2FsbCBgY29tcGxldGVgIG9yIGBlcnJvcmBcblx0ICogb24gdGhlIGNoaWxkIHN1YnNjcmlwdGlvbi4gT3RoZXJ3aXNlLCB0aGlzIE9ic2VydmFibGUgd2lsbCByZXN1YnNjcmliZSB0byB0aGUgc291cmNlIG9ic2VydmFibGUsIG9uIGEgcGFydGljdWxhclxuXHQgKiBTY2hlZHVsZXIuXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvcmV0cnlXaGVuLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcGFyYW0ge25vdGlmaWNhdGlvbkhhbmRsZXJ9IHJlY2VpdmVzIGFuIE9ic2VydmFibGUgb2Ygbm90aWZpY2F0aW9ucyB3aXRoIHdoaWNoIGEgdXNlciBjYW4gYGNvbXBsZXRlYCBvciBgZXJyb3JgLFxuXHQgKiBhYm9ydGluZyB0aGUgcmV0cnkuXG5cdCAqIEBwYXJhbSB7c2NoZWR1bGVyfSB0aGUgU2NoZWR1bGVyIG9uIHdoaWNoIHRvIHN1YnNjcmliZSB0byB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBtb2RpZmllZCB3aXRoIHJldHJ5IGxvZ2ljLlxuXHQgKiBAbWV0aG9kIHJldHJ5V2hlblxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gcmV0cnlXaGVuKG5vdGlmaWVyKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBSZXRyeVdoZW5PcGVyYXRvcihub3RpZmllciwgdGhpcykpO1xuXHR9XG5cdGV4cG9ydHMucmV0cnlXaGVuID0gcmV0cnlXaGVuO1xuXHR2YXIgUmV0cnlXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmV0cnlXaGVuT3BlcmF0b3Iobm90aWZpZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIFJldHJ5V2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgUmV0cnlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyLCB0aGlzLnNvdXJjZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZXRyeVdoZW5PcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgUmV0cnlXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoUmV0cnlXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFJldHJ5V2hlblN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5vdGlmaWVyLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgfVxuXHQgICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuXHQgICAgICAgICAgICB2YXIgZXJyb3JzID0gdGhpcy5lcnJvcnM7XG5cdCAgICAgICAgICAgIHZhciByZXRyaWVzID0gdGhpcy5yZXRyaWVzO1xuXHQgICAgICAgICAgICB2YXIgcmV0cmllc1N1YnNjcmlwdGlvbiA9IHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbjtcblx0ICAgICAgICAgICAgaWYgKCFyZXRyaWVzKSB7XG5cdCAgICAgICAgICAgICAgICBlcnJvcnMgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcblx0ICAgICAgICAgICAgICAgIHJldHJpZXMgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMubm90aWZpZXIpKGVycm9ycyk7XG5cdCAgICAgICAgICAgICAgICBpZiAocmV0cmllcyA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJldHJpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG5cdCAgICAgICAgICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG5cdCAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHJldHJpZXNTdWJzY3JpcHRpb247XG5cdCAgICAgICAgICAgIGVycm9ycy5uZXh0KGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBlcnJvcnMgPSBfYS5lcnJvcnMsIHJldHJpZXNTdWJzY3JpcHRpb24gPSBfYS5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIGlmIChlcnJvcnMpIHtcblx0ICAgICAgICAgICAgZXJyb3JzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJldHJpZXNTdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnJldHJpZXMgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB2YXIgX2EgPSB0aGlzLCBlcnJvcnMgPSBfYS5lcnJvcnMsIHJldHJpZXMgPSBfYS5yZXRyaWVzLCByZXRyaWVzU3Vic2NyaXB0aW9uID0gX2EucmV0cmllc1N1YnNjcmlwdGlvbjtcblx0ICAgICAgICB0aGlzLmVycm9ycyA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5yZXRyaWVzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuXHQgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcblx0ICAgICAgICB0aGlzLnJldHJpZXMgPSByZXRyaWVzO1xuXHQgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHJldHJpZXNTdWJzY3JpcHRpb247XG5cdCAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZXRyeVdoZW5TdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeVdoZW4uanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHNhbXBsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2FtcGxlID0gc2FtcGxlXzEuc2FtcGxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIEVtaXRzIHRoZSBtb3N0IHJlY2VudGx5IGVtaXR0ZWQgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgd2hlbmV2ZXJcblx0ICogYW5vdGhlciBPYnNlcnZhYmxlLCB0aGUgYG5vdGlmaWVyYCwgZW1pdHMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIHNhbXBsZVRpbWV9LCBidXQgc2FtcGxlcyB3aGVuZXZlclxuXHQgKiB0aGUgYG5vdGlmaWVyYCBPYnNlcnZhYmxlIGVtaXRzIHNvbWV0aGluZy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvc2FtcGxlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBXaGVuZXZlciB0aGUgYG5vdGlmaWVyYCBPYnNlcnZhYmxlIGVtaXRzIGEgdmFsdWUgb3IgY29tcGxldGVzLCBgc2FtcGxlYFxuXHQgKiBsb29rcyBhdCB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIGVtaXRzIHdoaWNoZXZlciB2YWx1ZSBpdCBoYXMgbW9zdCByZWNlbnRseVxuXHQgKiBlbWl0dGVkIHNpbmNlIHRoZSBwcmV2aW91cyBzYW1wbGluZywgdW5sZXNzIHRoZSBzb3VyY2UgaGFzIG5vdCBlbWl0dGVkXG5cdCAqIGFueXRoaW5nIHNpbmNlIHRoZSBwcmV2aW91cyBzYW1wbGluZy4gVGhlIGBub3RpZmllcmAgaXMgc3Vic2NyaWJlZCB0byBhcyBzb29uXG5cdCAqIGFzIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBzdWJzY3JpYmVkLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5PbiBldmVyeSBjbGljaywgc2FtcGxlIHRoZSBtb3N0IHJlY2VudCBcInNlY29uZHNcIiB0aW1lcjwvY2FwdGlvbj5cblx0ICogdmFyIHNlY29uZHMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gc2Vjb25kcy5zYW1wbGUoY2xpY2tzKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYXVkaXR9XG5cdCAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuXHQgKiBAc2VlIHtAbGluayBzYW1wbGVUaW1lfVxuXHQgKiBAc2VlIHtAbGluayB0aHJvdHRsZX1cblx0ICpcblx0ICogQHBhcmFtIHtPYnNlcnZhYmxlPGFueT59IG5vdGlmaWVyIFRoZSBPYnNlcnZhYmxlIHRvIHVzZSBmb3Igc2FtcGxpbmcgdGhlXG5cdCAqIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2Ygc2FtcGxpbmcgdGhlXG5cdCAqIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB3aGVuZXZlciB0aGUgbm90aWZpZXIgT2JzZXJ2YWJsZVxuXHQgKiBlbWl0cyB2YWx1ZSBvciBjb21wbGV0ZXMuXG5cdCAqIEBtZXRob2Qgc2FtcGxlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBzYW1wbGUobm90aWZpZXIpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFNhbXBsZU9wZXJhdG9yKG5vdGlmaWVyKSk7XG5cdH1cblx0ZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGU7XG5cdHZhciBTYW1wbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTYW1wbGVPcGVyYXRvcihub3RpZmllcikge1xuXHQgICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcblx0ICAgIH1cblx0ICAgIFNhbXBsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2FtcGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNhbXBsZU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTYW1wbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTYW1wbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU2FtcGxlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgbm90aWZpZXIpKTtcblx0ICAgIH1cblx0ICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuXHQgICAgfTtcblx0ICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuXHQgICAgfTtcblx0ICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG5cdCAgICB9O1xuXHQgICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMudmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gU2FtcGxlU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBzYW1wbGVUaW1lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zYW1wbGVUaW1lID0gc2FtcGxlVGltZV8xLnNhbXBsZVRpbWU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZVRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGhpblxuXHQgKiBwZXJpb2RpYyB0aW1lIGludGVydmFscy5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlNhbXBsZXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGF0IHBlcmlvZGljIHRpbWVcblx0ICogaW50ZXJ2YWxzLCBlbWl0dGluZyB3aGF0IGl0IHNhbXBsZXMuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3NhbXBsZVRpbWUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBzYW1wbGVUaW1lYCBwZXJpb2RpY2FsbHkgbG9va3MgYXQgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBlbWl0cyB3aGljaGV2ZXJcblx0ICogdmFsdWUgaXQgaGFzIG1vc3QgcmVjZW50bHkgZW1pdHRlZCBzaW5jZSB0aGUgcHJldmlvdXMgc2FtcGxpbmcsIHVubGVzcyB0aGVcblx0ICogc291cmNlIGhhcyBub3QgZW1pdHRlZCBhbnl0aGluZyBzaW5jZSB0aGUgcHJldmlvdXMgc2FtcGxpbmcuIFRoZSBzYW1wbGluZ1xuXHQgKiBoYXBwZW5zIHBlcmlvZGljYWxseSBpbiB0aW1lIGV2ZXJ5IGBwZXJpb2RgIG1pbGxpc2Vjb25kcyAob3IgdGhlIHRpbWUgdW5pdFxuXHQgKiBkZWZpbmVkIGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYCBhcmd1bWVudCkuIFRoZSBzYW1wbGluZyBzdGFydHMgYXMgc29vbiBhc1xuXHQgKiB0aGUgb3V0cHV0IE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZC5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+RXZlcnkgc2Vjb25kLCBlbWl0IHRoZSBtb3N0IHJlY2VudCBjbGljayBhdCBtb3N0IG9uY2U8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3Muc2FtcGxlVGltZSgxMDAwKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYXVkaXRUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBkZWJvdW5jZVRpbWV9XG5cdCAqIEBzZWUge0BsaW5rIGRlbGF5fVxuXHQgKiBAc2VlIHtAbGluayBzYW1wbGV9XG5cdCAqIEBzZWUge0BsaW5rIHRocm90dGxlVGltZX1cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHBlcmlvZCBUaGUgc2FtcGxpbmcgcGVyaW9kIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlXG5cdCAqIHRpbWUgdW5pdCBkZXRlcm1pbmVkIGludGVybmFsbHkgYnkgdGhlIG9wdGlvbmFsIGBzY2hlZHVsZXJgLlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1hc3luY10gVGhlIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Jcblx0ICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgc2FtcGxpbmcuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0cyBvZiBzYW1wbGluZyB0aGVcblx0ICogdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGF0IHRoZSBzcGVjaWZpZWQgdGltZSBpbnRlcnZhbC5cblx0ICogQG1ldGhvZCBzYW1wbGVUaW1lXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBzYW1wbGVUaW1lKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgU2FtcGxlVGltZU9wZXJhdG9yKHBlcmlvZCwgc2NoZWR1bGVyKSk7XG5cdH1cblx0ZXhwb3J0cy5zYW1wbGVUaW1lID0gc2FtcGxlVGltZTtcblx0dmFyIFNhbXBsZVRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTYW1wbGVUaW1lT3BlcmF0b3IocGVyaW9kLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgIH1cblx0ICAgIFNhbXBsZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFNhbXBsZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucGVyaW9kLCB0aGlzLnNjaGVkdWxlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTYW1wbGVUaW1lT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFNhbXBsZVRpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTYW1wbGVUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFNhbXBsZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwZXJpb2QsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTm90aWZpY2F0aW9uLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogdGhpcywgcGVyaW9kOiBwZXJpb2QgfSkpO1xuXHQgICAgfVxuXHQgICAgU2FtcGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgIH07XG5cdCAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBTYW1wbGVUaW1lU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHRmdW5jdGlvbiBkaXNwYXRjaE5vdGlmaWNhdGlvbihzdGF0ZSkge1xuXHQgICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG5cdCAgICBzdWJzY3JpYmVyLm5vdGlmeU5leHQoKTtcblx0ICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHBlcmlvZCk7XG5cdH1cblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlVGltZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIyMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc2Nhbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2NhbiA9IHNjYW5fMS5zY2FuO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogQXBwbGllcyBhbiBhY2N1bXVsYXRpb24gZnVuY3Rpb24gb3ZlciB0aGUgc291cmNlIE9ic2VydmFibGUsIGFuZCByZXR1cm5zIGVhY2hcblx0ICogaW50ZXJtZWRpYXRlIHJlc3VsdCwgd2l0aCBhbiBvcHRpb25hbCBzZWVkIHZhbHVlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayByZWR1Y2V9LCBidXQgZW1pdHMgdGhlIGN1cnJlbnRcblx0ICogYWNjdW11bGF0aW9uIHdoZW5ldmVyIHRoZSBzb3VyY2UgZW1pdHMgYSB2YWx1ZS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvc2Nhbi5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQ29tYmluZXMgdG9nZXRoZXIgYWxsIHZhbHVlcyBlbWl0dGVkIG9uIHRoZSBzb3VyY2UsIHVzaW5nIGFuIGFjY3VtdWxhdG9yXG5cdCAqIGZ1bmN0aW9uIHRoYXQga25vd3MgaG93IHRvIGpvaW4gYSBuZXcgc291cmNlIHZhbHVlIGludG8gdGhlIGFjY3VtdWxhdGlvbiBmcm9tXG5cdCAqIHRoZSBwYXN0LiBJcyBzaW1pbGFyIHRvIHtAbGluayByZWR1Y2V9LCBidXQgZW1pdHMgdGhlIGludGVybWVkaWF0ZVxuXHQgKiBhY2N1bXVsYXRpb25zLlxuXHQgKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBhcHBsaWVzIGEgc3BlY2lmaWVkIGBhY2N1bXVsYXRvcmAgZnVuY3Rpb24gdG8gZWFjaFxuXHQgKiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBhIGBzZWVkYCB2YWx1ZSBpcyBzcGVjaWZpZWQsIHRoZW5cblx0ICogdGhhdCB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIGluaXRpYWwgdmFsdWUgZm9yIHRoZSBhY2N1bXVsYXRvci4gSWYgbm8gc2VlZFxuXHQgKiB2YWx1ZSBpcyBzcGVjaWZpZWQsIHRoZSBmaXJzdCBpdGVtIG9mIHRoZSBzb3VyY2UgaXMgdXNlZCBhcyB0aGUgc2VlZC5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+Q291bnQgdGhlIG51bWJlciBvZiBjbGljayBldmVudHM8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciBvbmVzID0gY2xpY2tzLm1hcFRvKDEpO1xuXHQgKiB2YXIgc2VlZCA9IDA7XG5cdCAqIHZhciBjb3VudCA9IG9uZXMuc2NhbigoYWNjLCBvbmUpID0+IGFjYyArIG9uZSwgc2VlZCk7XG5cdCAqIGNvdW50LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgZXhwYW5kfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZVNjYW59XG5cdCAqIEBzZWUge0BsaW5rIHJlZHVjZX1cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbihhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogUn0gYWNjdW11bGF0b3Jcblx0ICogVGhlIGFjY3VtdWxhdG9yIGZ1bmN0aW9uIGNhbGxlZCBvbiBlYWNoIHNvdXJjZSB2YWx1ZS5cblx0ICogQHBhcmFtIHtUfFJ9IFtzZWVkXSBUaGUgaW5pdGlhbCBhY2N1bXVsYXRpb24gdmFsdWUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59IEFuIG9ic2VydmFibGUgb2YgdGhlIGFjY3VtdWxhdGVkIHZhbHVlcy5cblx0ICogQG1ldGhvZCBzY2FuXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBzY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTY2FuT3BlcmF0b3IoYWNjdW11bGF0b3IsIHNlZWQpKTtcblx0fVxuXHRleHBvcnRzLnNjYW4gPSBzY2FuO1xuXHR2YXIgU2Nhbk9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCkge1xuXHQgICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcblx0ICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xuXHQgICAgfVxuXHQgICAgU2Nhbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2NhblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hY2N1bXVsYXRvciwgdGhpcy5zZWVkKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNjYW5PcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgU2NhblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFNjYW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBzZWVkKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICB0aGlzLmFjY3VtdWxhdG9yU2V0ID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcblx0ICAgICAgICB0aGlzLmFjY3VtdWxhdG9yU2V0ID0gdHlwZW9mIHNlZWQgIT09ICd1bmRlZmluZWQnO1xuXHQgICAgfVxuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJzZWVkXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlZWQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLmFjY3VtdWxhdG9yU2V0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgdGhpcy5fc2VlZCA9IHZhbHVlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmFjY3VtdWxhdG9yU2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2VlZCA9IHZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyeU5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmFjY3VtdWxhdG9yKHRoaXMuc2VlZCwgdmFsdWUsIGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2VlZCA9IHJlc3VsdDtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU2NhblN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nhbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIyMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc2hhcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjI0KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNoYXJlID0gc2hhcmVfMS5zaGFyZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgbXVsdGljYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyk7XG5cdHZhciBTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRmdW5jdGlvbiBzaGFyZVN1YmplY3RGYWN0b3J5KCkge1xuXHQgICAgcmV0dXJuIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuXHR9XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmFibGUgdGhhdCBtdWx0aWNhc3RzIChzaGFyZXMpIHRoZSBvcmlnaW5hbCBPYnNlcnZhYmxlLiBBcyBsb25nIGFzIHRoZXJlIGlzIGF0IGxlYXN0IG9uZVxuXHQgKiBTdWJzY3JpYmVyIHRoaXMgT2JzZXJ2YWJsZSB3aWxsIGJlIHN1YnNjcmliZWQgYW5kIGVtaXR0aW5nIGRhdGEuIFdoZW4gYWxsIHN1YnNjcmliZXJzIGhhdmUgdW5zdWJzY3JpYmVkIGl0IHdpbGxcblx0ICogdW5zdWJzY3JpYmUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUuIEJlY2F1c2UgdGhlIE9ic2VydmFibGUgaXMgbXVsdGljYXN0aW5nIGl0IG1ha2VzIHRoZSBzdHJlYW0gYGhvdGAuXG5cdCAqIFRoaXMgaXMgYW4gYWxpYXMgZm9yIC5wdWJsaXNoKCkucmVmQ291bnQoKS5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9zaGFyZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gYW4gT2JzZXJ2YWJsZSB0aGF0IHVwb24gY29ubmVjdGlvbiBjYXVzZXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRvIGVtaXQgaXRlbXMgdG8gaXRzIE9ic2VydmVyc1xuXHQgKiBAbWV0aG9kIHNoYXJlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBzaGFyZSgpIHtcblx0ICAgIHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QuY2FsbCh0aGlzLCBzaGFyZVN1YmplY3RGYWN0b3J5KS5yZWZDb3VudCgpO1xuXHR9XG5cdGV4cG9ydHMuc2hhcmUgPSBzaGFyZTtcblx0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc2luZ2xlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zaW5nbGUgPSBzaW5nbGVfMS5zaW5nbGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIEVtcHR5RXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY1KTtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBzaW5nbGUgaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aGF0IG1hdGNoZXMgYSBzcGVjaWZpZWRcblx0ICogcHJlZGljYXRlLCBpZiB0aGF0IE9ic2VydmFibGUgZW1pdHMgb25lIHN1Y2ggaXRlbS4gSWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGVtaXRzIG1vcmUgdGhhbiBvbmUgc3VjaCBpdGVtIG9yIG5vXG5cdCAqIHN1Y2ggaXRlbXMsIG5vdGlmeSBvZiBhbiBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gb3IgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiByZXNwZWN0aXZlbHkuXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvc2luZ2xlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAdGhyb3dzIHtFbXB0eUVycm9yfSBEZWxpdmVycyBhbiBFbXB0eUVycm9yIHRvIHRoZSBPYnNlcnZlcidzIGBlcnJvcmBcblx0ICogY2FsbGJhY2sgaWYgdGhlIE9ic2VydmFibGUgY29tcGxldGVzIGJlZm9yZSBhbnkgYG5leHRgIG5vdGlmaWNhdGlvbiB3YXMgc2VudC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gYSBwcmVkaWNhdGUgZnVuY3Rpb24gdG8gZXZhbHVhdGUgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc2luZ2xlIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgdGhhdCBtYXRjaGVzXG5cdCAqIHRoZSBwcmVkaWNhdGUuXG5cdCAuXG5cdCAqIEBtZXRob2Qgc2luZ2xlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBzaW5nbGUocHJlZGljYXRlKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTaW5nbGVPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXMpKTtcblx0fVxuXHRleHBvcnRzLnNpbmdsZSA9IHNpbmdsZTtcblx0dmFyIFNpbmdsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICBTaW5nbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFNpbmdsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNpbmdsZU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTaW5nbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTaW5nbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU2luZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICAgICAgdGhpcy5zZWVuVmFsdWUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgIH1cblx0ICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLmFwcGx5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAodGhpcy5zZWVuVmFsdWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcignU2VxdWVuY2UgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBlbGVtZW50Jyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuc2luZ2xlVmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgcHJlZGljYXRlID0gdGhpcy5wcmVkaWNhdGU7XG5cdCAgICAgICAgdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIGlmIChwcmVkaWNhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy50cnlOZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgsIHRoaXMuc291cmNlKTtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hcHBseVNpbmdsZVZhbHVlKHZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG5cdCAgICAgICAgaWYgKHRoaXMuaW5kZXggPiAwKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodGhpcy5zZWVuVmFsdWUgPyB0aGlzLnNpbmdsZVZhbHVlIDogdW5kZWZpbmVkKTtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBTaW5nbGVTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc2tpcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjgpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2tpcCA9IHNraXBfMS5za2lwO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1za2lwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgc2tpcHMgYG5gIGl0ZW1zIGVtaXR0ZWQgYnkgYW4gT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9za2lwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGhlIGBuYCBvZiB0aW1lcywgaXRlbXMgZW1pdHRlZCBieSBzb3VyY2UgT2JzZXJ2YWJsZSBzaG91bGQgYmUgc2tpcHBlZC5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogQG1ldGhvZCBza2lwXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBza2lwKHRvdGFsKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTa2lwT3BlcmF0b3IodG90YWwpKTtcblx0fVxuXHRleHBvcnRzLnNraXAgPSBza2lwO1xuXHR2YXIgU2tpcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNraXBPcGVyYXRvcih0b3RhbCkge1xuXHQgICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcblx0ICAgIH1cblx0ICAgIFNraXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFNraXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU2tpcE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTa2lwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoU2tpcFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTa2lwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuXHQgICAgICAgIHRoaXMuY291bnQgPSAwO1xuXHQgICAgfVxuXHQgICAgU2tpcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcblx0ICAgICAgICBpZiAoKyt0aGlzLmNvdW50ID4gdGhpcy50b3RhbCkge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoeCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBTa2lwU3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1za2lwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjI5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBza2lwVW50aWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMwKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNraXBVbnRpbCA9IHNraXBVbnRpbF8xLnNraXBVbnRpbDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjMwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBza2lwcyBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB1bnRpbCBhIHNlY29uZCBPYnNlcnZhYmxlIGVtaXRzIGFuIGl0ZW0uXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvc2tpcFVudGlsLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGV9IHRoZSBzZWNvbmQgT2JzZXJ2YWJsZSB0aGF0IGhhcyB0byBlbWl0IGFuIGl0ZW0gYmVmb3JlIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSdzIGVsZW1lbnRzIGJlZ2luIHRvXG5cdCAqIGJlIG1pcnJvcmVkIGJ5IHRoZSByZXN1bHRpbmcgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIGl0ZW1zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHVudGlsIHRoZSBzZWNvbmQgT2JzZXJ2YWJsZSBlbWl0c1xuXHQgKiBhbiBpdGVtLCB0aGVuIGVtaXRzIHRoZSByZW1haW5pbmcgaXRlbXMuXG5cdCAqIEBtZXRob2Qgc2tpcFVudGlsXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBza2lwVW50aWwobm90aWZpZXIpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7XG5cdH1cblx0ZXhwb3J0cy5za2lwVW50aWwgPSBza2lwVW50aWw7XG5cdHZhciBTa2lwVW50aWxPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTa2lwVW50aWxPcGVyYXRvcihub3RpZmllcikge1xuXHQgICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcblx0ICAgIH1cblx0ICAgIFNraXBVbnRpbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2tpcFVudGlsU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNraXBVbnRpbE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTa2lwVW50aWxTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTa2lwVW50aWxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU2tpcFVudGlsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaXNJbm5lclN0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG5vdGlmaWVyKSk7XG5cdCAgICB9XG5cdCAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5pc0lubmVyU3RvcHBlZCkge1xuXHQgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5pc0lubmVyU3RvcHBlZCA9IHRydWU7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBTa2lwVW50aWxTdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1za2lwVW50aWwuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHNraXBXaGlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2tpcFdoaWxlID0gc2tpcFdoaWxlXzEuc2tpcFdoaWxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBza2lwcyBhbGwgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYXMgbG9uZyBhcyBhIHNwZWNpZmllZCBjb25kaXRpb24gaG9sZHNcblx0ICogdHJ1ZSwgYnV0IGVtaXRzIGFsbCBmdXJ0aGVyIHNvdXJjZSBpdGVtcyBhcyBzb29uIGFzIHRoZSBjb25kaXRpb24gYmVjb21lcyBmYWxzZS5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9za2lwV2hpbGUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSAtIGEgZnVuY3Rpb24gdG8gdGVzdCBlYWNoIGl0ZW0gZW1pdHRlZCBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gYW4gT2JzZXJ2YWJsZSB0aGF0IGJlZ2lucyBlbWl0dGluZyBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB3aGVuIHRoZVxuXHQgKiBzcGVjaWZpZWQgcHJlZGljYXRlIGJlY29tZXMgZmFsc2UuXG5cdCAqIEBtZXRob2Qgc2tpcFdoaWxlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTa2lwV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpKTtcblx0fVxuXHRleHBvcnRzLnNraXBXaGlsZSA9IHNraXBXaGlsZTtcblx0dmFyIFNraXBXaGlsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNraXBXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSkge1xuXHQgICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuXHQgICAgfVxuXHQgICAgU2tpcFdoaWxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBTa2lwV2hpbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFNraXBXaGlsZU9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTa2lwV2hpbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTa2lwV2hpbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU2tpcFdoaWxlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuXHQgICAgICAgIHRoaXMuc2tpcHBpbmcgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgfVxuXHQgICAgU2tpcFdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGlmICh0aGlzLnNraXBwaW5nKSB7XG5cdCAgICAgICAgICAgIHRoaXMudHJ5Q2FsbFByZWRpY2F0ZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghdGhpcy5za2lwcGluZykge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU2tpcFdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5Q2FsbFByZWRpY2F0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCsrKTtcblx0ICAgICAgICAgICAgdGhpcy5za2lwcGluZyA9IEJvb2xlYW4ocmVzdWx0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBTa2lwV2hpbGVTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBXaGlsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIzMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc3RhcnRXaXRoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zdGFydFdpdGggPSBzdGFydFdpdGhfMS5zdGFydFdpdGg7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBBcnJheU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgU2NhbGFyT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdHZhciBFbXB0eU9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHR2YXIgY29uY2F0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0dmFyIGlzU2NoZWR1bGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiBhIHNwZWNpZmllZCBJdGVyYWJsZSBiZWZvcmUgaXQgYmVnaW5zIHRvIGVtaXQgaXRlbXMgZW1pdHRlZCBieSB0aGVcblx0ICogc291cmNlIE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvc3RhcnRXaXRoLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZhbHVlc30gYW4gSXRlcmFibGUgdGhhdCBjb250YWlucyB0aGUgaXRlbXMgeW91IHdhbnQgdGhlIG1vZGlmaWVkIE9ic2VydmFibGUgdG8gZW1pdCBmaXJzdC5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlIGFuZCB0aGVuIGVtaXRzIHRoZSBpdGVtc1xuXHQgKiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCBzdGFydFdpdGhcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcblx0ICAgIHZhciBhcnJheSA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBhcnJheVtfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcblx0ICAgIH1cblx0ICAgIHZhciBzY2hlZHVsZXIgPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcblx0ICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcblx0ICAgICAgICBhcnJheS5wb3AoKTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHNjaGVkdWxlciA9IG51bGw7XG5cdCAgICB9XG5cdCAgICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoO1xuXHQgICAgaWYgKGxlbiA9PT0gMSkge1xuXHQgICAgICAgIHJldHVybiBjb25jYXRfMS5jb25jYXRTdGF0aWMobmV3IFNjYWxhck9ic2VydmFibGVfMS5TY2FsYXJPYnNlcnZhYmxlKGFycmF5WzBdLCBzY2hlZHVsZXIpLCB0aGlzKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKGxlbiA+IDEpIHtcblx0ICAgICAgICByZXR1cm4gY29uY2F0XzEuY29uY2F0U3RhdGljKG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUoYXJyYXksIHNjaGVkdWxlciksIHRoaXMpO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdFN0YXRpYyhuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKHNjaGVkdWxlciksIHRoaXMpO1xuXHQgICAgfVxuXHR9XG5cdGV4cG9ydHMuc3RhcnRXaXRoID0gc3RhcnRXaXRoO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zdGFydFdpdGguanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHN1YnNjcmliZU9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmVPbiA9IHN1YnNjcmliZU9uXzEuc3Vic2NyaWJlT247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjM2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIFN1YnNjcmliZU9uT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzcpO1xuXHQvKipcblx0ICogQXN5bmNocm9ub3VzbHkgc3Vic2NyaWJlcyBPYnNlcnZlcnMgdG8gdGhpcyBPYnNlcnZhYmxlIG9uIHRoZSBzcGVjaWZpZWQgU2NoZWR1bGVyLlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3N1YnNjcmliZU9uLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjaGVkdWxlcn0gdGhlIFNjaGVkdWxlciB0byBwZXJmb3JtIHN1YnNjcmlwdGlvbiBhY3Rpb25zIG9uLlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSB0aGUgc291cmNlIE9ic2VydmFibGUgbW9kaWZpZWQgc28gdGhhdCBpdHMgc3Vic2NyaXB0aW9ucyBoYXBwZW4gb24gdGhlIHNwZWNpZmllZCBTY2hlZHVsZXJcblx0IC5cblx0ICogQG1ldGhvZCBzdWJzY3JpYmVPblxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuXHQgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG5cdCAgICByZXR1cm4gbmV3IFN1YnNjcmliZU9uT2JzZXJ2YWJsZV8xLlN1YnNjcmliZU9uT2JzZXJ2YWJsZSh0aGlzLCBkZWxheSwgc2NoZWR1bGVyKTtcblx0fVxuXHRleHBvcnRzLnN1YnNjcmliZU9uID0gc3Vic2NyaWJlT247XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBhc2FwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzOCk7XG5cdHZhciBpc051bWVyaWNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqIEBoaWRlIHRydWVcblx0ICovXG5cdHZhciBTdWJzY3JpYmVPbk9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFN1YnNjcmliZU9uT2JzZXJ2YWJsZSwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5VGltZSwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgaWYgKGRlbGF5VGltZSA9PT0gdm9pZCAwKSB7IGRlbGF5VGltZSA9IDA7IH1cblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXNhcF8xLmFzYXA7IH1cblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IGRlbGF5VGltZTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICBpZiAoIWlzTnVtZXJpY18xLmlzTnVtZXJpYyhkZWxheVRpbWUpIHx8IGRlbGF5VGltZSA8IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5kZWxheVRpbWUgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXNjaGVkdWxlciB8fCB0eXBlb2Ygc2NoZWR1bGVyLnNjaGVkdWxlICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gYXNhcF8xLmFzYXA7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgU3Vic2NyaWJlT25PYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGRlbGF5LCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cblx0ICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXNhcF8xLmFzYXA7IH1cblx0ICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5LCBzY2hlZHVsZXIpO1xuXHQgICAgfTtcblx0ICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcblx0ICAgICAgICB2YXIgc291cmNlID0gYXJnLnNvdXJjZSwgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyO1xuXHQgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuXHQgICAgfTtcblx0ICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG5cdCAgICAgICAgdmFyIGRlbGF5ID0gdGhpcy5kZWxheVRpbWU7XG5cdCAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5kaXNwYXRjaCwgZGVsYXksIHtcblx0ICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3Vic2NyaWJlT25PYnNlcnZhYmxlO1xuXHR9KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5cdGV4cG9ydHMuU3Vic2NyaWJlT25PYnNlcnZhYmxlID0gU3Vic2NyaWJlT25PYnNlcnZhYmxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVPbk9ic2VydmFibGUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyMzggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgQXNhcFNjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzkpO1xuXHRleHBvcnRzLmFzYXAgPSBuZXcgQXNhcFNjaGVkdWxlcl8xLkFzYXBTY2hlZHVsZXIoKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9YXNhcC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDIzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBBc2FwQWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0MCk7XG5cdHZhciBRdWV1ZVNjaGVkdWxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdHZhciBBc2FwU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhBc2FwU2NoZWR1bGVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gQXNhcFNjaGVkdWxlcigpIHtcblx0ICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0ICAgIEFzYXBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlTm93ID0gZnVuY3Rpb24gKHdvcmssIHN0YXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBBc2FwQWN0aW9uXzEuQXNhcEFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIEFzYXBTY2hlZHVsZXI7XG5cdH0oUXVldWVTY2hlZHVsZXJfMS5RdWV1ZVNjaGVkdWxlcikpO1xuXHRleHBvcnRzLkFzYXBTY2hlZHVsZXIgPSBBc2FwU2NoZWR1bGVyO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwU2NoZWR1bGVyLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIEltbWVkaWF0ZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDEpO1xuXHR2YXIgRnV0dXJlQWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgQXNhcEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoQXNhcEFjdGlvbiwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEFzYXBBY3Rpb24oKSB7XG5cdCAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5fc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG5cdCAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG5cdCAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuXHQgICAgICAgIGlmICghc2NoZWR1bGVyLnNjaGVkdWxlZElkKSB7XG5cdCAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZWRJZCA9IEltbWVkaWF0ZV8xLkltbWVkaWF0ZS5zZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZElkID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIHNjaGVkdWxlci5mbHVzaCgpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgQXNhcEFjdGlvbi5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblx0ICAgICAgICB2YXIgc2NoZWR1bGVkSWQgPSBzY2hlZHVsZXIuc2NoZWR1bGVkSWQsIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl91bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIGlmIChhY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICBzY2hlZHVsZXIuYWN0aXZlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGlmIChzY2hlZHVsZWRJZCAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGVkSWQgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgSW1tZWRpYXRlXzEuSW1tZWRpYXRlLmNsZWFySW1tZWRpYXRlKHNjaGVkdWxlZElkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gQXNhcEFjdGlvbjtcblx0fShGdXR1cmVBY3Rpb25fMS5GdXR1cmVBY3Rpb24pKTtcblx0ZXhwb3J0cy5Bc2FwQWN0aW9uID0gQXNhcEFjdGlvbjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcEFjdGlvbi5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI0MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGNsZWFySW1tZWRpYXRlLCBzZXRJbW1lZGlhdGUpIHsvKipcblx0U29tZSBjcmVkaXQgZm9yIHRoaXMgaGVscGVyIGdvZXMgdG8gaHR0cDovL2dpdGh1Yi5jb20vWXV6dUpTL3NldEltbWVkaWF0ZVxuXHQqL1xuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIHJvb3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBJbW1lZGlhdGVEZWZpbml0aW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEltbWVkaWF0ZURlZmluaXRpb24ocm9vdCkge1xuXHQgICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG5cdCAgICAgICAgaWYgKHJvb3Quc2V0SW1tZWRpYXRlICYmIHR5cGVvZiByb290LnNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICB0aGlzLnNldEltbWVkaWF0ZSA9IHJvb3Quc2V0SW1tZWRpYXRlLmJpbmQocm9vdCk7XG5cdCAgICAgICAgICAgIHRoaXMuY2xlYXJJbW1lZGlhdGUgPSByb290LmNsZWFySW1tZWRpYXRlLmJpbmQocm9vdCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRIYW5kbGUgPSAxO1xuXHQgICAgICAgICAgICB0aGlzLnRhc2tzQnlIYW5kbGUgPSB7fTtcblx0ICAgICAgICAgICAgdGhpcy5jdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcblx0ICAgICAgICAgICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuXHQgICAgICAgICAgICBpZiAodGhpcy5jYW5Vc2VQcm9jZXNzTmV4dFRpY2soKSkge1xuXHQgICAgICAgICAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVByb2Nlc3NOZXh0VGlja1NldEltbWVkaWF0ZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuXHQgICAgICAgICAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVBvc3RNZXNzYWdlU2V0SW1tZWRpYXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jYW5Vc2VNZXNzYWdlQ2hhbm5lbCgpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZU1lc3NhZ2VDaGFubmVsU2V0SW1tZWRpYXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jYW5Vc2VSZWFkeVN0YXRlQ2hhbmdlKCkpIHtcblx0ICAgICAgICAgICAgICAgIC8vIEZvciBJRSA24oCTOFxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVJlYWR5U3RhdGVDaGFuZ2VTZXRJbW1lZGlhdGUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVNldFRpbWVvdXRTZXRJbW1lZGlhdGUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgY2kgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSBjbGVhckltbWVkaWF0ZS5pbnN0YW5jZS50YXNrc0J5SGFuZGxlW2hhbmRsZV07XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGNpLmluc3RhbmNlID0gdGhpcztcblx0ICAgICAgICAgICAgdGhpcy5jbGVhckltbWVkaWF0ZSA9IGNpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmlkZW50aWZ5ID0gZnVuY3Rpb24gKG8pIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5yb290Lk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcblx0ICAgIH07XG5cdCAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jYW5Vc2VQcm9jZXNzTmV4dFRpY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaWRlbnRpZnkodGhpcy5yb290LnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cdCAgICB9O1xuXHQgICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY2FuVXNlTWVzc2FnZUNoYW5uZWwgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5yb290Lk1lc3NhZ2VDaGFubmVsKTtcblx0ICAgIH07XG5cdCAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jYW5Vc2VSZWFkeVN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMucm9vdC5kb2N1bWVudDtcblx0ICAgICAgICByZXR1cm4gQm9vbGVhbihkb2N1bWVudCAmJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSk7XG5cdCAgICB9O1xuXHQgICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY2FuVXNlUG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3Q7XG5cdCAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuXHQgICAgICAgIC8vIHdoZXJlIGByb290LnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cblx0ICAgICAgICBpZiAocm9vdC5wb3N0TWVzc2FnZSAmJiAhcm9vdC5pbXBvcnRTY3JpcHRzKSB7XG5cdCAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzXzEgPSB0cnVlO1xuXHQgICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gcm9vdC5vbm1lc3NhZ2U7XG5cdCAgICAgICAgICAgIHJvb3Qub25tZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91c18xID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHJvb3QucG9zdE1lc3NhZ2UoJycsICcqJyk7XG5cdCAgICAgICAgICAgIHJvb3Qub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuXHQgICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91c18xO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9O1xuXHQgICAgLy8gVGhpcyBmdW5jdGlvbiBhY2NlcHRzIHRoZSBzYW1lIGFyZ3VtZW50cyBhcyBzZXRJbW1lZGlhdGUsIGJ1dFxuXHQgICAgLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcmVxdWlyZXMgbm8gYXJndW1lbnRzLlxuXHQgICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUucGFydGlhbGx5QXBwbGllZCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiByZXN1bHQoKSB7XG5cdCAgICAgICAgICAgIHZhciBfYSA9IHJlc3VsdCwgaGFuZGxlciA9IF9hLmhhbmRsZXIsIGFyZ3MgPSBfYS5hcmdzO1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24oJycgKyBoYW5kbGVyKSkoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgZm4uaGFuZGxlciA9IGhhbmRsZXI7XG5cdCAgICAgICAgZm4uYXJncyA9IGFyZ3M7XG5cdCAgICAgICAgcmV0dXJuIGZuO1xuXHQgICAgfTtcblx0ICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmFkZEZyb21TZXRJbW1lZGlhdGVBcmd1bWVudHMgPSBmdW5jdGlvbiAoYXJncykge1xuXHQgICAgICAgIHRoaXMudGFza3NCeUhhbmRsZVt0aGlzLm5leHRIYW5kbGVdID0gdGhpcy5wYXJ0aWFsbHlBcHBsaWVkLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubmV4dEhhbmRsZSsrO1xuXHQgICAgfTtcblx0ICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmNyZWF0ZVByb2Nlc3NOZXh0VGlja1NldEltbWVkaWF0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7XG5cdCAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHNldEltbWVkaWF0ZS5pbnN0YW5jZTtcblx0ICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGluc3RhbmNlLmFkZEZyb21TZXRJbW1lZGlhdGVBcmd1bWVudHMoYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgaW5zdGFuY2Uucm9vdC5wcm9jZXNzLm5leHRUaWNrKGluc3RhbmNlLnBhcnRpYWxseUFwcGxpZWQoaW5zdGFuY2UucnVuSWZQcmVzZW50LCBoYW5kbGUpKTtcblx0ICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGZuLmluc3RhbmNlID0gdGhpcztcblx0ICAgICAgICByZXR1cm4gZm47XG5cdCAgICB9O1xuXHQgICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY3JlYXRlUG9zdE1lc3NhZ2VTZXRJbW1lZGlhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG5cdCAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG5cdCAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXHQgICAgICAgIHZhciByb290ID0gdGhpcy5yb290O1xuXHQgICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gJ3NldEltbWVkaWF0ZSQnICsgcm9vdC5NYXRoLnJhbmRvbSgpICsgJyQnO1xuXHQgICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbiBnbG9iYWxNZXNzYWdlSGFuZGxlcihldmVudCkge1xuXHQgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBnbG9iYWxNZXNzYWdlSGFuZGxlci5pbnN0YW5jZTtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gcm9vdCAmJlxuXHQgICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09ICdzdHJpbmcnICYmXG5cdCAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIGluc3RhbmNlLnJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBvbkdsb2JhbE1lc3NhZ2UuaW5zdGFuY2UgPSB0aGlzO1xuXHQgICAgICAgIHJvb3QuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuXHQgICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZSgpIHtcblx0ICAgICAgICAgICAgdmFyIF9hID0gc2V0SW1tZWRpYXRlLCBtZXNzYWdlUHJlZml4ID0gX2EubWVzc2FnZVByZWZpeCwgaW5zdGFuY2UgPSBfYS5pbnN0YW5jZTtcblx0ICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGluc3RhbmNlLmFkZEZyb21TZXRJbW1lZGlhdGVBcmd1bWVudHMoYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgaW5zdGFuY2Uucm9vdC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCAnKicpO1xuXHQgICAgICAgICAgICByZXR1cm4gaGFuZGxlO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgZm4uaW5zdGFuY2UgPSB0aGlzO1xuXHQgICAgICAgIGZuLm1lc3NhZ2VQcmVmaXggPSBtZXNzYWdlUHJlZml4O1xuXHQgICAgICAgIHJldHVybiBmbjtcblx0ICAgIH07XG5cdCAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5ydW5JZlByZXNlbnQgPSBmdW5jdGlvbiAoaGFuZGxlKSB7XG5cdCAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogJ1dhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLidcblx0ICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuXHQgICAgICAgIGlmICh0aGlzLmN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuXHQgICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuXHQgICAgICAgICAgICAvLyAndG9vIG11Y2ggcmVjdXJzaW9uJyBlcnJvci5cblx0ICAgICAgICAgICAgdGhpcy5yb290LnNldFRpbWVvdXQodGhpcy5wYXJ0aWFsbHlBcHBsaWVkKHRoaXMucnVuSWZQcmVzZW50LCBoYW5kbGUpLCAwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciB0YXNrID0gdGhpcy50YXNrc0J5SGFuZGxlW2hhbmRsZV07XG5cdCAgICAgICAgICAgIGlmICh0YXNrKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRhc2soKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmNyZWF0ZU1lc3NhZ2VDaGFubmVsU2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgdGhpcy5yb290Lk1lc3NhZ2VDaGFubmVsKCk7XG5cdCAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG5cdCAgICAgICAgICAgIF90aGlzLnJ1bklmUHJlc2VudChoYW5kbGUpO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKCkge1xuXHQgICAgICAgICAgICB2YXIgX2EgPSBzZXRJbW1lZGlhdGUsIGNoYW5uZWwgPSBfYS5jaGFubmVsLCBpbnN0YW5jZSA9IF9hLmluc3RhbmNlO1xuXHQgICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG5cdCAgICAgICAgICAgIHJldHVybiBoYW5kbGU7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBmbi5jaGFubmVsID0gY2hhbm5lbDtcblx0ICAgICAgICBmbi5pbnN0YW5jZSA9IHRoaXM7XG5cdCAgICAgICAgcmV0dXJuIGZuO1xuXHQgICAgfTtcblx0ICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmNyZWF0ZVJlYWR5U3RhdGVDaGFuZ2VTZXRJbW1lZGlhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKCkge1xuXHQgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBzZXRJbW1lZGlhdGUuaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIHZhciByb290ID0gaW5zdGFuY2Uucm9vdDtcblx0ICAgICAgICAgICAgdmFyIGRvYyA9IHJvb3QuZG9jdW1lbnQ7XG5cdCAgICAgICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0ICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGluc3RhbmNlLmFkZEZyb21TZXRJbW1lZGlhdGVBcmd1bWVudHMoYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG5cdCAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG5cdCAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdCAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5ydW5JZlByZXNlbnQoaGFuZGxlKTtcblx0ICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHQgICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHQgICAgICAgICAgICByZXR1cm4gaGFuZGxlO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgZm4uaW5zdGFuY2UgPSB0aGlzO1xuXHQgICAgICAgIHJldHVybiBmbjtcblx0ICAgIH07XG5cdCAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jcmVhdGVTZXRUaW1lb3V0U2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZSgpIHtcblx0ICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gc2V0SW1tZWRpYXRlLmluc3RhbmNlO1xuXHQgICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICBpbnN0YW5jZS5yb290LnNldFRpbWVvdXQoaW5zdGFuY2UucGFydGlhbGx5QXBwbGllZChpbnN0YW5jZS5ydW5JZlByZXNlbnQsIGhhbmRsZSksIDApO1xuXHQgICAgICAgICAgICByZXR1cm4gaGFuZGxlO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgZm4uaW5zdGFuY2UgPSB0aGlzO1xuXHQgICAgICAgIHJldHVybiBmbjtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gSW1tZWRpYXRlRGVmaW5pdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5JbW1lZGlhdGVEZWZpbml0aW9uID0gSW1tZWRpYXRlRGVmaW5pdGlvbjtcblx0ZXhwb3J0cy5JbW1lZGlhdGUgPSBuZXcgSW1tZWRpYXRlRGVmaW5pdGlvbihyb290XzEucm9vdCk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPUltbWVkaWF0ZS5qcy5tYXBcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMjQyKS5jbGVhckltbWVkaWF0ZSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNDIpLnNldEltbWVkaWF0ZSkpXG5cbi8qKiovIH0sXG4vKiAyNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihzZXRJbW1lZGlhdGUsIGNsZWFySW1tZWRpYXRlKSB7dmFyIG5leHRUaWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDMpLm5leHRUaWNrO1xuXHR2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cdHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblx0dmFyIGltbWVkaWF0ZUlkcyA9IHt9O1xuXHR2YXIgbmV4dEltbWVkaWF0ZUlkID0gMDtcblx0XG5cdC8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cdFxuXHRleHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG5cdH07XG5cdGV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcblx0fTtcblx0ZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuXHRleHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTtcblx0XG5cdGZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcblx0ICB0aGlzLl9pZCA9IGlkO1xuXHQgIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xuXHR9XG5cdFRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblx0VGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcblx0ICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG5cdH07XG5cdFxuXHQvLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cblx0ZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuXHQgIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblx0ICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cdCAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcblx0fTtcblx0XG5cdGV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdCAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXHRcblx0ICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcblx0ICBpZiAobXNlY3MgPj0gMCkge1xuXHQgICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuXHQgICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuXHQgICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuXHQgICAgfSwgbXNlY3MpO1xuXHQgIH1cblx0fTtcblx0XG5cdC8vIFRoYXQncyBub3QgaG93IG5vZGUuanMgaW1wbGVtZW50cyBpdCBidXQgdGhlIGV4cG9zZWQgYXBpIGlzIHRoZSBzYW1lLlxuXHRleHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uKGZuKSB7XG5cdCAgdmFyIGlkID0gbmV4dEltbWVkaWF0ZUlkKys7XG5cdCAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGZhbHNlIDogc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHRcblx0ICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTtcblx0XG5cdCAgbmV4dFRpY2soZnVuY3Rpb24gb25OZXh0VGljaygpIHtcblx0ICAgIGlmIChpbW1lZGlhdGVJZHNbaWRdKSB7XG5cdCAgICAgIC8vIGZuLmNhbGwoKSBpcyBmYXN0ZXIgc28gd2Ugb3B0aW1pemUgZm9yIHRoZSBjb21tb24gdXNlLWNhc2Vcblx0ICAgICAgLy8gQHNlZSBodHRwOi8vanNwZXJmLmNvbS9jYWxsLWFwcGx5LXNlZ3Vcblx0ICAgICAgaWYgKGFyZ3MpIHtcblx0ICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBmbi5jYWxsKG51bGwpO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIFByZXZlbnQgaWRzIGZyb20gbGVha2luZ1xuXHQgICAgICBleHBvcnRzLmNsZWFySW1tZWRpYXRlKGlkKTtcblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIGlkO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9IHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gY2xlYXJJbW1lZGlhdGUgOiBmdW5jdGlvbihpZCkge1xuXHQgIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdO1xuXHR9O1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygyNDIpLnNldEltbWVkaWF0ZSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNDIpLmNsZWFySW1tZWRpYXRlKSlcblxuLyoqKi8gfSxcbi8qIDI0MyAqLyxcbi8qIDI0NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgc3dpdGNoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NSk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zd2l0Y2ggPSBzd2l0Y2hfMS5fc3dpdGNoO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2guanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0dmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgaGlnaGVyLW9yZGVyIE9ic2VydmFibGUgaW50byBhIGZpcnN0LW9yZGVyIE9ic2VydmFibGUgYnlcblx0ICogc3Vic2NyaWJpbmcgdG8gb25seSB0aGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIG9mIHRob3NlIGlubmVyIE9ic2VydmFibGVzLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgYW4gT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlcyBieSBkcm9wcGluZyB0aGVcblx0ICogcHJldmlvdXMgaW5uZXIgT2JzZXJ2YWJsZSBvbmNlIGEgbmV3IG9uZSBhcHBlYXJzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy9zd2l0Y2gucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGBzd2l0Y2hgIHN1YnNjcmliZXMgdG8gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIE9ic2VydmFibGVzLCBhbHNvIGtub3duIGFzIGFcblx0ICogaGlnaGVyLW9yZGVyIE9ic2VydmFibGUuIEVhY2ggdGltZSBpdCBvYnNlcnZlcyBvbmUgb2YgdGhlc2UgZW1pdHRlZCBpbm5lclxuXHQgKiBPYnNlcnZhYmxlcywgdGhlIG91dHB1dCBPYnNlcnZhYmxlIHN1YnNjcmliZXMgdG8gdGhlIGlubmVyIE9ic2VydmFibGUgYW5kXG5cdCAqIGJlZ2lucyBlbWl0dGluZyB0aGUgaXRlbXMgZW1pdHRlZCBieSB0aGF0LiBTbyBmYXIsIGl0IGJlaGF2ZXNcblx0ICogbGlrZSB7QGxpbmsgbWVyZ2VBbGx9LiBIb3dldmVyLCB3aGVuIGEgbmV3IGlubmVyIE9ic2VydmFibGUgaXMgZW1pdHRlZCxcblx0ICogYHN3aXRjaGAgdW5zdWJzY3JpYmVzIGZyb20gdGhlIGVhcmxpZXItZW1pdHRlZCBpbm5lciBPYnNlcnZhYmxlIGFuZFxuXHQgKiBzdWJzY3JpYmVzIHRvIHRoZSBuZXcgaW5uZXIgT2JzZXJ2YWJsZSBhbmQgYmVnaW5zIGVtaXR0aW5nIGl0ZW1zIGZyb20gaXQuIEl0XG5cdCAqIGNvbnRpbnVlcyB0byBiZWhhdmUgbGlrZSB0aGlzIGZvciBzdWJzZXF1ZW50IGlubmVyIE9ic2VydmFibGVzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5SZXJ1biBhbiBpbnRlcnZhbCBPYnNlcnZhYmxlIG9uIGV2ZXJ5IGNsaWNrIGV2ZW50PC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiAvLyBFYWNoIGNsaWNrIGV2ZW50IGlzIG1hcHBlZCB0byBhbiBPYnNlcnZhYmxlIHRoYXQgdGlja3MgZXZlcnkgc2Vjb25kXG5cdCAqIHZhciBoaWdoZXJPcmRlciA9IGNsaWNrcy5tYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogdmFyIHN3aXRjaGVkID0gaGlnaGVyT3JkZXIuc3dpdGNoKCk7XG5cdCAqIC8vIFRoZSBvdXRjb21lIGlzIHRoYXQgYHN3aXRjaGVkYCBpcyBlc3NlbnRpYWxseSBhIHRpbWVyIHRoYXQgcmVzdGFydHNcblx0ICogLy8gb24gZXZlcnkgY2xpY2suIFRoZSBpbnRlcnZhbCBPYnNlcnZhYmxlcyBmcm9tIG9sZGVyIGNsaWNrcyBkbyBub3QgbWVyZ2Vcblx0ICogLy8gd2l0aCB0aGUgY3VycmVudCBpbnRlcnZhbCBPYnNlcnZhYmxlLlxuXHQgKiBzd2l0Y2hlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGNvbWJpbmVBbGx9XG5cdCAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cblx0ICogQHNlZSB7QGxpbmsgZXhoYXVzdH1cblx0ICogQHNlZSB7QGxpbmsgbWVyZ2VBbGx9XG5cdCAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcH1cblx0ICogQHNlZSB7QGxpbmsgc3dpdGNoTWFwVG99XG5cdCAqIEBzZWUge0BsaW5rIHppcEFsbH1cblx0ICpcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBlbWl0dGVkIGJ5IHRoZVxuXHQgKiBPYnNlcnZhYmxlIG1vc3QgcmVjZW50bHkgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBtZXRob2Qgc3dpdGNoXG5cdCAqIEBuYW1lIHN3aXRjaFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gX3N3aXRjaCgpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFN3aXRjaE9wZXJhdG9yKCkpO1xuXHR9XG5cdGV4cG9ydHMuX3N3aXRjaCA9IF9zd2l0Y2g7XG5cdHZhciBTd2l0Y2hPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTd2l0Y2hPcGVyYXRvcigpIHtcblx0ICAgIH1cblx0ICAgIFN3aXRjaE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU3dpdGNoU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFN3aXRjaE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTd2l0Y2hTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTd2l0Y2hTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU3dpdGNoU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IDA7XG5cdCAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy51bnN1YnNjcmliZUlubmVyKCk7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUrKztcblx0ICAgICAgICB0aGlzLmFkZCh0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB2YWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG5cdCAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmVJbm5lciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmFjdGl2ZSA9IHRoaXMuYWN0aXZlID4gMCA/IHRoaXMuYWN0aXZlIC0gMSA6IDA7XG5cdCAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gdGhpcy5pbm5lclN1YnNjcmlwdGlvbjtcblx0ICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWJzY3JpcHRpb24pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTd2l0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBTd2l0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSW5uZXIoKTtcblx0ICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3dpdGNoU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjQ2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBzd2l0Y2hNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnN3aXRjaE1hcCA9IHN3aXRjaE1hcF8xLnN3aXRjaE1hcDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjQ3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBQcm9qZWN0cyBlYWNoIHNvdXJjZSB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlIHdoaWNoIGlzIG1lcmdlZCBpbiB0aGUgb3V0cHV0XG5cdCAqIE9ic2VydmFibGUsIGVtaXR0aW5nIHZhbHVlcyBvbmx5IGZyb20gdGhlIG1vc3QgcmVjZW50bHkgcHJvamVjdGVkIE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5NYXBzIGVhY2ggdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSwgdGhlbiBmbGF0dGVucyBhbGwgb2Zcblx0ICogdGhlc2UgaW5uZXIgT2JzZXJ2YWJsZXMgdXNpbmcge0BsaW5rIHN3aXRjaH0uPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3N3aXRjaE1hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgYmFzZWQgb24gYXBwbHlpbmcgYSBmdW5jdGlvbiB0aGF0IHlvdVxuXHQgKiBzdXBwbHkgdG8gZWFjaCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGVyZSB0aGF0IGZ1bmN0aW9uXG5cdCAqIHJldHVybnMgYW4gKHNvLWNhbGxlZCBcImlubmVyXCIpIE9ic2VydmFibGUuIEVhY2ggdGltZSBpdCBvYnNlcnZlcyBvbmUgb2YgdGhlc2Vcblx0ICogaW5uZXIgT2JzZXJ2YWJsZXMsIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBiZWdpbnMgZW1pdHRpbmcgdGhlIGl0ZW1zIGVtaXR0ZWQgYnlcblx0ICogdGhhdCBpbm5lciBPYnNlcnZhYmxlLiBXaGVuIGEgbmV3IGlubmVyIE9ic2VydmFibGUgaXMgZW1pdHRlZCwgYHN3aXRjaE1hcGBcblx0ICogc3RvcHMgZW1pdHRpbmcgaXRlbXMgZnJvbSB0aGUgZWFybGllci1lbWl0dGVkIGlubmVyIE9ic2VydmFibGUgYW5kIGJlZ2luc1xuXHQgKiBlbWl0dGluZyBpdGVtcyBmcm9tIHRoZSBuZXcgb25lLiBJdCBjb250aW51ZXMgdG8gYmVoYXZlIGxpa2UgdGhpcyBmb3Jcblx0ICogc3Vic2VxdWVudCBpbm5lciBPYnNlcnZhYmxlcy5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+UmVydW4gYW4gaW50ZXJ2YWwgT2JzZXJ2YWJsZSBvbiBldmVyeSBjbGljayBldmVudDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy5zd2l0Y2hNYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgY29uY2F0TWFwfVxuXHQgKiBAc2VlIHtAbGluayBleGhhdXN0TWFwfVxuXHQgKiBAc2VlIHtAbGluayBtZXJnZU1hcH1cblx0ICogQHNlZSB7QGxpbmsgc3dpdGNofVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2hNYXBUb31cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgP2luZGV4OiBudW1iZXIpOiBPYnNlcnZhYmxlfSBwcm9qZWN0IEEgZnVuY3Rpb25cblx0ICogdGhhdCwgd2hlbiBhcHBsaWVkIHRvIGFuIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHJldHVybnMgYW5cblx0ICogT2JzZXJ2YWJsZS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihvdXRlclZhbHVlOiBULCBpbm5lclZhbHVlOiBJLCBvdXRlckluZGV4OiBudW1iZXIsIGlubmVySW5kZXg6IG51bWJlcik6IGFueX0gW3Jlc3VsdFNlbGVjdG9yXVxuXHQgKiBBIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBiYXNlZCBvbiB0aGUgdmFsdWVzXG5cdCAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIChvdXRlcikgZW1pc3Npb24gYW5kIHRoZSBpbm5lciBPYnNlcnZhYmxlXG5cdCAqIGVtaXNzaW9uLiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uIGFyZTpcblx0ICogLSBgb3V0ZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG5cdCAqIC0gYGlubmVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG5cdCAqIC0gYG91dGVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG5cdCAqIC0gYGlubmVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGVcblx0ICogcHJvamVjdGlvbiBmdW5jdGlvbiAoYW5kIHRoZSBvcHRpb25hbCBgcmVzdWx0U2VsZWN0b3JgKSB0byBlYWNoIGl0ZW0gZW1pdHRlZFxuXHQgKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIHRha2luZyBvbmx5IHRoZSB2YWx1ZXMgZnJvbSB0aGUgbW9zdCByZWNlbnRseVxuXHQgKiBwcm9qZWN0ZWQgaW5uZXIgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCBzd2l0Y2hNYXBcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpKTtcblx0fVxuXHRleHBvcnRzLnN3aXRjaE1hcCA9IHN3aXRjaE1hcDtcblx0dmFyIFN3aXRjaE1hcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFN3aXRjaE1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICB9XG5cdCAgICBTd2l0Y2hNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnJlc3VsdFNlbGVjdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFN3aXRjaE1hcE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBTd2l0Y2hNYXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTd2l0Y2hNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU3dpdGNoTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICB9XG5cdCAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuXHQgICAgfTtcblx0ICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBpbmRleCkge1xuXHQgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG5cdCAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuYWRkKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdmFsdWUsIGluZGV4KSk7XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG5cdCAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG5cdCAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgICAgICB0aGlzLl90cnlOb3RpZnlOZXh0KG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5Tm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3dpdGNoTWFwU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBzd2l0Y2hNYXBUb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDkpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3dpdGNoTWFwVG8gPSBzd2l0Y2hNYXBUb18xLnN3aXRjaE1hcFRvO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXBUby5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI0OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gdGhlIHNhbWUgT2JzZXJ2YWJsZSB3aGljaCBpcyBmbGF0dGVuZWQgbXVsdGlwbGVcblx0ICogdGltZXMgd2l0aCB7QGxpbmsgc3dpdGNofSBpbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIHN3aXRjaE1hcH0sIGJ1dCBtYXBzIGVhY2ggdmFsdWVcblx0ICogYWx3YXlzIHRvIHRoZSBzYW1lIGlubmVyIE9ic2VydmFibGUuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3N3aXRjaE1hcFRvLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBNYXBzIGVhY2ggc291cmNlIHZhbHVlIHRvIHRoZSBnaXZlbiBPYnNlcnZhYmxlIGBpbm5lck9ic2VydmFibGVgIHJlZ2FyZGxlc3Ncblx0ICogb2YgdGhlIHNvdXJjZSB2YWx1ZSwgYW5kIHRoZW4gZmxhdHRlbnMgdGhvc2UgcmVzdWx0aW5nIE9ic2VydmFibGVzIGludG8gb25lXG5cdCAqIHNpbmdsZSBPYnNlcnZhYmxlLCB3aGljaCBpcyB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZXNcblx0ICogZW1pdHMgdmFsdWVzIG9ubHkgZnJvbSB0aGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIGluc3RhbmNlIG9mXG5cdCAqIGBpbm5lck9ic2VydmFibGVgLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5SZXJ1biBhbiBpbnRlcnZhbCBPYnNlcnZhYmxlIG9uIGV2ZXJ5IGNsaWNrIGV2ZW50PC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLnN3aXRjaE1hcFRvKFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cblx0ICogQHNlZSB7QGxpbmsgc3dpdGNofVxuXHQgKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG5cdCAqIEBzZWUge0BsaW5rIG1lcmdlTWFwVG99XG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5uZXJPYnNlcnZhYmxlIEFuIE9ic2VydmFibGUgdG8gcmVwbGFjZSBlYWNoIHZhbHVlIGZyb21cblx0ICogdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKG91dGVyVmFsdWU6IFQsIGlubmVyVmFsdWU6IEksIG91dGVySW5kZXg6IG51bWJlciwgaW5uZXJJbmRleDogbnVtYmVyKTogYW55fSBbcmVzdWx0U2VsZWN0b3JdXG5cdCAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcblx0ICogYW5kIHRoZSBpbmRpY2VzIG9mIHRoZSBzb3VyY2UgKG91dGVyKSBlbWlzc2lvbiBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVcblx0ICogZW1pc3Npb24uIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXJlOlxuXHQgKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2Vcblx0ICogLSBgaW5uZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcblx0ICogLSBgb3V0ZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2Vcblx0ICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBgaW5uZXJPYnNlcnZhYmxlYCBldmVyeSB0aW1lIGEgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBgaW5uZXJPYnNlcnZhYmxlYCAoYW5kIG9wdGlvbmFsbHkgdHJhbnNmb3JtZWQgdGhyb3VnaCBgcmVzdWx0U2VsZWN0b3JgKSBldmVyeVxuXHQgKiB0aW1lIGEgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc291cmNlIE9ic2VydmFibGUsIGFuZCB0YWtpbmcgb25seSB0aGUgdmFsdWVzXG5cdCAqIGZyb20gdGhlIG1vc3QgcmVjZW50bHkgcHJvamVjdGVkIGlubmVyIE9ic2VydmFibGUuXG5cdCAqIEBtZXRob2Qgc3dpdGNoTWFwVG9cblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHN3aXRjaE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFN3aXRjaE1hcFRvT3BlcmF0b3IoaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMuc3dpdGNoTWFwVG8gPSBzd2l0Y2hNYXBUbztcblx0dmFyIFN3aXRjaE1hcFRvT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU3dpdGNoTWFwVG9PcGVyYXRvcihvYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMub2JzZXJ2YWJsZSA9IG9ic2VydmFibGU7XG5cdCAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgU3dpdGNoTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFRvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9ic2VydmFibGUsIHRoaXMucmVzdWx0U2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3dpdGNoTWFwVG9PcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgU3dpdGNoTWFwVG9TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhTd2l0Y2hNYXBUb1N1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBTd2l0Y2hNYXBUb1N1YnNjcmliZXIoZGVzdGluYXRpb24sIGlubmVyLCByZXN1bHRTZWxlY3Rvcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmlubmVyID0gaW5uZXI7XG5cdCAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgfVxuXHQgICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG5cdCAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuYWRkKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHRoaXMuaW5uZXIsIHZhbHVlLCB0aGlzLmluZGV4KyspKTtcblx0ICAgIH07XG5cdCAgICBTd2l0Y2hNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQpIHtcblx0ICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcblx0ICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gbnVsbDtcblx0ICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcblx0ICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdmFyIF9hID0gdGhpcywgcmVzdWx0U2VsZWN0b3IgPSBfYS5yZXN1bHRTZWxlY3RvciwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcblx0ICAgICAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy50cnlSZXN1bHRTZWxlY3RvcihvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFN3aXRjaE1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCkge1xuXHQgICAgICAgIHZhciBfYSA9IHRoaXMsIHJlc3VsdFNlbGVjdG9yID0gX2EucmVzdWx0U2VsZWN0b3IsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG5cdCAgICAgICAgdmFyIHJlc3VsdDtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRTZWxlY3RvcihvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU3dpdGNoTWFwVG9TdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXBUby5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI1MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdGFrZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNTEpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGFrZSA9IHRha2VfMS50YWtlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10YWtlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjUxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUyKTtcblx0dmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdC8qKlxuXHQgKiBFbWl0cyBvbmx5IHRoZSBmaXJzdCBgY291bnRgIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlRha2VzIHRoZSBmaXJzdCBgY291bnRgIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UsIHRoZW5cblx0ICogY29tcGxldGVzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy90YWtlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgdGFrZWAgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgb25seSB0aGUgZmlyc3QgYGNvdW50YCB2YWx1ZXMgZW1pdHRlZFxuXHQgKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIElmIHRoZSBzb3VyY2UgZW1pdHMgZmV3ZXIgdGhhbiBgY291bnRgIHZhbHVlcyB0aGVuXG5cdCAqIGFsbCBvZiBpdHMgdmFsdWVzIGFyZSBlbWl0dGVkLiBBZnRlciB0aGF0LCBpdCBjb21wbGV0ZXMsIHJlZ2FyZGxlc3MgaWYgdGhlXG5cdCAqIHNvdXJjZSBjb21wbGV0ZXMuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPlRha2UgdGhlIGZpcnN0IDUgc2Vjb25kcyBvZiBhbiBpbmZpbml0ZSAxLXNlY29uZCBpbnRlcnZhbCBPYnNlcnZhYmxlPC9jYXB0aW9uPlxuXHQgKiB2YXIgaW50ZXJ2YWwgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgZml2ZSA9IGludGVydmFsLnRha2UoNSk7XG5cdCAqIGZpdmUuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayB0YWtlTGFzdH1cblx0ICogQHNlZSB7QGxpbmsgdGFrZVVudGlsfVxuXHQgKiBAc2VlIHtAbGluayB0YWtlV2hpbGV9XG5cdCAqIEBzZWUge0BsaW5rIHNraXB9XG5cdCAqXG5cdCAqIEB0aHJvd3Mge0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yfSBXaGVuIHVzaW5nIGB0YWtlKGkpYCwgaXQgZGVsaXZlcnMgYW5cblx0ICogQXJndW1lbnRPdXRPclJhbmdlRXJyb3IgdG8gdGhlIE9ic2VydmVyJ3MgYGVycm9yYCBjYWxsYmFjayBpZiBgaSA8IDBgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGBuZXh0YCB2YWx1ZXMgdG8gZW1pdC5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIG9ubHkgdGhlIGZpcnN0IGBjb3VudGBcblx0ICogdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBvciBhbGwgb2YgdGhlIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2Vcblx0ICogaWYgdGhlIHNvdXJjZSBlbWl0cyBmZXdlciB0aGFuIGBjb3VudGAgdmFsdWVzLlxuXHQgKiBAbWV0aG9kIHRha2Vcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHRha2UoY291bnQpIHtcblx0ICAgIGlmIChjb3VudCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlT3BlcmF0b3IoY291bnQpKTtcblx0ICAgIH1cblx0fVxuXHRleHBvcnRzLnRha2UgPSB0YWtlO1xuXHR2YXIgVGFrZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRha2VPcGVyYXRvcih0b3RhbCkge1xuXHQgICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcblx0ICAgICAgICBpZiAodGhpcy50b3RhbCA8IDApIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgVGFrZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGFrZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUYWtlT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFRha2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhUYWtlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRha2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IDA7XG5cdCAgICB9XG5cdCAgICBUYWtlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnRvdGFsO1xuXHQgICAgICAgIGlmICgrK3RoaXMuY291bnQgPD0gdG90YWwpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IHRvdGFsKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRha2VTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHQvKipcblx0ICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYW4gZWxlbWVudCB3YXMgcXVlcmllZCBhdCBhIGNlcnRhaW4gaW5kZXggb2YgYW5cblx0ICogT2JzZXJ2YWJsZSwgYnV0IG5vIHN1Y2ggaW5kZXggb3IgcG9zaXRpb24gZXhpc3RzIGluIHRoYXQgc2VxdWVuY2UuXG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGVsZW1lbnRBdH1cblx0ICogQHNlZSB7QGxpbmsgdGFrZX1cblx0ICogQHNlZSB7QGxpbmsgdGFrZUxhc3R9XG5cdCAqXG5cdCAqIEBjbGFzcyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvclxuXHQgKi9cblx0dmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhBcmd1bWVudE91dE9mUmFuZ2VFcnJvciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsICdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcblx0ICAgICAgICB0aGlzLm5hbWUgPSAnQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuXHR9KEVycm9yKSk7XG5cdGV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9QXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHRha2VMYXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1NCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS50YWtlTGFzdCA9IHRha2VMYXN0XzEudGFrZUxhc3Q7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VMYXN0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUyKTtcblx0dmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdC8qKlxuXHQgKiBFbWl0cyBvbmx5IHRoZSBsYXN0IGBjb3VudGAgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+UmVtZW1iZXJzIHRoZSBsYXRlc3QgYGNvdW50YCB2YWx1ZXMsIHRoZW4gZW1pdHMgdGhvc2Vcblx0ICogb25seSB3aGVuIHRoZSBzb3VyY2UgY29tcGxldGVzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy90YWtlTGFzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogYHRha2VMYXN0YCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhdCBtb3N0IHRoZSBsYXN0IGBjb3VudGAgdmFsdWVzXG5cdCAqIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiB0aGUgc291cmNlIGVtaXRzIGZld2VyIHRoYW4gYGNvdW50YFxuXHQgKiB2YWx1ZXMgdGhlbiBhbGwgb2YgaXRzIHZhbHVlcyBhcmUgZW1pdHRlZC4gVGhpcyBvcGVyYXRvciBtdXN0IHdhaXQgdW50aWwgdGhlXG5cdCAqIGBjb21wbGV0ZWAgbm90aWZpY2F0aW9uIGVtaXNzaW9uIGZyb20gdGhlIHNvdXJjZSBpbiBvcmRlciB0byBlbWl0IHRoZSBgbmV4dGBcblx0ICogdmFsdWVzIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSwgYmVjYXVzZSBvdGhlcndpc2UgaXQgaXMgaW1wb3NzaWJsZSB0byBrbm93XG5cdCAqIHdoZXRoZXIgb3Igbm90IG1vcmUgdmFsdWVzIHdpbGwgYmUgZW1pdHRlZCBvbiB0aGUgc291cmNlLiBGb3IgdGhpcyByZWFzb24sXG5cdCAqIGFsbCB2YWx1ZXMgYXJlIGVtaXR0ZWQgc3luY2hyb25vdXNseSwgZm9sbG93ZWQgYnkgdGhlIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+VGFrZSB0aGUgbGFzdCAzIHZhbHVlcyBvZiBhbiBPYnNlcnZhYmxlIHdpdGggbWFueSB2YWx1ZXM8L2NhcHRpb24+XG5cdCAqIHZhciBtYW55ID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCAxMDApO1xuXHQgKiB2YXIgbGFzdFRocmVlID0gbWFueS50YWtlTGFzdCgzKTtcblx0ICogbGFzdFRocmVlLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgdGFrZX1cblx0ICogQHNlZSB7QGxpbmsgdGFrZVVudGlsfVxuXHQgKiBAc2VlIHtAbGluayB0YWtlV2hpbGV9XG5cdCAqIEBzZWUge0BsaW5rIHNraXB9XG5cdCAqXG5cdCAqIEB0aHJvd3Mge0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yfSBXaGVuIHVzaW5nIGB0YWtlTGFzdChpKWAsIGl0IGRlbGl2ZXJzIGFuXG5cdCAqIEFyZ3VtZW50T3V0T3JSYW5nZUVycm9yIHRvIHRoZSBPYnNlcnZlcidzIGBlcnJvcmAgY2FsbGJhY2sgaWYgYGkgPCAwYC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiB2YWx1ZXMgdG8gZW1pdCBmcm9tIHRoZSBlbmQgb2Zcblx0ICogdGhlIHNlcXVlbmNlIG9mIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGF0IG1vc3QgdGhlIGxhc3QgY291bnRcblx0ICogdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuXHQgKiBAbWV0aG9kIHRha2VMYXN0XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB0YWtlTGFzdChjb3VudCkge1xuXHQgICAgaWYgKGNvdW50ID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUoKTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFRha2VMYXN0T3BlcmF0b3IoY291bnQpKTtcblx0ICAgIH1cblx0fVxuXHRleHBvcnRzLnRha2VMYXN0ID0gdGFrZUxhc3Q7XG5cdHZhciBUYWtlTGFzdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRha2VMYXN0T3BlcmF0b3IodG90YWwpIHtcblx0ICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG5cdCAgICAgICAgaWYgKHRoaXMudG90YWwgPCAwKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIFRha2VMYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBUYWtlTGFzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUYWtlTGFzdE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBUYWtlTGFzdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFRha2VMYXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRha2VMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuXHQgICAgICAgIHRoaXMucmluZyA9IG5ldyBBcnJheSgpO1xuXHQgICAgICAgIHRoaXMuY291bnQgPSAwO1xuXHQgICAgfVxuXHQgICAgVGFrZUxhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciByaW5nID0gdGhpcy5yaW5nO1xuXHQgICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG5cdCAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5jb3VudCsrO1xuXHQgICAgICAgIGlmIChyaW5nLmxlbmd0aCA8IHRvdGFsKSB7XG5cdCAgICAgICAgICAgIHJpbmcucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSBjb3VudCAlIHRvdGFsO1xuXHQgICAgICAgICAgICByaW5nW2luZGV4XSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUYWtlTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHZhciBjb3VudCA9IHRoaXMuY291bnQ7XG5cdCAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuXHQgICAgICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmNvdW50ID49IHRoaXMudG90YWwgPyB0aGlzLnRvdGFsIDogdGhpcy5jb3VudDtcblx0ICAgICAgICAgICAgdmFyIHJpbmcgPSB0aGlzLnJpbmc7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGlkeCA9IChjb3VudCsrKSAlIHRvdGFsO1xuXHQgICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyaW5nW2lkeF0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRha2VMYXN0U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10YWtlTGFzdC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdGFrZVVudGlsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1Nik7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS50YWtlVW50aWwgPSB0YWtlVW50aWxfMS50YWtlVW50aWw7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VVbnRpbC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI1NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogRW1pdHMgdGhlIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB1bnRpbCBhIGBub3RpZmllcmBcblx0ICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGV0cyB2YWx1ZXMgcGFzcyB1bnRpbCBhIHNlY29uZCBPYnNlcnZhYmxlLFxuXHQgKiBgbm90aWZpZXJgLCBlbWl0cyBzb21ldGhpbmcuIFRoZW4sIGl0IGNvbXBsZXRlcy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvdGFrZVVudGlsLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgdGFrZVVudGlsYCBzdWJzY3JpYmVzIGFuZCBiZWdpbnMgbWlycm9yaW5nIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gSXQgYWxzb1xuXHQgKiBtb25pdG9ycyBhIHNlY29uZCBPYnNlcnZhYmxlLCBgbm90aWZpZXJgIHRoYXQgeW91IHByb3ZpZGUuIElmIHRoZSBgbm90aWZpZXJgXG5cdCAqIGVtaXRzIGEgdmFsdWUgb3IgYSBjb21wbGV0ZSBub3RpZmljYXRpb24sIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBzdG9wc1xuXHQgKiBtaXJyb3JpbmcgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBjb21wbGV0ZXMuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPlRpY2sgZXZlcnkgc2Vjb25kIHVudGlsIHRoZSBmaXJzdCBjbGljayBoYXBwZW5zPC9jYXB0aW9uPlxuXHQgKiB2YXIgaW50ZXJ2YWwgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gaW50ZXJ2YWwudGFrZVVudGlsKGNsaWNrcyk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIHRha2V9XG5cdCAqIEBzZWUge0BsaW5rIHRha2VMYXN0fVxuXHQgKiBAc2VlIHtAbGluayB0YWtlV2hpbGV9XG5cdCAqIEBzZWUge0BsaW5rIHNraXB9XG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gbm90aWZpZXIgVGhlIE9ic2VydmFibGUgd2hvc2UgZmlyc3QgZW1pdHRlZCB2YWx1ZSB3aWxsXG5cdCAqIGNhdXNlIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvZiBgdGFrZVVudGlsYCB0byBzdG9wIGVtaXR0aW5nIHZhbHVlcyBmcm9tIHRoZVxuXHQgKiBzb3VyY2UgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSB2YWx1ZXMgZnJvbSB0aGUgc291cmNlXG5cdCAqIE9ic2VydmFibGUgdW50aWwgc3VjaCB0aW1lIGFzIGBub3RpZmllcmAgZW1pdHMgaXRzIGZpcnN0IHZhbHVlLlxuXHQgKiBAbWV0aG9kIHRha2VVbnRpbFxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikpO1xuXHR9XG5cdGV4cG9ydHMudGFrZVVudGlsID0gdGFrZVVudGlsO1xuXHR2YXIgVGFrZVVudGlsT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcblx0ICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG5cdCAgICB9XG5cdCAgICBUYWtlVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFRha2VVbnRpbFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5ub3RpZmllcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUYWtlVW50aWxPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgVGFrZVVudGlsU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoVGFrZVVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRha2VVbnRpbFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5vdGlmaWVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG5vdGlmaWVyKSk7XG5cdCAgICB9XG5cdCAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIG5vb3Bcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVGFrZVVudGlsU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVVudGlsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjU3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0YWtlV2hpbGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjU4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRha2VXaGlsZSA9IHRha2VXaGlsZV8xLnRha2VXaGlsZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVdoaWxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjU4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogRW1pdHMgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHNvIGxvbmcgYXMgZWFjaCB2YWx1ZSBzYXRpc2ZpZXNcblx0ICogdGhlIGdpdmVuIGBwcmVkaWNhdGVgLCBhbmQgdGhlbiBjb21wbGV0ZXMgYXMgc29vbiBhcyB0aGlzIGBwcmVkaWNhdGVgIGlzIG5vdFxuXHQgKiBzYXRpc2ZpZWQuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5UYWtlcyB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIG9ubHkgd2hpbGUgdGhleSBwYXNzIHRoZVxuXHQgKiBjb25kaXRpb24gZ2l2ZW4uIFdoZW4gdGhlIGZpcnN0IHZhbHVlIGRvZXMgbm90IHNhdGlzZnksIGl0IGNvbXBsZXRlcy48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvdGFrZVdoaWxlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBgdGFrZVdoaWxlYCBzdWJzY3JpYmVzIGFuZCBiZWdpbnMgbWlycm9yaW5nIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gRWFjaCB2YWx1ZVxuXHQgKiBlbWl0dGVkIG9uIHRoZSBzb3VyY2UgaXMgZ2l2ZW4gdG8gdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYVxuXHQgKiBib29sZWFuLCByZXByZXNlbnRpbmcgYSBjb25kaXRpb24gdG8gYmUgc2F0aXNmaWVkIGJ5IHRoZSBzb3VyY2UgdmFsdWVzLiBUaGVcblx0ICogb3V0cHV0IE9ic2VydmFibGUgZW1pdHMgdGhlIHNvdXJjZSB2YWx1ZXMgdW50aWwgc3VjaCB0aW1lIGFzIHRoZSBgcHJlZGljYXRlYFxuXHQgKiByZXR1cm5zIGZhbHNlLCBhdCB3aGljaCBwb2ludCBgdGFrZVdoaWxlYCBzdG9wcyBtaXJyb3JpbmcgdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlIGFuZCBjb21wbGV0ZXMgdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrIGV2ZW50cyBvbmx5IHdoaWxlIHRoZSBjbGllbnRYIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiAyMDA8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3MudGFrZVdoaWxlKGV2ID0+IGV2LmNsaWVudFggPiAyMDApO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayB0YWtlfVxuXHQgKiBAc2VlIHtAbGluayB0YWtlTGFzdH1cblx0ICogQHNlZSB7QGxpbmsgdGFrZVVudGlsfVxuXHQgKiBAc2VlIHtAbGluayBza2lwfVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdGhhdFxuXHQgKiBldmFsdWF0ZXMgYSB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIGJvb2xlYW4uXG5cdCAqIEFsc28gdGFrZXMgdGhlICh6ZXJvLWJhc2VkKSBpbmRleCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBzbyBsb25nIGFzIGVhY2ggdmFsdWUgc2F0aXNmaWVzIHRoZSBjb25kaXRpb24gZGVmaW5lZCBieSB0aGVcblx0ICogYHByZWRpY2F0ZWAsIHRoZW4gY29tcGxldGVzLlxuXHQgKiBAbWV0aG9kIHRha2VXaGlsZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gdGFrZVdoaWxlKHByZWRpY2F0ZSkge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVGFrZVdoaWxlT3BlcmF0b3IocHJlZGljYXRlKSk7XG5cdH1cblx0ZXhwb3J0cy50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG5cdHZhciBUYWtlV2hpbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpIHtcblx0ICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcblx0ICAgIH1cblx0ICAgIFRha2VXaGlsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGFrZVdoaWxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUYWtlV2hpbGVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgVGFrZVdoaWxlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoVGFrZVdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRha2VXaGlsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgIH1cblx0ICAgIFRha2VXaGlsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcblx0ICAgICAgICB2YXIgcmVzdWx0O1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlKHZhbHVlLCB0aGlzLmluZGV4KyspO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5uZXh0T3JDb21wbGV0ZSh2YWx1ZSwgcmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICBUYWtlV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0T3JDb21wbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJlZGljYXRlUmVzdWx0KSB7XG5cdCAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcblx0ICAgICAgICBpZiAoQm9vbGVhbihwcmVkaWNhdGVSZXN1bHQpKSB7XG5cdCAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRha2VXaGlsZVN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVdoaWxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjU5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0aHJvdHRsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGhyb3R0bGUgPSB0aHJvdHRsZV8xLnRocm90dGxlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI2MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogRW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgdGhlbiBpZ25vcmVzIHN1YnNlcXVlbnQgc291cmNlXG5cdCAqIHZhbHVlcyBmb3IgYSBkdXJhdGlvbiBkZXRlcm1pbmVkIGJ5IGFub3RoZXIgT2JzZXJ2YWJsZSwgdGhlbiByZXBlYXRzIHRoaXNcblx0ICogcHJvY2Vzcy5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgdGhyb3R0bGVUaW1lfSwgYnV0IHRoZSBzaWxlbmNpbmdcblx0ICogZHVyYXRpb24gaXMgZGV0ZXJtaW5lZCBieSBhIHNlY29uZCBPYnNlcnZhYmxlLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy90aHJvdHRsZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogYHRocm90dGxlYCBlbWl0cyB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuXHQgKiB3aGVuIGl0cyBpbnRlcm5hbCB0aW1lciBpcyBkaXNhYmxlZCwgYW5kIGlnbm9yZXMgc291cmNlIHZhbHVlcyB3aGVuIHRoZSB0aW1lclxuXHQgKiBpcyBlbmFibGVkLiBJbml0aWFsbHksIHRoZSB0aW1lciBpcyBkaXNhYmxlZC4gQXMgc29vbiBhcyB0aGUgZmlyc3Qgc291cmNlXG5cdCAqIHZhbHVlIGFycml2ZXMsIGl0IGlzIGZvcndhcmRlZCB0byB0aGUgb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGVuIHRoZSB0aW1lclxuXHQgKiBpcyBlbmFibGVkIGJ5IGNhbGxpbmcgdGhlIGBkdXJhdGlvblNlbGVjdG9yYCBmdW5jdGlvbiB3aXRoIHRoZSBzb3VyY2UgdmFsdWUsXG5cdCAqIHdoaWNoIHJldHVybnMgdGhlIFwiZHVyYXRpb25cIiBPYnNlcnZhYmxlLiBXaGVuIHRoZSBkdXJhdGlvbiBPYnNlcnZhYmxlIGVtaXRzIGFcblx0ICogdmFsdWUgb3IgY29tcGxldGVzLCB0aGUgdGltZXIgaXMgZGlzYWJsZWQsIGFuZCB0aGlzIHByb2Nlc3MgcmVwZWF0cyBmb3IgdGhlXG5cdCAqIG5leHQgc291cmNlIHZhbHVlLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrcyBhdCBhIHJhdGUgb2YgYXQgbW9zdCBvbmUgY2xpY2sgcGVyIHNlY29uZDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy50aHJvdHRsZShldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgYXVkaXR9XG5cdCAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuXHQgKiBAc2VlIHtAbGluayBkZWxheVdoZW59XG5cdCAqIEBzZWUge0BsaW5rIHNhbXBsZX1cblx0ICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUKTogT2JzZXJ2YWJsZXxQcm9taXNlfSBkdXJhdGlvblNlbGVjdG9yIEEgZnVuY3Rpb25cblx0ICogdGhhdCByZWNlaXZlcyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBmb3IgY29tcHV0aW5nIHRoZSBzaWxlbmNpbmdcblx0ICogZHVyYXRpb24gZm9yIGVhY2ggc291cmNlIHZhbHVlLCByZXR1cm5lZCBhcyBhbiBPYnNlcnZhYmxlIG9yIGEgUHJvbWlzZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IHBlcmZvcm1zIHRoZSB0aHJvdHRsZSBvcGVyYXRpb24gdG9cblx0ICogbGltaXQgdGhlIHJhdGUgb2YgZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS5cblx0ICogQG1ldGhvZCB0aHJvdHRsZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gdGhyb3R0bGUoZHVyYXRpb25TZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVGhyb3R0bGVPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSk7XG5cdH1cblx0ZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xuXHR2YXIgVGhyb3R0bGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgVGhyb3R0bGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFRocm90dGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVGhyb3R0bGVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgVGhyb3R0bGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhUaHJvdHRsZVN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBUaHJvdHRsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG5cdCAgICB9XG5cdCAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLnRocm90dGxlZCkge1xuXHQgICAgICAgICAgICB0aGlzLnRyeUR1cmF0aW9uU2VsZWN0b3IodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUR1cmF0aW9uU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5lbWl0QW5kVGhyb3R0bGUodmFsdWUsIGR1cmF0aW9uKTtcblx0ICAgIH07XG5cdCAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLmVtaXRBbmRUaHJvdHRsZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcblx0ICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZHVyYXRpb24pKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgfTtcblx0ICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0aHJvdHRsZWQgPSB0aGlzLnRocm90dGxlZDtcblx0ICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUaHJvdHRsZVN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjYxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0aHJvdHRsZVRpbWVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYyKTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRocm90dGxlVGltZSA9IHRocm90dGxlVGltZV8xLnRocm90dGxlVGltZTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjYyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgYXN5bmNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xuXHQvKipcblx0ICogRW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgdGhlbiBpZ25vcmVzIHN1YnNlcXVlbnQgc291cmNlXG5cdCAqIHZhbHVlcyBmb3IgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMsIHRoZW4gcmVwZWF0cyB0aGlzIHByb2Nlc3MuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MZXRzIGEgdmFsdWUgcGFzcywgdGhlbiBpZ25vcmVzIHNvdXJjZSB2YWx1ZXMgZm9yIHRoZVxuXHQgKiBuZXh0IGBkdXJhdGlvbmAgbWlsbGlzZWNvbmRzLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy90aHJvdHRsZVRpbWUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG5cdCAqXG5cdCAqIGB0aHJvdHRsZVRpbWVgIGVtaXRzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlXG5cdCAqIHdoZW4gaXRzIGludGVybmFsIHRpbWVyIGlzIGRpc2FibGVkLCBhbmQgaWdub3JlcyBzb3VyY2UgdmFsdWVzIHdoZW4gdGhlIHRpbWVyXG5cdCAqIGlzIGVuYWJsZWQuIEluaXRpYWxseSwgdGhlIHRpbWVyIGlzIGRpc2FibGVkLiBBcyBzb29uIGFzIHRoZSBmaXJzdCBzb3VyY2Vcblx0ICogdmFsdWUgYXJyaXZlcywgaXQgaXMgZm9yd2FyZGVkIHRvIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSwgYW5kIHRoZW4gdGhlIHRpbWVyXG5cdCAqIGlzIGVuYWJsZWQuIEFmdGVyIGBkdXJhdGlvbmAgbWlsbGlzZWNvbmRzIChvciB0aGUgdGltZSB1bml0IGRldGVybWluZWRcblx0ICogaW50ZXJuYWxseSBieSB0aGUgb3B0aW9uYWwgYHNjaGVkdWxlcmApIGhhcyBwYXNzZWQsIHRoZSB0aW1lciBpcyBkaXNhYmxlZCxcblx0ICogYW5kIHRoaXMgcHJvY2VzcyByZXBlYXRzIGZvciB0aGUgbmV4dCBzb3VyY2UgdmFsdWUuIE9wdGlvbmFsbHkgdGFrZXMgYVxuXHQgKiB7QGxpbmsgU2NoZWR1bGVyfSBmb3IgbWFuYWdpbmcgdGltZXJzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrcyBhdCBhIHJhdGUgb2YgYXQgbW9zdCBvbmUgY2xpY2sgcGVyIHNlY29uZDwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy50aHJvdHRsZVRpbWUoMTAwMCk7XG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIGF1ZGl0VGltZX1cblx0ICogQHNlZSB7QGxpbmsgZGVib3VuY2VUaW1lfVxuXHQgKiBAc2VlIHtAbGluayBkZWxheX1cblx0ICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cblx0ICogQHNlZSB7QGxpbmsgdGhyb3R0bGV9XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaW1lIHRvIHdhaXQgYmVmb3JlIGVtaXR0aW5nIGFub3RoZXIgdmFsdWUgYWZ0ZXJcblx0ICogZW1pdHRpbmcgdGhlIGxhc3QgdmFsdWUsIG1lYXN1cmVkIGluIG1pbGxpc2Vjb25kcyBvciB0aGUgdGltZSB1bml0IGRldGVybWluZWRcblx0ICogaW50ZXJuYWxseSBieSB0aGUgb3B0aW9uYWwgYHNjaGVkdWxlcmAuXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvclxuXHQgKiBtYW5hZ2luZyB0aGUgdGltZXJzIHRoYXQgaGFuZGxlIHRoZSBzYW1wbGluZy5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IHBlcmZvcm1zIHRoZSB0aHJvdHRsZSBvcGVyYXRpb24gdG9cblx0ICogbGltaXQgdGhlIHJhdGUgb2YgZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS5cblx0ICogQG1ldGhvZCB0aHJvdHRsZVRpbWVcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlcikpO1xuXHR9XG5cdGV4cG9ydHMudGhyb3R0bGVUaW1lID0gdGhyb3R0bGVUaW1lO1xuXHR2YXIgVGhyb3R0bGVUaW1lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgIH1cblx0ICAgIFRocm90dGxlVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uLCB0aGlzLnNjaGVkdWxlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUaHJvdHRsZVRpbWVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoVGhyb3R0bGVUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1cmF0aW9uLCB7IHN1YnNjcmliZXI6IHRoaXMgfSkpO1xuXHQgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0aHJvdHRsZWQgPSB0aGlzLnRocm90dGxlZDtcblx0ICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG5cdCAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuXHQgICAgICAgICAgICB0aGlzLnJlbW92ZSh0aHJvdHRsZWQpO1xuXHQgICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdGZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcblx0ICAgIHZhciBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG5cdCAgICBzdWJzY3JpYmVyLmNsZWFyVGhyb3R0bGUoKTtcblx0fVxuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZVRpbWUuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHRpbWVvdXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjY0KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRpbWVvdXQgPSB0aW1lb3V0XzEudGltZW91dDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI2NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdHZhciBpc0RhdGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQvKipcblx0ICogQHBhcmFtIGR1ZVxuXHQgKiBAcGFyYW0gZXJyb3JUb1NlbmRcblx0ICogQHBhcmFtIHNjaGVkdWxlclxuXHQgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fFdlYlNvY2tldFN1YmplY3Q8VD58T2JzZXJ2YWJsZTxUPn1cblx0ICogQG1ldGhvZCB0aW1lb3V0XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB0aW1lb3V0KGR1ZSwgZXJyb3JUb1NlbmQsIHNjaGVkdWxlcikge1xuXHQgICAgaWYgKGVycm9yVG9TZW5kID09PSB2b2lkIDApIHsgZXJyb3JUb1NlbmQgPSBudWxsOyB9XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgdmFyIGFic29sdXRlVGltZW91dCA9IGlzRGF0ZV8xLmlzRGF0ZShkdWUpO1xuXHQgICAgdmFyIHdhaXRGb3IgPSBhYnNvbHV0ZVRpbWVvdXQgPyAoK2R1ZSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkdWUpO1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVGltZW91dE9wZXJhdG9yKHdhaXRGb3IsIGFic29sdXRlVGltZW91dCwgZXJyb3JUb1NlbmQsIHNjaGVkdWxlcikpO1xuXHR9XG5cdGV4cG9ydHMudGltZW91dCA9IHRpbWVvdXQ7XG5cdHZhciBUaW1lb3V0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGltZW91dE9wZXJhdG9yKHdhaXRGb3IsIGFic29sdXRlVGltZW91dCwgZXJyb3JUb1NlbmQsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG5cdCAgICAgICAgdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG5cdCAgICAgICAgdGhpcy5lcnJvclRvU2VuZCA9IGVycm9yVG9TZW5kO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgfVxuXHQgICAgVGltZW91dE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGltZW91dFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hYnNvbHV0ZVRpbWVvdXQsIHRoaXMud2FpdEZvciwgdGhpcy5lcnJvclRvU2VuZCwgdGhpcy5zY2hlZHVsZXIpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVGltZW91dE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBUaW1lb3V0U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoVGltZW91dFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBUaW1lb3V0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWJzb2x1dGVUaW1lb3V0LCB3YWl0Rm9yLCBlcnJvclRvU2VuZCwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuXHQgICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG5cdCAgICAgICAgdGhpcy5lcnJvclRvU2VuZCA9IGVycm9yVG9TZW5kO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgICAgIHRoaXMuX3ByZXZpb3VzSW5kZXggPSAwO1xuXHQgICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG5cdCAgICB9XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLCBcInByZXZpb3VzSW5kZXhcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNJbmRleDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUsIFwiaGFzQ29tcGxldGVkXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc0NvbXBsZXRlZDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIFRpbWVvdXRTdWJzY3JpYmVyLmRpc3BhdGNoVGltZW91dCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuXHQgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzdGF0ZS5pbmRleDtcblx0ICAgICAgICBpZiAoIXNvdXJjZS5oYXNDb21wbGV0ZWQgJiYgc291cmNlLnByZXZpb3VzSW5kZXggPT09IGN1cnJlbnRJbmRleCkge1xuXHQgICAgICAgICAgICBzb3VyY2Uubm90aWZ5VGltZW91dCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKFRpbWVvdXRTdWJzY3JpYmVyLmRpc3BhdGNoVGltZW91dCwgdGhpcy53YWl0Rm9yLCB7IHN1YnNjcmliZXI6IHRoaXMsIGluZGV4OiBjdXJyZW50SW5kZXggfSk7XG5cdCAgICAgICAgdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIHRoaXMuX3ByZXZpb3VzSW5kZXggPSBjdXJyZW50SW5kZXg7XG5cdCAgICB9O1xuXHQgICAgVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcblx0ICAgICAgICBpZiAoIXRoaXMuYWJzb2x1dGVUaW1lb3V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRpbWVvdXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgdGhpcy5faGFzQ29tcGxldGVkID0gdHJ1ZTtcblx0ICAgIH07XG5cdCAgICBUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmVycm9yKHRoaXMuZXJyb3JUb1NlbmQgfHwgbmV3IEVycm9yKCd0aW1lb3V0JykpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUaW1lb3V0U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjY1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB0aW1lb3V0V2l0aF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGltZW91dFdpdGggPSB0aW1lb3V0V2l0aF8xLnRpbWVvdXRXaXRoO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0V2l0aC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI2NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBhc3luY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdHZhciBpc0RhdGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBAcGFyYW0gZHVlXG5cdCAqIEBwYXJhbSB3aXRoT2JzZXJ2YWJsZVxuXHQgKiBAcGFyYW0gc2NoZWR1bGVyXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8Uj58V2ViU29ja2V0U3ViamVjdDxUPnxPYnNlcnZhYmxlPFQ+fVxuXHQgKiBAbWV0aG9kIHRpbWVvdXRXaXRoXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB0aW1lb3V0V2l0aChkdWUsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcblx0ICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG5cdCAgICB2YXIgYWJzb2x1dGVUaW1lb3V0ID0gaXNEYXRlXzEuaXNEYXRlKGR1ZSk7XG5cdCAgICB2YXIgd2FpdEZvciA9IGFic29sdXRlVGltZW91dCA/ICgrZHVlIC0gc2NoZWR1bGVyLm5vdygpKSA6IE1hdGguYWJzKGR1ZSk7XG5cdCAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUaW1lb3V0V2l0aE9wZXJhdG9yKHdhaXRGb3IsIGFic29sdXRlVGltZW91dCwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikpO1xuXHR9XG5cdGV4cG9ydHMudGltZW91dFdpdGggPSB0aW1lb3V0V2l0aDtcblx0dmFyIFRpbWVvdXRXaXRoT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGltZW91dFdpdGhPcGVyYXRvcih3YWl0Rm9yLCBhYnNvbHV0ZVRpbWVvdXQsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICB0aGlzLndhaXRGb3IgPSB3YWl0Rm9yO1xuXHQgICAgICAgIHRoaXMuYWJzb2x1dGVUaW1lb3V0ID0gYWJzb2x1dGVUaW1lb3V0O1xuXHQgICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgIH1cblx0ICAgIFRpbWVvdXRXaXRoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBUaW1lb3V0V2l0aFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hYnNvbHV0ZVRpbWVvdXQsIHRoaXMud2FpdEZvciwgdGhpcy53aXRoT2JzZXJ2YWJsZSwgdGhpcy5zY2hlZHVsZXIpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVGltZW91dFdpdGhPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgVGltZW91dFdpdGhTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhUaW1lb3V0V2l0aFN1YnNjcmliZXIsIF9zdXBlcik7XG5cdCAgICBmdW5jdGlvbiBUaW1lb3V0V2l0aFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFic29sdXRlVGltZW91dCwgd2FpdEZvciwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcblx0ICAgICAgICB0aGlzLmFic29sdXRlVGltZW91dCA9IGFic29sdXRlVGltZW91dDtcblx0ICAgICAgICB0aGlzLndhaXRGb3IgPSB3YWl0Rm9yO1xuXHQgICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcblx0ICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcblx0ICAgICAgICB0aGlzLnRpbWVvdXRTdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5fcHJldmlvdXNJbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5faGFzQ29tcGxldGVkID0gZmFsc2U7XG5cdCAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG5cdCAgICB9XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJwcmV2aW91c0luZGV4XCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzSW5kZXg7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJoYXNDb21wbGV0ZWRcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzQ29tcGxldGVkO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLmRpc3BhdGNoVGltZW91dCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuXHQgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzdGF0ZS5pbmRleDtcblx0ICAgICAgICBpZiAoIXNvdXJjZS5oYXNDb21wbGV0ZWQgJiYgc291cmNlLnByZXZpb3VzSW5kZXggPT09IGN1cnJlbnRJbmRleCkge1xuXHQgICAgICAgICAgICBzb3VyY2UuaGFuZGxlVGltZW91dCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICB2YXIgdGltZW91dFN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCBpbmRleDogY3VycmVudEluZGV4IH07XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoVGltZW91dFdpdGhTdWJzY3JpYmVyLmRpc3BhdGNoVGltZW91dCwgdGhpcy53YWl0Rm9yLCB0aW1lb3V0U3RhdGUpO1xuXHQgICAgICAgIHRoaXMuaW5kZXgrKztcblx0ICAgICAgICB0aGlzLl9wcmV2aW91c0luZGV4ID0gY3VycmVudEluZGV4O1xuXHQgICAgfTtcblx0ICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuXHQgICAgICAgIGlmICghdGhpcy5hYnNvbHV0ZVRpbWVvdXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVRpbWVvdXQoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHQgICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5oYW5kbGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuXHQgICAgICAgICAgICB2YXIgd2l0aE9ic2VydmFibGUgPSB0aGlzLndpdGhPYnNlcnZhYmxlO1xuXHQgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uYWRkKHRoaXMudGltZW91dFN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgd2l0aE9ic2VydmFibGUpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRpbWVvdXRXaXRoU3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFdpdGguanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHRvQXJyYXlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjY4KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRvQXJyYXkgPSB0b0FycmF5XzEudG9BcnJheTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dG9BcnJheS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI2OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0LyoqXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8YW55W10+fFdlYlNvY2tldFN1YmplY3Q8VD58T2JzZXJ2YWJsZTxUPn1cblx0ICogQG1ldGhvZCB0b0FycmF5XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FycmF5KCkge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVG9BcnJheU9wZXJhdG9yKCkpO1xuXHR9XG5cdGV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG5cdHZhciBUb0FycmF5T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVG9BcnJheU9wZXJhdG9yKCkge1xuXHQgICAgfVxuXHQgICAgVG9BcnJheU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVG9BcnJheVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb0FycmF5T3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFRvQXJyYXlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhUb0FycmF5U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFRvQXJyYXlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcblx0ICAgIH1cblx0ICAgIFRvQXJyYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG5cdCAgICAgICAgdGhpcy5hcnJheS5wdXNoKHgpO1xuXHQgICAgfTtcblx0ICAgIFRvQXJyYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuYXJyYXkpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9BcnJheVN1YnNjcmliZXI7XG5cdH0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9dG9BcnJheS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI2OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdG9Qcm9taXNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSB0b1Byb21pc2VfMS50b1Byb21pc2U7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHJvbWlzZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciByb290XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHQvKipcblx0ICogQHBhcmFtIFByb21pc2VDdG9yXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8VD59XG5cdCAqIEBtZXRob2QgdG9Qcm9taXNlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1Byb21pc2UoUHJvbWlzZUN0b3IpIHtcblx0ICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICBpZiAoIVByb21pc2VDdG9yKSB7XG5cdCAgICAgICAgaWYgKHJvb3RfMS5yb290LlJ4ICYmIHJvb3RfMS5yb290LlJ4LmNvbmZpZyAmJiByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZSkge1xuXHQgICAgICAgICAgICBQcm9taXNlQ3RvciA9IHJvb3RfMS5yb290LlJ4LmNvbmZpZy5Qcm9taXNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChyb290XzEucm9vdC5Qcm9taXNlKSB7XG5cdCAgICAgICAgICAgIFByb21pc2VDdG9yID0gcm9vdF8xLnJvb3QuUHJvbWlzZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoIVByb21pc2VDdG9yKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgIHZhciB2YWx1ZTtcblx0ICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHZhbHVlID0geDsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcblx0ICAgIH0pO1xuXHR9XG5cdGV4cG9ydHMudG9Qcm9taXNlID0gdG9Qcm9taXNlO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD10b1Byb21pc2UuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgT2JzZXJ2YWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHdpbmRvd18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2luZG93ID0gd2luZG93XzEud2luZG93O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3cuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyNzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcblx0ICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuXHR9O1xuXHR2YXIgU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBCcmFuY2ggb3V0IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgYXMgYSBuZXN0ZWQgT2JzZXJ2YWJsZSB3aGVuZXZlclxuXHQgKiBgd2luZG93Qm91bmRhcmllc2AgZW1pdHMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGJ1ZmZlcn0sIGJ1dCBlbWl0cyBhIG5lc3RlZCBPYnNlcnZhYmxlXG5cdCAqIGluc3RlYWQgb2YgYW4gYXJyYXkuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3dpbmRvdy5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzIGNvbm5lY3RlZCwgbm9uLW92ZXJsYXBwaW5nXG5cdCAqIHdpbmRvd3MuIEl0IGVtaXRzIHRoZSBjdXJyZW50IHdpbmRvdyBhbmQgb3BlbnMgYSBuZXcgb25lIHdoZW5ldmVyIHRoZVxuXHQgKiBPYnNlcnZhYmxlIGB3aW5kb3dCb3VuZGFyaWVzYCBlbWl0cyBhbiBpdGVtLiBCZWNhdXNlIGVhY2ggd2luZG93IGlzIGFuXG5cdCAqIE9ic2VydmFibGUsIHRoZSBvdXRwdXQgaXMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZS5cblx0ICpcblx0ICogQGV4YW1wbGUgPGNhcHRpb24+SW4gZXZlcnkgd2luZG93IG9mIDEgc2Vjb25kIGVhY2gsIGVtaXQgYXQgbW9zdCAyIGNsaWNrIGV2ZW50czwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy53aW5kb3coaW50ZXJ2YWwpXG5cdCAqICAgLm1hcCh3aW4gPT4gd2luLnRha2UoMikpIC8vIGVhY2ggd2luZG93IGhhcyBhdCBtb3N0IDIgZW1pc3Npb25zXG5cdCAqICAgLm1lcmdlQWxsKCk7IC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1RpbWV9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1RvZ2dsZX1cblx0ICogQHNlZSB7QGxpbmsgd2luZG93V2hlbn1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyfVxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGU8YW55Pn0gd2luZG93Qm91bmRhcmllcyBBbiBPYnNlcnZhYmxlIHRoYXQgY29tcGxldGVzIHRoZVxuXHQgKiBwcmV2aW91cyB3aW5kb3cgYW5kIHN0YXJ0cyBhIG5ldyB3aW5kb3cuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIE9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggYXJlXG5cdCAqIE9ic2VydmFibGVzIGVtaXR0aW5nIHZhbHVlcyBvZiB0aGUgc291cmNlIE9ic2VydmFibGUuXG5cdCAqIEBtZXRob2Qgd2luZG93XG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB3aW5kb3cod2luZG93Qm91bmRhcmllcykge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykpO1xuXHR9XG5cdGV4cG9ydHMud2luZG93ID0gd2luZG93O1xuXHR2YXIgV2luZG93T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykge1xuXHQgICAgICAgIHRoaXMud2luZG93Qm91bmRhcmllcyA9IHdpbmRvd0JvdW5kYXJpZXM7XG5cdCAgICB9XG5cdCAgICBXaW5kb3dPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFdpbmRvd1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy53aW5kb3dCb3VuZGFyaWVzKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBXaW5kb3dTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgd2luZG93Qm91bmRhcmllcykge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG5cdCAgICAgICAgdGhpcy53aW5kb3dCb3VuZGFyaWVzID0gd2luZG93Qm91bmRhcmllcztcblx0ICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHdpbmRvd0JvdW5kYXJpZXMpKTtcblx0ICAgICAgICB0aGlzLm9wZW5XaW5kb3coKTtcblx0ICAgIH1cblx0ICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLm9wZW5XaW5kb3coKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG5cdCAgICB9O1xuXHQgICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuXHQgICAgfTtcblx0ICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy53aW5kb3cubmV4dCh2YWx1ZSk7XG5cdCAgICB9O1xuXHQgICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMud2luZG93LmVycm9yKGVycik7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuXHQgICAgfTtcblx0ICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLndpbmRvdy5jb21wbGV0ZSgpO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG5cdCAgICAgICAgaWYgKHByZXZXaW5kb3cpIHtcblx0ICAgICAgICAgICAgcHJldldpbmRvdy5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHZhciBuZXdXaW5kb3cgPSB0aGlzLndpbmRvdyA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmFkZChuZXdXaW5kb3cpO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLm5leHQobmV3V2luZG93KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gV2luZG93U3Vic2NyaWJlcjtcblx0fShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjczICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB3aW5kb3dDb3VudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzQpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2luZG93Q291bnQgPSB3aW5kb3dDb3VudF8xLndpbmRvd0NvdW50O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dDb3VudC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJzY3JpYmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdC8qKlxuXHQgKiBCcmFuY2ggb3V0IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgYXMgYSBuZXN0ZWQgT2JzZXJ2YWJsZSB3aXRoIGVhY2hcblx0ICogbmVzdGVkIE9ic2VydmFibGUgZW1pdHRpbmcgYXQgbW9zdCBgd2luZG93U2l6ZWAgdmFsdWVzLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBidWZmZXJDb3VudH0sIGJ1dCBlbWl0cyBhIG5lc3RlZFxuXHQgKiBPYnNlcnZhYmxlIGluc3RlYWQgb2YgYW4gYXJyYXkuPC9zcGFuPlxuXHQgKlxuXHQgKiA8aW1nIHNyYz1cIi4vaW1nL3dpbmRvd0NvdW50LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aW5kb3dzIG9mIGl0ZW1zIGl0IGNvbGxlY3RzIGZyb20gdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlLiBUaGUgb3V0cHV0IE9ic2VydmFibGUgZW1pdHMgd2luZG93cyBldmVyeSBgc3RhcnRXaW5kb3dFdmVyeWBcblx0ICogaXRlbXMsIGVhY2ggY29udGFpbmluZyBubyBtb3JlIHRoYW4gYHdpbmRvd1NpemVgIGl0ZW1zLiBXaGVuIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZSBjb21wbGV0ZXMgb3IgZW5jb3VudGVycyBhbiBlcnJvciwgdGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzXG5cdCAqIHRoZSBjdXJyZW50IHdpbmRvdyBhbmQgcHJvcGFnYXRlcyB0aGUgbm90aWZpY2F0aW9uIGZyb20gdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlLiBJZiBgc3RhcnRXaW5kb3dFdmVyeWAgaXMgbm90IHByb3ZpZGVkLCB0aGVuIG5ldyB3aW5kb3dzIGFyZVxuXHQgKiBzdGFydGVkIGltbWVkaWF0ZWx5IGF0IHRoZSBzdGFydCBvZiB0aGUgc291cmNlIGFuZCB3aGVuIGVhY2ggd2luZG93IGNvbXBsZXRlc1xuXHQgKiB3aXRoIHNpemUgYHdpbmRvd1NpemVgLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5JZ25vcmUgZXZlcnkgM3JkIGNsaWNrIGV2ZW50LCBzdGFydGluZyBmcm9tIHRoZSBmaXJzdCBvbmU8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3Mud2luZG93Q291bnQoMylcblx0ICogICAubWFwKHdpbiA9PiB3aW4uc2tpcCgxKSkgLy8gc2tpcCBmaXJzdCBvZiBldmVyeSAzIGNsaWNrc1xuXHQgKiAgIC5tZXJnZUFsbCgpOyAvLyBmbGF0dGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzXG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPklnbm9yZSBldmVyeSAzcmQgY2xpY2sgZXZlbnQsIHN0YXJ0aW5nIGZyb20gdGhlIHRoaXJkIG9uZTwvY2FwdGlvbj5cblx0ICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcblx0ICogdmFyIHJlc3VsdCA9IGNsaWNrcy53aW5kb3dDb3VudCgyLCAzKVxuXHQgKiAgIC5tZXJnZUFsbCgpOyAvLyBmbGF0dGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzXG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd31cblx0ICogQHNlZSB7QGxpbmsgd2luZG93VGltZX1cblx0ICogQHNlZSB7QGxpbmsgd2luZG93VG9nZ2xlfVxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3dXaGVufVxuXHQgKiBAc2VlIHtAbGluayBidWZmZXJDb3VudH1cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpbmRvd1NpemUgVGhlIG1heGltdW0gbnVtYmVyIG9mIHZhbHVlcyBlbWl0dGVkIGJ5IGVhY2hcblx0ICogd2luZG93LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0V2luZG93RXZlcnldIEludGVydmFsIGF0IHdoaWNoIHRvIHN0YXJ0IGEgbmV3IHdpbmRvdy5cblx0ICogRm9yIGV4YW1wbGUgaWYgYHN0YXJ0V2luZG93RXZlcnlgIGlzIGAyYCwgdGhlbiBhIG5ldyB3aW5kb3cgd2lsbCBiZSBzdGFydGVkXG5cdCAqIG9uIGV2ZXJ5IG90aGVyIHZhbHVlIGZyb20gdGhlIHNvdXJjZS4gQSBuZXcgd2luZG93IGlzIHN0YXJ0ZWQgYXQgdGhlXG5cdCAqIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGJ5IGRlZmF1bHQuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIE9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggaW4gdHVyblxuXHQgKiBhcmUgT2JzZXJ2YWJsZSBvZiB2YWx1ZXMuXG5cdCAqIEBtZXRob2Qgd2luZG93Q291bnRcblx0ICogQG93bmVyIE9ic2VydmFibGVcblx0ICovXG5cdGZ1bmN0aW9uIHdpbmRvd0NvdW50KHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcblx0ICAgIGlmIChzdGFydFdpbmRvd0V2ZXJ5ID09PSB2b2lkIDApIHsgc3RhcnRXaW5kb3dFdmVyeSA9IDA7IH1cblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkpO1xuXHR9XG5cdGV4cG9ydHMud2luZG93Q291bnQgPSB3aW5kb3dDb3VudDtcblx0dmFyIFdpbmRvd0NvdW50T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2luZG93Q291bnRPcGVyYXRvcih3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG5cdCAgICAgICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcblx0ICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuXHQgICAgfVxuXHQgICAgV2luZG93Q291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFdpbmRvd0NvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1NpemUsIHRoaXMuc3RhcnRXaW5kb3dFdmVyeSkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBXaW5kb3dDb3VudE9wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBXaW5kb3dDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFdpbmRvd0NvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFdpbmRvd0NvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgd2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG5cdCAgICAgICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcblx0ICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuXHQgICAgICAgIHRoaXMud2luZG93cyA9IFtuZXcgU3ViamVjdF8xLlN1YmplY3QoKV07XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IDA7XG5cdCAgICAgICAgdmFyIGZpcnN0V2luZG93ID0gdGhpcy53aW5kb3dzWzBdO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmFkZChmaXJzdFdpbmRvdyk7XG5cdCAgICAgICAgZGVzdGluYXRpb24ubmV4dChmaXJzdFdpbmRvdyk7XG5cdCAgICB9XG5cdCAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0V2luZG93RXZlcnkgPSAodGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID4gMCkgPyB0aGlzLnN0YXJ0V2luZG93RXZlcnkgOiB0aGlzLndpbmRvd1NpemU7XG5cdCAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcblx0ICAgICAgICB2YXIgd2luZG93U2l6ZSA9IHRoaXMud2luZG93U2l6ZTtcblx0ICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcblx0ICAgICAgICB2YXIgbGVuID0gd2luZG93cy5sZW5ndGg7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICB3aW5kb3dzW2ldLm5leHQodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgYyA9IHRoaXMuY291bnQgLSB3aW5kb3dTaXplICsgMTtcblx0ICAgICAgICBpZiAoYyA+PSAwICYmIGMgJSBzdGFydFdpbmRvd0V2ZXJ5ID09PSAwKSB7XG5cdCAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoKyt0aGlzLmNvdW50ICUgc3RhcnRXaW5kb3dFdmVyeSA9PT0gMCkge1xuXHQgICAgICAgICAgICB2YXIgd2luZG93XzEgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcblx0ICAgICAgICAgICAgd2luZG93cy5wdXNoKHdpbmRvd18xKTtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKHdpbmRvd18xKTtcblx0ICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuXHQgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcblx0ICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd0NvdW50U3Vic2NyaWJlcjtcblx0fShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dDb3VudC5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgd2luZG93VGltZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzYpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2luZG93VGltZSA9IHdpbmRvd1RpbWVfMS53aW5kb3dUaW1lO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUaW1lLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjc2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgU3ViamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIGFzeW5jXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KTtcblx0LyoqXG5cdCAqIEJyYW5jaCBvdXQgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcyBhcyBhIG5lc3RlZCBPYnNlcnZhYmxlIHBlcmlvZGljYWxseVxuXHQgKiBpbiB0aW1lLlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBidWZmZXJUaW1lfSwgYnV0IGVtaXRzIGEgbmVzdGVkXG5cdCAqIE9ic2VydmFibGUgaW5zdGVhZCBvZiBhbiBhcnJheS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvd2luZG93VGltZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIHN0YXJ0cyBhIG5ldyB3aW5kb3cgcGVyaW9kaWNhbGx5LCBhc1xuXHQgKiBkZXRlcm1pbmVkIGJ5IHRoZSBgd2luZG93Q3JlYXRpb25JbnRlcnZhbGAgYXJndW1lbnQuIEl0IGVtaXRzIGVhY2ggd2luZG93XG5cdCAqIGFmdGVyIGEgZml4ZWQgdGltZXNwYW4sIHNwZWNpZmllZCBieSB0aGUgYHdpbmRvd1RpbWVTcGFuYCBhcmd1bWVudC4gV2hlbiB0aGVcblx0ICogc291cmNlIE9ic2VydmFibGUgY29tcGxldGVzIG9yIGVuY291bnRlcnMgYW4gZXJyb3IsIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuXHQgKiBlbWl0cyB0aGUgY3VycmVudCB3aW5kb3cgYW5kIHByb3BhZ2F0ZXMgdGhlIG5vdGlmaWNhdGlvbiBmcm9tIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gSWYgYHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWxgIGlzIG5vdCBwcm92aWRlZCwgdGhlIG91dHB1dFxuXHQgKiBPYnNlcnZhYmxlIHN0YXJ0cyBhIG5ldyB3aW5kb3cgd2hlbiB0aGUgcHJldmlvdXMgd2luZG93IG9mIGR1cmF0aW9uXG5cdCAqIGB3aW5kb3dUaW1lU3BhbmAgY29tcGxldGVzLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5JbiBldmVyeSB3aW5kb3cgb2YgMSBzZWNvbmQgZWFjaCwgZW1pdCBhdCBtb3N0IDIgY2xpY2sgZXZlbnRzPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLndpbmRvd1RpbWUoMTAwMClcblx0ICogICAubWFwKHdpbiA9PiB3aW4udGFrZSgyKSkgLy8gZWFjaCB3aW5kb3cgaGFzIGF0IG1vc3QgMiBlbWlzc2lvbnNcblx0ICogICAubWVyZ2VBbGwoKTsgLy8gZmxhdHRlbiB0aGUgT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlc1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FdmVyeSA1IHNlY29uZHMgc3RhcnQgYSB3aW5kb3cgMSBzZWNvbmQgbG9uZywgYW5kIGVtaXQgYXQgbW9zdCAyIGNsaWNrIGV2ZW50cyBwZXIgd2luZG93PC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLndpbmRvd1RpbWUoMTAwMCwgNTAwMClcblx0ICogICAubWFwKHdpbiA9PiB3aW4udGFrZSgyKSkgLy8gZWFjaCB3aW5kb3cgaGFzIGF0IG1vc3QgMiBlbWlzc2lvbnNcblx0ICogICAubWVyZ2VBbGwoKTsgLy8gZmxhdHRlbiB0aGUgT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlc1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3d9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd0NvdW50fVxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3dUb2dnbGV9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1doZW59XG5cdCAqIEBzZWUge0BsaW5rIGJ1ZmZlclRpbWV9XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aW5kb3dUaW1lU3BhbiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZmlsbCBlYWNoIHdpbmRvdy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aW5kb3dDcmVhdGlvbkludGVydmFsXSBUaGUgaW50ZXJ2YWwgYXQgd2hpY2ggdG8gc3RhcnQgbmV3XG5cdCAqIHdpbmRvd3MuXG5cdCAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgc2NoZWR1bGVyIG9uIHdoaWNoIHRvIHNjaGVkdWxlIHRoZVxuXHQgKiBpbnRlcnZhbHMgdGhhdCBkZXRlcm1pbmUgd2luZG93IGJvdW5kYXJpZXMuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIG9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggaW4gdHVyblxuXHQgKiBhcmUgT2JzZXJ2YWJsZXMuXG5cdCAqIEBtZXRob2Qgd2luZG93VGltZVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gd2luZG93VGltZSh3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSB7XG5cdCAgICBpZiAod2luZG93Q3JlYXRpb25JbnRlcnZhbCA9PT0gdm9pZCAwKSB7IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSBudWxsOyB9XG5cdCAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzY2hlZHVsZXIpKTtcblx0fVxuXHRleHBvcnRzLndpbmRvd1RpbWUgPSB3aW5kb3dUaW1lO1xuXHR2YXIgV2luZG93VGltZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFdpbmRvd1RpbWVPcGVyYXRvcih3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSB7XG5cdCAgICAgICAgdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuXHQgICAgICAgIHRoaXMud2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG5cdCAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG5cdCAgICB9XG5cdCAgICBXaW5kb3dUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBXaW5kb3dUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1RpbWVTcGFuLCB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHRoaXMuc2NoZWR1bGVyKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd1RpbWVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgV2luZG93VGltZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFdpbmRvd1RpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gV2luZG93VGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzY2hlZHVsZXIpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuXHQgICAgICAgIHRoaXMud2luZG93VGltZVNwYW4gPSB3aW5kb3dUaW1lU3Bhbjtcblx0ICAgICAgICB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSB3aW5kb3dDcmVhdGlvbkludGVydmFsO1xuXHQgICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuXHQgICAgICAgIHRoaXMud2luZG93cyA9IFtdO1xuXHQgICAgICAgIGlmICh3aW5kb3dDcmVhdGlvbkludGVydmFsICE9PSBudWxsICYmIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPj0gMCkge1xuXHQgICAgICAgICAgICB2YXIgd2luZG93XzEgPSB0aGlzLm9wZW5XaW5kb3coKTtcblx0ICAgICAgICAgICAgdmFyIGNsb3NlU3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIHdpbmRvdzogd2luZG93XzEsIGNvbnRleHQ6IG51bGwgfTtcblx0ICAgICAgICAgICAgdmFyIGNyZWF0aW9uU3RhdGUgPSB7IHdpbmRvd1RpbWVTcGFuOiB3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbDogd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgc3Vic2NyaWJlcjogdGhpcywgc2NoZWR1bGVyOiBzY2hlZHVsZXIgfTtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoV2luZG93Q2xvc2UsIHdpbmRvd1RpbWVTcGFuLCBjbG9zZVN0YXRlKSk7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0NyZWF0aW9uLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgd2luZG93XzIgPSB0aGlzLm9wZW5XaW5kb3coKTtcblx0ICAgICAgICAgICAgdmFyIHRpbWVTcGFuT25seVN0YXRlID0geyBzdWJzY3JpYmVyOiB0aGlzLCB3aW5kb3c6IHdpbmRvd18yLCB3aW5kb3dUaW1lU3Bhbjogd2luZG93VGltZVNwYW4gfTtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5LCB3aW5kb3dUaW1lU3BhbiwgdGltZVNwYW5Pbmx5U3RhdGUpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcblx0ICAgICAgICB2YXIgbGVuID0gd2luZG93cy5sZW5ndGg7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgd2luZG93XzMgPSB3aW5kb3dzW2ldO1xuXHQgICAgICAgICAgICBpZiAoIXdpbmRvd18zLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3dfMy5uZXh0KHZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuXHQgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuXHQgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdmFyIHdpbmRvd180ID0gd2luZG93cy5zaGlmdCgpO1xuXHQgICAgICAgICAgICBpZiAoIXdpbmRvd180LmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3dfNC5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgd2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG5cdCAgICAgICAgdGhpcy53aW5kb3dzLnB1c2god2luZG93KTtcblx0ICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLmFkZCh3aW5kb3cpO1xuXHQgICAgICAgIGRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcblx0ICAgICAgICByZXR1cm4gd2luZG93O1xuXHQgICAgfTtcblx0ICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3cpIHtcblx0ICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcblx0ICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcblx0ICAgICAgICB3aW5kb3dzLnNwbGljZSh3aW5kb3dzLmluZGV4T2Yod2luZG93KSwgMSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd1RpbWVTdWJzY3JpYmVyO1xuXHR9KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5cdGZ1bmN0aW9uIGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5KHN0YXRlKSB7XG5cdCAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHdpbmRvd1RpbWVTcGFuID0gc3RhdGUud2luZG93VGltZVNwYW4sIHdpbmRvdyA9IHN0YXRlLndpbmRvdztcblx0ICAgIGlmICh3aW5kb3cpIHtcblx0ICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcblx0ICAgIH1cblx0ICAgIHN0YXRlLndpbmRvdyA9IHN1YnNjcmliZXIub3BlbldpbmRvdygpO1xuXHQgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgd2luZG93VGltZVNwYW4pO1xuXHR9XG5cdGZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q3JlYXRpb24oc3RhdGUpIHtcblx0ICAgIHZhciB3aW5kb3dUaW1lU3BhbiA9IHN0YXRlLndpbmRvd1RpbWVTcGFuLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgc2NoZWR1bGVyID0gc3RhdGUuc2NoZWR1bGVyLCB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gc3RhdGUud2luZG93Q3JlYXRpb25JbnRlcnZhbDtcblx0ICAgIHZhciB3aW5kb3cgPSBzdWJzY3JpYmVyLm9wZW5XaW5kb3coKTtcblx0ICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuXHQgICAgdmFyIGNvbnRleHQgPSB7IGFjdGlvbjogYWN0aW9uLCBzdWJzY3JpcHRpb246IG51bGwgfTtcblx0ICAgIHZhciB0aW1lU3BhblN0YXRlID0geyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCB3aW5kb3c6IHdpbmRvdywgY29udGV4dDogY29udGV4dCB9O1xuXHQgICAgY29udGV4dC5zdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIHRpbWVTcGFuU3RhdGUpO1xuXHQgICAgYWN0aW9uLmFkZChjb250ZXh0LnN1YnNjcmlwdGlvbik7XG5cdCAgICBhY3Rpb24uc2NoZWR1bGUoc3RhdGUsIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwpO1xuXHR9XG5cdGZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q2xvc2UoYXJnKSB7XG5cdCAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCB3aW5kb3cgPSBhcmcud2luZG93LCBjb250ZXh0ID0gYXJnLmNvbnRleHQ7XG5cdCAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LmFjdGlvbiAmJiBjb250ZXh0LnN1YnNjcmlwdGlvbikge1xuXHQgICAgICAgIGNvbnRleHQuYWN0aW9uLnJlbW92ZShjb250ZXh0LnN1YnNjcmlwdGlvbik7XG5cdCAgICB9XG5cdCAgICBzdWJzY3JpYmVyLmNsb3NlV2luZG93KHdpbmRvdyk7XG5cdH1cblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93VGltZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgd2luZG93VG9nZ2xlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3OCk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS53aW5kb3dUb2dnbGUgPSB3aW5kb3dUb2dnbGVfMS53aW5kb3dUb2dnbGU7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBTdWJqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIgU3Vic2NyaXB0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0dmFyIHRyeUNhdGNoXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0dmFyIGVycm9yT2JqZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIE91dGVyU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdHZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdC8qKlxuXHQgKiBCcmFuY2ggb3V0IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgYXMgYSBuZXN0ZWQgT2JzZXJ2YWJsZSBzdGFydGluZyBmcm9tXG5cdCAqIGFuIGVtaXNzaW9uIGZyb20gYG9wZW5pbmdzYCBhbmQgZW5kaW5nIHdoZW4gdGhlIG91dHB1dCBvZiBgY2xvc2luZ1NlbGVjdG9yYFxuXHQgKiBlbWl0cy5cblx0ICpcblx0ICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgYnVmZmVyVG9nZ2xlfSwgYnV0IGVtaXRzIGEgbmVzdGVkXG5cdCAqIE9ic2VydmFibGUgaW5zdGVhZCBvZiBhbiBhcnJheS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvd2luZG93VG9nZ2xlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuXHQgKlxuXHQgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aW5kb3dzIG9mIGl0ZW1zIGl0IGNvbGxlY3RzIGZyb20gdGhlIHNvdXJjZVxuXHQgKiBPYnNlcnZhYmxlLiBUaGUgb3V0cHV0IE9ic2VydmFibGUgZW1pdHMgd2luZG93cyB0aGF0IGNvbnRhaW4gdGhvc2UgaXRlbXNcblx0ICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYmV0d2VlbiB0aGUgdGltZSB3aGVuIHRoZSBgb3BlbmluZ3NgXG5cdCAqIE9ic2VydmFibGUgZW1pdHMgYW4gaXRlbSBhbmQgd2hlbiB0aGUgT2JzZXJ2YWJsZSByZXR1cm5lZCBieVxuXHQgKiBgY2xvc2luZ1NlbGVjdG9yYCBlbWl0cyBhbiBpdGVtLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FdmVyeSBvdGhlciBzZWNvbmQsIGVtaXQgdGhlIGNsaWNrIGV2ZW50cyBmcm9tIHRoZSBuZXh0IDUwMG1zPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgb3BlbmluZ3MgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzLndpbmRvd1RvZ2dsZShvcGVuaW5ncywgaSA9PlxuXHQgKiAgIGkgJSAyID8gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCg1MDApIDogUnguT2JzZXJ2YWJsZS5lbXB0eSgpXG5cdCAqICkubWVyZ2VBbGwoKTtcblx0ICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcblx0ICpcblx0ICogQHNlZSB7QGxpbmsgd2luZG93fVxuXHQgKiBAc2VlIHtAbGluayB3aW5kb3dDb3VudH1cblx0ICogQHNlZSB7QGxpbmsgd2luZG93VGltZX1cblx0ICogQHNlZSB7QGxpbmsgd2luZG93V2hlbn1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyVG9nZ2xlfVxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGU8Tz59IG9wZW5pbmdzIEFuIG9ic2VydmFibGUgb2Ygbm90aWZpY2F0aW9ucyB0byBzdGFydCBuZXdcblx0ICogd2luZG93cy5cblx0ICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogTyk6IE9ic2VydmFibGV9IGNsb3NpbmdTZWxlY3RvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXNcblx0ICogdGhlIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIGBvcGVuaW5nc2Agb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlLFxuXHQgKiB3aGljaCwgd2hlbiBpdCBlbWl0cyAoZWl0aGVyIGBuZXh0YCBvciBgY29tcGxldGVgKSwgc2lnbmFscyB0aGF0IHRoZVxuXHQgKiBhc3NvY2lhdGVkIHdpbmRvdyBzaG91bGQgY29tcGxldGUuXG5cdCAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIG9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggaW4gdHVyblxuXHQgKiBhcmUgT2JzZXJ2YWJsZXMuXG5cdCAqIEBtZXRob2Qgd2luZG93VG9nZ2xlXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB3aW5kb3dUb2dnbGUob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93VG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3RvcikpO1xuXHR9XG5cdGV4cG9ydHMud2luZG93VG9nZ2xlID0gd2luZG93VG9nZ2xlO1xuXHR2YXIgV2luZG93VG9nZ2xlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2luZG93VG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcblx0ICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3Rvcjtcblx0ICAgIH1cblx0ICAgIFdpbmRvd1RvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2luZG93VG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBXaW5kb3dUb2dnbGVPcGVyYXRvcjtcblx0fSgpKTtcblx0LyoqXG5cdCAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG5cdCAqIEBpZ25vcmVcblx0ICogQGV4dGVuZHMge0lnbm9yZWR9XG5cdCAqL1xuXHR2YXIgV2luZG93VG9nZ2xlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoV2luZG93VG9nZ2xlU3Vic2NyaWJlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG5cdCAgICAgICAgdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgICAgIHRoaXMuY29udGV4dHMgPSBbXTtcblx0ICAgICAgICB0aGlzLmFkZCh0aGlzLm9wZW5TdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG9wZW5pbmdzLCBvcGVuaW5ncykpO1xuXHQgICAgfVxuXHQgICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuXHQgICAgICAgIGlmIChjb250ZXh0cykge1xuXHQgICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBjb250ZXh0c1tpXS53aW5kb3cubmV4dCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG5cdCAgICAgICAgaWYgKGNvbnRleHRzKSB7XG5cdCAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1tpbmRleF07XG5cdCAgICAgICAgICAgICAgICBjb250ZXh0LndpbmRvdy5lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG5cdCAgICB9O1xuXHQgICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG5cdCAgICAgICAgaWYgKGNvbnRleHRzKSB7XG5cdCAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1tpbmRleF07XG5cdCAgICAgICAgICAgICAgICBjb250ZXh0LndpbmRvdy5jb21wbGV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuXHQgICAgfTtcblx0ICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuXHQgICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuXHQgICAgICAgIGlmIChjb250ZXh0cykge1xuXHQgICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcblx0ICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHNbaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgY29udGV4dC53aW5kb3cudW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICAgICAgICAgIGNvbnRleHQuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuXHQgICAgICAgIGlmIChvdXRlclZhbHVlID09PSB0aGlzLm9wZW5pbmdzKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3Rvcjtcblx0ICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllciA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goY2xvc2luZ1NlbGVjdG9yKShpbm5lclZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKGNsb3NpbmdOb3RpZmllciA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcblx0ICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0geyB3aW5kb3c6IHdpbmRvd18xLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiB9O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIsIGNvbnRleHQpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24uY29udGV4dCA9IGNvbnRleHQ7XG5cdCAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93XzEpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNsb3NlV2luZG93KHRoaXMuY29udGV4dHMuaW5kZXhPZihvdXRlclZhbHVlKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lcikge1xuXHQgICAgICAgIGlmIChpbm5lciAhPT0gdGhpcy5vcGVuU3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5pbmRleE9mKGlubmVyLmNvbnRleHQpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0ICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcblx0ICAgICAgICB2YXIgY29udGV4dCA9IGNvbnRleHRzW2luZGV4XTtcblx0ICAgICAgICB2YXIgd2luZG93ID0gY29udGV4dC53aW5kb3csIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuXHQgICAgICAgIGNvbnRleHRzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG5cdCAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXI7XG5cdH0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5cdC8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI3OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgd2luZG93V2hlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODApO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2luZG93V2hlbiA9IHdpbmRvd1doZW5fMS53aW5kb3dXaGVuO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dXaGVuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjgwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciB0cnlDYXRjaF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBlcnJvck9iamVjdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogQnJhbmNoIG91dCB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIGFzIGEgbmVzdGVkIE9ic2VydmFibGUgdXNpbmcgYVxuXHQgKiBmYWN0b3J5IGZ1bmN0aW9uIG9mIGNsb3NpbmcgT2JzZXJ2YWJsZXMgdG8gZGV0ZXJtaW5lIHdoZW4gdG8gc3RhcnQgYSBuZXdcblx0ICogd2luZG93LlxuXHQgKlxuXHQgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBidWZmZXJXaGVufSwgYnV0IGVtaXRzIGEgbmVzdGVkXG5cdCAqIE9ic2VydmFibGUgaW5zdGVhZCBvZiBhbiBhcnJheS48L3NwYW4+XG5cdCAqXG5cdCAqIDxpbWcgc3JjPVwiLi9pbWcvd2luZG93V2hlbi5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzIGNvbm5lY3RlZCwgbm9uLW92ZXJsYXBwaW5nIHdpbmRvd3MuXG5cdCAqIEl0IGVtaXRzIHRoZSBjdXJyZW50IHdpbmRvdyBhbmQgb3BlbnMgYSBuZXcgb25lIHdoZW5ldmVyIHRoZSBPYnNlcnZhYmxlXG5cdCAqIHByb2R1Y2VkIGJ5IHRoZSBzcGVjaWZpZWQgYGNsb3NpbmdTZWxlY3RvcmAgZnVuY3Rpb24gZW1pdHMgYW4gaXRlbS4gVGhlIGZpcnN0XG5cdCAqIHdpbmRvdyBpcyBvcGVuZWQgaW1tZWRpYXRlbHkgd2hlbiBzdWJzY3JpYmluZyB0byB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG5cdCAqXG5cdCAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgb25seSB0aGUgZmlyc3QgdHdvIGNsaWNrcyBldmVudHMgaW4gZXZlcnkgd2luZG93IG9mIFsxLTVdIHJhbmRvbSBzZWNvbmRzPC9jYXB0aW9uPlxuXHQgKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuXHQgKiB2YXIgcmVzdWx0ID0gY2xpY2tzXG5cdCAqICAgLndpbmRvd1doZW4oKCkgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwICsgTWF0aC5yYW5kb20oKSAqIDQwMDApKVxuXHQgKiAgIC5tYXAod2luID0+IHdpbi50YWtlKDIpKSAvLyBlYWNoIHdpbmRvdyBoYXMgYXQgbW9zdCAyIGVtaXNzaW9uc1xuXHQgKiAgIC5tZXJnZUFsbCgpOyAvLyBmbGF0dGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzXG5cdCAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG5cdCAqXG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd31cblx0ICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1RpbWV9XG5cdCAqIEBzZWUge0BsaW5rIHdpbmRvd1RvZ2dsZX1cblx0ICogQHNlZSB7QGxpbmsgYnVmZmVyV2hlbn1cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbigpOiBPYnNlcnZhYmxlfSBjbG9zaW5nU2VsZWN0b3IgQSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vXG5cdCAqIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgc2lnbmFscyAob24gZWl0aGVyIGBuZXh0YCBvclxuXHQgKiBgY29tcGxldGVgKSB3aGVuIHRvIGNsb3NlIHRoZSBwcmV2aW91cyB3aW5kb3cgYW5kIHN0YXJ0IGEgbmV3IG9uZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxPYnNlcnZhYmxlPFQ+Pn0gQW4gb2JzZXJ2YWJsZSBvZiB3aW5kb3dzLCB3aGljaCBpbiB0dXJuXG5cdCAqIGFyZSBPYnNlcnZhYmxlcy5cblx0ICogQG1ldGhvZCB3aW5kb3dXaGVuXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB3aW5kb3dXaGVuKGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93T3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSk7XG5cdH1cblx0ZXhwb3J0cy53aW5kb3dXaGVuID0gd2luZG93V2hlbjtcblx0dmFyIFdpbmRvd09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFdpbmRvd09wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuXHQgICAgfVxuXHQgICAgV2luZG93T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBXaW5kb3dTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2xvc2luZ1NlbGVjdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xuXHR9KCkpO1xuXHQvKipcblx0ICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cblx0ICogQGlnbm9yZVxuXHQgKiBAZXh0ZW5kcyB7SWdub3JlZH1cblx0ICovXG5cdHZhciBXaW5kb3dTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuXHQgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcblx0ICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3Rvcjtcblx0ICAgICAgICB0aGlzLm9wZW5XaW5kb3coKTtcblx0ICAgIH1cblx0ICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcblx0ICAgICAgICB0aGlzLm9wZW5XaW5kb3coaW5uZXJTdWIpO1xuXHQgICAgfTtcblx0ICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIHRoaXMub3BlbldpbmRvdyhpbm5lclN1Yik7XG5cdCAgICB9O1xuXHQgICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLndpbmRvdy5uZXh0KHZhbHVlKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG5cdCAgICAgICAgdGhpcy51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24oKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy53aW5kb3cuY29tcGxldGUoKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgdGhpcy51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24oKTtcblx0ICAgIH07XG5cdCAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLmNsb3NpbmdOb3RpZmljYXRpb24udW5zdWJzY3JpYmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUub3BlbldpbmRvdyA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuXHQgICAgICAgIGlmIChpbm5lclN1YiA9PT0gdm9pZCAwKSB7IGlubmVyU3ViID0gbnVsbDsgfVxuXHQgICAgICAgIGlmIChpbm5lclN1Yikge1xuXHQgICAgICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG5cdCAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG5cdCAgICAgICAgaWYgKHByZXZXaW5kb3cpIHtcblx0ICAgICAgICAgICAgcHJldldpbmRvdy5jb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgd2luZG93ID0gdGhpcy53aW5kb3cgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcblx0ICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaCh0aGlzLmNsb3NpbmdTZWxlY3RvcikoKTtcblx0ICAgICAgICBpZiAoY2xvc2luZ05vdGlmaWVyID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG5cdCAgICAgICAgICAgIHZhciBlcnIgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZXJyKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyKSk7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHdpbmRvdyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBXaW5kb3dTdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dXaGVuLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjgxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB3aXRoTGF0ZXN0RnJvbV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODIpO1xuXHRPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2l0aExhdGVzdEZyb20gPSB3aXRoTGF0ZXN0RnJvbV8xLndpdGhMYXRlc3RGcm9tO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI4MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBPdXRlclN1YnNjcmliZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHR2YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHQvKipcblx0ICogQ29tYmluZXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGggb3RoZXIgT2JzZXJ2YWJsZXMgdG8gY3JlYXRlIGFuIE9ic2VydmFibGVcblx0ICogd2hvc2UgdmFsdWVzIGFyZSBjYWxjdWxhdGVkIGZyb20gdGhlIGxhdGVzdCB2YWx1ZXMgb2YgZWFjaCwgb25seSB3aGVuIHRoZVxuXHQgKiBzb3VyY2UgZW1pdHMuXG5cdCAqXG5cdCAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5XaGVuZXZlciB0aGUgc291cmNlIE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZSwgaXRcblx0ICogY29tcHV0ZXMgYSBmb3JtdWxhIHVzaW5nIHRoYXQgdmFsdWUgcGx1cyB0aGUgbGF0ZXN0IHZhbHVlcyBmcm9tIG90aGVyIGlucHV0XG5cdCAqIE9ic2VydmFibGVzLCB0aGVuIGVtaXRzIHRoZSBvdXRwdXQgb2YgdGhhdCBmb3JtdWxhLjwvc3Bhbj5cblx0ICpcblx0ICogPGltZyBzcmM9XCIuL2ltZy93aXRoTGF0ZXN0RnJvbS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cblx0ICpcblx0ICogYHdpdGhMYXRlc3RGcm9tYCBjb21iaW5lcyBlYWNoIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlICh0aGVcblx0ICogaW5zdGFuY2UpIHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSB0aGUgb3RoZXIgaW5wdXQgT2JzZXJ2YWJsZXMgb25seSB3aGVuXG5cdCAqIHRoZSBzb3VyY2UgZW1pdHMgYSB2YWx1ZSwgb3B0aW9uYWxseSB1c2luZyBhIGBwcm9qZWN0YCBmdW5jdGlvbiB0byBkZXRlcm1pbmVcblx0ICogdGhlIHZhbHVlIHRvIGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLiBBbGwgaW5wdXQgT2JzZXJ2YWJsZXMgbXVzdFxuXHQgKiBlbWl0IGF0IGxlYXN0IG9uZSB2YWx1ZSBiZWZvcmUgdGhlIG91dHB1dCBPYnNlcnZhYmxlIHdpbGwgZW1pdCBhIHZhbHVlLlxuXHQgKlxuXHQgKiBAZXhhbXBsZSA8Y2FwdGlvbj5PbiBldmVyeSBjbGljayBldmVudCwgZW1pdCBhbiBhcnJheSB3aXRoIHRoZSBsYXRlc3QgdGltZXIgZXZlbnQgcGx1cyB0aGUgY2xpY2sgZXZlbnQ8L2NhcHRpb24+XG5cdCAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG5cdCAqIHZhciB0aW1lciA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG5cdCAqIHZhciByZXN1bHQgPSBjbGlja3Mud2l0aExhdGVzdEZyb20odGltZXIpO1xuXHQgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuXHQgKlxuXHQgKiBAc2VlIHtAbGluayBjb21iaW5lTGF0ZXN0fVxuXHQgKlxuXHQgKiBAcGFyYW0ge09ic2VydmFibGV9IG90aGVyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29tYmluZSB3aXRoIHRoZSBzb3VyY2Vcblx0ICogT2JzZXJ2YWJsZS4gTW9yZSB0aGFuIG9uZSBpbnB1dCBPYnNlcnZhYmxlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9qZWN0XSBQcm9qZWN0aW9uIGZ1bmN0aW9uIGZvciBjb21iaW5pbmcgdmFsdWVzXG5cdCAqIHRvZ2V0aGVyLiBSZWNlaXZlcyBhbGwgdmFsdWVzIGluIG9yZGVyIG9mIHRoZSBPYnNlcnZhYmxlcyBwYXNzZWQsIHdoZXJlIHRoZVxuXHQgKiBmaXJzdCBwYXJhbWV0ZXIgaXMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gKGUuZy5cblx0ICogYGEud2l0aExhdGVzdEZyb20oYiwgYywgKGExLCBiMSwgYzEpID0+IGExICsgYjEgKyBjMSlgKS4gSWYgdGhpcyBpcyBub3Rcblx0ICogcGFzc2VkLCBhcnJheXMgd2lsbCBiZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBwcm9qZWN0ZWQgdmFsdWVzIGZyb20gdGhlIG1vc3QgcmVjZW50XG5cdCAqIHZhbHVlcyBmcm9tIGVhY2ggaW5wdXQgT2JzZXJ2YWJsZSwgb3IgYW4gYXJyYXkgb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlcyBmcm9tXG5cdCAqIGVhY2ggaW5wdXQgT2JzZXJ2YWJsZS5cblx0ICogQG1ldGhvZCB3aXRoTGF0ZXN0RnJvbVxuXHQgKiBAb3duZXIgT2JzZXJ2YWJsZVxuXHQgKi9cblx0ZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG5cdCAgICB2YXIgYXJncyA9IFtdO1xuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICBhcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgfVxuXHQgICAgdmFyIHByb2plY3Q7XG5cdCAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHByb2plY3QgPSBhcmdzLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgdmFyIG9ic2VydmFibGVzID0gYXJncztcblx0ICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpKTtcblx0fVxuXHRleHBvcnRzLndpdGhMYXRlc3RGcm9tID0gd2l0aExhdGVzdEZyb207XG5cdC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cdHZhciBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpIHtcblx0ICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXM7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgIH1cblx0ICAgIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vYnNlcnZhYmxlcywgdGhpcy5wcm9qZWN0KSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG5cdH0oKSk7XG5cdC8qKlxuXHQgKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuXHQgKiBAaWdub3JlXG5cdCAqIEBleHRlbmRzIHtJZ25vcmVkfVxuXHQgKi9cblx0dmFyIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG5cdCAgICBfX2V4dGVuZHMoV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXM7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblx0ICAgICAgICB0aGlzLnRvUmVzcG9uZCA9IFtdO1xuXHQgICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG5cdCAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9SZXNwb25kLnB1c2goaSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG5cdCAgICAgICAgdGhpcy52YWx1ZXNbb3V0ZXJJbmRleF0gPSBpbm5lclZhbHVlO1xuXHQgICAgICAgIHZhciB0b1Jlc3BvbmQgPSB0aGlzLnRvUmVzcG9uZDtcblx0ICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdmFyIGZvdW5kID0gdG9SZXNwb25kLmluZGV4T2Yob3V0ZXJJbmRleCk7XG5cdCAgICAgICAgICAgIGlmIChmb3VuZCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gbm9vcFxuXHQgICAgfTtcblx0ICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBpZiAodGhpcy50b1Jlc3BvbmQubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHZhciBhcmdzID0gW3ZhbHVlXS5jb25jYXQodGhpcy52YWx1ZXMpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByb2plY3QgPSBmdW5jdGlvbiAoYXJncykge1xuXHQgICAgICAgIHZhciByZXN1bHQ7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyO1xuXHR9KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI4MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBPYnNlcnZhYmxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgemlwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNyk7XG5cdE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS56aXAgPSB6aXBfMS56aXBQcm90bztcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjg0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIE9ic2VydmFibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciB6aXBBbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg1KTtcblx0T2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnppcEFsbCA9IHppcEFsbF8xLnppcEFsbDtcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9emlwQWxsLmpzLm1hcFxuXG4vKioqLyB9LFxuLyogMjg1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIHppcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpO1xuXHQvKipcblx0ICogQHBhcmFtIHByb2plY3Rcblx0ICogQHJldHVybiB7T2JzZXJ2YWJsZTxSPnxXZWJTb2NrZXRTdWJqZWN0PFQ+fE9ic2VydmFibGU8VD59XG5cdCAqIEBtZXRob2QgemlwQWxsXG5cdCAqIEBvd25lciBPYnNlcnZhYmxlXG5cdCAqL1xuXHRmdW5jdGlvbiB6aXBBbGwocHJvamVjdCkge1xuXHQgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgemlwXzEuWmlwT3BlcmF0b3IocHJvamVjdCkpO1xuXHR9XG5cdGV4cG9ydHMuemlwQWxsID0gemlwQWxsO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD16aXBBbGwuanMubWFwXG5cbi8qKiovIH0sXG4vKiAyODYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgU3Vic2NyaWJlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBPcGVyYXRvcigpIHtcblx0ICAgIH1cblx0ICAgIE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuXHQgICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBPcGVyYXRvcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5PcGVyYXRvciA9IE9wZXJhdG9yO1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvci5qcy5tYXBcblxuLyoqKi8gfSxcbi8qIDI4NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHJvdXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIGFwcF9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XG5cdHZhciByZWZlcmVuY2Vfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODkpO1xuXHR2YXIgc3RhZmZfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTApO1xuXHR2YXIgbmJfbm90aWZ5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MSk7XG5cdHZhciBuYXZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkyKTtcblx0dmFyIHByb2plY3RzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5NCk7XG5cdHZhciBwcm9qZWN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5OCk7XG5cdHZhciB0YXNrc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDEpO1xuXHR2YXIgdGFza18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDQpO1xuXHR2YXIgdXNlcl9wcm9maWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNyk7XG5cdHZhciBsb2dpbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTIpO1xuXHR2YXIgdXNlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTApO1xuXHR2YXIgQXBwID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFwcChyb3V0ZXIsIGFwcFNlcnZpY2UsIHJlZmVyZW5jZVNlcnZpY2UsIHN0YWZmU2VydmljZSkge1xuXHQgICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZSA9IGFwcFNlcnZpY2U7XG5cdCAgICAgICAgdGhpcy5yZWZlcmVuY2VTZXJ2aWNlID0gcmVmZXJlbmNlU2VydmljZTtcblx0ICAgICAgICB0aGlzLnN0YWZmU2VydmljZSA9IHN0YWZmU2VydmljZTtcblx0ICAgICAgICB0aGlzLkhFQURFUl9USVRMRSA9IFwiUHJvamVjdHNcIjtcblx0ICAgIH1cblx0ICAgIEFwcC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHdpbmRvdykgeyB0aGlzLm9uUmVzaXplKHdpbmRvdyk7IH07XG5cdCAgICA7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwLnByb3RvdHlwZSwgXCJkZXZpY2VcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pc01vYmlsZURldmljZTsgfSxcblx0ICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICA7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwLnByb3RvdHlwZSwgXCJ0b2dnbGVOYXZWaXNpYmxlXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuaXNOYXZDb2xsYXBzZWQ7IH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgO1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcC5wcm90b3R5cGUsIFwidG9nZ2xlU2VhcmNoXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuaXNTZWFyY2hPcGVuOyB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIDtcblx0ICAgIEFwcC5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB0aGlzLmlzU2VhcmNoT3BlbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmxvZ2dlZFVzZXIgPSBuZXcgdXNlcl8xLlVzZXIoKTtcblx0ICAgICAgICB0aGlzLmlzTW9iaWxlRGV2aWNlID0gdGhpcy5pc01vYmlsZSgpO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZS5nZXRUcmFuc2xhdGlvbnMoKS5zdWJzY3JpYmUoZnVuY3Rpb24gKGNhcHRpb25zKSB7IHJldHVybiBjb25zb2xlLmxvZyhjYXB0aW9ucyk7IH0sIGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcblx0ICAgICAgICAgICAgX3RoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIEFwcC5wcm90b3R5cGUudG9nZ2xlTmF2ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSAhdGhpcy5pc05hdkNvbGxhcHNlZDtcblx0ICAgIH07XG5cdCAgICBBcHAucHJvdG90eXBlLmhpZGVOYXYgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmlzU2VhcmNoT3BlbiA9IGZhbHNlO1xuXHQgICAgfTtcblx0ICAgIEFwcC5wcm90b3R5cGUuc2VhcmNoVG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaXNTZWFyY2hPcGVuID0gIXRoaXMuaXNTZWFyY2hPcGVuO1xuXHQgICAgfTtcblx0ICAgIEFwcC5wcm90b3R5cGUubG9nb3V0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAvLyB0aGlzLmxvZ2dlZFVzZXIgPSBudWxsO1xuXHQgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ0xvZ291dCc7XG5cdCAgICB9O1xuXHQgICAgQXBwLnByb3RvdHlwZS5nb0JhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuXHQgICAgfTtcblx0ICAgIEFwcC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgfTtcblx0ICAgIEFwcC5wcm90b3R5cGUuaXNNb2JpbGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblx0ICAgIH07XG5cdCAgICBBcHAucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKHdpbmRvdykge1xuXHQgICAgICAgIHRoaXMuaXNNb2JpbGVEZXZpY2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0IHx8IHRoaXMuaXNNb2JpbGUoKTtcblx0ICAgIH07XG5cdCAgICBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuSG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQudGFyZ2V0J10pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIEZ1bmN0aW9uKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpyZXR1cm50eXBlJywgdm9pZCAwKVxuXHQgICAgXSwgQXBwLnByb3RvdHlwZSwgXCJyZXNpemVcIiwgbnVsbCk7XG5cdCAgICBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuSG9zdEJpbmRpbmcoJ2NsYXNzLnBob25lJyksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgT2JqZWN0KVxuXHQgICAgXSwgQXBwLnByb3RvdHlwZSwgXCJkZXZpY2VcIiwgbnVsbCk7XG5cdCAgICBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuSG9zdEJpbmRpbmcoJ2NsYXNzLnNpZGUtbmF2LXRvZ2dsZScpLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIE9iamVjdClcblx0ICAgIF0sIEFwcC5wcm90b3R5cGUsIFwidG9nZ2xlTmF2VmlzaWJsZVwiLCBudWxsKTtcblx0ICAgIF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5Ib3N0QmluZGluZygnY2xhc3Muc2VhcmNoLW9wZW4nKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnR5cGUnLCBPYmplY3QpXG5cdCAgICBdLCBBcHAucHJvdG90eXBlLCBcInRvZ2dsZVNlYXJjaFwiLCBudWxsKTtcblx0ICAgIEFwcCA9IF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuXHQgICAgICAgICAgICBzZWxlY3RvcjogJ3Byb2plY3QtYXBwJyxcblx0ICAgICAgICAgICAgdGVtcGxhdGU6IF9fd2VicGFja19yZXF1aXJlX18oMzEzKSxcblx0ICAgICAgICAgICAgZGlyZWN0aXZlczogW3JvdXRlcl8xLlJPVVRFUl9ESVJFQ1RJVkVTLCBuYXZfMS5OYXZDb21wb25lbnQsIG5iX25vdGlmeV8xLk5CTm90aWZ5Q29tcG9uZW50XVxuXHQgICAgICAgIH0pLFxuXHQgICAgICAgIHJvdXRlcl8xLlJvdXRlcyhbXG5cdCAgICAgICAgICAgIHsgcGF0aDogJy90YXNrcy86Zm9yJywgY29tcG9uZW50OiB0YXNrc18xLlRhc2tzQ29tcG9uZW50IH0sXG5cdCAgICAgICAgICAgIHsgcGF0aDogJy90YXNrcycsIGNvbXBvbmVudDogdGFza3NfMS5UYXNrc0NvbXBvbmVudCB9LFxuXHQgICAgICAgICAgICB7IHBhdGg6ICcvdGFzay86aWQnLCBjb21wb25lbnQ6IHRhc2tfMS5UYXNrQ29tcG9uZW50IH0sXG5cdCAgICAgICAgICAgIHsgcGF0aDogJy9wcm9qZWN0cy86aWQnLCBjb21wb25lbnQ6IHByb2plY3RfMS5Qcm9qZWN0Q29tcG9uZW50IH0sXG5cdCAgICAgICAgICAgIHsgcGF0aDogJy9wcm9qZWN0cycsIGNvbXBvbmVudDogcHJvamVjdHNfMS5Qcm9qZWN0c0NvbXBvbmVudCB9LFxuXHQgICAgICAgICAgICB7IHBhdGg6ICcvdXNlci1wcm9maWxlJywgY29tcG9uZW50OiB1c2VyX3Byb2ZpbGVfMS5Vc2VyUHJvZmlsZUNvbXBvbmVudCB9LFxuXHQgICAgICAgICAgICB7IHBhdGg6ICcvbG9naW4nLCBjb21wb25lbnQ6IGxvZ2luXzEuTG9naW5Db21wb25lbnQgfVxuXHQgICAgICAgIF0pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtyb3V0ZXJfMS5Sb3V0ZXIsIGFwcF9zZXJ2aWNlXzEuQXBwU2VydmljZSwgcmVmZXJlbmNlX3NlcnZpY2VfMS5SZWZlcmVuY2VTZXJ2aWNlLCBzdGFmZl9zZXJ2aWNlXzEuU3RhZmZTZXJ2aWNlXSlcblx0ICAgIF0sIEFwcCk7XG5cdCAgICByZXR1cm4gQXBwO1xuXHR9KCkpO1xuXHRleHBvcnRzLkFwcCA9IEFwcDtcblxuXG4vKioqLyB9LFxuLyogMjg4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG5cdCAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0dmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG5cdH07XG5cdHZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgaHR0cF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIEFwcFNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQXBwU2VydmljZShodHRwKSB7XG5cdCAgICAgICAgdGhpcy5odHRwID0gaHR0cDtcblx0ICAgIH1cblx0ICAgIEFwcFNlcnZpY2UucHJvdG90eXBlLmdldFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaGVhZGVyID0geyBoZWFkZXJzOiBuZXcgaHR0cF8xLkhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG5cdCAgICAgICAgdmFyIHVybCA9ICdwP2lkPWNvbW1vbi1jYXB0aW9ucyc7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBoZWFkZXIpXG5cdCAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5qc29uKCkuY2FwdGlvbnM7IH0pO1xuXHQgICAgfTtcblx0ICAgIEFwcFNlcnZpY2UucHJvdG90eXBlLmdldE5hdiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaGVhZGVyID0geyBoZWFkZXJzOiBuZXcgaHR0cF8xLkhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG5cdCAgICAgICAgdmFyIHVybCA9ICdwP2lkPW91dGxpbmUnO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKTtcblx0ICAgIH07XG5cdCAgICBBcHBTZXJ2aWNlLnByb3RvdHlwZS5nZXRVc2VycyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaGVhZGVyID0geyBoZWFkZXJzOiBuZXcgaHR0cF8xLkhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG5cdCAgICAgICAgdmFyIHVybCA9ICdwP2lkPXVzZXJzJztcblx0ICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcilcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdLmxpc3Q7IH0pXG5cdCAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZTsgfSk7XG5cdCAgICB9O1xuXHQgICAgQXBwU2VydmljZS5wcm90b3R5cGUudXBkYXRlVXNlclByb2ZpbGUgPSBmdW5jdGlvbiAodXNlcikge1xuXHQgICAgICAgIC8vXG5cdCAgICB9O1xuXHQgICAgQXBwU2VydmljZS5wcm90b3R5cGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKCcvJyk7XG5cdCAgICB9O1xuXHQgICAgQXBwU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKCksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2h0dHBfMS5IdHRwXSlcblx0ICAgIF0sIEFwcFNlcnZpY2UpO1xuXHQgICAgcmV0dXJuIEFwcFNlcnZpY2U7XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXBwU2VydmljZSA9IEFwcFNlcnZpY2U7XG5cblxuLyoqKi8gfSxcbi8qIDI4OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGh0dHBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBSZWZlcmVuY2VTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFJlZmVyZW5jZVNlcnZpY2UoaHR0cCkge1xuXHQgICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7XG5cdCAgICB9XG5cdCAgICBSZWZlcmVuY2VTZXJ2aWNlLnByb3RvdHlwZS5nZXRUYWdzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBoZWFkZXIgPSB7IGhlYWRlcnM6IG5ldyBodHRwXzEuSGVhZGVycyh7ICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicgfSkgfTtcblx0ICAgICAgICB2YXIgdXJsID0gJy9SZWZlcmVuY2UvcD9pZD10YWdzJztcblx0ICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcilcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdLmxpc3Q7IH0pXG5cdCAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZTsgfSk7XG5cdCAgICB9O1xuXHQgICAgUmVmZXJlbmNlU2VydmljZS5wcm90b3R5cGUuZ2V0VGFza1R5cGVzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBoZWFkZXIgPSB7IGhlYWRlcnM6IG5ldyBodHRwXzEuSGVhZGVycyh7ICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicgfSkgfTtcblx0ICAgICAgICB2YXIgdXJsID0gJy9SZWZlcmVuY2UvcD9pZD10YXNrdHlwZXMnO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKVxuXHQgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdDsgfSlcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlOyB9KTtcblx0ICAgIH07XG5cdCAgICBSZWZlcmVuY2VTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkluamVjdGFibGUoKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbaHR0cF8xLkh0dHBdKVxuXHQgICAgXSwgUmVmZXJlbmNlU2VydmljZSk7XG5cdCAgICByZXR1cm4gUmVmZXJlbmNlU2VydmljZTtcblx0fSgpKTtcblx0ZXhwb3J0cy5SZWZlcmVuY2VTZXJ2aWNlID0gUmVmZXJlbmNlU2VydmljZTtcblxuXG4vKioqLyB9LFxuLyogMjkwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG5cdCAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0dmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG5cdH07XG5cdHZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgaHR0cF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIFN0YWZmU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTdGFmZlNlcnZpY2UoaHR0cCkge1xuXHQgICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7XG5cdCAgICB9XG5cdCAgICBTdGFmZlNlcnZpY2UucHJvdG90eXBlLmdldE9yZ2FuaXphdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGhlYWRlciA9IHsgaGVhZGVyczogbmV3IGh0dHBfMS5IZWFkZXJzKHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSB9O1xuXHQgICAgICAgIHZhciB1cmwgPSAnL1N0YWZmL3A/aWQ9Z2V0LW9yZ2FuaXphdGlvbnMnO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKVxuXHQgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdDsgfSlcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlOyB9KTtcblx0ICAgIH07XG5cdCAgICBTdGFmZlNlcnZpY2UgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtodHRwXzEuSHR0cF0pXG5cdCAgICBdLCBTdGFmZlNlcnZpY2UpO1xuXHQgICAgcmV0dXJuIFN0YWZmU2VydmljZTtcblx0fSgpKTtcblx0ZXhwb3J0cy5TdGFmZlNlcnZpY2UgPSBTdGFmZlNlcnZpY2U7XG5cblxuLyoqKi8gfSxcbi8qIDI5MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIF9Ob3R5ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIF9Ob3R5KHR5cGUsIG1lc3NhZ2UsIHZpc2libGUpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSAnJztcblx0ICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcblx0ICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdCAgICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBfTm90eTtcblx0fSgpKTtcblx0dmFyIE5CTm90aWZ5Q29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE5CTm90aWZ5Q29tcG9uZW50KCkge1xuXHQgICAgICAgIHRoaXMubm90aWZ5TGlzdCA9IFtdO1xuXHQgICAgICAgIC8vIHRoaXMubm90aWZ5TGlzdC5wdXNoKG5ldyBfTm90eSgnaW5mbycsICdoZWxsbycsIHRydWUpKTtcblx0ICAgIH1cblx0ICAgIE5CTm90aWZ5Q29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG5cdCAgICAgICAgICAgIHNlbGVjdG9yOiAnbmItbm90aWZ5Jyxcblx0ICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJuYi1ub3RpZnlcXFwiICpuZ0lmPVxcXCJub3RpZnlMaXN0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJuYi1ub3RpZnktZW50cnkte3tub3RpZnkudHlwZX19XFxcIiBzdHlsZT1cXFwiZGlzcGxheTpibG9jaztcXFwiICpuZ0Zvcj1cXFwibGV0IG5vdGlmeSBvZiBub3RpZnlMaXN0XFxcIj57e25vdGlmeS5tZXNzYWdlfX08L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcIlxuXHQgICAgICAgIH0pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxuXHQgICAgXSwgTkJOb3RpZnlDb21wb25lbnQpO1xuXHQgICAgcmV0dXJuIE5CTm90aWZ5Q29tcG9uZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLk5CTm90aWZ5Q29tcG9uZW50ID0gTkJOb3RpZnlDb21wb25lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDI5MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHJvdXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIGFwcF9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XG5cdHZhciBOYXZDb21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTmF2Q29tcG9uZW50KHJvdXRlciwgYXBwU2VydmljZSkge1xuXHQgICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZSA9IGFwcFNlcnZpY2U7XG5cdCAgICB9XG5cdCAgICBOYXZDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcblx0ICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmF2XScsXG5cdCAgICAgICAgICAgIHRlbXBsYXRlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MyksXG5cdCAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtyb3V0ZXJfMS5ST1VURVJfRElSRUNUSVZFU11cblx0ICAgICAgICB9KSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcm91dGVyXzEuUm91dGVyLCBhcHBfc2VydmljZV8xLkFwcFNlcnZpY2VdKVxuXHQgICAgXSwgTmF2Q29tcG9uZW50KTtcblx0ICAgIHJldHVybiBOYXZDb21wb25lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuTmF2Q29tcG9uZW50ID0gTmF2Q29tcG9uZW50O1xuXG5cbi8qKiovIH0sXG4vKiAyOTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gXCI8dWw+XFxuICAgIDxsaT5cXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFza3MnLCAnaW5ib3gnXVxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtaW5ib3hcXFwiPjwvaT5cXG4gICAgICAgICAgICA8c3Bhbj57eydpbmJveCd9fTwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy90YXNrcycsICd0b2RheSddXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jYWxlbmRhci1vXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4+e3sndG9kYXknfX08L3NwYW4+XFxuICAgICAgICA8L2E+XFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFza3MnLCAnd2VlayddXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jYWxlbmRhclxcXCI+PC9pPlxcbiAgICAgICAgICAgIDxzcGFuPnt7J3dlZWsnfX08L3NwYW4+XFxuICAgICAgICA8L2E+XFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFza3MnLCAnYWxsJ11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWRhdGFiYXNlXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4+e3snYWxsJ319PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Rhc2tzJywgJ2NvbXBsZXRlZCddXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jaGVjay1zcXVhcmUtb1xcXCI+PC9pPlxcbiAgICAgICAgICAgIDxzcGFuPnt7J2NvbXBsZXRlZCd9fTwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy90YXNrcycsICdteSddXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS10aWNrZXRcXFwiPjwvaT5cXG4gICAgICAgICAgICA8c3Bhbj57eydteV90YXNrcyd9fTwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9saT5cXG4gICAgPGxpIGNsYXNzPVxcXCJkaXZpZGVyXFxcIj48L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Byb2plY3RzJ11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXB1enpsZS1waWVjZVxcXCI+PC9pPlxcbiAgICAgICAgICAgIDxzcGFuPnt7J3Byb2plY3RzJ319PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2xpPlxcbjwvdWw+XFxuXCJcblxuLyoqKi8gfSxcbi8qIDI5NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHJvdXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIGNvbW1vbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0dmFyIHByb2plY3Rfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTUpO1xuXHR2YXIgUHJvamVjdHNDb21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUHJvamVjdHNDb21wb25lbnQocm91dGVyLCBwcm9qZWN0U2VydmljZSkge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZSA9IHByb2plY3RTZXJ2aWNlO1xuXHQgICAgICAgIHByb2plY3RTZXJ2aWNlLmdldFByb2plY3RzKCkuc3Vic2NyaWJlKGZ1bmN0aW9uIChwcm9qZWN0cykgeyByZXR1cm4gX3RoaXMucHJvamVjdHMgPSBwcm9qZWN0czsgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHsgcmV0dXJuIF90aGlzLmhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpOyB9KTtcblx0ICAgIH1cblx0ICAgIFByb2plY3RzQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb3NlUmVjb3JkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3Byb2plY3RzJywgJ25ldyddKTtcblx0ICAgIH07XG5cdCAgICBQcm9qZWN0c0NvbXBvbmVudC5wcm90b3R5cGUuZGVsZXRlUHJvamVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnByb2plY3RTZXJ2aWNlLmRlbGV0ZVByb2plY3QodGhpcy5zZWxlY3RlZFByb2plY3RzKS5zdWJzY3JpYmUoKTtcblx0ICAgIH07XG5cdCAgICBQcm9qZWN0c0NvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlWGhyRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xuXHQgICAgICAgIGlmIChlcnJvclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cdCAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBQcm9qZWN0c0NvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuXHQgICAgICAgICAgICBzZWxlY3RvcjogJ1twcm9qZWN0c10nLFxuXHQgICAgICAgICAgICB0ZW1wbGF0ZTogX193ZWJwYWNrX3JlcXVpcmVfXygyOTcpLFxuXHQgICAgICAgICAgICBwaXBlczogW2NvbW1vbl8xLkRhdGVQaXBlXVxuXHQgICAgICAgIH0pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtyb3V0ZXJfMS5Sb3V0ZXIsIHByb2plY3Rfc2VydmljZV8xLlByb2plY3RTZXJ2aWNlXSlcblx0ICAgIF0sIFByb2plY3RzQ29tcG9uZW50KTtcblx0ICAgIHJldHVybiBQcm9qZWN0c0NvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5Qcm9qZWN0c0NvbXBvbmVudCA9IFByb2plY3RzQ29tcG9uZW50O1xuXG5cbi8qKiovIH0sXG4vKiAyOTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcblx0ICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHR2YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcblx0fTtcblx0dmFyIGNvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBodHRwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgb2JqX3V0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5Nik7XG5cdHZhciBWSUVXX1VSTCA9ICdwP2lkPXByb2plY3Qtdmlldyc7XG5cdHZhciBGT1JNX1VSTCA9ICdwP2lkPXByb2plY3QtZm9ybSc7XG5cdHZhciBIRUFERVIgPSB7XG5cdCAgICBoZWFkZXJzOiBuZXcgaHR0cF8xLkhlYWRlcnMoe1xuXHQgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04Jyxcblx0ICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdCAgICB9KVxuXHR9O1xuXHR2YXIgUHJvamVjdFNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUHJvamVjdFNlcnZpY2UoaHR0cCkge1xuXHQgICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7XG5cdCAgICB9XG5cdCAgICBQcm9qZWN0U2VydmljZS5wcm90b3R5cGUuZ2V0UHJvamVjdHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoVklFV19VUkwsIEhFQURFUilcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdLmxpc3Q7IH0pXG5cdCAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZTsgfSk7XG5cdCAgICB9O1xuXHQgICAgUHJvamVjdFNlcnZpY2UucHJvdG90eXBlLmdldFByb2plY3RCeUlkID0gZnVuY3Rpb24gKHByb2plY3RJZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KEZPUk1fVVJMICsgJyZkb2NpZD0nICsgcHJvamVjdElkLCBIRUFERVIpXG5cdCAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5qc29uKCkub2JqZWN0c1sxXTsgfSlcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlOyB9KTtcblx0ICAgIH07XG5cdCAgICBQcm9qZWN0U2VydmljZS5wcm90b3R5cGUuc2F2ZVByb2plY3QgPSBmdW5jdGlvbiAocHJvamVjdCkge1xuXHQgICAgICAgIHZhciB1cmwgPSBGT1JNX1VSTCArIChwcm9qZWN0LmlkID8gJyZkb2NpZD0nICsgcHJvamVjdC5pZCA6ICcnKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCB0aGlzLnNlcmlhbGl6ZVByb2plY3QocHJvamVjdCksIEhFQURFUik7XG5cdCAgICB9O1xuXHQgICAgUHJvamVjdFNlcnZpY2UucHJvdG90eXBlLmRlbGV0ZVByb2plY3QgPSBmdW5jdGlvbiAocHJvamVjdHMpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShWSUVXX1VSTCk7XG5cdCAgICB9O1xuXHQgICAgLy9cblx0ICAgIFByb2plY3RTZXJ2aWNlLnByb3RvdHlwZS5zZXJpYWxpemVQcm9qZWN0ID0gZnVuY3Rpb24gKHByb2plY3QpIHtcblx0ICAgICAgICByZXR1cm4gb2JqX3V0aWxzXzEuc2VyaWFsaXplT2JqKHtcblx0ICAgICAgICAgICAgbmFtZTogcHJvamVjdC5uYW1lLFxuXHQgICAgICAgICAgICBzdGF0dXM6IHByb2plY3Quc3RhdHVzLFxuXHQgICAgICAgICAgICBjdXN0b21lcjogcHJvamVjdC5jdXN0b21lciB8fCAnJyxcblx0ICAgICAgICAgICAgbWFuYWdlcjogcHJvamVjdC5tYW5hZ2VyIHx8IDAsXG5cdCAgICAgICAgICAgIHByb2dyYW1tZXI6IHByb2plY3QucHJvZ3JhbW1lciB8fCAwLFxuXHQgICAgICAgICAgICB0ZXN0ZXI6IHByb2plY3QudGVzdGVyIHx8IDAsXG5cdCAgICAgICAgICAgIG9ic2VydmVyczogQXJyYXkuaXNBcnJheShwcm9qZWN0Lm9ic2VydmVycykgPyBwcm9qZWN0Lm9ic2VydmVycy5qb2luKCcsJykgOiAnJyxcblx0ICAgICAgICAgICAgY29tbWVudDogcHJvamVjdC5jb21tZW50LFxuXHQgICAgICAgICAgICBmaW5pc2hfZGF0ZTogcHJvamVjdC5maW5pc2hEYXRlID8gcHJvamVjdC5maW5pc2hEYXRlLnRvU3RyaW5nKCkgOiAnJyxcblx0ICAgICAgICAgICAgYXR0YWNobWVudHM6IHByb2plY3QuYXR0YWNobWVudHMgPyBwcm9qZWN0LmF0dGFjaG1lbnRzLm1hcChmdW5jdGlvbiAoaXQpIHsgcmV0dXJuIGl0LmlkOyB9KS5qb2luKCcsJykgOiAnJ1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIFByb2plY3RTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkluamVjdGFibGUoKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbaHR0cF8xLkh0dHBdKVxuXHQgICAgXSwgUHJvamVjdFNlcnZpY2UpO1xuXHQgICAgcmV0dXJuIFByb2plY3RTZXJ2aWNlO1xuXHR9KCkpO1xuXHRleHBvcnRzLlByb2plY3RTZXJ2aWNlID0gUHJvamVjdFNlcnZpY2U7XG5cblxuLyoqKi8gfSxcbi8qIDI5NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZU9iaihvYmopIHtcblx0ICAgIHZhciByZXN1bHQgPSBbXTtcblx0ICAgIGZvciAodmFyIHByb3BlcnR5IGluIG9iaikge1xuXHQgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwcm9wZXJ0eSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW3Byb3BlcnR5XSkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJyk7XG5cdH1cblx0ZXhwb3J0cy5zZXJpYWxpemVPYmogPSBzZXJpYWxpemVPYmo7XG5cblxuLyoqKi8gfSxcbi8qIDI5NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtaGVhZGVyXFxcIj5cXG4gICAgPGgxIGNsYXNzPVxcXCJoZWFkZXItdGl0bGVcXFwiPlxcbiAgICAgICAge3sncHJvamVjdHMnfX1cXG4gICAgPC9oMT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0blxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjb21wb3NlUmVjb3JkKClcXFwiPlxcbiAgICAgICAgICAgIHt7J25ld19wcm9qZWN0J319XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidmlldyB2aWV3LXByb2plY3RcXFwiPlxcbiAgICAgICAgPGhlYWRlciBjbGFzcz1cXFwiZW50cmllcy1oZWFkXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkLXdyYXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGRhdGEtdG9nZ2xlPVxcXCJkb2NpZFxcXCIgY2xhc3M9XFxcImFsbFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktY2FwdGlvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3QtbmFtZVxcXCI+e3snbmFtZSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2hlYWRlcj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJpZXNcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XFxcIiFwcm9qZWN0c1xcXCI+XFxuICAgICAgICAgICAgICAgIHt7J2xvYWRpbmcnfX1cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS13cmFwXFxcIiAqbmdGb3I9XFxcImxldCBwcm9qZWN0IG9mIHByb2plY3RzXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBkYXRhLWlkPVxcXCJ7e3Byb2plY3QuaWR9fVxcXCIgY2xhc3M9XFxcImVudHJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiZW50cnktc2VsZWN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcImRvY2lkXFxcIiB2YWx1ZT1cXFwie3twcm9qZWN0LmlkfX1cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImVudHJ5LWxpbmtcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWycvcHJvamVjdHMnLCBwcm9qZWN0LmlkXVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3QtbmFtZVxcXCI+e3twcm9qZWN0Lm5hbWV9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3QtY3VzdG9tZXJcXFwiPnt7cHJvamVjdC5jdXN0b21lcj8ubmFtZX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctcHJvamVjdC1jb21tZW50XFxcIj57e3Byb2plY3QuY29tbWVudH19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctZGF0ZVxcXCI+e3twcm9qZWN0LmZpbmlzaERhdGUgfCBkYXRlOidkZC5NTS55J319PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIlxuXG4vKioqLyB9LFxuLyogMjk4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG5cdCAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0dmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG5cdH07XG5cdHZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgcm91dGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgY29tbW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHR2YXIgYXBwX3NlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg4KTtcblx0dmFyIHByb2plY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjk5KTtcblx0dmFyIHByb2plY3Rfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTUpO1xuXHR2YXIgc3RhZmZfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTApO1xuXHR2YXIgUHJvamVjdENvbXBvbmVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBQcm9qZWN0Q29tcG9uZW50KHJvdXRlciwgcm91dGVTZWdtZW50LCBmb3JtQnVpbGRlciwgYXBwU2VydmljZSwgcHJvamVjdFNlcnZpY2UsIHN0YWZmU2VydmljZSkge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG5cdCAgICAgICAgdGhpcy5yb3V0ZVNlZ21lbnQgPSByb3V0ZVNlZ21lbnQ7XG5cdCAgICAgICAgdGhpcy5mb3JtQnVpbGRlciA9IGZvcm1CdWlsZGVyO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZSA9IGFwcFNlcnZpY2U7XG5cdCAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZSA9IHByb2plY3RTZXJ2aWNlO1xuXHQgICAgICAgIHRoaXMuc3RhZmZTZXJ2aWNlID0gc3RhZmZTZXJ2aWNlO1xuXHQgICAgICAgIHRoaXMuc3RhdHVzT3B0aW9ucyA9IHByb2plY3RfMS5Qcm9qZWN0U3RhdHVzVHlwZTtcblx0ICAgICAgICB0aGlzLmZvcm0gPSBmb3JtQnVpbGRlci5ncm91cCh7XG5cdCAgICAgICAgICAgIG5hbWU6IFsnJywgY29tbW9uXzEuVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG5cdCAgICAgICAgICAgIHN0YXR1czogWycnXSxcblx0ICAgICAgICAgICAgY3VzdG9tZXI6IFsnJ10sXG5cdCAgICAgICAgICAgIG1hbmFnZXI6IFsnJ10sXG5cdCAgICAgICAgICAgIHByb2dyYW1tZXI6IFsnJ10sXG5cdCAgICAgICAgICAgIHRlc3RlcjogWycnXSxcblx0ICAgICAgICAgICAgb2JzZXJ2ZXJzOiBbJyddLFxuXHQgICAgICAgICAgICBjb21tZW50OiBbJyddLFxuXHQgICAgICAgICAgICBmaW5pc2hEYXRlOiBbJyddLFxuXHQgICAgICAgICAgICBhdHRhY2htZW50czogWycnXVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICh0aGlzLnJvdXRlU2VnbWVudC5nZXRQYXJhbSgnaWQnKSAhPT0gJ25ldycpIHtcblx0ICAgICAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0QnlJZCh0aGlzLnJvdXRlU2VnbWVudC5nZXRQYXJhbSgnaWQnKSkuc3Vic2NyaWJlKGZ1bmN0aW9uIChwcm9qZWN0KSB7IHJldHVybiBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDsgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHsgcmV0dXJuIF90aGlzLmhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpOyB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvamVjdCA9IG5ldyBwcm9qZWN0XzEuUHJvamVjdCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdGFmZlNlcnZpY2UuZ2V0T3JnYW5pemF0aW9ucygpLnN1YnNjcmliZShmdW5jdGlvbiAob3JncykgeyByZXR1cm4gX3RoaXMuY3VzdG9tZXJzID0gb3JnczsgfSk7XG5cdCAgICAgICAgYXBwU2VydmljZS5nZXRVc2VycygpLnN1YnNjcmliZShmdW5jdGlvbiAodXNlcnMpIHsgcmV0dXJuIF90aGlzLnVzZXJzID0gdXNlcnM7IH0pO1xuXHQgICAgfVxuXHQgICAgUHJvamVjdENvbXBvbmVudC5wcm90b3R5cGUuc2F2ZVByb2plY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB0aGlzLnByb2plY3RTZXJ2aWNlLnNhdmVQcm9qZWN0KHRoaXMucHJvamVjdCkuc3Vic2NyaWJlKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gX3RoaXMuY2xvc2UoKTsgfSk7XG5cdCAgICB9O1xuXHQgICAgUHJvamVjdENvbXBvbmVudC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvcHJvamVjdHMnXSk7XG5cdCAgICB9O1xuXHQgICAgUHJvamVjdENvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlWGhyRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xuXHQgICAgICAgIGlmIChlcnJvclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cdCAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBQcm9qZWN0Q29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG5cdCAgICAgICAgICAgIHNlbGVjdG9yOiAnW3Byb2plY3RdJyxcblx0ICAgICAgICAgICAgdGVtcGxhdGU6IF9fd2VicGFja19yZXF1aXJlX18oMzAwKSxcblx0ICAgICAgICAgICAgZGlyZWN0aXZlczogW2NvbW1vbl8xLkZPUk1fRElSRUNUSVZFU10sXG5cdCAgICAgICAgICAgIHByb3ZpZGVyczogW2NvbW1vbl8xLkZvcm1CdWlsZGVyXVxuXHQgICAgICAgIH0pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtyb3V0ZXJfMS5Sb3V0ZXIsIHJvdXRlcl8xLlJvdXRlU2VnbWVudCwgY29tbW9uXzEuRm9ybUJ1aWxkZXIsIGFwcF9zZXJ2aWNlXzEuQXBwU2VydmljZSwgcHJvamVjdF9zZXJ2aWNlXzEuUHJvamVjdFNlcnZpY2UsIHN0YWZmX3NlcnZpY2VfMS5TdGFmZlNlcnZpY2VdKVxuXHQgICAgXSwgUHJvamVjdENvbXBvbmVudCk7XG5cdCAgICByZXR1cm4gUHJvamVjdENvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5Qcm9qZWN0Q29tcG9uZW50ID0gUHJvamVjdENvbXBvbmVudDtcblxuXG4vKioqLyB9LFxuLyogMjk5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0ZXhwb3J0cy5Qcm9qZWN0U3RhdHVzVHlwZSA9IFtcblx0ICAgICdEUkFGVCcsXG5cdCAgICAnUFJPQ0VTU0VEJyxcblx0ICAgICdGSU5JU0hFRCdcblx0XTtcblx0dmFyIFByb2plY3QgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUHJvamVjdCgpIHtcblx0ICAgIH1cblx0ICAgIHJldHVybiBQcm9qZWN0O1xuXHR9KCkpO1xuXHRleHBvcnRzLlByb2plY3QgPSBQcm9qZWN0O1xuXG5cbi8qKiovIH0sXG4vKiAzMDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gXCI8ZGl2ICpuZ0lmPVxcXCIhcHJvamVjdFxcXCI+XFxuICAgIHt7J2xvYWRpbmcnfX1cXG48L2Rpdj5cXG48Zm9ybSBjbGFzcz1cXFwiZm9ybVxcXCIgW25nRm9ybU1vZGVsXT1cXFwiZm9ybVxcXCIgKm5nSWY9XFxcInByb2plY3RcXFwiPlxcbiAgICA8aGVhZGVyIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYmFja1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICB7eydwcm9qZWN0J319XFxuICAgICAgICA8L2gxPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInNhdmVQcm9qZWN0KClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJ319XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydjbG9zZSd9fVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvaGVhZGVyPlxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J25hbWUnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMubmFtZS52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5uYW1lXFxcIiBuZ0NvbnRyb2w9XFxcIm5hbWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLm5hbWUudmFsaWQgfHwgZm9ybS5jb250cm9scy5uYW1lLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydjdXN0b21lcid9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy5jdXN0b21lci52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuY3VzdG9tZXJcXFwiIG5nQ29udHJvbD1cXFwiY3VzdG9tZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVxcXCJsZXQgYyBvZiBjdXN0b21lcnNcXFwiIFt2YWx1ZV09XFxcImMuaWRcXFwiPnt7Yy5uYW1lfX08L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5jdXN0b21lci52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLmN1c3RvbWVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydtYW5hZ2VyJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLm1hbmFnZXIudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjhcXFwiIFsobmdNb2RlbCldPVxcXCJwcm9qZWN0Lm1hbmFnZXJcXFwiIG5nQ29udHJvbD1cXFwibWFuYWdlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBtIG9mIHVzZXJzXFxcIiBbdmFsdWVdPVxcXCJtLmlkXFxcIj57e20ubG9naW59fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLm1hbmFnZXIudmFsaWQgfHwgZm9ybS5jb250cm9scy5tYW5hZ2VyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydwcm9ncmFtbWVyJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLnByb2dyYW1tZXIudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjhcXFwiIFsobmdNb2RlbCldPVxcXCJwcm9qZWN0LnByb2dyYW1tZXJcXFwiIG5nQ29udHJvbD1cXFwicHJvZ3JhbW1lclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBwIG9mIHVzZXJzXFxcIiBbdmFsdWVdPVxcXCJwLmlkXFxcIj57e3AubG9naW59fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnByb2dyYW1tZXIudmFsaWQgfHwgZm9ybS5jb250cm9scy5wcm9ncmFtbWVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eyd0ZXN0ZXInfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudGVzdGVyLnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC50ZXN0ZXJcXFwiIG5nQ29udHJvbD1cXFwidGVzdGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IHQgb2YgdXNlcnNcXFwiIFt2YWx1ZV09XFxcInQuaWRcXFwiPnt7dC5sb2dpbn19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMudGVzdGVyLnZhbGlkIHx8IGZvcm0uY29udHJvbHMudGVzdGVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydvYnNlcnZlcnMnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5vYnNlcnZlcnNcXFwiIG5nQ29udHJvbD1cXFwib2JzZXJ2ZXJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IG9icyBvZiB1c2Vyc1xcXCIgW3ZhbHVlXT1cXFwib2JzLmlkXFxcIj57e29icy5sb2dpbn19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3snc3RhdHVzJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3Quc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBzdCBvZiBzdGF0dXNPcHRpb25zXFxcIiBbdmFsdWVdPVxcXCJzdFxcXCI+e3tzdH19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3snZmluaXNoRGF0ZSd9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImRhdGVcXFwiIGNsYXNzPVxcXCJzcGFuMlxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuZmluaXNoRGF0ZVxcXCIgbmdDb250cm9sPVxcXCJmaW5pc2hEYXRlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydjb21tZW50J319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmNvbW1lbnQudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuY29tbWVudFxcXCIgbmdDb250cm9sPVxcXCJjb21tZW50XFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5jb21tZW50LnZhbGlkIHx8IGZvcm0uY29udHJvbHMuY29tbWVudC5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJ319XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGxlZ2VuZCBjbGFzcz1cXFwibGVnZW5kXFxcIj5cXG4gICAgICAgICAgICAgICAge3snYXR0YWNobWVudHMnfX1cXG4gICAgICAgICAgICA8L2xlZ2VuZD5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXVwbG9hZFxcXCIgZGF0YS11cGxvYWQ9XFxcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtcGFwZXJjbGlwXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eydhdHRhY2hfZmlsZSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzXFxcIiBkYXRhLXVwbG9hZC1maWxlcz1cXFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzLWZpbGVcXFwiICpuZ0Zvcj1cXFwibGV0IGF0dCBvZiBwcm9qZWN0LmF0dGFjaG1lbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmlsZS1uYW1lXFxcIiBocmVmPVxcXCJ7e2F0dC51cmx9fVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7YXR0LnJlYWxGaWxlTmFtZX19XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1saW5rIGJ0bi1yZW1vdmUtZmlsZSBvbi1lZGl0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgPC9zZWN0aW9uPlxcbjwvZm9ybT5cXG5cIlxuXG4vKioqLyB9LFxuLyogMzAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG5cdCAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0dmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG5cdH07XG5cdHZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgcm91dGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgY29tbW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHR2YXIgdGFza19zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMik7XG5cdHZhciBUYXNrc0NvbXBvbmVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUYXNrc0NvbXBvbmVudChyb3V0ZXIsIHJvdXRlU2VnbWVudCwgdGFza1NlcnZpY2UpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuXHQgICAgICAgIHRoaXMucm91dGVTZWdtZW50ID0gcm91dGVTZWdtZW50O1xuXHQgICAgICAgIHRoaXMudGFza1NlcnZpY2UgPSB0YXNrU2VydmljZTtcblx0ICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmdldFRhc2tzKHRoaXMucm91dGVTZWdtZW50LmdldFBhcmFtKCdmb3InKSkuc3Vic2NyaWJlKGZ1bmN0aW9uICh0YXNrcykgeyByZXR1cm4gX3RoaXMudGFza3MgPSB0YXNrczsgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHsgcmV0dXJuIF90aGlzLmhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpOyB9KTtcblx0ICAgIH1cblx0ICAgIFRhc2tzQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb3NlUmVjb3JkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3Rhc2snLCAnbmV3J10pO1xuXHQgICAgfTtcblx0ICAgIFRhc2tzQ29tcG9uZW50LnByb3RvdHlwZS5kZWxldGVUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcblx0ICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmRlbGV0ZVRhc2sodGFzaykuc3Vic2NyaWJlKCk7XG5cdCAgICB9O1xuXHQgICAgVGFza3NDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVhockVycm9yID0gZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcblx0ICAgICAgICBpZiAoZXJyb3JSZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuXHQgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVGFza3NDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcblx0ICAgICAgICAgICAgc2VsZWN0b3I6ICdbdGFza3NdJyxcblx0ICAgICAgICAgICAgdGVtcGxhdGU6IF9fd2VicGFja19yZXF1aXJlX18oMzAzKSxcblx0ICAgICAgICAgICAgcGlwZXM6IFtjb21tb25fMS5EYXRlUGlwZV1cblx0ICAgICAgICB9KSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcm91dGVyXzEuUm91dGVyLCByb3V0ZXJfMS5Sb3V0ZVNlZ21lbnQsIHRhc2tfc2VydmljZV8xLlRhc2tTZXJ2aWNlXSlcblx0ICAgIF0sIFRhc2tzQ29tcG9uZW50KTtcblx0ICAgIHJldHVybiBUYXNrc0NvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5UYXNrc0NvbXBvbmVudCA9IFRhc2tzQ29tcG9uZW50O1xuXG5cbi8qKiovIH0sXG4vKiAzMDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcblx0ICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHR2YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcblx0fTtcblx0dmFyIGNvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBodHRwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgb2JqX3V0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5Nik7XG5cdHZhciBWSUVXX1VSTCA9ICdwP2lkPXRhc2stdmlldyc7XG5cdHZhciBGT1JNX1VSTCA9ICdwP2lkPXRhc2stZm9ybSc7XG5cdHZhciBIRUFERVIgPSB7XG5cdCAgICBoZWFkZXJzOiBuZXcgaHR0cF8xLkhlYWRlcnMoe1xuXHQgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04Jyxcblx0ICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdCAgICB9KVxuXHR9O1xuXHR2YXIgVGFza1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGFza1NlcnZpY2UoaHR0cCkge1xuXHQgICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7XG5cdCAgICB9XG5cdCAgICBUYXNrU2VydmljZS5wcm90b3R5cGUuZ2V0VGFza3MgPSBmdW5jdGlvbiAoYXQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChWSUVXX1VSTCArIChhdCA/ICcmZm9yPScgKyBhdCA6ICcnKSwgSEVBREVSKVxuXHQgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdDsgfSlcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlOyB9KTtcblx0ICAgIH07XG5cdCAgICBUYXNrU2VydmljZS5wcm90b3R5cGUuZ2V0VGFza0J5SWQgPSBmdW5jdGlvbiAodGFza0lkKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoRk9STV9VUkwgKyAnJmRvY2lkPScgKyB0YXNrSWQsIEhFQURFUilcblx0ICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzFdOyB9KVxuXHQgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2U7IH0pO1xuXHQgICAgfTtcblx0ICAgIFRhc2tTZXJ2aWNlLnByb3RvdHlwZS5zYXZlVGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XG5cdCAgICAgICAgdmFyIHVybCA9IEZPUk1fVVJMICsgKHRhc2suaWQgPyAnJmRvY2lkPScgKyB0YXNrLmlkIDogJycpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIHRoaXMuc2VyaWFsaXplVGFzayh0YXNrKSwgSEVBREVSKTtcblx0ICAgIH07XG5cdCAgICBUYXNrU2VydmljZS5wcm90b3R5cGUuZGVsZXRlVGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoVklFV19VUkwpO1xuXHQgICAgfTtcblx0ICAgIC8vXG5cdCAgICBUYXNrU2VydmljZS5wcm90b3R5cGUuc2VyaWFsaXplVGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XG5cdCAgICAgICAgcmV0dXJuIG9ial91dGlsc18xLnNlcmlhbGl6ZU9iaih7XG5cdCAgICAgICAgICAgIHR5cGU6IHRhc2sudHlwZS5pZCxcblx0ICAgICAgICAgICAgc3RhdHVzOiB0YXNrLnN0YXR1cyxcblx0ICAgICAgICAgICAgcHJpb3JpdHk6IHRhc2sucHJpb3JpdHksXG5cdCAgICAgICAgICAgIGJvZHk6IHRhc2suYm9keSxcblx0ICAgICAgICAgICAgYXNzaWduZWU6IHRhc2suYXNzaWduZWUsXG5cdCAgICAgICAgICAgIHN0YXJ0X2RhdGU6IHRhc2suc3RhcnREYXRlLFxuXHQgICAgICAgICAgICBkdWVfZGF0ZTogdGFzay5kdWVEYXRlLFxuXHQgICAgICAgICAgICB0YWdzOiBBcnJheS5pc0FycmF5KHRhc2sudGFncykgPyB0YXNrLnRhZ3MubWFwKGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gaXQuaWQ7IH0pLmpvaW4oJywnKSA6IHRhc2sudGFncyxcblx0ICAgICAgICAgICAgYXR0YWNobWVudHM6IEFycmF5LmlzQXJyYXkodGFzay5hdHRhY2htZW50cykgPyB0YXNrLmF0dGFjaG1lbnRzLm1hcChmdW5jdGlvbiAoaXQpIHsgcmV0dXJuIGl0LmlkOyB9KS5qb2luKCcsJykgOiAnJ1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIFRhc2tTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkluamVjdGFibGUoKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbaHR0cF8xLkh0dHBdKVxuXHQgICAgXSwgVGFza1NlcnZpY2UpO1xuXHQgICAgcmV0dXJuIFRhc2tTZXJ2aWNlO1xuXHR9KCkpO1xuXHRleHBvcnRzLlRhc2tTZXJ2aWNlID0gVGFza1NlcnZpY2U7XG5cblxuLyoqKi8gfSxcbi8qIDMwMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtaGVhZGVyXFxcIj5cXG4gICAgPGgxIGNsYXNzPVxcXCJoZWFkZXItdGl0bGVcXFwiPlxcbiAgICAgICAge3sndGFza3MnfX1cXG4gICAgPC9oMT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0blxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjb21wb3NlUmVjb3JkKClcXFwiPlxcbiAgICAgICAgICAgIHt7J25ld190YXNrJ319XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidmlldyB2aWV3LXRhc2tcXFwiPlxcbiAgICAgICAgPGhlYWRlciBjbGFzcz1cXFwiZW50cmllcy1oZWFkXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkLXdyYXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGRhdGEtdG9nZ2xlPVxcXCJkb2NpZFxcXCIgY2xhc3M9XFxcImFsbFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktY2FwdGlvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3snYm9keSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2hlYWRlcj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJpZXNcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XFxcIiF0YXNrc1xcXCI+XFxuICAgICAgICAgICAgICAgIHt7J2xvYWRpbmcnfX1cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS13cmFwXFxcIiAqbmdGb3I9XFxcImxldCB0YXNrIG9mIHRhc2tzXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBkYXRhLWlkPVxcXCJ7e3Rhc2suaWR9fVxcXCIgY2xhc3M9XFxcImVudHJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiZW50cnktc2VsZWN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcImRvY2lkXFxcIiB2YWx1ZT1cXFwie3t0YXNrLmlkfX1cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImVudHJ5LWxpbmtcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFzaycsIHRhc2suaWRdXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS1maWVsZHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS1maWVsZHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhc2stc3RhdHVzXFxcIj57e3Rhc2suc3RhdHVzfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1wcmlvcml0eVxcXCI+e3t0YXNrLnByaW9yaXR5fX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1ib2R5XFxcIj57e3Rhc2suYm9keX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhc2stYXNzaWduZWVcXFwiPnt7dGFzay5hc3NpZ25lZX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7dGFzay5zdGFydERhdGUgfCBkYXRlOidkZC5NTS55J319PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7dGFzay5kdWVEYXRlIHwgZGF0ZTonZGQuTU0ueSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YWdzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidGFnXFxcIiAqbmdGb3I9XFxcImxldCB0YWcgb2YgdGFnc1xcXCI+e3t0YWcubmFtZX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCJcblxuLyoqKi8gfSxcbi8qIDMwNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHJvdXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIGNvbW1vbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0dmFyIGFwcF9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XG5cdHZhciB0YXNrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNSk7XG5cdHZhciB0YXNrX3NlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzAyKTtcblx0dmFyIHJlZmVyZW5jZV9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OSk7XG5cdHZhciBUYXNrQ29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRhc2tDb21wb25lbnQocm91dGVyLCByb3V0ZVNlZ21lbnQsIGZvcm1CdWlsZGVyLCBhcHBTZXJ2aWNlLCB0YXNrU2VydmljZSwgcmVmZXJlbmNlU2VydmljZSkge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG5cdCAgICAgICAgdGhpcy5yb3V0ZVNlZ21lbnQgPSByb3V0ZVNlZ21lbnQ7XG5cdCAgICAgICAgdGhpcy5mb3JtQnVpbGRlciA9IGZvcm1CdWlsZGVyO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZSA9IGFwcFNlcnZpY2U7XG5cdCAgICAgICAgdGhpcy50YXNrU2VydmljZSA9IHRhc2tTZXJ2aWNlO1xuXHQgICAgICAgIHRoaXMucmVmZXJlbmNlU2VydmljZSA9IHJlZmVyZW5jZVNlcnZpY2U7XG5cdCAgICAgICAgdGhpcy5mb3JtID0gZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuXHQgICAgICAgICAgICB0eXBlOiBbJyddLFxuXHQgICAgICAgICAgICBzdGF0dXM6IFsnJ10sXG5cdCAgICAgICAgICAgIHByaW9yaXR5OiBbJyddLFxuXHQgICAgICAgICAgICBib2R5OiBbJycsIGNvbW1vbl8xLlZhbGlkYXRvcnMucmVxdWlyZWRdLFxuXHQgICAgICAgICAgICBhc3NpZ25lZTogWycnXSxcblx0ICAgICAgICAgICAgc3RhcnREYXRlOiBbJyddLFxuXHQgICAgICAgICAgICBkdWVEYXRlOiBbJyddLFxuXHQgICAgICAgICAgICB0YWdzOiBbJyddLFxuXHQgICAgICAgICAgICBhdHRhY2htZW50czogWycnXVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICh0aGlzLnJvdXRlU2VnbWVudC5nZXRQYXJhbSgnaWQnKSAhPT0gJ25ldycpIHtcblx0ICAgICAgICAgICAgdGhpcy50YXNrU2VydmljZS5nZXRUYXNrQnlJZCh0aGlzLnJvdXRlU2VnbWVudC5nZXRQYXJhbSgnaWQnKSkuc3Vic2NyaWJlKGZ1bmN0aW9uICh0YXNrKSB7IHJldHVybiBfdGhpcy50YXNrID0gdGFzazsgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHsgcmV0dXJuIF90aGlzLmhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpOyB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMudGFzayA9IG5ldyB0YXNrXzEuVGFzaygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmFwcFNlcnZpY2UuZ2V0VXNlcnMoKS5zdWJzY3JpYmUoZnVuY3Rpb24gKHVzZXJzKSB7IHJldHVybiBfdGhpcy51c2VycyA9IHVzZXJzOyB9KTtcblx0ICAgICAgICB0aGlzLnJlZmVyZW5jZVNlcnZpY2UuZ2V0VGFncygpLnN1YnNjcmliZShmdW5jdGlvbiAodGFncykgeyByZXR1cm4gX3RoaXMudGFncyA9IHRhZ3M7IH0pO1xuXHQgICAgfVxuXHQgICAgVGFza0NvbXBvbmVudC5wcm90b3R5cGUuc2F2ZVRhc2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLnNhdmVUYXNrKHRoaXMudGFzaykuc3Vic2NyaWJlKGZ1bmN0aW9uIChyZXNwKSB7IHJldHVybiBfdGhpcy5jbG9zZSgpOyB9KTtcblx0ICAgIH07XG5cdCAgICBUYXNrQ29tcG9uZW50LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy90YXNrcyddKTtcblx0ICAgIH07XG5cdCAgICBUYXNrQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVYaHJFcnJvciA9IGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XG5cdCAgICAgICAgaWYgKGVycm9yUmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblx0ICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvbG9naW4nXSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRhc2tDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcblx0ICAgICAgICAgICAgc2VsZWN0b3I6ICdbdGFza10nLFxuXHQgICAgICAgICAgICB0ZW1wbGF0ZTogX193ZWJwYWNrX3JlcXVpcmVfXygzMDYpLFxuXHQgICAgICAgICAgICBkaXJlY3RpdmVzOiBbY29tbW9uXzEuRk9STV9ESVJFQ1RJVkVTXSxcblx0ICAgICAgICAgICAgcHJvdmlkZXJzOiBbY29tbW9uXzEuRm9ybUJ1aWxkZXJdXG5cdCAgICAgICAgfSksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JvdXRlcl8xLlJvdXRlciwgcm91dGVyXzEuUm91dGVTZWdtZW50LCBjb21tb25fMS5Gb3JtQnVpbGRlciwgYXBwX3NlcnZpY2VfMS5BcHBTZXJ2aWNlLCB0YXNrX3NlcnZpY2VfMS5UYXNrU2VydmljZSwgcmVmZXJlbmNlX3NlcnZpY2VfMS5SZWZlcmVuY2VTZXJ2aWNlXSlcblx0ICAgIF0sIFRhc2tDb21wb25lbnQpO1xuXHQgICAgcmV0dXJuIFRhc2tDb21wb25lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuVGFza0NvbXBvbmVudCA9IFRhc2tDb21wb25lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDMwNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGV4cG9ydHMuVGFza1ByaW9yaXR5VHlwZSA9IFtcblx0ICAgICdIRUlHSEVTVCcsXG5cdCAgICAnSEVJR0hUJyxcblx0ICAgICdNRURJVU0nLFxuXHQgICAgJ05PUk1BTCdcblx0XTtcblx0ZXhwb3J0cy5UYXNrU3RhdHVzVHlwZSA9IFtcblx0ICAgICdEUkFGVCcsXG5cdCAgICAnV0FJVElORycsXG5cdCAgICAnUFJPQ0VTU0VEJyxcblx0ICAgICdGSU5JU0hFRCdcblx0XTtcblx0dmFyIFRhc2sgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGFzaygpIHtcblx0ICAgIH1cblx0ICAgIHJldHVybiBUYXNrO1xuXHR9KCkpO1xuXHRleHBvcnRzLlRhc2sgPSBUYXNrO1xuXG5cbi8qKiovIH0sXG4vKiAzMDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gXCI8ZGl2ICpuZ0lmPVxcXCIhdGFza1xcXCI+XFxuICAgIHt7J2xvYWRpbmcnfX1cXG48L2Rpdj5cXG48Zm9ybSBjbGFzcz1cXFwiZm9ybVxcXCIgW25nRm9ybU1vZGVsXT1cXFwiZm9ybVxcXCIgKm5nSWY9XFxcInRhc2tcXFwiPlxcbiAgICA8aGVhZGVyIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYmFja1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICB7eyd0YXNrJ319XFxuICAgICAgICA8L2gxPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInNhdmVUYXNrKClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJ319XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydjbG9zZSd9fVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvaGVhZGVyPlxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J3Rhc2tfdHlwZSd9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy50eXBlLnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwic3BhbjZcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnR5cGVcXFwiIG5nQ29udHJvbD1cXFwidHlwZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMudHlwZS52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLnR5cGUucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCd9fVxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J3N0YXR1cyd9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwic3RhdHVzXFxcIiB2YWx1ZT1cXFwiNDUzXFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5zdGF0dXNcXFwiIG5nQ29udHJvbD1cXFwic3RhdHVzXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkRSQUZUPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcInN0YXR1c1xcXCIgdmFsdWU9XFxcIjQ1NFxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5XQUlUSU5HPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcInN0YXR1c1xcXCIgdmFsdWU9XFxcIjQ1NVxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5QUk9DRVNTRUQ8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwic3RhdHVzXFxcIiB2YWx1ZT1cXFwiNDU2XFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5zdGF0dXNcXFwiIG5nQ29udHJvbD1cXFwic3RhdHVzXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZJTklTSEVEPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3sncHJpb3JpdHknfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMucHJpb3JpdHkudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjNcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnByaW9yaXR5XFxcIiBuZ0NvbnRyb2w9XFxcInByaW9yaXR5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IG0gb2YgcHJpb3JpdGllc1xcXCIgW3ZhbHVlXT1cXFwibS52YWx1ZVxcXCI+e3ttLm5hbWV9fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnByaW9yaXR5LnZhbGlkIHx8IGZvcm0uY29udHJvbHMucHJpb3JpdHkucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCd9fVxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J2JvZHknfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMuYm9keS52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5ib2R5XFxcIiBuZ0NvbnRyb2w9XFxcImJvZHlcXFwiPjwvdGV4dGFyZWE+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLmJvZHkudmFsaWQgfHwgZm9ybS5jb250cm9scy5ib2R5LnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydhc3NpZ25lZV91c2VyJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmFzc2lnbmVlLnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5hc3NpZ25lZVxcXCIgbmdDb250cm9sPVxcXCJhc3NpZ25lZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBtIG9mIHVzZXJzXFxcIiBbdmFsdWVdPVxcXCJtLmlkXFxcIj57e20ubG9naW59fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLmFzc2lnbmVlLnZhbGlkIHx8IGZvcm0uY29udHJvbHMuYXNzaWduZWUucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCd9fVxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J3N0YXJ0X2RhdGUnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJkYXRlXFxcIiBjbGFzcz1cXFwic3BhbjJcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnN0YXJ0RGF0ZVxcXCIgbmdDb250cm9sPVxcXCJzdGFydERhdGVcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J2R1ZV9kYXRlJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgY2xhc3M9XFxcInNwYW4yXFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5kdWVEYXRlXFxcIiBuZ0NvbnRyb2w9XFxcImR1ZURhdGVcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J3RhZ3MnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudGFncy52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgbXVsdGlwbGUgWyhuZ01vZGVsKV09XFxcInRhc2sudGFnc1xcXCIgbmdDb250cm9sPVxcXCJ0YWdzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IG0gb2YgdGFnc1xcXCIgW3ZhbHVlXT1cXFwibS5pZFxcXCI+e3ttLm5hbWV9fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnRhZ3MudmFsaWQgfHwgZm9ybS5jb250cm9scy50YWdzLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8bGVnZW5kIGNsYXNzPVxcXCJsZWdlbmRcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydhdHRhY2htZW50cyd9fVxcbiAgICAgICAgICAgIDwvbGVnZW5kPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tdXBsb2FkXFxcIiBkYXRhLXVwbG9hZD1cXFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1wYXBlcmNsaXBcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7J2F0dGFjaF9maWxlJ319PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXR0YWNobWVudHNcXFwiIGRhdGEtdXBsb2FkLWZpbGVzPVxcXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXR0YWNobWVudHMtZmlsZVxcXCIgKm5nRm9yPVxcXCJsZXQgYXR0IG9mIHRhc2suYXR0YWNobWVudHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJmaWxlLW5hbWVcXFwiIGhyZWY9XFxcInt7YXR0LnVybH19XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3thdHQucmVhbEZpbGVOYW1lfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWxpbmsgYnRuLXJlbW92ZS1maWxlIG9uLWVkaXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtdGltZXNcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICA8L3NlY3Rpb24+XFxuPC9mb3JtPlxcblwiXG5cbi8qKiovIH0sXG4vKiAzMDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcblx0ICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHR2YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcblx0fTtcblx0dmFyIGNvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciByb3V0ZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBjb21tb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdHZhciB0YWJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwOCk7XG5cdHZhciB0YWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzA5KTtcblx0dmFyIGFwcF9zZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XG5cdHZhciB1c2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMCk7XG5cdHZhciBVc2VyUHJvZmlsZUNvbXBvbmVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBVc2VyUHJvZmlsZUNvbXBvbmVudChyb3V0ZXIsIGZvcm1CdWlsZGVyLCBhcHBTZXJ2aWNlKSB7XG5cdCAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG5cdCAgICAgICAgdGhpcy5mb3JtQnVpbGRlciA9IGZvcm1CdWlsZGVyO1xuXHQgICAgICAgIHRoaXMuYXBwU2VydmljZSA9IGFwcFNlcnZpY2U7XG5cdCAgICAgICAgdGhpcy51c2VyID0gbmV3IHVzZXJfMS5Vc2VyKCk7XG5cdCAgICAgICAgdGhpcy5mb3JtID0gZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuXHQgICAgICAgICAgICBsb2dpbjogW10sXG5cdCAgICAgICAgICAgIHB3ZDogW10sXG5cdCAgICAgICAgICAgIHB3ZF9jb25maXJtOiBbXSxcblx0ICAgICAgICAgICAgZW1haWw6IFtdXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBVc2VyUHJvZmlsZUNvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlVXNlclByb2ZpbGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5hcHBTZXJ2aWNlLnVwZGF0ZVVzZXJQcm9maWxlKHRoaXMudXNlcik7XG5cdCAgICB9O1xuXHQgICAgVXNlclByb2ZpbGVDb21wb25lbnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG5cdCAgICB9O1xuXHQgICAgVXNlclByb2ZpbGVDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcblx0ICAgICAgICAgICAgc2VsZWN0b3I6ICdbdXNlci1wcm9maWxlXScsXG5cdCAgICAgICAgICAgIHRlbXBsYXRlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMSksXG5cdCAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtjb21tb25fMS5GT1JNX0RJUkVDVElWRVMsIHRhYnNfMS5UYWJzLCB0YWJfMS5UYWJdLFxuXHQgICAgICAgICAgICBwcm92aWRlcnM6IFtjb21tb25fMS5Gb3JtQnVpbGRlcl1cblx0ICAgICAgICB9KSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcm91dGVyXzEuUm91dGVyLCBjb21tb25fMS5Gb3JtQnVpbGRlciwgYXBwX3NlcnZpY2VfMS5BcHBTZXJ2aWNlXSlcblx0ICAgIF0sIFVzZXJQcm9maWxlQ29tcG9uZW50KTtcblx0ICAgIHJldHVybiBVc2VyUHJvZmlsZUNvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5Vc2VyUHJvZmlsZUNvbXBvbmVudCA9IFVzZXJQcm9maWxlQ29tcG9uZW50O1xuXG5cbi8qKiovIH0sXG4vKiAzMDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcblx0ICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHR2YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcblx0ICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcblx0fTtcblx0dmFyIGNvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciB0YWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzA5KTtcblx0dmFyIFRhYnMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGFicygpIHtcblx0ICAgIH1cblx0ICAgIC8vIGNvbnRlbnRDaGlsZHJlbiBhcmUgc2V0XG5cdCAgICBUYWJzLnByb3RvdHlwZS5uZ0FmdGVyQ29udGVudEluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gZ2V0IGFsbCBhY3RpdmUgdGFic1xuXHQgICAgICAgIHZhciBhY3RpdmVUYWJzID0gdGhpcy50YWJzLmZpbHRlcihmdW5jdGlvbiAodGFiKSB7IHJldHVybiB0YWIuYWN0aXZlOyB9KTtcblx0ICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBhY3RpdmUgdGFiIHNldCwgYWN0aXZhdGUgdGhlIGZpcnN0XG5cdCAgICAgICAgaWYgKGFjdGl2ZVRhYnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFiKHRoaXMudGFicy5maXJzdCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRhYnMucHJvdG90eXBlLnNlbGVjdFRhYiA9IGZ1bmN0aW9uICh0YWIpIHtcblx0ICAgICAgICAvLyBkZWFjdGl2YXRlIGFsbCB0YWJzXG5cdCAgICAgICAgdGhpcy50YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLmFjdGl2ZSA9IGZhbHNlOyB9KTtcblx0ICAgICAgICAvLyBhY3RpdmF0ZSB0aGUgdGFiIHRoZSB1c2VyIGhhcyBjbGlja2VkIG9uLlxuXHQgICAgICAgIHRhYi5hY3RpdmUgPSB0cnVlO1xuXHQgICAgfTtcblx0ICAgIFRhYnMucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIH07XG5cdCAgICBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29udGVudENoaWxkcmVuKHRhYl8xLlRhYiksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgY29yZV8xLlF1ZXJ5TGlzdClcblx0ICAgIF0sIFRhYnMucHJvdG90eXBlLCBcInRhYnNcIiwgdm9pZCAwKTtcblx0ICAgIFRhYnMgPSBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcblx0ICAgICAgICAgICAgc2VsZWN0b3I6ICd0YWJzJyxcblx0ICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2LXRhYnNcXFwiPlxcbiAgICAgICAgPGxpICpuZ0Zvcj1cXFwibGV0IHRhYiBvZiB0YWJzXFxcIiAoY2xpY2spPVxcXCJzZWxlY3RUYWIodGFiKVxcXCIgW2NsYXNzLmFjdGl2ZV09XFxcInRhYi5hY3RpdmVcXFwiPlxcbiAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiAoY2xpY2spPVxcXCJwcmV2ZW50RGVmYXVsdCgkZXZlbnQpXFxcIj57e3RhYi50aXRsZX19PC9hPlxcbiAgICAgICAgPC9saT5cXG4gICAgICA8L3VsPlxcbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cXG4gICAgXCJcblx0ICAgICAgICB9KSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcblx0ICAgIF0sIFRhYnMpO1xuXHQgICAgcmV0dXJuIFRhYnM7XG5cdH0oKSk7XG5cdGV4cG9ydHMuVGFicyA9IFRhYnM7XG5cblxuLyoqKi8gfSxcbi8qIDMwOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIFRhYiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUYWIoKSB7XG5cdCAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5JbnB1dCgndGFiVGl0bGUnKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnR5cGUnLCBTdHJpbmcpXG5cdCAgICBdLCBUYWIucHJvdG90eXBlLCBcInRpdGxlXCIsIHZvaWQgMCk7XG5cdCAgICBfX2RlY29yYXRlKFtcblx0ICAgICAgICBjb3JlXzEuSW5wdXQoKSwgXG5cdCAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnR5cGUnLCBPYmplY3QpXG5cdCAgICBdLCBUYWIucHJvdG90eXBlLCBcImFjdGl2ZVwiLCB2b2lkIDApO1xuXHQgICAgVGFiID0gX19kZWNvcmF0ZShbXG5cdCAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG5cdCAgICAgICAgICAgIHNlbGVjdG9yOiAndGFiJyxcblx0ICAgICAgICAgICAgc3R5bGVzOiBbXCIubmF2LXRhYnMgLnBhbmUgeyB9XCJdLFxuXHQgICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgICA8ZGl2IFtoaWRkZW5dPVxcXCIhYWN0aXZlXFxcIiBjbGFzcz1cXFwicGFuZVxcXCI+XFxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgICAgPC9kaXY+XFxuICAgIFwiXG5cdCAgICAgICAgfSksIFxuXHQgICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXG5cdCAgICBdLCBUYWIpO1xuXHQgICAgcmV0dXJuIFRhYjtcblx0fSgpKTtcblx0ZXhwb3J0cy5UYWIgPSBUYWI7XG5cblxuLyoqKi8gfSxcbi8qIDMxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBVc2VyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFVzZXIoKSB7XG5cdCAgICAgICAgdGhpcy51c2VyX25hbWUgPSAnQGFub255bW91cyc7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gVXNlcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5Vc2VyID0gVXNlcjtcblxuXG4vKioqLyB9LFxuLyogMzExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IFwiPGZvcm0gY2xhc3M9XFxcImZvcm0gZm9ybS11c2VycHJvZmlsZVxcXCIgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIFtuZ0Zvcm1Nb2RlbF09XFxcImZvcm1cXFwiPlxcbiAgICA8aGVhZGVyIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYmFja1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICB7eydlbXBsb3llZSd9fSB7e3VzZXIubmFtZX19XFxuICAgICAgICA8L2gxPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInVwZGF0ZVVzZXJQcm9maWxlKClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJ319XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydjbG9zZSd9fVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvaGVhZGVyPlxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgICAgIDx0YWJzPlxcbiAgICAgICAgICAgIDx0YWIgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiB0YWJUaXRsZT1cXFwie3sncHJvcGVydGllcyd9fVxcXCI+XFxuICAgICAgICAgICAgICAgIDwhLS08ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0IGZpZWxkc2V0LXVzZXItYXZhdGFyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwidXNlci1hdmF0YXJcXFwiIHNyYz1cXFwiaW1nL2F2YXRhci5wbmdcXFwiLz5cXG4gICAgICAgICAgICAgICAgPC9maWVsZHNldD4tLT5cXG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldCBmaWVsZHNldC11c2VyLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sndXNlcl9uYW1lJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLm5hbWV9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydsb2dpbl9uYW1lJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcInNwYW4zXFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5sb2dpblxcXCIgbmdDb250cm9sPVxcXCJsb2dpblxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3Bhc3N3b3JkJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicGFzc3dvcmRcXFwiIGNsYXNzPVxcXCJzcGFuM1xcXCIgWyhuZ01vZGVsKV09XFxcInVzZXIucHdkXFxcIiBuZ0NvbnRyb2w9XFxcInB3ZFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3Bhc3N3b3JkX2NvbmZpcm0nfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgY2xhc3M9XFxcInNwYW4zXFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5wd2RfY29uZmlybVxcXCIgbmdDb250cm9sPVxcXCJwd2RfY29uZmlybVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2VtYWlsJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIGNsYXNzPVxcXCJzcGFuM1xcXCIgWyhuZ01vZGVsKV09XFxcInVzZXIuZW1haWxcXFwiIG5nQ29udHJvbD1cXFwiZW1haWxcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydvcmdfbmFtZSd9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7dXNlci5vcmdhbml6YXRpb259fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydkZXBhcnRtZW50J319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLmRlcGFydG1lbnR9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydwb3NpdGlvbid9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7dXNlci5wb3NpdGlvbn19XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JvbGVzJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyIGxpc3Qtc3R5bGUtbm9uZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD1cXFwiZmllbGRzL3JvbGVzL2VudHJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PVxcXCIuXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgICAgIDwvdGFiPlxcbiAgICAgICAgICAgIDx0YWIgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiB0YWJUaXRsZT1cXFwie3snaW50ZXJmYWNlJ319XFxcIj5cXG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3snbGltaXRfdmlldyd9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVxcXCJwYWdlc2l6ZVxcXCIgY2xhc3M9XFxcIm5hdGl2ZSBzcGFuMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCIxMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCIvL3BhZ2VzaXplID0gJzEwJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiMjBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD1cXFwiLy9wYWdlc2l6ZSA9ICcyMCdcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPVxcXCJzZWxlY3RlZFxcXCIgc2VsZWN0PVxcXCInc2VsZWN0ZWQnXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIjMwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9XFxcIi8vcGFnZXNpemUgPSAnMzAnXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT1cXFwic2VsZWN0ZWRcXFwiIHNlbGVjdD1cXFwiJ3NlbGVjdGVkJ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCI1MFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCIvL3BhZ2VzaXplID0gJzUwJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2ludGVyZmFjZV9sYW5nJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9XFxcImN1cnJlbnRsYW5nXFxcIiBzZWxlY3Q9XFxcIi9yZXF1ZXN0L0BsYW5nXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XFxcImxhbmdcXFwiIGNsYXNzPVxcXCJuYXRpdmUgc3BhbjJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9XFxcIi8vcXVlcnlbQGVudGl0eSA9ICdsYW5ndWFnZSddL2VudHJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJ7dmlld2NvbnRlbnQvbGFuZy9AaWR9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCJ2aWV3Y29udGVudC9sYW5nL0BpZCA9ICRjdXJyZW50bGFuZ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPVxcXCJzZWxlY3RlZFxcXCIgc2VsZWN0PVxcXCInc2VsZWN0ZWQnXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9XFxcInZpZXdjb250ZW50L2xhbmdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIiBkYXRhLXRvZ2dsZS10aGVtZT1cXFwidGhlbWUxXFxcIiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3snY2hhbmdlX3NraW4nfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICAgICAgPC90YWI+XFxuICAgICAgICA8L3RhYnM+XFxuICAgIDwvc2VjdGlvbj5cXG48L2Zvcm0+XFxuXCJcblxuLyoqKi8gfSxcbi8qIDMxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG5cdCAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuXHQgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdHZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuXHQgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuXHR9O1xuXHR2YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIExvZ2luQ29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIExvZ2luQ29tcG9uZW50KCkge1xuXHQgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ0xvZ291dCc7XG5cdCAgICB9XG5cdCAgICBMb2dpbkNvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuXHQgICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuXHQgICAgICAgICAgICBzZWxlY3RvcjogJ1tsb2dpbl0nLFxuXHQgICAgICAgICAgICB0ZW1wbGF0ZTogJ2xvZ2luJ1xuXHQgICAgICAgIH0pLCBcblx0ICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxuXHQgICAgXSwgTG9naW5Db21wb25lbnQpO1xuXHQgICAgcmV0dXJuIExvZ2luQ29tcG9uZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkxvZ2luQ29tcG9uZW50ID0gTG9naW5Db21wb25lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDMxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1ub3RpZnk+PC9uYi1ub3RpZnk+XFxuPGRpdiBjbGFzcz1cXFwibGF5b3V0XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1vdmVybGF5XFxcIiAobW91c2Vkb3duKT1cXFwiaGlkZU5hdigkZXZlbnQpXFxcIiAodG91Y2hzdGFydCk9XFxcImhpZGVOYXYoJGV2ZW50KVxcXCI+PC9kaXY+XFxuICAgIDxoZWFkZXIgY2xhc3M9XFxcImhlYWRlciBuYXZiYXIgbmF2YmFyLWZpeGVkLXRvcFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hdmJhci1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tc2lkZS1uYXYtdG9nZ2xlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcInRvZ2dsZU5hdigpXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwiYnJhbmQtbG9nb1xcXCIgYWx0PVxcXCJsb2dvXFxcIiBzcmM9XFxcImltZy9sb2dvLnBuZ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJyYW5kLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7SEVBREVSX1RJVExFfX1cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxuYXYgY2xhc3M9XFxcIm5hdmJhci1uYXYgbmF2YmFyLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2YmFyLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZHJvcGRvd25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJkcm9wZG93bi10b2dnbGVcXFwiIGRhdGEtdG9nZ2xlPVxcXCJkcm9wZG93blxcXCIgKGNsaWNrKT1cXFwicHJldmVudERlZmF1bHQoJGV2ZW50KVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS11c2VyXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSByaWdodFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJ1c2VyLXByb2ZpbGVcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWycvdXNlci1wcm9maWxlJ11cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7bG9nZ2VkVXNlci51c2VyX25hbWV9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJsb2dvdXRcXFwiIGhyZWY9XFxcIiNsb2dvdXRcXFwiIChjbGljayk9XFxcImxvZ291dCgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvdXRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XFxcIm5hdmJhci1mb3JtIG5hdmJhci1zZWFyY2hcXFwiIG5hbWU9XFxcImZ0LXNlYXJjaFxcXCIgKHN1Ym1pdCk9XFxcImZ0U2VhcmNoKClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImhpZGRlblxcXCIgbmFtZT1cXFwiaWRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwic2VhcmNoXFxcIiBjbGFzcz1cXFwicVxcXCIgbmFtZT1cXFwia2V5d29yZFxcXCIgdmFsdWU9XFxcInt7c2VhcmNoX2tleXdvcmR9fVxcXCIgcGxhY2Vob2xkZXI9XFxcInt7J3NlYXJjaCd9fVxcXCIgcmVxdWlyZWQgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIChmb2N1cyk9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAoYmx1cik9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZm9ybT5cXG4gICAgICAgICAgICA8L25hdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2hlYWRlcj5cXG4gICAgPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxuICAgICAgICA8YXNpZGUgbmF2IGNsYXNzPVxcXCJhc2lkZSBzaWRlLW5hdlxcXCI+PC9hc2lkZT5cXG4gICAgICAgIDxtYWluIGNsYXNzPVxcXCJjb250ZW50XFxcIj5cXG4gICAgICAgICAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XFxuICAgICAgICA8L21haW4+XFxuICAgIDwvc2VjdGlvbj5cXG48L2Rpdj5cXG5cIlxuXG4vKioqLyB9XG5dKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBidW5kbGUuanNcbiAqKi8iLCJpbXBvcnQgeyBib290c3RyYXAgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuaW1wb3J0IHsgYmluZCwgcHJvdmlkZSwgZW5hYmxlUHJvZE1vZGUsIFBMQVRGT1JNX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfUFJPVklERVJTLCBSZXF1ZXN0T3B0aW9ucywgQmFzZVJlcXVlc3RPcHRpb25zLCBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBST1VURVJfRElSRUNUSVZFUywgUk9VVEVSX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGT1JNX1BST1ZJREVSUywgTG9jYXRpb25TdHJhdGVneSwgSGFzaExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0ICdyeGpzL1J4JztcblxuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb21wb25lbnRzL2FwcCc7XG5pbXBvcnQgeyBOQk5vdGlmeUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9uYi1ub3RpZnknO1xuaW1wb3J0IHsgQXBwU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXBwLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFza1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3Rhc2suc2VydmljZSc7XG5pbXBvcnQgeyBQcm9qZWN0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcHJvamVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFJlZmVyZW5jZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3JlZmVyZW5jZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0YWZmU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RhZmYuc2VydmljZSc7XG5cbmRlY2xhcmUgbGV0IF9fUFJPRFVDVElPTl9fOiBhbnk7XG5pZiAoX19QUk9EVUNUSU9OX18pIHtcbiAgICBlbmFibGVQcm9kTW9kZSgpO1xufVxuXG5ib290c3RyYXAoQXBwLCBbXG4gICAgSFRUUF9QUk9WSURFUlMsXG4gICAgUk9VVEVSX0RJUkVDVElWRVMsXG4gICAgUk9VVEVSX1BST1ZJREVSUyxcbiAgICBwcm92aWRlKFBMQVRGT1JNX0RJUkVDVElWRVMsIHsgdXNlVmFsdWU6IFJPVVRFUl9ESVJFQ1RJVkVTLCBtdWx0aTogdHJ1ZSB9KSxcbiAgICBwcm92aWRlKExvY2F0aW9uU3RyYXRlZ3ksIHsgdXNlQ2xhc3M6IEhhc2hMb2NhdGlvblN0cmF0ZWd5IH0pLFxuICAgIEZPUk1fUFJPVklERVJTLFxuICAgIE5CTm90aWZ5Q29tcG9uZW50LFxuICAgIEFwcFNlcnZpY2UsXG4gICAgVGFza1NlcnZpY2UsXG4gICAgUHJvamVjdFNlcnZpY2UsXG4gICAgUmVmZXJlbmNlU2VydmljZSxcbiAgICBTdGFmZlNlcnZpY2Vcbl0pLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbWFpbi50c1xuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG4vLyBTdWJqZWN0IGltcG9ydGVkIGJlZm9yZSBPYnNlcnZhYmxlIHRvIGJ5cGFzcyBjaXJjdWxhciBkZXBlbmRlbmN5IGlzc3VlIHNpbmNlXG4vLyBTdWJqZWN0IGV4dGVuZHMgT2JzZXJ2YWJsZSBhbmQgT2JzZXJ2YWJsZSByZWZlcmVuY2VzIFN1YmplY3QgaW4gaXQnc1xuLy8gZGVmaW5pdGlvblxudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4vU3ViamVjdCcpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdF8xLlN1YmplY3Q7XG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vT2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGU7XG4vLyBzdGF0aWNzXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11c2UtYmVmb3JlLWRlY2xhcmUgKi9cbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvYmluZENhbGxiYWNrJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL2JpbmROb2RlQ2FsbGJhY2snKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvY29tYmluZUxhdGVzdCcpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9jb25jYXQnKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvZGVmZXInKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvZW1wdHknKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvZm9ya0pvaW4nKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvZnJvbScpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9mcm9tRXZlbnQnKTtcbnJlcXVpcmUoJy4vYWRkL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVybicpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZScpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9nZW5lcmF0ZScpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9pbnRlcnZhbCcpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9tZXJnZScpO1xucmVxdWlyZSgnLi9hZGQvb2JzZXJ2YWJsZS9yYWNlJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL25ldmVyJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL29mJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL3JhbmdlJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL3Rocm93Jyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL3RpbWVyJyk7XG5yZXF1aXJlKCcuL2FkZC9vYnNlcnZhYmxlL3ppcCcpO1xuLy9vcGVyYXRvcnNcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2J1ZmZlcicpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvYnVmZmVyQ291bnQnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2J1ZmZlclRpbWUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2J1ZmZlclRvZ2dsZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvYnVmZmVyV2hlbicpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvY2FjaGUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2NhdGNoJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9jb21iaW5lQWxsJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9jb21iaW5lTGF0ZXN0Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9jb25jYXQnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2NvbmNhdEFsbCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvY29uY2F0TWFwJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9jb25jYXRNYXBUbycpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvY291bnQnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2RlbWF0ZXJpYWxpemUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2RlYm91bmNlJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9kZWJvdW5jZVRpbWUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2RlZmF1bHRJZkVtcHR5Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9kZWxheScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvZGVsYXlXaGVuJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9kaXN0aW5jdFVudGlsQ2hhbmdlZCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvZG8nKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2V4cGFuZCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvZmlsdGVyJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9maXJzdCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvZ3JvdXBCeScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvaWdub3JlRWxlbWVudHMnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2F1ZGl0Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9hdWRpdFRpbWUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2xhc3QnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL2xldCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvZXZlcnknKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL21hcCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvbWFwVG8nKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL21hdGVyaWFsaXplJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9tZXJnZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvbWVyZ2VBbGwnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL21lcmdlTWFwJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9tZXJnZU1hcFRvJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9tdWx0aWNhc3QnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL29ic2VydmVPbicpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvcGFydGl0aW9uJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9wbHVjaycpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvcHVibGlzaCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvcHVibGlzaEJlaGF2aW9yJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9wdWJsaXNoUmVwbGF5Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9wdWJsaXNoTGFzdCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvcmFjZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvcmVkdWNlJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9yZXBlYXQnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3JldHJ5Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9yZXRyeVdoZW4nKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3NhbXBsZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc2FtcGxlVGltZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc2NhbicpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc2hhcmUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3NpbmdsZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc2tpcCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc2tpcFVudGlsJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9za2lwV2hpbGUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3N0YXJ0V2l0aCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc3Vic2NyaWJlT24nKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3N3aXRjaCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3Ivc3dpdGNoTWFwJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci9zd2l0Y2hNYXBUbycpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdGFrZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdGFrZUxhc3QnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3Rha2VVbnRpbCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdGFrZVdoaWxlJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci90aHJvdHRsZScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdGhyb3R0bGVUaW1lJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci90aW1lb3V0Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci90aW1lb3V0V2l0aCcpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdG9BcnJheScpO1xucmVxdWlyZSgnLi9hZGQvb3BlcmF0b3IvdG9Qcm9taXNlJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci93aW5kb3cnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3dpbmRvd0NvdW50Jyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci93aW5kb3dUaW1lJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci93aW5kb3dUb2dnbGUnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3dpbmRvd1doZW4nKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3dpdGhMYXRlc3RGcm9tJyk7XG5yZXF1aXJlKCcuL2FkZC9vcGVyYXRvci96aXAnKTtcbnJlcXVpcmUoJy4vYWRkL29wZXJhdG9yL3ppcEFsbCcpO1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG52YXIgT3BlcmF0b3JfMSA9IHJlcXVpcmUoJy4vT3BlcmF0b3InKTtcbmV4cG9ydHMuT3BlcmF0b3IgPSBPcGVyYXRvcl8xLk9wZXJhdG9yO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKTtcbmV4cG9ydHMuU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4vU3Vic2NyaWJlcicpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcl8xLlN1YnNjcmliZXI7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKCcuL0FzeW5jU3ViamVjdCcpO1xuZXhwb3J0cy5Bc3luY1N1YmplY3QgPSBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3Q7XG52YXIgUmVwbGF5U3ViamVjdF8xID0gcmVxdWlyZSgnLi9SZXBsYXlTdWJqZWN0Jyk7XG5leHBvcnRzLlJlcGxheVN1YmplY3QgPSBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdDtcbnZhciBCZWhhdmlvclN1YmplY3RfMSA9IHJlcXVpcmUoJy4vQmVoYXZpb3JTdWJqZWN0Jyk7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdDtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnKTtcbmV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEuQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xudmFyIE5vdGlmaWNhdGlvbl8xID0gcmVxdWlyZSgnLi9Ob3RpZmljYXRpb24nKTtcbmV4cG9ydHMuTm90aWZpY2F0aW9uID0gTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoJy4vdXRpbC9FbXB0eUVycm9yJyk7XG5leHBvcnRzLkVtcHR5RXJyb3IgPSBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcjtcbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJyk7XG5leHBvcnRzLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJyk7XG5leHBvcnRzLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKCcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcicpO1xuZXhwb3J0cy5VbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3I7XG52YXIgYXNhcF8xID0gcmVxdWlyZSgnLi9zY2hlZHVsZXIvYXNhcCcpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuL3NjaGVkdWxlci9hc3luYycpO1xudmFyIHF1ZXVlXzEgPSByZXF1aXJlKCcuL3NjaGVkdWxlci9xdWV1ZScpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4vc3ltYm9sL2l0ZXJhdG9yJyk7XG52YXIgb2JzZXJ2YWJsZSA9IHJlcXVpcmUoJ3N5bWJvbC1vYnNlcnZhYmxlJyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSeC5TY2hlZHVsZXJcbiAqIEBwcm9wZXJ0eSB7U2NoZWR1bGVyfSBxdWV1ZSBTY2hlZHVsZXMgb24gYSBxdWV1ZSBpbiB0aGUgY3VycmVudCBldmVudCBmcmFtZVxuICogKHRyYW1wb2xpbmUgc2NoZWR1bGVyKS4gVXNlIHRoaXMgZm9yIGl0ZXJhdGlvbiBvcGVyYXRpb25zLlxuICogQHByb3BlcnR5IHtTY2hlZHVsZXJ9IGFzYXAgU2NoZWR1bGVzIG9uIHRoZSBtaWNybyB0YXNrIHF1ZXVlLCB3aGljaCB1c2VzIHRoZVxuICogZmFzdGVzdCB0cmFuc3BvcnQgbWVjaGFuaXNtIGF2YWlsYWJsZSwgZWl0aGVyIE5vZGUuanMnIGBwcm9jZXNzLm5leHRUaWNrKClgXG4gKiBvciBXZWIgV29ya2VyIE1lc3NhZ2VDaGFubmVsIG9yIHNldFRpbWVvdXQgb3Igb3RoZXJzLiBVc2UgdGhpcyBmb3JcbiAqIGFzeW5jaHJvbm91cyBjb252ZXJzaW9ucy5cbiAqIEBwcm9wZXJ0eSB7U2NoZWR1bGVyfSBhc3luYyBTY2hlZHVsZXMgd29yayB3aXRoIGBzZXRJbnRlcnZhbGAuIFVzZSB0aGlzIGZvclxuICogdGltZS1iYXNlZCBvcGVyYXRpb25zLlxuICovXG52YXIgU2NoZWR1bGVyID0ge1xuICAgIGFzYXA6IGFzYXBfMS5hc2FwLFxuICAgIGFzeW5jOiBhc3luY18xLmFzeW5jLFxuICAgIHF1ZXVlOiBxdWV1ZV8xLnF1ZXVlXG59O1xuZXhwb3J0cy5TY2hlZHVsZXIgPSBTY2hlZHVsZXI7XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ4LlN5bWJvbFxuICogQHByb3BlcnR5IHtTeW1ib2x8c3RyaW5nfSByeFN1YnNjcmliZXIgQSBzeW1ib2wgdG8gdXNlIGFzIGEgcHJvcGVydHkgbmFtZSB0b1xuICogcmV0cmlldmUgYW4gXCJSeCBzYWZlXCIgT2JzZXJ2ZXIgZnJvbSBhbiBvYmplY3QuIFwiUnggc2FmZXR5XCIgY2FuIGJlIGRlZmluZWQgYXNcbiAqIGFuIG9iamVjdCB0aGF0IGhhcyBhbGwgb2YgdGhlIHRyYWl0cyBvZiBhbiBSeCBTdWJzY3JpYmVyLCBpbmNsdWRpbmcgdGhlXG4gKiBhYmlsaXR5IHRvIGFkZCBhbmQgcmVtb3ZlIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHN1YnNjcmlwdGlvbiBjaGFpbiBhbmRcbiAqIGd1YXJhbnRlZXMgaW52b2x2aW5nIGV2ZW50IHRyaWdnZXJpbmcgKGNhbid0IFwibmV4dFwiIGFmdGVyIHVuc3Vic2NyaXB0aW9uLFxuICogZXRjKS5cbiAqIEBwcm9wZXJ0eSB7U3ltYm9sfHN0cmluZ30gb2JzZXJ2YWJsZSBBIHN5bWJvbCB0byB1c2UgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvXG4gKiByZXRyaWV2ZSBhbiBPYnNlcnZhYmxlIGFzIGRlZmluZWQgYnkgdGhlIFtFQ01BU2NyaXB0IFwiT2JzZXJ2YWJsZVwiIHNwZWNdKGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGUpLlxuICogQHByb3BlcnR5IHtTeW1ib2x8c3RyaW5nfSBpdGVyYXRvciBUaGUgRVM2IHN5bWJvbCB0byB1c2UgYXMgYSBwcm9wZXJ0eSBuYW1lXG4gKiB0byByZXRyaWV2ZSBhbiBpdGVyYXRvciBmcm9tIGFuIG9iamVjdC5cbiAqL1xudmFyIFN5bWJvbCA9IHtcbiAgICByeFN1YnNjcmliZXI6IHJ4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyLFxuICAgIG9ic2VydmFibGU6IG9ic2VydmFibGUsXG4gICAgaXRlcmF0b3I6IGl0ZXJhdG9yXzEuJCRpdGVyYXRvclxufTtcbmV4cG9ydHMuU3ltYm9sID0gU3ltYm9sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UnguanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9SeC5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9PYnNlcnZhYmxlJyk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpYmVyJyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuL1N1YnNjcmlwdGlvbicpO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3ViamVjdFN1YnNjcmlwdGlvbicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG52YXIgdGhyb3dFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL3Rocm93RXJyb3InKTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJyk7XG4vKipcbiAqIEBjbGFzcyBTdWJqZWN0PFQ+XG4gKi9cbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNFcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgU3ViamVjdCh0aGlzLmRlc3RpbmF0aW9uIHx8IHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMsIHN1YnNjcmlwdGlvbik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNFcnJvcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IodGhpcy5lcnJvclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGhyb3dJZlVuc3Vic2NyaWJlZCgpO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJqZWN0U3Vic2NyaXB0aW9uXzEuU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRocm93SWZVbnN1YnNjcmliZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKHRoaXMuZXJyb3JWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnRocm93SWZVbnN1YnNjcmliZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhhc0Vycm9yZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmVycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgIGlmICh0aGlzLmRpc3BhdGNoaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRocm93SWZVbnN1YnNjcmliZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmRpc3BhdGNoaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgU3ViamVjdE9ic2VydmFibGUodGhpcyk7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9maW5hbE5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fZmluYWxOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnMuc2xpY2UoMCk7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzW2luZGV4XS5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZmluYWxFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fZmluYWxFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgLy8gb3B0aW1pemF0aW9uIHRvIGJsb2NrIG91ciBTdWJqZWN0U3Vic2NyaXB0aW9ucyBmcm9tXG4gICAgICAgIC8vIHNwbGljaW5nIHRoZW1zZWx2ZXMgb3V0IG9mIHRoZSBvYnNlcnZlcnMgbGlzdCBvbmUgYnkgb25lLlxuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICBpZiAob2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzW2luZGV4XS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZmluYWxDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fZmluYWxDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgLy8gb3B0aW1pemF0aW9uIHRvIGJsb2NrIG91ciBTdWJqZWN0U3Vic2NyaXB0aW9ucyBmcm9tXG4gICAgICAgIC8vIHNwbGljaW5nIHRoZW1zZWx2ZXMgb3V0IG9mIHRoZSBvYnNlcnZlcnMgbGlzdCBvbmUgYnkgb25lLlxuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICBpZiAob2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzW2luZGV4XS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudGhyb3dJZlVuc3Vic2NyaWJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZVtyeFN1YnNjcmliZXJfMS4kJHJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdDtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU3ViamVjdE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0T2JzZXJ2YWJsZShzb3VyY2UpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gU3ViamVjdE9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvU3ViamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4vdXRpbC9yb290Jyk7XG52YXIgdG9TdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL3V0aWwvdG9TdWJzY3JpYmVyJyk7XG52YXIgJCRvYnNlcnZhYmxlID0gcmVxdWlyZSgnc3ltYm9sLW9ic2VydmFibGUnKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhbnkgc2V0IG9mIHZhbHVlcyBvdmVyIGFueSBhbW91bnQgb2YgdGltZS4gVGhpcyB0aGUgbW9zdCBiYXNpYyBidWlsZGluZyBibG9ja1xuICogb2YgUnhKUy5cbiAqXG4gKiBAY2xhc3MgT2JzZXJ2YWJsZTxUPlxuICovXG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3Vic2NyaWJlIHRoZSBmdW5jdGlvbiB0aGF0IGlzICBjYWxsZWQgd2hlbiB0aGUgT2JzZXJ2YWJsZSBpc1xuICAgICAqIGluaXRpYWxseSBzdWJzY3JpYmVkIHRvLiBUaGlzIGZ1bmN0aW9uIGlzIGdpdmVuIGEgU3Vic2NyaWJlciwgdG8gd2hpY2ggbmV3IHZhbHVlc1xuICAgICAqIGNhbiBiZSBgbmV4dGBlZCwgb3IgYW4gYGVycm9yYCBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByYWlzZSBhbiBlcnJvciwgb3JcbiAgICAgKiBgY29tcGxldGVgIGNhbiBiZSBjYWxsZWQgdG8gbm90aWZ5IG9mIGEgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE9ic2VydmFibGUsIHdpdGggdGhpcyBPYnNlcnZhYmxlIGFzIHRoZSBzb3VyY2UsIGFuZCB0aGUgcGFzc2VkXG4gICAgICogb3BlcmF0b3IgZGVmaW5lZCBhcyB0aGUgbmV3IG9ic2VydmFibGUncyBvcGVyYXRvci5cbiAgICAgKiBAbWV0aG9kIGxpZnRcbiAgICAgKiBAcGFyYW0ge09wZXJhdG9yfSBvcGVyYXRvciB0aGUgb3BlcmF0b3IgZGVmaW5pbmcgdGhlIG9wZXJhdGlvbiB0byB0YWtlIG9uIHRoZSBvYnNlcnZhYmxlXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYSBuZXcgb2JzZXJ2YWJsZSB3aXRoIHRoZSBPcGVyYXRvciBhcHBsaWVkXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBoYW5kbGVycyBmb3IgaGFuZGxpbmcgZW1pdHRlZCB2YWx1ZXMsIGVycm9yIGFuZCBjb21wbGV0aW9ucyBmcm9tIHRoZSBvYnNlcnZhYmxlLCBhbmRcbiAgICAgKiAgZXhlY3V0ZXMgdGhlIG9ic2VydmFibGUncyBzdWJzY3JpYmVyIGZ1bmN0aW9uLCB3aGljaCB3aWxsIHRha2UgYWN0aW9uIHRvIHNldCB1cCB0aGUgdW5kZXJseWluZyBkYXRhIHN0cmVhbVxuICAgICAqIEBtZXRob2Qgc3Vic2NyaWJlXG4gICAgICogQHBhcmFtIHtQYXJ0aWFsT2JzZXJ2ZXJ8RnVuY3Rpb259IG9ic2VydmVyT3JOZXh0IChvcHRpb25hbCkgZWl0aGVyIGFuIG9ic2VydmVyIGRlZmluaW5nIGFsbCBmdW5jdGlvbnMgdG8gYmUgY2FsbGVkLFxuICAgICAqICBvciB0aGUgZmlyc3Qgb2YgdGhyZWUgcG9zc2libGUgaGFuZGxlcnMsIHdoaWNoIGlzIHRoZSBoYW5kbGVyIGZvciBlYWNoIHZhbHVlIGVtaXR0ZWQgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAob3B0aW9uYWwpIGEgaGFuZGxlciBmb3IgYSB0ZXJtaW5hbCBldmVudCByZXN1bHRpbmcgZnJvbSBhbiBlcnJvci4gSWYgbm8gZXJyb3IgaGFuZGxlciBpcyBwcm92aWRlZCxcbiAgICAgKiAgdGhlIGVycm9yIHdpbGwgYmUgdGhyb3duIGFzIHVuaGFuZGxlZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBsZXRlIChvcHRpb25hbCkgYSBoYW5kbGVyIGZvciBhIHRlcm1pbmFsIGV2ZW50IHJlc3VsdGluZyBmcm9tIHN1Y2Nlc3NmdWwgY29tcGxldGlvbi5cbiAgICAgKiBAcmV0dXJuIHtJU3Vic2NyaXB0aW9ufSBhIHN1YnNjcmlwdGlvbiByZWZlcmVuY2UgdG8gdGhlIHJlZ2lzdGVyZWQgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm9wZXJhdG9yO1xuICAgICAgICB2YXIgc2luayA9IHRvU3Vic2NyaWJlcl8xLnRvU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc2luay5hZGQob3BlcmF0b3IgPyBvcGVyYXRvci5jYWxsKHNpbmssIHRoaXMpIDogdGhpcy5fc3Vic2NyaWJlKHNpbmspKTtcbiAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgc2luay5zeW5jRXJyb3JWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZm9yRWFjaFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgYSBoYW5kbGVyIGZvciBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIG9ic2VydmFibGVcbiAgICAgKiBAcGFyYW0ge1Byb21pc2VDb25zdHJ1Y3Rvcn0gW1Byb21pc2VDdG9yXSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHVzZWQgdG8gaW5zdGFudGlhdGUgdGhlIFByb21pc2VcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBlaXRoZXIgcmVzb2x2ZXMgb24gb2JzZXJ2YWJsZSBjb21wbGV0aW9uIG9yXG4gICAgICogIHJlamVjdHMgd2l0aCB0aGUgaGFuZGxlZCBlcnJvclxuICAgICAqL1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFQcm9taXNlQ3Rvcikge1xuICAgICAgICAgICAgaWYgKHJvb3RfMS5yb290LlJ4ICYmIHJvb3RfMS5yb290LlJ4LmNvbmZpZyAmJiByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIFByb21pc2VDdG9yID0gcm9vdF8xLnJvb3QuUnguY29uZmlnLlByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyb290XzEucm9vdC5Qcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSByb290XzEucm9vdC5Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gUHJvbWlzZSBpbXBsIGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBzdWJzY3JpcHRpb24sIHRoZW4gd2UgY2FuIHN1cm1pc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG5leHQgaGFuZGxpbmcgaXMgYXN5bmNocm9ub3VzLiBBbnkgZXJyb3JzIHRocm93blxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIGJlIHJlamVjdGVkIGV4cGxpY2l0bHkgYW5kIHVuc3Vic2NyaWJlIG11c3QgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIG1hbnVhbGx5XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBOTyBzdWJzY3JpcHRpb24sIHRoZW4gd2UncmUgZ2V0dGluZyBhIG5leHRlZFxuICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZSBzeW5jaHJvbm91c2x5IGR1cmluZyBzdWJzY3JpcHRpb24uIFdlIGNhbiBqdXN0IGNhbGwgaXQuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGl0IGVycm9ycywgT2JzZXJ2YWJsZSdzIGBzdWJzY3JpYmVgIGltcGxlIHdpbGwgZW5zdXJlIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyB1bnN1YnNjcmlwdGlvbiBsb2dpYyBpcyBjYWxsZWQsIHRoZW4gc3luY2hyb25vdXNseSByZXRocm93IHRoZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWZ0ZXIgdGhhdCwgUHJvbWlzZSB3aWxsIHRyYXAgdGhlIGVycm9yIGFuZCBzZW5kIGl0XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvd24gdGhlIHJlamVjdGlvbiBwYXRoLlxuICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZWplY3QsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJvcCBwb2ludCBkZWZpbmVkIGJ5IHRoZSBlczctb2JzZXJ2YWJsZSBzcGVjIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbiAgICAgKiBAbWV0aG9kIFN5bWJvbC5vYnNlcnZhYmxlXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gdGhpcyBpbnN0YW5jZSBvZiB0aGUgb2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLy8gSEFDSzogU2luY2UgVHlwZVNjcmlwdCBpbmhlcml0cyBzdGF0aWMgcHJvcGVydGllcyB0b28sIHdlIGhhdmUgdG9cbiAgICAvLyBmaWdodCBhZ2FpbnN0IFR5cGVTY3JpcHQgaGVyZSBzbyBTdWJqZWN0IGNhbiBoYXZlIGEgZGlmZmVyZW50IHN0YXRpYyBjcmVhdGUgc2lnbmF0dXJlXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb2xkIE9ic2VydmFibGUgYnkgY2FsbGluZyB0aGUgT2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWJzY3JpYmU/IHRoZSBzdWJzY3JpYmVyIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCB0byB0aGUgT2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IGEgbmV3IGNvbGQgb2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdib29sZWFuJzogZmFsc2UsXG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZSxcbiAgICAnbnVtYmVyJzogZmFsc2UsXG4gICAgJ3N0cmluZyc6IGZhbHNlLFxuICAgICd1bmRlZmluZWQnOiBmYWxzZVxufTtcbmV4cG9ydHMucm9vdCA9IChvYmplY3RUeXBlc1t0eXBlb2Ygc2VsZl0gJiYgc2VsZikgfHwgKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cbnZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG52YXIgZnJlZU1vZHVsZSA9IG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcbnZhciBmcmVlR2xvYmFsID0gb2JqZWN0VHlwZXNbdHlwZW9mIGdsb2JhbF0gJiYgZ2xvYmFsO1xuaWYgKGZyZWVHbG9iYWwgJiYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSkge1xuICAgIGV4cG9ydHMucm9vdCA9IGZyZWVHbG9iYWw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb290LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9yb290LmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufVxyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgcnhTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG5mdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIGlmIChuZXh0T3JPYnNlcnZlciAmJiB0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG5leHBvcnRzLnRvU3Vic2NyaWJlciA9IHRvU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvdG9TdWJzY3JpYmVyLmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZSgnLi91dGlsL2lzRnVuY3Rpb24nKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG52YXIgcnhTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL3N5bWJvbC9yeFN1YnNjcmliZXInKTtcbnZhciBPYnNlcnZlcl8xID0gcmVxdWlyZSgnLi9PYnNlcnZlcicpO1xuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGludGVyZmFjZSBhbmQgZXh0ZW5kcyB0aGVcbiAqIHtAbGluayBTdWJzY3JpcHRpb259IGNsYXNzLiBXaGlsZSB0aGUge0BsaW5rIE9ic2VydmVyfSBpcyB0aGUgcHVibGljIEFQSSBmb3JcbiAqIGNvbnN1bWluZyB0aGUgdmFsdWVzIG9mIGFuIHtAbGluayBPYnNlcnZhYmxlfSwgYWxsIE9ic2VydmVycyBnZXQgY29udmVydGVkIHRvXG4gKiBhIFN1YnNjcmliZXIsIGluIG9yZGVyIHRvIHByb3ZpZGUgU3Vic2NyaXB0aW9uLWxpa2UgY2FwYWJpbGl0aWVzIHN1Y2ggYXNcbiAqIGB1bnN1YnNjcmliZWAuIFN1YnNjcmliZXIgaXMgYSBjb21tb24gdHlwZSBpbiBSeEpTLCBhbmQgY3J1Y2lhbCBmb3JcbiAqIGltcGxlbWVudGluZyBvcGVyYXRvcnMsIGJ1dCBpdCBpcyByYXJlbHkgdXNlZCBhcyBhIHB1YmxpYyBBUEkuXG4gKlxuICogQGNsYXNzIFN1YnNjcmliZXI8VD5cbiAqL1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JzZXJ2ZXJ8ZnVuY3Rpb24odmFsdWU6IFQpOiB2b2lkfSBbZGVzdGluYXRpb25Pck5leHRdIEEgcGFydGlhbGx5XG4gICAgICogZGVmaW5lZCBPYnNlcnZlciBvciBhIGBuZXh0YCBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGU6ID9hbnkpOiB2b2lkfSBbZXJyb3JdIFRoZSBgZXJyb3JgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIFRoZSBgY29tcGxldGVgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zeW5jRXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IE9ic2VydmVyXzEuZW1wdHk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbk9yTmV4dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gT2JzZXJ2ZXJfMS5lbXB0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25Pck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbk9yTmV4dCBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uYWRkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTYWZlU3Vic2NyaWJlcih0aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTYWZlU3Vic2NyaWJlcih0aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHN0YXRpYyBmYWN0b3J5IGZvciBhIFN1YnNjcmliZXIsIGdpdmVuIGEgKHBvdGVudGlhbGx5IHBhcnRpYWwpIGRlZmluaXRpb25cbiAgICAgKiBvZiBhbiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHg6ID9UKTogdm9pZH0gW25leHRdIFRoZSBgbmV4dGAgY2FsbGJhY2sgb2YgYW4gT2JzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihlOiA/YW55KTogdm9pZH0gW2Vycm9yXSBUaGUgYGVycm9yYCBjYWxsYmFjayBvZiBhblxuICAgICAqIE9ic2VydmVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gW2NvbXBsZXRlXSBUaGUgYGNvbXBsZXRlYCBjYWxsYmFjayBvZiBhblxuICAgICAqIE9ic2VydmVyLlxuICAgICAqIEByZXR1cm4ge1N1YnNjcmliZXI8VD59IEEgU3Vic2NyaWJlciB3cmFwcGluZyB0aGUgKHBhcnRpYWxseSBkZWZpbmVkKVxuICAgICAqIE9ic2VydmVyIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAgICovXG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIE9ic2VydmVyfSBjYWxsYmFjayB0byByZWNlaXZlIG5vdGlmaWNhdGlvbnMgb2YgdHlwZSBgbmV4dGAgZnJvbVxuICAgICAqIHRoZSBPYnNlcnZhYmxlLCB3aXRoIGEgdmFsdWUuIFRoZSBPYnNlcnZhYmxlIG1heSBjYWxsIHRoaXMgbWV0aG9kIDAgb3IgbW9yZVxuICAgICAqIHRpbWVzLlxuICAgICAqIEBwYXJhbSB7VH0gW3ZhbHVlXSBUaGUgYG5leHRgIHZhbHVlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIG9mIHR5cGUgYGVycm9yYCBmcm9tXG4gICAgICogdGhlIE9ic2VydmFibGUsIHdpdGggYW4gYXR0YWNoZWQge0BsaW5rIEVycm9yfS4gTm90aWZpZXMgdGhlIE9ic2VydmVyIHRoYXRcbiAgICAgKiB0aGUgT2JzZXJ2YWJsZSBoYXMgZXhwZXJpZW5jZWQgYW4gZXJyb3IgY29uZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7YW55fSBbZXJyXSBUaGUgYGVycm9yYCBleGNlcHRpb24uXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBhIHZhbHVlbGVzcyBub3RpZmljYXRpb24gb2YgdHlwZVxuICAgICAqIGBjb21wbGV0ZWAgZnJvbSB0aGUgT2JzZXJ2YWJsZS4gTm90aWZpZXMgdGhlIE9ic2VydmVyIHRoYXQgdGhlIE9ic2VydmFibGVcbiAgICAgKiBoYXMgZmluaXNoZWQgc2VuZGluZyBwdXNoLWJhc2VkIG5vdGlmaWNhdGlvbnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZVtyeFN1YnNjcmliZXJfMS4kJHJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50LCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChjb250ZXh0LnVuc3Vic2NyaWJlLmJpbmQoY29udGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9IHRoaXMudW5zdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5fbmV4dCA9IG5leHQ7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnQgPSB0aGlzLl9wYXJlbnQ7XG4gICAgICAgICAgICBpZiAoIV9wYXJlbnQuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudCwgdGhpcy5fbmV4dCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfcGFyZW50LnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudCwgdGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX3BhcmVudC5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3BhcmVudC5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICBfcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfcGFyZW50LnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9jb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnQsIHRoaXMuX2NvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JTZXRFcnJvciA9IGZ1bmN0aW9uIChwYXJlbnQsIGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudCA9IHRoaXMuX3BhcmVudDtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIF9wYXJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL1N1YnNjcmliZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvaXNGdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNBcnJheScpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNPYmplY3QnKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWwvaXNGdW5jdGlvbicpO1xudmFyIHRyeUNhdGNoXzEgPSByZXF1aXJlKCcuL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGRpc3Bvc2FibGUgcmVzb3VyY2UsIHN1Y2ggYXMgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLiBBXG4gKiBTdWJzY3JpcHRpb24gaGFzIG9uZSBpbXBvcnRhbnQgbWV0aG9kLCBgdW5zdWJzY3JpYmVgLCB0aGF0IHRha2VzIG5vIGFyZ3VtZW50XG4gKiBhbmQganVzdCBkaXNwb3NlcyB0aGUgcmVzb3VyY2UgaGVsZCBieSB0aGUgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgc3Vic2NyaXB0aW9ucyBtYXkgYmUgZ3JvdXBlZCB0b2dldGhlciB0aHJvdWdoIHRoZSBgYWRkKClgXG4gKiBtZXRob2QsIHdoaWNoIHdpbGwgYXR0YWNoIGEgY2hpbGQgU3Vic2NyaXB0aW9uIHRvIHRoZSBjdXJyZW50IFN1YnNjcmlwdGlvbi5cbiAqIFdoZW4gYSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLCBhbGwgaXRzIGNoaWxkcmVuIChhbmQgaXRzIGdyYW5kY2hpbGRyZW4pXG4gKiB3aWxsIGJlIHVuc3Vic2NyaWJlZCBhcyB3ZWxsLlxuICpcbiAqIEBjbGFzcyBTdWJzY3JpcHRpb25cbiAqL1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbdW5zdWJzY3JpYmVdIEEgZnVuY3Rpb24gZGVzY3JpYmluZyBob3cgdG9cbiAgICAgKiBwZXJmb3JtIHRoZSBkaXNwb3NhbCBvZiByZXNvdXJjZXMgd2hlbiB0aGUgYHVuc3Vic2NyaWJlYCBtZXRob2QgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBTdWJzY3JpcHRpb24gaGFzIGFscmVhZHkgYmVlbiB1bnN1YnNjcmliZWQuXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgdGhlIHJlc291cmNlcyBoZWxkIGJ5IHRoZSBzdWJzY3JpcHRpb24uIE1heSwgZm9yIGluc3RhbmNlLCBjYW5jZWxcbiAgICAgKiBhbiBvbmdvaW5nIE9ic2VydmFibGUgZXhlY3V0aW9uIG9yIGNhbmNlbCBhbnkgb3RoZXIgdHlwZSBvZiB3b3JrIHRoYXRcbiAgICAgKiBzdGFydGVkIHdoZW4gdGhlIFN1YnNjcmlwdGlvbiB3YXMgY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoYXNFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHZhciB0cmlhbCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goX3Vuc3Vic2NyaWJlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHRyaWFsID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoZXJyb3JzID0gZXJyb3JzIHx8IFtdKS5wdXNoKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlfMS5pc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdF8xLmlzT2JqZWN0KHN1YikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWFsID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzdWIudW5zdWJzY3JpYmUpLmNhbGwoc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWFsID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZXJyLmVycm9ycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNFcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdGVhciBkb3duIHRvIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlKCkgb2YgdGhpc1xuICAgICAqIFN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIElmIHRoZSB0ZWFyIGRvd24gYmVpbmcgYWRkZWQgaXMgYSBzdWJzY3JpcHRpb24gdGhhdCBpcyBhbHJlYWR5XG4gICAgICogdW5zdWJzY3JpYmVkLCBpcyB0aGUgc2FtZSByZWZlcmVuY2UgYGFkZGAgaXMgYmVpbmcgY2FsbGVkIG9uLCBvciBpc1xuICAgICAqIGBTdWJzY3JpcHRpb24uRU1QVFlgLCBpdCB3aWxsIG5vdCBiZSBhZGRlZC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc3Vic2NyaXB0aW9uIGlzIGFscmVhZHkgaW4gYW4gYGlzVW5zdWJzY3JpYmVkYCBzdGF0ZSwgdGhlIHBhc3NlZFxuICAgICAqIHRlYXIgZG93biBsb2dpYyB3aWxsIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUZWFyZG93bkxvZ2ljfSB0ZWFyZG93biBUaGUgYWRkaXRpb25hbCBsb2dpYyB0byBleGVjdXRlIG9uXG4gICAgICogdGVhcmRvd24uXG4gICAgICogQHJldHVybiB7U3Vic2NyaXB0aW9ufSBSZXR1cm5zIHRoZSBTdWJzY3JpcHRpb24gdXNlZCBvciBjcmVhdGVkIHRvIGJlXG4gICAgICogYWRkZWQgdG8gdGhlIGlubmVyIHN1YnNjcmlwdGlvbnMgbGlzdC4gVGhpcyBTdWJzY3JpcHRpb24gY2FuIGJlIHVzZWQgd2l0aFxuICAgICAqIGByZW1vdmUoKWAgdG8gcmVtb3ZlIHRoZSBwYXNzZWQgdGVhcmRvd24gbG9naWMgZnJvbSB0aGUgaW5uZXIgc3Vic2NyaXB0aW9uc1xuICAgICAqIGxpc3QuXG4gICAgICovXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgaWYgKCF0ZWFyZG93biB8fCAodGVhcmRvd24gPT09IHRoaXMpIHx8ICh0ZWFyZG93biA9PT0gU3Vic2NyaXB0aW9uLkVNUFRZKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWIgPSB0ZWFyZG93bjtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdGVhcmRvd24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKHRlYXJkb3duKTtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi5pc1Vuc3Vic2NyaWJlZCB8fCB0eXBlb2Ygc3ViLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N1YnNjcmlwdGlvbnMgfHwgKHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbXSkpLnB1c2goc3ViKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgU3Vic2NyaXB0aW9uIGZyb20gdGhlIGludGVybmFsIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IHdpbGxcbiAgICAgKiB1bnN1YnNjcmliZSBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlIHByb2Nlc3Mgb2YgdGhpcyBTdWJzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvbiBUaGUgc3Vic2NyaXB0aW9uIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAvLyBIQUNLOiBUaGlzIG1pZ2h0IGJlIHJlZHVuZGFudCBiZWNhdXNlIG9mIHRoZSBsb2dpYyBpbiBgYWRkKClgXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gPT0gbnVsbCB8fCAoc3Vic2NyaXB0aW9uID09PSB0aGlzKSB8fCAoc3Vic2NyaXB0aW9uID09PSBTdWJzY3JpcHRpb24uRU1QVFkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG4gICAgICAgIGVtcHR5LmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0obmV3IFN1YnNjcmlwdGlvbigpKSk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnRzLlN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL1N1YnNjcmlwdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvaXNBcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9pc09iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi9lcnJvck9iamVjdCcpO1xudmFyIHRyeUNhdGNoVGFyZ2V0O1xuZnVuY3Rpb24gdHJ5Q2F0Y2hlcigpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHJ5Q2F0Y2hUYXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lID0gZTtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3Q7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJ5Q2F0Y2goZm4pIHtcbiAgICB0cnlDYXRjaFRhcmdldCA9IGZuO1xuICAgIHJldHVybiB0cnlDYXRjaGVyO1xufVxuZXhwb3J0cy50cnlDYXRjaCA9IHRyeUNhdGNoO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJ5Q2F0Y2guanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL3RyeUNhdGNoLmpzXG4gKiogbW9kdWxlIGlkID0gMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuLy8gdHlwZW9mIGFueSBzbyB0aGF0IGl0IHdlIGRvbid0IGhhdmUgdG8gY2FzdCB3aGVuIGNvbXBhcmluZyBhIHJlc3VsdCB0byB0aGUgZXJyb3Igb2JqZWN0XG5leHBvcnRzLmVycm9yT2JqZWN0ID0geyBlOiB7fSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JPYmplY3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2Vycm9yT2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIG9uZSBvciBtb3JlIGVycm9ycyBoYXZlIG9jY3VycmVkIGR1cmluZyB0aGVcbiAqIGB1bnN1YnNjcmliZWAgb2YgYSB7QGxpbmsgU3Vic2NyaXB0aW9ufS5cbiAqL1xudmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVbnN1YnNjcmlwdGlvbkVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnMgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbicpIDogJyc7XG4gICAgfVxuICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5VbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG52YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuZXhwb3J0cy4kJHJ4U3Vic2NyaWJlciA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSA/XG4gICAgU3ltYm9sLmZvcigncnhTdWJzY3JpYmVyJykgOiAnQEByeFN1YnNjcmliZXInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvc3ltYm9sL3J4U3Vic2NyaWJlci5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuZW1wdHkgPSB7XG4gICAgaXNVbnN1YnNjcmliZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgdGhyb3cgZXJyOyB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL09ic2VydmVyLmpzXG4gKiogbW9kdWxlIGlkID0gMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3BvbnlmaWxsJykoZ2xvYmFsIHx8IHdpbmRvdyB8fCB0aGlzKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3ltYm9sLW9ic2VydmFibGUvcG9ueWZpbGwuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgb2JzZXJ2ZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMub2JzZXJ2ZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YmplY3RTdWJzY3JpcHRpb24gPSBTdWJqZWN0U3Vic2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL1N1YmplY3RTdWJzY3JpcHRpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAyNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiB0aHJvd0Vycm9yKGUpIHsgdGhyb3cgZTsgfVxuZXhwb3J0cy50aHJvd0Vycm9yID0gdGhyb3dFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93RXJyb3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL3Rocm93RXJyb3IuanNcbiAqKiBtb2R1bGUgaWQgPSAyNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYW4gYWN0aW9uIGlzIGludmFsaWQgYmVjYXVzZSB0aGUgb2JqZWN0IGhhcyBiZWVuXG4gKiB1bnN1YnNjcmliZWQuXG4gKlxuICogQHNlZSB7QGxpbmsgU3ViamVjdH1cbiAqIEBzZWUge0BsaW5rIEJlaGF2aW9yU3ViamVjdH1cbiAqXG4gKiBAY2xhc3MgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcbiAqL1xudmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsICdvYmplY3QgdW5zdWJzY3JpYmVkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qc1xuICoqIG1vZHVsZSBpZCA9IDI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgYmluZENhbGxiYWNrXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2JpbmRDYWxsYmFjaycpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuYmluZENhbGxiYWNrID0gYmluZENhbGxiYWNrXzEuYmluZENhbGxiYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvYmluZENhbGxiYWNrLmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL0JvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlJyk7XG5leHBvcnRzLmJpbmRDYWxsYmFjayA9IEJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlXzEuQm91bmRDYWxsYmFja09ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2suanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xudmFyIEFzeW5jU3ViamVjdF8xID0gcmVxdWlyZSgnLi4vQXN5bmNTdWJqZWN0Jyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQm91bmRDYWxsYmFja09ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQm91bmRDYWxsYmFja09ic2VydmFibGUoY2FsbGJhY2tGdW5jLCBzZWxlY3RvciwgYXJncywgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNhbGxiYWNrRnVuYyA9IGNhbGxiYWNrRnVuYztcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGNhbGxiYWNrIEFQSSB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlLlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkdpdmUgaXQgYSBmdW5jdGlvbiBgZmAgb2YgdHlwZSBgZih4LCBjYWxsYmFjaylgIGFuZFxuICAgICAqIGl0IHdpbGwgcmV0dXJuIGEgZnVuY3Rpb24gYGdgIHRoYXQgd2hlbiBjYWxsZWQgYXMgYGcoeClgIHdpbGwgb3V0cHV0IGFuXG4gICAgICogT2JzZXJ2YWJsZS48L3NwYW4+XG4gICAgICpcbiAgICAgKiBgYmluZENhbGxiYWNrYCBpcyBub3QgYW4gb3BlcmF0b3IgYmVjYXVzZSBpdHMgaW5wdXQgYW5kIG91dHB1dCBhcmUgbm90XG4gICAgICogT2JzZXJ2YWJsZXMuIFRoZSBpbnB1dCBpcyBhIGZ1bmN0aW9uIGBmdW5jYCB3aXRoIHNvbWUgcGFyYW1ldGVycywgYnV0IHRoZVxuICAgICAqIGxhc3QgcGFyYW1ldGVyIG11c3QgYmUgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGBmdW5jYCBjYWxscyB3aGVuIGl0IGlzXG4gICAgICogZG9uZS4gVGhlIG91dHB1dCBvZiBgYmluZENhbGxiYWNrYCBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHNhbWVcbiAgICAgKiBwYXJhbWV0ZXJzIGFzIGBmdW5jYCwgZXhjZXB0IHRoZSBsYXN0IG9uZSAodGhlIGNhbGxiYWNrKS4gV2hlbiB0aGUgb3V0cHV0XG4gICAgICogZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYXJndW1lbnRzLCBpdCB3aWxsIHJldHVybiBhbiBPYnNlcnZhYmxlIHdoZXJlIHRoZVxuICAgICAqIHJlc3VsdHMgd2lsbCBiZSBkZWxpdmVyZWQgdG8uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db252ZXJ0IGpRdWVyeSdzIGdldEpTT04gdG8gYW4gT2JzZXJ2YWJsZSBBUEk8L2NhcHRpb24+XG4gICAgICogLy8gU3VwcG9zZSB3ZSBoYXZlIGpRdWVyeS5nZXRKU09OKCcvbXkvdXJsJywgY2FsbGJhY2spXG4gICAgICogdmFyIGdldEpTT05Bc09ic2VydmFibGUgPSBSeC5PYnNlcnZhYmxlLmJpbmRDYWxsYmFjayhqUXVlcnkuZ2V0SlNPTik7XG4gICAgICogdmFyIHJlc3VsdCA9IGdldEpTT05Bc09ic2VydmFibGUoJy9teS91cmwnKTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCksIGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBiaW5kTm9kZUNhbGxiYWNrfVxuICAgICAqIEBzZWUge0BsaW5rIGZyb219XG4gICAgICogQHNlZSB7QGxpbmsgZnJvbVByb21pc2V9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHdpdGggYSBjYWxsYmFjayBhcyB0aGUgbGFzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc2VsZWN0b3IgQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0aGUgYXJndW1lbnRzIGZyb20gdGhlXG4gICAgICogY2FsbGJhY2sgYW5kIG1hcHMgdGhvc2UgYSB2YWx1ZSB0byBlbWl0IG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gVGhlIHNjaGVkdWxlciBvbiB3aGljaCB0byBzY2hlZHVsZSB0aGVcbiAgICAgKiBjYWxsYmFja3MuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oLi4ucGFyYW1zOiAqKTogT2JzZXJ2YWJsZX0gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHRoZVxuICAgICAqIE9ic2VydmFibGUgdGhhdCBkZWxpdmVycyB0aGUgc2FtZSB2YWx1ZXMgdGhlIGNhbGxiYWNrIHdvdWxkIGRlbGl2ZXIuXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgYmluZENhbGxiYWNrXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBCb3VuZENhbGxiYWNrT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZnVuYywgc2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkgeyBzZWxlY3RvciA9IHVuZGVmaW5lZDsgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQm91bmRDYWxsYmFja09ic2VydmFibGUoZnVuYywgc2VsZWN0b3IsIGFyZ3MsIHNjaGVkdWxlcik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBCb3VuZENhbGxiYWNrT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBjYWxsYmFja0Z1bmMgPSB0aGlzLmNhbGxiYWNrRnVuYztcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgICAgICAgICBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlckZuKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGhhbmRsZXJGbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHNvdXJjZS5zZWxlY3Rvciwgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goc2VsZWN0b3IpLmFwcGx5KHRoaXMsIGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0XzEgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQocmVzdWx0XzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dChpbm5lckFyZ3MubGVuZ3RoID09PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gdXNlIG5hbWVkIGZ1bmN0aW9uIGluc3RhbmNlIHRvIGF2b2lkIGNsb3N1cmUuXG4gICAgICAgICAgICAgICAgaGFuZGxlci5zb3VyY2UgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKGNhbGxiYWNrRnVuYykuYXBwbHkodGhpcywgYXJncy5jb25jYXQoaGFuZGxlcikpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHsgc291cmNlOiB0aGlzLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQm91bmRDYWxsYmFja09ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlID0gQm91bmRDYWxsYmFja09ic2VydmFibGU7XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgc291cmNlID0gc3RhdGUuc291cmNlLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICB2YXIgY2FsbGJhY2tGdW5jID0gc291cmNlLmNhbGxiYWNrRnVuYywgYXJncyA9IHNvdXJjZS5hcmdzLCBzY2hlZHVsZXIgPSBzb3VyY2Uuc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0ID0gc291cmNlLnN1YmplY3Q7XG4gICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3QoKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyRm4oKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBoYW5kbGVyRm4uc291cmNlO1xuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gc291cmNlLnNlbGVjdG9yLCBzdWJqZWN0ID0gc291cmNlLnN1YmplY3Q7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzIgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHNlbGVjdG9yKS5hcHBseSh0aGlzLCBpbm5lckFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRfMiA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hFcnJvciwgMCwgeyBlcnI6IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCAwLCB7IHZhbHVlOiByZXN1bHRfMiwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA9PT0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncztcbiAgICAgICAgICAgICAgICBzZWxmLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCAwLCB7IHZhbHVlOiB2YWx1ZSwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIHVzZSBuYW1lZCBmdW5jdGlvbiB0byBwYXNzIHZhbHVlcyBpbiB3aXRob3V0IGNsb3N1cmVcbiAgICAgICAgaGFuZGxlci5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKGNhbGxiYWNrRnVuYykuYXBwbHkodGhpcywgYXJncy5jb25jYXQoaGFuZGxlcikpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KGFyZykge1xuICAgIHZhciB2YWx1ZSA9IGFyZy52YWx1ZSwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgc3ViamVjdC5jb21wbGV0ZSgpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihhcmcpIHtcbiAgICB2YXIgZXJyID0gYXJnLmVyciwgc3ViamVjdCA9IGFyZy5zdWJqZWN0O1xuICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJvdW5kQ2FsbGJhY2tPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Cb3VuZENhbGxiYWNrT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4vU3ViamVjdCcpO1xuLyoqXG4gKiBAY2xhc3MgQXN5bmNTdWJqZWN0PFQ+XG4gKi9cbnZhciBBc3luY1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTdWJqZWN0KCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzTmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgQXN5bmNTdWJqZWN0LnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzTmV4dCA9IHRydWU7XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIC8vIG9wdGltaXphdGlvbiB0byBibG9jayBvdXIgU3ViamVjdFN1YnNjcmlwdGlvbnMgZnJvbVxuICAgICAgICAvLyBzcGxpY2luZyB0aGVtc2VsdmVzIG91dCBvZiB0aGUgb2JzZXJ2ZXJzIGxpc3Qgb25lIGJ5IG9uZS5cbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmhhc05leHQpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBvYnNlcnZlcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIG8ubmV4dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBvLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyc1tpbmRleF0uY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBBc3luY1N1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLkFzeW5jU3ViamVjdCA9IEFzeW5jU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU3ViamVjdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL0FzeW5jU3ViamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgYmluZE5vZGVDYWxsYmFja18xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5iaW5kTm9kZUNhbGxiYWNrID0gYmluZE5vZGVDYWxsYmFja18xLmJpbmROb2RlQ2FsbGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kTm9kZUNhbGxiYWNrLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFjay5qc1xuICoqIG1vZHVsZSBpZCA9IDMxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vQm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlJyk7XG5leHBvcnRzLmJpbmROb2RlQ2FsbGJhY2sgPSBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGVfMS5Cb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZE5vZGVDYWxsYmFjay5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFjay5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciB0cnlDYXRjaF8xID0gcmVxdWlyZSgnLi4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9Bc3luY1N1YmplY3QnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgQm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZShjYWxsYmFja0Z1bmMsIHNlbGVjdG9yLCBhcmdzLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jID0gY2FsbGJhY2tGdW5jO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgTm9kZS5qcy1zdHlsZSBjYWxsYmFjayBBUEkgdG8gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW5cbiAgICAgKiBPYnNlcnZhYmxlLlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MganVzdCBsaWtlIHtAbGluayBiaW5kQ2FsbGJhY2t9LCBidXQgdGhlXG4gICAgICogY2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgb2YgdHlwZSBgY2FsbGJhY2soZXJyb3IsIHJlc3VsdClgLjwvc3Bhbj5cbiAgICAgKlxuICAgICAqIGBiaW5kTm9kZUNhbGxiYWNrYCBpcyBub3QgYW4gb3BlcmF0b3IgYmVjYXVzZSBpdHMgaW5wdXQgYW5kIG91dHB1dCBhcmUgbm90XG4gICAgICogT2JzZXJ2YWJsZXMuIFRoZSBpbnB1dCBpcyBhIGZ1bmN0aW9uIGBmdW5jYCB3aXRoIHNvbWUgcGFyYW1ldGVycywgYnV0IHRoZVxuICAgICAqIGxhc3QgcGFyYW1ldGVyIG11c3QgYmUgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGBmdW5jYCBjYWxscyB3aGVuIGl0IGlzXG4gICAgICogZG9uZS4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGV4cGVjdGVkIHRvIGZvbGxvdyBOb2RlLmpzIGNvbnZlbnRpb25zLFxuICAgICAqIHdoZXJlIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgY2FsbGJhY2sgaXMgYW4gZXJyb3IsIHdoaWxlIHJlbWFpbmluZ1xuICAgICAqIGFyZ3VtZW50cyBhcmUgdGhlIGNhbGxiYWNrIHJlc3VsdC4gVGhlIG91dHB1dCBvZiBgYmluZE5vZGVDYWxsYmFja2AgaXMgYVxuICAgICAqIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHNhbWUgcGFyYW1ldGVycyBhcyBgZnVuY2AsIGV4Y2VwdCB0aGUgbGFzdCBvbmUgKHRoZVxuICAgICAqIGNhbGxiYWNrKS4gV2hlbiB0aGUgb3V0cHV0IGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFyZ3VtZW50cywgaXQgd2lsbFxuICAgICAqIHJldHVybiBhbiBPYnNlcnZhYmxlIHdoZXJlIHRoZSByZXN1bHRzIHdpbGwgYmUgZGVsaXZlcmVkIHRvLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+UmVhZCBhIGZpbGUgZnJvbSB0aGUgZmlsZXN5c3RlbSBhbmQgZ2V0IHRoZSBkYXRhIGFzIGFuIE9ic2VydmFibGU8L2NhcHRpb24+XG4gICAgICogaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuICAgICAqIHZhciByZWFkRmlsZUFzT2JzZXJ2YWJsZSA9IFJ4Lk9ic2VydmFibGUuYmluZE5vZGVDYWxsYmFjayhmcy5yZWFkRmlsZSk7XG4gICAgICogdmFyIHJlc3VsdCA9IHJlYWRGaWxlQXNPYnNlcnZhYmxlKCcuL3JvYWROYW1lcy50eHQnLCAndXRmOCcpO1xuICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSwgZSA9PiBjb25zb2xlLmVycm9yKGUpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGJpbmRDYWxsYmFja31cbiAgICAgKiBAc2VlIHtAbGluayBmcm9tfVxuICAgICAqIEBzZWUge0BsaW5rIGZyb21Qcm9taXNlfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBGdW5jdGlvbiB3aXRoIGEgY2FsbGJhY2sgYXMgdGhlIGxhc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNlbGVjdG9yIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZVxuICAgICAqIGNhbGxiYWNrIGFuZCBtYXBzIHRob3NlIGEgdmFsdWUgdG8gZW1pdCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIFRoZSBzY2hlZHVsZXIgb24gd2hpY2ggdG8gc2NoZWR1bGUgdGhlXG4gICAgICogY2FsbGJhY2tzLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLnBhcmFtczogKik6IE9ic2VydmFibGV9IEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGVcbiAgICAgKiBPYnNlcnZhYmxlIHRoYXQgZGVsaXZlcnMgdGhlIHNhbWUgdmFsdWVzIHRoZSBOb2RlLmpzIGNhbGxiYWNrIHdvdWxkXG4gICAgICogZGVsaXZlci5cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBiaW5kTm9kZUNhbGxiYWNrXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGZ1bmMsIHNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSB2b2lkIDApIHsgc2VsZWN0b3IgPSB1bmRlZmluZWQ7IH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZShmdW5jLCBzZWxlY3RvciwgYXJncywgc2NoZWR1bGVyKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBjYWxsYmFja0Z1bmMgPSB0aGlzLmNhbGxiYWNrRnVuYztcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgICAgICAgICBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlckZuKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGhhbmRsZXJGbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHNvdXJjZS5zZWxlY3Rvciwgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gaW5uZXJBcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzZWxlY3RvcikuYXBwbHkodGhpcywgaW5uZXJBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRfMSA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dChyZXN1bHRfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPT09IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyB1c2UgbmFtZWQgZnVuY3Rpb24gaW5zdGFuY2UgdG8gYXZvaWQgY2xvc3VyZS5cbiAgICAgICAgICAgICAgICBoYW5kbGVyLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goY2FsbGJhY2tGdW5jKS5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChoYW5kbGVyKSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwgeyBzb3VyY2U6IHRoaXMsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZSA9IEJvdW5kTm9kZUNhbGxiYWNrT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zb3VyY2UsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgIHZhciBjYWxsYmFja0Z1bmMgPSBzb3VyY2UuY2FsbGJhY2tGdW5jLCBhcmdzID0gc291cmNlLmFyZ3MsIHNjaGVkdWxlciA9IHNvdXJjZS5zY2hlZHVsZXI7XG4gICAgdmFyIHN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdDtcbiAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXJGbigpIHtcbiAgICAgICAgICAgIHZhciBpbm5lckFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJBcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGhhbmRsZXJGbi5zb3VyY2U7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBzb3VyY2Uuc2VsZWN0b3IsIHN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdDtcbiAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMiA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goc2VsZWN0b3IpLmFwcGx5KHRoaXMsIGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdF8yID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEVycm9yLCAwLCB7IGVycjogZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHJlc3VsdF8yLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpbm5lckFyZ3MubGVuZ3RoID09PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuICAgICAgICAgICAgICAgIHNlbGYuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gdXNlIG5hbWVkIGZ1bmN0aW9uIHRvIHBhc3MgdmFsdWVzIGluIHdpdGhvdXQgY2xvc3VyZVxuICAgICAgICBoYW5kbGVyLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goY2FsbGJhY2tGdW5jKS5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChoYW5kbGVyKSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmFkZChzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoYXJnKSB7XG4gICAgdmFyIHZhbHVlID0gYXJnLnZhbHVlLCBzdWJqZWN0ID0gYXJnLnN1YmplY3Q7XG4gICAgc3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEVycm9yKGFyZykge1xuICAgIHZhciBlcnIgPSBhcmcuZXJyLCBzdWJqZWN0ID0gYXJnLnN1YmplY3Q7XG4gICAgc3ViamVjdC5lcnJvcihlcnIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qm91bmROb2RlQ2FsbGJhY2tPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Cb3VuZE5vZGVDYWxsYmFja09ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGNvbWJpbmVMYXRlc3RfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2NvbWJpbmVMYXRlc3QnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmNvbWJpbmVMYXRlc3QgPSBjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdFN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNBcnJheScpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBDb21iaW5lcyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0byBjcmVhdGUgYW4gT2JzZXJ2YWJsZSB3aG9zZSB2YWx1ZXMgYXJlXG4gKiBjYWxjdWxhdGVkIGZyb20gdGhlIGxhdGVzdCB2YWx1ZXMgb2YgZWFjaCBvZiBpdHMgaW5wdXQgT2JzZXJ2YWJsZXMuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPldoZW5ldmVyIGFueSBpbnB1dCBPYnNlcnZhYmxlIGVtaXRzIGEgdmFsdWUsIGl0XG4gKiBjb21wdXRlcyBhIGZvcm11bGEgdXNpbmcgdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBhbGwgdGhlIGlucHV0cywgdGhlbiBlbWl0c1xuICogdGhlIG91dHB1dCBvZiB0aGF0IGZvcm11bGEuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvY29tYmluZUxhdGVzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgY29tYmluZUxhdGVzdGAgY29tYmluZXMgdGhlIHZhbHVlcyBmcm9tIHRoaXMgT2JzZXJ2YWJsZSB3aXRoIHZhbHVlcyBmcm9tXG4gKiBPYnNlcnZhYmxlcyBwYXNzZWQgYXMgYXJndW1lbnRzLiBUaGlzIGlzIGRvbmUgYnkgc3Vic2NyaWJpbmcgdG8gZWFjaFxuICogT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGFuZCBjb2xsZWN0aW5nIGFuIGFycmF5IG9mIGVhY2ggb2YgdGhlIG1vc3QgcmVjZW50XG4gKiB2YWx1ZXMgYW55IHRpbWUgYW55IG9mIHRoZSBpbnB1dCBPYnNlcnZhYmxlcyBlbWl0cywgdGhlbiBlaXRoZXIgdGFraW5nIHRoYXRcbiAqIGFycmF5IGFuZCBwYXNzaW5nIGl0IGFzIGFyZ3VtZW50cyB0byBhbiBvcHRpb25hbCBgcHJvamVjdGAgZnVuY3Rpb24gYW5kXG4gKiBlbWl0dGluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoYXQsIG9yIGp1c3QgZW1pdHRpbmcgdGhlIGFycmF5IG9mIHJlY2VudFxuICogdmFsdWVzIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIGBwcm9qZWN0YCBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5EeW5hbWljYWxseSBjYWxjdWxhdGUgdGhlIEJvZHktTWFzcyBJbmRleCBmcm9tIGFuIE9ic2VydmFibGUgb2Ygd2VpZ2h0IGFuZCBvbmUgZm9yIGhlaWdodDwvY2FwdGlvbj5cbiAqIHZhciB3ZWlnaHQgPSBSeC5PYnNlcnZhYmxlLm9mKDcwLCA3MiwgNzYsIDc5LCA3NSk7XG4gKiB2YXIgaGVpZ2h0ID0gUnguT2JzZXJ2YWJsZS5vZigxLjc2LCAxLjc3LCAxLjc4KTtcbiAqIHZhciBibWkgPSB3ZWlnaHQuY29tYmluZUxhdGVzdChoZWlnaHQsICh3LCBoKSA9PiB3IC8gKGggKiBoKSk7XG4gKiBibWkuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coJ0JNSSBpcyAnICsgeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbWJpbmVBbGx9XG4gKiBAc2VlIHtAbGluayBtZXJnZX1cbiAqIEBzZWUge0BsaW5rIHdpdGhMYXRlc3RGcm9tfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gb3RoZXIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb21iaW5lIHdpdGggdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gTW9yZSB0aGFuIG9uZSBpbnB1dCBPYnNlcnZhYmxlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbcHJvamVjdF0gQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG8gcHJvamVjdCB0aGUgdmFsdWVzIGZyb21cbiAqIHRoZSBjb21iaW5lZCBsYXRlc3QgdmFsdWVzIGludG8gYSBuZXcgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBwcm9qZWN0ZWQgdmFsdWVzIGZyb20gdGhlIG1vc3QgcmVjZW50XG4gKiB2YWx1ZXMgZnJvbSBlYWNoIGlucHV0IE9ic2VydmFibGUsIG9yIGFuIGFycmF5IG9mIHRoZSBtb3N0IHJlY2VudCB2YWx1ZXMgZnJvbVxuICogZWFjaCBpbnB1dCBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBjb21iaW5lTGF0ZXN0XG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9qZWN0ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIC8vIGlmIHRoZSBmaXJzdCBhbmQgb25seSBvdGhlciBhcmd1bWVudCBiZXNpZGVzIHRoZSByZXN1bHRTZWxlY3RvciBpcyBhbiBhcnJheVxuICAgIC8vIGFzc3VtZSBpdCdzIGJlZW4gY2FsbGVkIHdpdGggYGNvbWJpbmVMYXRlc3QoW29iczEsIG9iczIsIG9iczNdLCBwcm9qZWN0KWBcbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXlfMS5pc0FycmF5KG9ic2VydmFibGVzWzBdKSkge1xuICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgIH1cbiAgICBvYnNlcnZhYmxlcy51bnNoaWZ0KHRoaXMpO1xuICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpO1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdDtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIENvbWJpbmVzIG11bHRpcGxlIE9ic2VydmFibGVzIHRvIGNyZWF0ZSBhbiBPYnNlcnZhYmxlIHdob3NlIHZhbHVlcyBhcmVcbiAqIGNhbGN1bGF0ZWQgZnJvbSB0aGUgbGF0ZXN0IHZhbHVlcyBvZiBlYWNoIG9mIGl0cyBpbnB1dCBPYnNlcnZhYmxlcy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+V2hlbmV2ZXIgYW55IGlucHV0IE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZSwgaXRcbiAqIGNvbXB1dGVzIGEgZm9ybXVsYSB1c2luZyB0aGUgbGF0ZXN0IHZhbHVlcyBmcm9tIGFsbCB0aGUgaW5wdXRzLCB0aGVuIGVtaXRzXG4gKiB0aGUgb3V0cHV0IG9mIHRoYXQgZm9ybXVsYS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9jb21iaW5lTGF0ZXN0LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGBjb21iaW5lTGF0ZXN0YCBjb21iaW5lcyB0aGUgdmFsdWVzIGZyb20gYWxsIHRoZSBPYnNlcnZhYmxlcyBwYXNzZWQgYXNcbiAqIGFyZ3VtZW50cy4gVGhpcyBpcyBkb25lIGJ5IHN1YnNjcmliaW5nIHRvIGVhY2ggT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGFuZFxuICogY29sbGVjdGluZyBhbiBhcnJheSBvZiBlYWNoIG9mIHRoZSBtb3N0IHJlY2VudCB2YWx1ZXMgYW55IHRpbWUgYW55IG9mIHRoZVxuICogaW5wdXQgT2JzZXJ2YWJsZXMgZW1pdHMsIHRoZW4gZWl0aGVyIHRha2luZyB0aGF0IGFycmF5IGFuZCBwYXNzaW5nIGl0IGFzXG4gKiBhcmd1bWVudHMgdG8gYW4gb3B0aW9uYWwgYHByb2plY3RgIGZ1bmN0aW9uIGFuZCBlbWl0dGluZyB0aGUgcmV0dXJuIHZhbHVlIG9mXG4gKiB0aGF0LCBvciBqdXN0IGVtaXR0aW5nIHRoZSBhcnJheSBvZiByZWNlbnQgdmFsdWVzIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vXG4gKiBgcHJvamVjdGAgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RHluYW1pY2FsbHkgY2FsY3VsYXRlIHRoZSBCb2R5LU1hc3MgSW5kZXggZnJvbSBhbiBPYnNlcnZhYmxlIG9mIHdlaWdodCBhbmQgb25lIGZvciBoZWlnaHQ8L2NhcHRpb24+XG4gKiB2YXIgd2VpZ2h0ID0gUnguT2JzZXJ2YWJsZS5vZig3MCwgNzIsIDc2LCA3OSwgNzUpO1xuICogdmFyIGhlaWdodCA9IFJ4Lk9ic2VydmFibGUub2YoMS43NiwgMS43NywgMS43OCk7XG4gKiB2YXIgYm1pID0gUnguT2JzZXJ2YWJsZS5jb21iaW5lTGF0ZXN0KHdlaWdodCwgaGVpZ2h0LCAodywgaCkgPT4gdyAvIChoICogaCkpO1xuICogYm1pLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKCdCTUkgaXMgJyArIHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb21iaW5lQWxsfVxuICogQHNlZSB7QGxpbmsgbWVyZ2V9XG4gKiBAc2VlIHtAbGluayB3aXRoTGF0ZXN0RnJvbX1cbiAqXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IG9ic2VydmFibGUxIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29tYmluZSB3aXRoIHRoZVxuICogc291cmNlIE9ic2VydmFibGUuXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IG9ic2VydmFibGUyIEFuIGlucHV0IE9ic2VydmFibGUgdG8gY29tYmluZSB3aXRoIHRoZVxuICogc291cmNlIE9ic2VydmFibGUuIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW3Byb2plY3RdIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIHByb2plY3QgdGhlIHZhbHVlcyBmcm9tXG4gKiB0aGUgY29tYmluZWQgbGF0ZXN0IHZhbHVlcyBpbnRvIGEgbmV3IHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPW51bGxdIFRoZSBTY2hlZHVsZXIgdG8gdXNlIGZvciBzdWJzY3JpYmluZyB0b1xuICogZWFjaCBpbnB1dCBPYnNlcnZhYmxlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBwcm9qZWN0ZWQgdmFsdWVzIGZyb20gdGhlIG1vc3QgcmVjZW50XG4gKiB2YWx1ZXMgZnJvbSBlYWNoIGlucHV0IE9ic2VydmFibGUsIG9yIGFuIGFycmF5IG9mIHRoZSBtb3N0IHJlY2VudCB2YWx1ZXMgZnJvbVxuICogZWFjaCBpbnB1dCBPYnNlcnZhYmxlLlxuICogQHN0YXRpYyB0cnVlXG4gKiBAbmFtZSBjb21iaW5lTGF0ZXN0XG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0U3RhdGljKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IG51bGw7XG4gICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIob2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb2plY3QgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgLy8gaWYgdGhlIGZpcnN0IGFuZCBvbmx5IG90aGVyIGFyZ3VtZW50IGJlc2lkZXMgdGhlIHJlc3VsdFNlbGVjdG9yIGlzIGFuIGFycmF5XG4gICAgLy8gYXNzdW1lIGl0J3MgYmVlbiBjYWxsZWQgd2l0aCBgY29tYmluZUxhdGVzdChbb2JzMSwgb2JzMiwgb2JzM10sIHByb2plY3QpYFxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheV8xLmlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzLCBzY2hlZHVsZXIpLmxpZnQobmV3IENvbWJpbmVMYXRlc3RPcGVyYXRvcihwcm9qZWN0KSk7XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RTdGF0aWMgPSBjb21iaW5lTGF0ZXN0U3RhdGljO1xudmFyIENvbWJpbmVMYXRlc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdE9wZXJhdG9yKHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB9XG4gICAgQ29tYmluZUxhdGVzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLkNvbWJpbmVMYXRlc3RPcGVyYXRvciA9IENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICB0aGlzLnRvUmVzcG9uZCA9IFtdO1xuICAgIH1cbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuICAgICAgICB2YXIgdG9SZXNwb25kID0gdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIHRvUmVzcG9uZC5wdXNoKHRvUmVzcG9uZC5sZW5ndGgpO1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gob2JzZXJ2YWJsZSk7XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSB0aGlzLm9ic2VydmFibGVzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGxlbjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAodW51c2VkKSB7XG4gICAgICAgIGlmICgodGhpcy5hY3RpdmUgLT0gMSkgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuICAgICAgICB2YWx1ZXNbb3V0ZXJJbmRleF0gPSBpbm5lclZhbHVlO1xuICAgICAgICB2YXIgdG9SZXNwb25kID0gdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIGlmICh0b1Jlc3BvbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGZvdW5kID0gdG9SZXNwb25kLmluZGV4T2Yob3V0ZXJJbmRleCk7XG4gICAgICAgICAgICBpZiAoZm91bmQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdG9SZXNwb25kLnNwbGljZShmb3VuZCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvUmVzcG9uZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmFwcGx5KHRoaXMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydHMuQ29tYmluZUxhdGVzdFN1YnNjcmliZXIgPSBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9jb21iaW5lTGF0ZXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFNjYWxhck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vU2NhbGFyT2JzZXJ2YWJsZScpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9FbXB0eU9ic2VydmFibGUnKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc1NjaGVkdWxlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBBcnJheU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcnJheU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJyYXlPYnNlcnZhYmxlKGFycmF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIGlmICghc2NoZWR1bGVyICYmIGFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5faXNTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGFycmF5WzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFycmF5T2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoYXJyYXksIHNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZShhcnJheSwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNvbWUgdmFsdWVzIHlvdSBzcGVjaWZ5IGFzIGFyZ3VtZW50cyxcbiAgICAgKiBpbW1lZGlhdGVseSBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBhbmQgdGhlbiBlbWl0cyBhIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbWl0cyB0aGUgYXJndW1lbnRzIHlvdSBwcm92aWRlLCB0aGVuIGNvbXBsZXRlcy5cbiAgICAgKiA8L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL29mLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogVGhpcyBzdGF0aWMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhIHNpbXBsZSBPYnNlcnZhYmxlIHRoYXQgb25seVxuICAgICAqIGVtaXRzIHRoZSBhcmd1bWVudHMgZ2l2ZW4sIGFuZCB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uIHRoZXJlYWZ0ZXIuIEl0IGNhblxuICAgICAqIGJlIHVzZWQgZm9yIGNvbXBvc2luZyB3aXRoIG90aGVyIE9ic2VydmFibGVzLCBzdWNoIGFzIHdpdGgge0BsaW5rIGNvbmNhdH0uXG4gICAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyBhIGBudWxsYCBTY2hlZHVsZXIsIHdoaWNoIG1lYW5zIHRoZSBgbmV4dGBcbiAgICAgKiBub3RpZmljYXRpb25zIGFyZSBzZW50IHN5bmNocm9ub3VzbHksIGFsdGhvdWdoIHdpdGggYSBkaWZmZXJlbnQgU2NoZWR1bGVyXG4gICAgICogaXQgaXMgcG9zc2libGUgdG8gZGV0ZXJtaW5lIHdoZW4gdGhvc2Ugbm90aWZpY2F0aW9ucyB3aWxsIGJlIGRlbGl2ZXJlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgMTAsIDIwLCAzMCwgdGhlbiAnYScsICdiJywgJ2MnLCB0aGVuIHN0YXJ0IHRpY2tpbmcgZXZlcnkgc2Vjb25kLjwvY2FwdGlvbj5cbiAgICAgKiB2YXIgbnVtYmVycyA9IFJ4Lk9ic2VydmFibGUub2YoMTAsIDIwLCAzMCk7XG4gICAgICogdmFyIGxldHRlcnMgPSBSeC5PYnNlcnZhYmxlLm9mKCdhJywgJ2InLCAnYycpO1xuICAgICAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gICAgICogdmFyIHJlc3VsdCA9IG51bWJlcnMuY29uY2F0KGxldHRlcnMpLmNvbmNhdChpbnRlcnZhbCk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGNyZWF0ZX1cbiAgICAgKiBAc2VlIHtAbGluayBlbXB0eX1cbiAgICAgKiBAc2VlIHtAbGluayBuZXZlcn1cbiAgICAgKiBAc2VlIHtAbGluayB0aHJvd31cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uVH0gdmFsdWVzIEFyZ3VtZW50cyB0aGF0IHJlcHJlc2VudCBgbmV4dGAgdmFsdWVzIHRvIGJlIGVtaXR0ZWQuXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIEEge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvciBzY2hlZHVsaW5nXG4gICAgICogdGhlIGVtaXNzaW9ucyBvZiB0aGUgYG5leHRgIG5vdGlmaWNhdGlvbnMuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGVhY2ggZ2l2ZW4gaW5wdXQgdmFsdWUuXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgb2ZcbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIEFycmF5T2JzZXJ2YWJsZS5vZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGUoYXJyYXksIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhck9ic2VydmFibGVfMS5TY2FsYXJPYnNlcnZhYmxlKGFycmF5WzBdLCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXJyYXlPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBhcnJheSA9IHN0YXRlLmFycmF5LCBpbmRleCA9IHN0YXRlLmluZGV4LCBjb3VudCA9IHN0YXRlLmNvdW50LCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICAgICAgaWYgKGluZGV4ID49IGNvdW50KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2luZGV4XSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuICAgIH07XG4gICAgQXJyYXlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgdmFyIGNvdW50ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoQXJyYXlPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgYXJyYXk6IGFycmF5LCBpbmRleDogaW5kZXgsIGNvdW50OiBjb3VudCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50ICYmICFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXJyYXlPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5BcnJheU9ic2VydmFibGUgPSBBcnJheU9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcnJheU9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgU2NhbGFyT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNjYWxhck9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2NhbGFyT2JzZXJ2YWJsZSh2YWx1ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IHRydWU7XG4gICAgfVxuICAgIFNjYWxhck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJPYnNlcnZhYmxlKHZhbHVlLCBzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgU2NhbGFyT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgZG9uZSA9IHN0YXRlLmRvbmUsIHZhbHVlID0gc3RhdGUudmFsdWUsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuICAgIH07XG4gICAgU2NhbGFyT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShTY2FsYXJPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsIHZhbHVlOiB2YWx1ZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2NhbGFyT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuU2NhbGFyT2JzZXJ2YWJsZSA9IFNjYWxhck9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2FsYXJPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9TY2FsYXJPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBFbXB0eU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbXB0eU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1wdHlPYnNlcnZhYmxlKHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIG5vIGl0ZW1zIHRvIHRoZSBPYnNlcnZlciBhbmQgaW1tZWRpYXRlbHlcbiAgICAgKiBlbWl0cyBhIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5KdXN0IGVtaXRzICdjb21wbGV0ZScsIGFuZCBub3RoaW5nIGVsc2UuXG4gICAgICogPC9zcGFuPlxuICAgICAqXG4gICAgICogPGltZyBzcmM9XCIuL2ltZy9lbXB0eS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgKlxuICAgICAqIFRoaXMgc3RhdGljIG9wZXJhdG9yIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgYSBzaW1wbGUgT2JzZXJ2YWJsZSB0aGF0IG9ubHlcbiAgICAgKiBlbWl0cyB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uLiBJdCBjYW4gYmUgdXNlZCBmb3IgY29tcG9zaW5nIHdpdGggb3RoZXJcbiAgICAgKiBPYnNlcnZhYmxlcywgc3VjaCBhcyBpbiBhIHtAbGluayBtZXJnZU1hcH0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBudW1iZXIgNywgdGhlbiBjb21wbGV0ZS48L2NhcHRpb24+XG4gICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuZW1wdHkoKS5zdGFydFdpdGgoNyk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBhbmQgZmxhdHRlbiBvbmx5IG9kZCBudW1iZXJzIHRvIHRoZSBzZXF1ZW5jZSAnYScsICdiJywgJ2MnPC9jYXB0aW9uPlxuICAgICAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gICAgICogdmFyIHJlc3VsdCA9IGludGVydmFsLm1lcmdlTWFwKHggPT5cbiAgICAgKiAgIHggJSAyID09PSAxID8gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKSA6IFJ4Lk9ic2VydmFibGUuZW1wdHkoKVxuICAgICAqICk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGNyZWF0ZX1cbiAgICAgKiBAc2VlIHtAbGluayBuZXZlcn1cbiAgICAgKiBAc2VlIHtAbGluayBvZn1cbiAgICAgKiBAc2VlIHtAbGluayB0aHJvd31cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSBBIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuICAgICAqIHRoZSBlbWlzc2lvbiBvZiB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uLlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIFwiZW1wdHlcIiBPYnNlcnZhYmxlOiBlbWl0cyBvbmx5IHRoZSBjb21wbGV0ZVxuICAgICAqIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBlbXB0eVxuICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG4gICAgICovXG4gICAgRW1wdHlPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIEVtcHR5T2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRW1wdHlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEVtcHR5T2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwgeyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRW1wdHlPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5FbXB0eU9ic2VydmFibGUgPSBFbXB0eU9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbXB0eU9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0VtcHR5T2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9pc1NjaGVkdWxlci5qc1xuICoqIG1vZHVsZSBpZCA9IDM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBPdXRlclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPdXRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3V0ZXJTdWJzY3JpYmVyKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT3V0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5PdXRlclN1YnNjcmliZXIgPSBPdXRlclN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdXRlclN1YnNjcmliZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9PdXRlclN1YnNjcmliZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi9yb290Jyk7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKCcuL2lzUHJvbWlzZScpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBpdGVyYXRvcl8xID0gcmVxdWlyZSgnLi4vc3ltYm9sL2l0ZXJhdG9yJyk7XG52YXIgSW5uZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9Jbm5lclN1YnNjcmliZXInKTtcbnZhciAkJG9ic2VydmFibGUgPSByZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xuZnVuY3Rpb24gc3Vic2NyaWJlVG9SZXN1bHQob3V0ZXJTdWJzY3JpYmVyLCByZXN1bHQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSBuZXcgSW5uZXJTdWJzY3JpYmVyXzEuSW5uZXJTdWJzY3JpYmVyKG91dGVyU3Vic2NyaWJlciwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCk7XG4gICAgaWYgKGRlc3RpbmF0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIGlmIChyZXN1bHQuX2lzU2NhbGFyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWJzY3JpYmUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0FycmF5XzEuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuICYmICFkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZDsgaSsrKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJlc3VsdFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghZGVzdGluYXRpb24uaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBkZXN0aW5hdGlvbi5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgLy8gRXNjYXBpbmcgdGhlIFByb21pc2UgdHJhcDogZ2xvYmFsbHkgdGhyb3cgdW5oYW5kbGVkIGVycm9yc1xuICAgICAgICAgICAgcm9vdF8xLnJvb3Quc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcmVzdWx0OyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBfYVtfaV07XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGl0ZW0pO1xuICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0WyQkb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG9icyA9IHJlc3VsdFskJG9ic2VydmFibGVdKCk7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoJ2ludmFsaWQgb2JzZXJ2YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUobmV3IElubmVyU3Vic2NyaWJlcl8xLklubmVyU3Vic2NyaWJlcihvdXRlclN1YnNjcmliZXIsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVzdGluYXRpb24uZXJyb3IobmV3IFR5cGVFcnJvcigndW5rbm93biB0eXBlIHJldHVybmVkJykpO1xuICAgIH1cbn1cbmV4cG9ydHMuc3Vic2NyaWJlVG9SZXN1bHQgPSBzdWJzY3JpYmVUb1Jlc3VsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUmVzdWx0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qc1xuICoqIG1vZHVsZSBpZCA9IDQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2lzUHJvbWlzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbnZhciBTeW1ib2wgPSByb290XzEucm9vdC5TeW1ib2w7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgZXhwb3J0cy4kJGl0ZXJhdG9yID0gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBleHBvcnRzLiQkaXRlcmF0b3IgPSBTeW1ib2wuZm9yKCdpdGVyYXRvcicpO1xuICAgIH1cbn1cbmVsc2Uge1xuICAgIGlmIChyb290XzEucm9vdC5TZXQgJiYgdHlwZW9mIG5ldyByb290XzEucm9vdC5TZXQoKVsnQEBpdGVyYXRvciddID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEJ1ZyBmb3IgbW96aWxsYSB2ZXJzaW9uXG4gICAgICAgIGV4cG9ydHMuJCRpdGVyYXRvciA9ICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgZWxzZSBpZiAocm9vdF8xLnJvb3QuTWFwKSB7XG4gICAgICAgIC8vIGVzNi1zaGltIHNwZWNpZmljIGxvZ2ljXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocm9vdF8xLnJvb3QuTWFwLnByb3RvdHlwZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAnZW50cmllcycgJiYga2V5ICE9PSAnc2l6ZScgJiYgcm9vdF8xLnJvb3QuTWFwLnByb3RvdHlwZVtrZXldID09PSByb290XzEucm9vdC5NYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICAgICAgICBleHBvcnRzLiQkaXRlcmF0b3IgPSBrZXk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4cG9ydHMuJCRpdGVyYXRvciA9ICdAQGl0ZXJhdG9yJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3N5bWJvbC9pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDQzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBJbm5lclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbm5lclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG4gICAgICAgIHRoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLklubmVyU3Vic2NyaWJlciA9IElubmVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL0lubmVyU3Vic2NyaWJlci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2NvbmNhdCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuY29uY2F0ID0gY29uY2F0XzEuY29uY2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvY29uY2F0LmpzXG4gKiogbW9kdWxlIGlkID0gNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZSgnLi4vb3BlcmF0b3IvY29uY2F0Jyk7XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdF8xLmNvbmNhdFN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvY29uY2F0LmpzXG4gKiogbW9kdWxlIGlkID0gNDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKCcuL21lcmdlQWxsJyk7XG4vKipcbiAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggc2VxdWVudGlhbGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuICogZ2l2ZW4gaW5wdXQgT2JzZXJ2YWJsZSBhZnRlciB0aGUgY3VycmVudCBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db25jYXRlbmF0ZXMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnlcbiAqIHNlcXVlbnRpYWxseSBlbWl0dGluZyB0aGVpciB2YWx1ZXMsIG9uZSBPYnNlcnZhYmxlIGFmdGVyIHRoZSBvdGhlci48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9jb25jYXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogSm9pbnMgdGhpcyBPYnNlcnZhYmxlIHdpdGggbXVsdGlwbGUgb3RoZXIgT2JzZXJ2YWJsZXMgYnkgc3Vic2NyaWJpbmcgdG8gdGhlbVxuICogb25lIGF0IGEgdGltZSwgc3RhcnRpbmcgd2l0aCB0aGUgc291cmNlLCBhbmQgbWVyZ2luZyB0aGVpciByZXN1bHRzIGludG8gdGhlXG4gKiBvdXRwdXQgT2JzZXJ2YWJsZS4gV2lsbCB3YWl0IGZvciBlYWNoIE9ic2VydmFibGUgdG8gY29tcGxldGUgYmVmb3JlIG1vdmluZ1xuICogb24gdG8gdGhlIG5leHQuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Q29uY2F0ZW5hdGUgYSB0aW1lciBjb3VudGluZyBmcm9tIDAgdG8gMyB3aXRoIGEgc3luY2hyb25vdXMgc2VxdWVuY2UgZnJvbSAxIHRvIDEwPC9jYXB0aW9uPlxuICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDQpO1xuICogdmFyIHNlcXVlbmNlID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCAxMCk7XG4gKiB2YXIgcmVzdWx0ID0gdGltZXIuY29uY2F0KHNlcXVlbmNlKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Q29uY2F0ZW5hdGUgMyBPYnNlcnZhYmxlczwvY2FwdGlvbj5cbiAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcbiAqIHZhciB0aW1lcjMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkudGFrZSgxMCk7XG4gKiB2YXIgcmVzdWx0ID0gdGltZXIxLmNvbmNhdCh0aW1lcjIsIHRpbWVyMyk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcFRvfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gb3RoZXIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb25jYXRlbmF0ZSBhZnRlciB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBNb3JlIHRoYW4gb25lIGlucHV0IE9ic2VydmFibGVzIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPW51bGxdIEFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byBzY2hlZHVsZSBlYWNoXG4gKiBPYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFsbCB2YWx1ZXMgb2YgZWFjaCBwYXNzZWQgT2JzZXJ2YWJsZSBtZXJnZWQgaW50byBhXG4gKiBzaW5nbGUgT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGluIHNlcmlhbCBmYXNoaW9uLlxuICogQG1ldGhvZCBjb25jYXRcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdFN0YXRpYy5hcHBseSh2b2lkIDAsIFt0aGlzXS5jb25jYXQob2JzZXJ2YWJsZXMpKTtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBvdXRwdXQgT2JzZXJ2YWJsZSB3aGljaCBzZXF1ZW50aWFsbHkgZW1pdHMgYWxsIHZhbHVlcyBmcm9tIGV2ZXJ5XG4gKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIGFmdGVyIHRoZSBjdXJyZW50IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbmNhdGVuYXRlcyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieVxuICogc2VxdWVudGlhbGx5IGVtaXR0aW5nIHRoZWlyIHZhbHVlcywgb25lIE9ic2VydmFibGUgYWZ0ZXIgdGhlIG90aGVyLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBKb2lucyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieSBzdWJzY3JpYmluZyB0byB0aGVtIG9uZSBhdCBhIHRpbWUgYW5kXG4gKiBtZXJnaW5nIHRoZWlyIHJlc3VsdHMgaW50byB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFdpbGwgd2FpdCBmb3IgZWFjaFxuICogT2JzZXJ2YWJsZSB0byBjb21wbGV0ZSBiZWZvcmUgbW92aW5nIG9uIHRvIHRoZSBuZXh0LlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIGEgdGltZXIgY291bnRpbmcgZnJvbSAwIHRvIDMgd2l0aCBhIHN5bmNocm9ub3VzIHNlcXVlbmNlIGZyb20gMSB0byAxMDwvY2FwdGlvbj5cbiAqIHZhciB0aW1lciA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkudGFrZSg0KTtcbiAqIHZhciBzZXF1ZW5jZSA9IFJ4Lk9ic2VydmFibGUucmFuZ2UoMSwgMTApO1xuICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuY29uY2F0KHRpbWVyLCBzZXF1ZW5jZSk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIDMgT2JzZXJ2YWJsZXM8L2NhcHRpb24+XG4gKiB2YXIgdGltZXIxID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKTtcbiAqIHZhciB0aW1lcjIgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDIwMDApLnRha2UoNik7XG4gKiB2YXIgdGltZXIzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCg1MDApLnRha2UoMTApO1xuICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuY29uY2F0KHRpbWVyMSwgdGltZXIyLCB0aW1lcjMpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb25jYXRBbGx9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cbiAqXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IGlucHV0MSBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIGNvbmNhdGVuYXRlIHdpdGggb3RoZXJzLlxuICogQHBhcmFtIHtPYnNlcnZhYmxlfSBpbnB1dDIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb25jYXRlbmF0ZSB3aXRoIG90aGVycy5cbiAqIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9bnVsbF0gQW4gb3B0aW9uYWwgU2NoZWR1bGVyIHRvIHNjaGVkdWxlIGVhY2hcbiAqIE9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG9uLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQWxsIHZhbHVlcyBvZiBlYWNoIHBhc3NlZCBPYnNlcnZhYmxlIG1lcmdlZCBpbnRvIGFcbiAqIHNpbmdsZSBPYnNlcnZhYmxlLCBpbiBvcmRlciwgaW4gc2VyaWFsIGZhc2hpb24uXG4gKiBAc3RhdGljIHRydWVcbiAqIEBuYW1lIGNvbmNhdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gY29uY2F0U3RhdGljKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gbnVsbDtcbiAgICB2YXIgYXJncyA9IG9ic2VydmFibGVzO1xuICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGFyZ3Nbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFyZ3MucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzLCBzY2hlZHVsZXIpLmxpZnQobmV3IG1lcmdlQWxsXzEuTWVyZ2VBbGxPcGVyYXRvcigxKSk7XG59XG5leHBvcnRzLmNvbmNhdFN0YXRpYyA9IGNvbmNhdFN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2NvbmNhdC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogQ29udmVydHMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSBpbnRvIGEgZmlyc3Qtb3JkZXIgT2JzZXJ2YWJsZSB3aGljaFxuICogY29uY3VycmVudGx5IGRlbGl2ZXJzIGFsbCB2YWx1ZXMgdGhhdCBhcmUgZW1pdHRlZCBvbiB0aGUgaW5uZXIgT2JzZXJ2YWJsZXMuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkZsYXR0ZW5zIGFuIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWVyZ2VBbGwucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYG1lcmdlQWxsYCBzdWJzY3JpYmVzIHRvIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBPYnNlcnZhYmxlcywgYWxzbyBrbm93biBhc1xuICogYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZS4gRWFjaCB0aW1lIGl0IG9ic2VydmVzIG9uZSBvZiB0aGVzZSBlbWl0dGVkIGlubmVyXG4gKiBPYnNlcnZhYmxlcywgaXQgc3Vic2NyaWJlcyB0byB0aGF0IGFuZCBkZWxpdmVycyBhbGwgdGhlIHZhbHVlcyBmcm9tIHRoZVxuICogaW5uZXIgT2JzZXJ2YWJsZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvbmx5XG4gKiBjb21wbGV0ZXMgb25jZSBhbGwgaW5uZXIgT2JzZXJ2YWJsZXMgaGF2ZSBjb21wbGV0ZWQuIEFueSBlcnJvciBkZWxpdmVyZWQgYnlcbiAqIGEgaW5uZXIgT2JzZXJ2YWJsZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlNwYXduIGEgbmV3IGludGVydmFsIE9ic2VydmFibGUgZm9yIGVhY2ggY2xpY2sgZXZlbnQsIGFuZCBibGVuZCB0aGVpciBvdXRwdXRzIGFzIG9uZSBPYnNlcnZhYmxlPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBoaWdoZXJPcmRlciA9IGNsaWNrcy5tYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcbiAqIHZhciBmaXJzdE9yZGVyID0gaGlnaGVyT3JkZXIubWVyZ2VBbGwoKTtcbiAqIGZpcnN0T3JkZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvdW50IGZyb20gMCB0byA5IGV2ZXJ5IHNlY29uZCBmb3IgZWFjaCBjbGljaywgYnV0IG9ubHkgYWxsb3cgMiBjb25jdXJyZW50IHRpbWVyczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgaGlnaGVyT3JkZXIgPSBjbGlja3MubWFwKChldikgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKSk7XG4gKiB2YXIgZmlyc3RPcmRlciA9IGhpZ2hlck9yZGVyLm1lcmdlQWxsKDIpO1xuICogZmlyc3RPcmRlci5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgY29tYmluZUFsbH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cbiAqIEBzZWUge0BsaW5rIGV4aGF1c3R9XG4gKiBAc2VlIHtAbGluayBtZXJnZX1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cbiAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaH1cbiAqIEBzZWUge0BsaW5rIHppcEFsbH1cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSBNYXhpbXVtIG51bWJlciBvZiBpbm5lclxuICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdmFsdWVzIGNvbWluZyBmcm9tIGFsbCB0aGVcbiAqIGlubmVyIE9ic2VydmFibGVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBtZXJnZUFsbFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IE1lcmdlQWxsT3BlcmF0b3IoY29uY3VycmVudCkpO1xufVxuZXhwb3J0cy5tZXJnZUFsbCA9IG1lcmdlQWxsO1xudmFyIE1lcmdlQWxsT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlQWxsT3BlcmF0b3IoY29uY3VycmVudCkge1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgIH1cbiAgICBNZXJnZUFsbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBNZXJnZUFsbFN1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlQWxsT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NZXJnZUFsbE9wZXJhdG9yID0gTWVyZ2VBbGxPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWVyZ2VBbGxTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVyZ2VBbGxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlQWxsU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY29uY3VycmVudCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB9XG4gICAgTWVyZ2VBbGxTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChvYnNlcnZhYmxlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VBbGxTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZUFsbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZUFsbFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5NZXJnZUFsbFN1YnNjcmliZXIgPSBNZXJnZUFsbFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL21lcmdlQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gNDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBkZWZlcl8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9kZWZlcicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZGVmZXIgPSBkZWZlcl8xLmRlZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9kZWZlci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBEZWZlck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vRGVmZXJPYnNlcnZhYmxlJyk7XG5leHBvcnRzLmRlZmVyID0gRGVmZXJPYnNlcnZhYmxlXzEuRGVmZXJPYnNlcnZhYmxlLmNyZWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9kZWZlci5qc1xuICoqIG1vZHVsZSBpZCA9IDUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIERlZmVyT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlZmVyT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWZlck9ic2VydmFibGUob2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZUZhY3RvcnkgPSBvYnNlcnZhYmxlRmFjdG9yeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQsIG9uIHN1YnNjcmliZSwgY2FsbHMgYW4gT2JzZXJ2YWJsZSBmYWN0b3J5IHRvXG4gICAgICogbWFrZSBhbiBPYnNlcnZhYmxlIGZvciBlYWNoIG5ldyBPYnNlcnZlci5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5DcmVhdGVzIHRoZSBPYnNlcnZhYmxlIGxhemlseSwgdGhhdCBpcywgb25seSB3aGVuIGl0XG4gICAgICogaXMgc3Vic2NyaWJlZC5cbiAgICAgKiA8L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL2RlZmVyLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogYGRlZmVyYCBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0aGUgT2JzZXJ2YWJsZSBvbmx5IHdoZW4gdGhlIE9ic2VydmVyXG4gICAgICogc3Vic2NyaWJlcywgYW5kIGNyZWF0ZSBhIGZyZXNoIE9ic2VydmFibGUgZm9yIGVhY2ggT2JzZXJ2ZXIuIEl0IHdhaXRzIHVudGlsXG4gICAgICogYW4gT2JzZXJ2ZXIgc3Vic2NyaWJlcyB0byBpdCwgYW5kIHRoZW4gaXQgZ2VuZXJhdGVzIGFuIE9ic2VydmFibGUsXG4gICAgICogdHlwaWNhbGx5IHdpdGggYW4gT2JzZXJ2YWJsZSBmYWN0b3J5IGZ1bmN0aW9uLiBJdCBkb2VzIHRoaXMgYWZyZXNoIGZvciBlYWNoXG4gICAgICogc3Vic2NyaWJlciwgc28gYWx0aG91Z2ggZWFjaCBzdWJzY3JpYmVyIG1heSB0aGluayBpdCBpcyBzdWJzY3JpYmluZyB0byB0aGVcbiAgICAgKiBzYW1lIE9ic2VydmFibGUsIGluIGZhY3QgZWFjaCBzdWJzY3JpYmVyIGdldHMgaXRzIG93biBpbmRpdmlkdWFsXG4gICAgICogT2JzZXJ2YWJsZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlN1YnNjcmliZSB0byBlaXRoZXIgYW4gT2JzZXJ2YWJsZSBvZiBjbGlja3Mgb3IgYW4gT2JzZXJ2YWJsZSBvZiBpbnRlcnZhbCwgYXQgcmFuZG9tPC9jYXB0aW9uPlxuICAgICAqIHZhciBjbGlja3NPckludGVydmFsID0gUnguT2JzZXJ2YWJsZS5kZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICogICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAqICAgICByZXR1cm4gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICAgICAqICAgfSBlbHNlIHtcbiAgICAgKiAgICAgcmV0dXJuIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogY2xpY2tzT3JJbnRlcnZhbC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBjcmVhdGV9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IE9ic2VydmFibGV8UHJvbWlzZX0gb2JzZXJ2YWJsZUZhY3RvcnkgVGhlIE9ic2VydmFibGVcbiAgICAgKiBmYWN0b3J5IGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZWFjaCBPYnNlcnZlciB0aGF0IHN1YnNjcmliZXMgdG8gdGhlIG91dHB1dFxuICAgICAqIE9ic2VydmFibGUuIE1heSBhbHNvIHJldHVybiBhIFByb21pc2UsIHdoaWNoIHdpbGwgYmUgY29udmVydGVkIG9uIHRoZSBmbHlcbiAgICAgKiB0byBhbiBPYnNlcnZhYmxlLlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgd2hvc2UgT2JzZXJ2ZXJzJyBzdWJzY3JpcHRpb25zIHRyaWdnZXJcbiAgICAgKiBhbiBpbnZvY2F0aW9uIG9mIHRoZSBnaXZlbiBPYnNlcnZhYmxlIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgZGVmZXJcbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIERlZmVyT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZlck9ic2VydmFibGUob2JzZXJ2YWJsZUZhY3RvcnkpO1xuICAgIH07XG4gICAgRGVmZXJPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZlclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vYnNlcnZhYmxlRmFjdG9yeSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmZXJPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5EZWZlck9ic2VydmFibGUgPSBEZWZlck9ic2VydmFibGU7XG52YXIgRGVmZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVmZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZmFjdG9yeSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgICAgIHRoaXMudHJ5RGVmZXIoKTtcbiAgICB9XG4gICAgRGVmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlEZWZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY2FsbEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmZhY3RvcnkoKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlZmVyU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZlck9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0RlZmVyT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoJy4uLy4uL29ic2VydmFibGUvZW1wdHknKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmVtcHR5ID0gZW1wdHlfMS5lbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvZW1wdHkuanNcbiAqKiBtb2R1bGUgaWQgPSA1MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgRW1wdHlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL0VtcHR5T2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5lbXB0eSA9IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvZW1wdHkuanNcbiAqKiBtb2R1bGUgaWQgPSA1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGZvcmtKb2luXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2ZvcmtKb2luJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mb3JrSm9pbiA9IGZvcmtKb2luXzEuZm9ya0pvaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JrSm9pbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzXG4gKiogbW9kdWxlIGlkID0gNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEZvcmtKb2luT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9Gb3JrSm9pbk9ic2VydmFibGUnKTtcbmV4cG9ydHMuZm9ya0pvaW4gPSBGb3JrSm9pbk9ic2VydmFibGVfMS5Gb3JrSm9pbk9ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ya0pvaW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzXG4gKiogbW9kdWxlIGlkID0gNTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9FbXB0eU9ic2VydmFibGUnKTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKCcuLi91dGlsL2lzQXJyYXknKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEZvcmtKb2luT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcmtKb2luT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JrSm9pbk9ic2VydmFibGUoc291cmNlcywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IHNvdXJjZXM7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNvdXJjZXNcbiAgICAgKiBAcmV0dXJuIHthbnl9XG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgZm9ya0pvaW5cbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIEZvcmtKb2luT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBzb3VyY2VzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VzID09PSBudWxsIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VzW3NvdXJjZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yID0gc291cmNlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgZmlyc3QgYW5kIG9ubHkgb3RoZXIgYXJndW1lbnQgYmVzaWRlcyB0aGUgcmVzdWx0U2VsZWN0b3IgaXMgYW4gYXJyYXlcbiAgICAgICAgLy8gYXNzdW1lIGl0J3MgYmVlbiBjYWxsZWQgd2l0aCBgZm9ya0pvaW4oW29iczEsIG9iczIsIG9iczNdLCByZXN1bHRTZWxlY3RvcilgXG4gICAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5XzEuaXNBcnJheShzb3VyY2VzWzBdKSkge1xuICAgICAgICAgICAgc291cmNlcyA9IHNvdXJjZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRm9ya0pvaW5PYnNlcnZhYmxlKHNvdXJjZXMsIHJlc3VsdFNlbGVjdG9yKTtcbiAgICB9O1xuICAgIEZvcmtKb2luT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9ya0pvaW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuc291cmNlcywgdGhpcy5yZXN1bHRTZWxlY3Rvcik7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ya0pvaW5PYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Gb3JrSm9pbk9ic2VydmFibGUgPSBGb3JrSm9pbk9ic2VydmFibGU7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEZvcmtKb2luU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcmtKb2luU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JrSm9pblN1YnNjcmliZXIoZGVzdGluYXRpb24sIHNvdXJjZXMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gc291cmNlcztcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IDA7XG4gICAgICAgIHRoaXMuaGF2ZVZhbHVlcyA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy50b3RhbCA9IGxlbjtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHNvdXJjZSwgbnVsbCwgaSk7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi5vdXRlckluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgRm9ya0pvaW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgaWYgKCFpbm5lclN1Yi5faGFzVmFsdWUpIHtcbiAgICAgICAgICAgIGlubmVyU3ViLl9oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhhdmVWYWx1ZXMrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ya0pvaW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXZlVmFsdWVzID0gX2EuaGF2ZVZhbHVlcywgcmVzdWx0U2VsZWN0b3IgPSBfYS5yZXN1bHRTZWxlY3RvciwgdmFsdWVzID0gX2EudmFsdWVzO1xuICAgICAgICB2YXIgbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgaWYgKCFpbm5lclN1Yi5faGFzVmFsdWUpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wbGV0ZWQrKztcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGVkICE9PSBsZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGF2ZVZhbHVlcyA9PT0gbGVuKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRTZWxlY3RvciA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHRoaXMsIHZhbHVlcykgOiB2YWx1ZXM7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcmtKb2luU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gb3JrSm9pbk9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0ZvcmtKb2luT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZnJvbV8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9mcm9tJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tID0gZnJvbV8xLmZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDU3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBGcm9tT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9Gcm9tT2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5mcm9tID0gRnJvbU9ic2VydmFibGVfMS5Gcm9tT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9mcm9tLmpzXG4gKiogbW9kdWxlIGlkID0gNThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0FycmF5Jyk7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0Z1bmN0aW9uJyk7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzUHJvbWlzZScpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG52YXIgUHJvbWlzZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vUHJvbWlzZU9ic2VydmFibGUnKTtcbnZhciBJdGVyYXRvck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vSXRlcmF0b3JPYnNlcnZhYmxlJyk7XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIEFycmF5TGlrZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vQXJyYXlMaWtlT2JzZXJ2YWJsZScpO1xudmFyIGl0ZXJhdG9yXzEgPSByZXF1aXJlKCcuLi9zeW1ib2wvaXRlcmF0b3InKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKCcuLi9vcGVyYXRvci9vYnNlcnZlT24nKTtcbnZhciAkJG9ic2VydmFibGUgPSByZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xudmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBGcm9tT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZyb21PYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZyb21PYnNlcnZhYmxlKGlzaCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG51bGwpO1xuICAgICAgICB0aGlzLmlzaCA9IGlzaDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBmcm9tIGFuIEFycmF5LCBhbiBhcnJheS1saWtlIG9iamVjdCwgYSBQcm9taXNlLCBhblxuICAgICAqIGl0ZXJhYmxlIG9iamVjdCwgb3IgYW4gT2JzZXJ2YWJsZS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db252ZXJ0cyBhbG1vc3QgYW55dGhpbmcgdG8gYW4gT2JzZXJ2YWJsZS48L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL2Zyb20ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICpcbiAgICAgKiBDb252ZXJ0IHZhcmlvdXMgb3RoZXIgb2JqZWN0cyBhbmQgZGF0YSB0eXBlcyBpbnRvIE9ic2VydmFibGVzLiBgZnJvbWBcbiAgICAgKiBjb252ZXJ0cyBhIFByb21pc2Ugb3IgYW4gYXJyYXktbGlrZSBvciBhblxuICAgICAqIFtpdGVyYWJsZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvSXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYWJsZSlcbiAgICAgKiBvYmplY3QgaW50byBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIGl0ZW1zIGluIHRoYXQgcHJvbWlzZSBvciBhcnJheSBvclxuICAgICAqIGl0ZXJhYmxlLiBBIFN0cmluZywgaW4gdGhpcyBjb250ZXh0LCBpcyB0cmVhdGVkIGFzIGFuIGFycmF5IG9mIGNoYXJhY3RlcnMuXG4gICAgICogT2JzZXJ2YWJsZS1saWtlIG9iamVjdHMgKGNvbnRhaW5zIGEgZnVuY3Rpb24gbmFtZWQgd2l0aCB0aGUgRVMyMDE1IFN5bWJvbFxuICAgICAqIGZvciBPYnNlcnZhYmxlKSBjYW4gYWxzbyBiZSBjb252ZXJ0ZWQgdGhyb3VnaCB0aGlzIG9wZXJhdG9yLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q29udmVydHMgYW4gYXJyYXkgdG8gYW4gT2JzZXJ2YWJsZTwvY2FwdGlvbj5cbiAgICAgKiB2YXIgYXJyYXkgPSBbMTAsIDIwLCAzMF07XG4gICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuZnJvbShhcnJheSk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbnZlcnQgYW4gaW5maW5pdGUgaXRlcmFibGUgKGZyb20gYSBnZW5lcmF0b3IpIHRvIGFuIE9ic2VydmFibGU8L2NhcHRpb24+XG4gICAgICogZnVuY3Rpb24qIGdlbmVyYXRlRG91YmxlcyhzZWVkKSB7XG4gICAgICogICB2YXIgaSA9IHNlZWQ7XG4gICAgICogICB3aGlsZSAodHJ1ZSkge1xuICAgICAqICAgICB5aWVsZCBpO1xuICAgICAqICAgICBpID0gMiAqIGk7IC8vIGRvdWJsZSBpdFxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBpdGVyYXRvciA9IGdlbmVyYXRlRG91YmxlcygzKTtcbiAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS5mcm9tKGl0ZXJhdG9yKS50YWtlKDEwKTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudH1cbiAgICAgKiBAc2VlIHtAbGluayBmcm9tRXZlbnRQYXR0ZXJufVxuICAgICAqIEBzZWUge0BsaW5rIGZyb21Qcm9taXNlfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYnNlcnZhYmxlSW5wdXQ8VD59IGlzaCBBIHN1YnNjcmliYWJsZSBvYmplY3QsIGEgUHJvbWlzZSwgYW5cbiAgICAgKiBPYnNlcnZhYmxlLWxpa2UsIGFuIEFycmF5LCBhbiBpdGVyYWJsZSBvciBhbiBhcnJheS1saWtlIG9iamVjdCB0byBiZVxuICAgICAqIGNvbnZlcnRlZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHg6IGFueSwgaTogbnVtYmVyKTogVH0gW21hcEZuXSBBIFwibWFwXCIgZnVuY3Rpb24gdG8gY2FsbFxuICAgICAqIHdoZW4gY29udmVydGluZyBhcnJheS1saWtlIG9iamVjdHMsIHdoZXJlIGB4YCBpcyBhIHZhbHVlIGZyb20gdGhlXG4gICAgICogYXJyYXktbGlrZSBhbmQgYGlgIGlzIHRoZSBpbmRleCBvZiB0aGF0IHZhbHVlIGluIHRoZSBzZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIFRoZSBjb250ZXh0IG9iamVjdCB0byB1c2Ugd2hlbiBjYWxsaW5nIHRoZSBgbWFwRm5gLFxuICAgICAqIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSBUaGUgc2NoZWR1bGVyIG9uIHdoaWNoIHRvIHNjaGVkdWxlIHRoZVxuICAgICAqIGVtaXNzaW9ucyBvZiB2YWx1ZXMuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gVGhlIE9ic2VydmFibGUgd2hvc2UgdmFsdWVzIGFyZSBvcmlnaW5hbGx5IGZyb20gdGhlXG4gICAgICogaW5wdXQgb2JqZWN0IHRoYXQgd2FzIGNvbnZlcnRlZC5cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBmcm9tXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBGcm9tT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoaXNoLCBtYXBGbk9yU2NoZWR1bGVyLCB0aGlzQXJnLCBsYXN0U2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICB2YXIgbWFwRm4gPSBudWxsO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24obWFwRm5PclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGxhc3RTY2hlZHVsZXIgfHwgbnVsbDtcbiAgICAgICAgICAgIG1hcEZuID0gbWFwRm5PclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IG1hcEZuT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlzaFskJG9ic2VydmFibGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzaCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlICYmICFzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGcm9tT2JzZXJ2YWJsZShpc2gsIHNjaGVkdWxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5XzEuaXNBcnJheShpc2gpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUoaXNoLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlXzEuaXNQcm9taXNlKGlzaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2VPYnNlcnZhYmxlXzEuUHJvbWlzZU9ic2VydmFibGUoaXNoLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlzaFtpdGVyYXRvcl8xLiQkaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpc2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvck9ic2VydmFibGVfMS5JdGVyYXRvck9ic2VydmFibGUoaXNoLCBudWxsLCBudWxsLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UoaXNoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlMaWtlT2JzZXJ2YWJsZV8xLkFycmF5TGlrZU9ic2VydmFibGUoaXNoLCBtYXBGbiwgdGhpc0FyZywgc2NoZWR1bGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChpc2ggIT09IG51bGwgJiYgdHlwZW9mIGlzaCB8fCBpc2gpICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xuICAgIH07XG4gICAgRnJvbU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXNoID0gdGhpcy5pc2g7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNoWyQkb2JzZXJ2YWJsZV0oKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNoWyQkb2JzZXJ2YWJsZV0oKS5zdWJzY3JpYmUobmV3IG9ic2VydmVPbl8xLk9ic2VydmVPblN1YnNjcmliZXIoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCAwKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBGcm9tT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuRnJvbU9ic2VydmFibGUgPSBGcm9tT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZyb21PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Gcm9tT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgUHJvbWlzZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQcm9taXNlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcm9taXNlT2JzZXJ2YWJsZShwcm9taXNlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IG51bGw7IH1cbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIFByb21pc2UgdG8gYW4gT2JzZXJ2YWJsZS5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5SZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBqdXN0IGVtaXRzIHRoZSBQcm9taXNlJ3NcbiAgICAgKiByZXNvbHZlZCB2YWx1ZSwgdGhlbiBjb21wbGV0ZXMuPC9zcGFuPlxuICAgICAqXG4gICAgICogQ29udmVydHMgYW4gRVMyMDE1IFByb21pc2Ugb3IgYSBQcm9taXNlcy9BKyBzcGVjIGNvbXBsaWFudCBQcm9taXNlIHRvIGFuXG4gICAgICogT2JzZXJ2YWJsZS4gSWYgdGhlIFByb21pc2UgcmVzb2x2ZXMgd2l0aCBhIHZhbHVlLCB0aGUgb3V0cHV0IE9ic2VydmFibGVcbiAgICAgKiBlbWl0cyB0aGF0IHJlc29sdmVkIHZhbHVlIGFzIGEgYG5leHRgLCBhbmQgdGhlbiBjb21wbGV0ZXMuIElmIHRoZSBQcm9taXNlXG4gICAgICogaXMgcmVqZWN0ZWQsIHRoZW4gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzIHRoZSBjb3JyZXNwb25kaW5nIEVycm9yLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q29udmVydCB0aGUgUHJvbWlzZSByZXR1cm5lZCBieSBGZXRjaCB0byBhbiBPYnNlcnZhYmxlPC9jYXB0aW9uPlxuICAgICAqIHZhciByZXN1bHQgPSBSeC5PYnNlcnZhYmxlLmZyb21Qcm9taXNlKGZldGNoKCdodHRwOi8vbXlzZXJ2ZXIuY29tLycpKTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCksIGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBiaW5kQ2FsbGJhY2t9XG4gICAgICogQHNlZSB7QGxpbmsgZnJvbX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UHJvbWlzZTxUPn0gcHJvbWlzZSBUaGUgcHJvbWlzZSB0byBiZSBjb252ZXJ0ZWQuXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIEFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byB1c2UgZm9yIHNjaGVkdWxpbmdcbiAgICAgKiB0aGUgZGVsaXZlcnkgb2YgdGhlIHJlc29sdmVkIHZhbHVlIChvciB0aGUgcmVqZWN0aW9uKS5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHdoaWNoIHdyYXBzIHRoZSBQcm9taXNlLlxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBuYW1lIGZyb21Qcm9taXNlXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBQcm9taXNlT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAocHJvbWlzZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBudWxsOyB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZU9ic2VydmFibGUocHJvbWlzZSwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIFByb21pc2VPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNTY2FsYXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faXNTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgdGhlIHByb21pc2UgdHJhcCwgdGhyb3cgdW5oYW5kbGVkIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICByb290XzEucm9vdC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1NjYWxhcikge1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdGhpcy52YWx1ZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc1NjYWxhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgMCwgeyB2YWx1ZTogdmFsdWUsIHN1YnNjcmliZXI6IHN1YnNjcmliZXIgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEVycm9yLCAwLCB7IGVycjogZXJyLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNjYXBlIHRoZSBwcm9taXNlIHRyYXAsIHRocm93IHVuaGFuZGxlZCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgcm9vdF8xLnJvb3Quc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQcm9taXNlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuUHJvbWlzZU9ic2VydmFibGUgPSBQcm9taXNlT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmcudmFsdWUsIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXJyb3IoYXJnKSB7XG4gICAgdmFyIGVyciA9IGFyZy5lcnIsIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb21pc2VPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Qcm9taXNlT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2lzT2JqZWN0Jyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0Z1bmN0aW9uJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEl0ZXJhdG9yT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEl0ZXJhdG9yT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJdGVyYXRvck9ic2VydmFibGUoaXRlcmF0b3IsIHByb2plY3QsIHRoaXNBcmcsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaXRlcmF0b3IgY2Fubm90IGJlIG51bGwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0XzEuaXNPYmplY3QocHJvamVjdCkpIHtcbiAgICAgICAgICAgIHRoaXMudGhpc0FyZyA9IHByb2plY3Q7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHRoaXNBcmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ocHJvamVjdCkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvamVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1doZW4gcHJvdmlkZWQsIGBwcm9qZWN0YCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB9XG4gICAgSXRlcmF0b3JPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRvciwgcHJvamVjdCwgdGhpc0FyZywgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JPYnNlcnZhYmxlKGl0ZXJhdG9yLCBwcm9qZWN0LCB0aGlzQXJnLCBzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgSXRlcmF0b3JPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmluZGV4LCBoYXNFcnJvciA9IHN0YXRlLmhhc0Vycm9yLCB0aGlzQXJnID0gc3RhdGUudGhpc0FyZywgcHJvamVjdCA9IHN0YXRlLnByb2plY3QsIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3IsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioc3RhdGUuZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHByb2plY3QpLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG4gICAgICAgICAgICAgICAgc3RhdGUuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICBJdGVyYXRvck9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBpdGVyYXRvciA9IF9hLml0ZXJhdG9yLCBwcm9qZWN0ID0gX2EucHJvamVjdCwgdGhpc0FyZyA9IF9hLnRoaXNBcmcsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShJdGVyYXRvck9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsIHRoaXNBcmc6IHRoaXNBcmcsIHByb2plY3Q6IHByb2plY3QsIGl0ZXJhdG9yOiBpdGVyYXRvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHByb2plY3QpLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpbmRleCsrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJdGVyYXRvck9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkl0ZXJhdG9yT2JzZXJ2YWJsZSA9IEl0ZXJhdG9yT2JzZXJ2YWJsZTtcbnZhciBTdHJpbmdJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyaW5nSXRlcmF0b3Ioc3RyLCBpZHgsIGxlbikge1xuICAgICAgICBpZiAoaWR4ID09PSB2b2lkIDApIHsgaWR4ID0gMDsgfVxuICAgICAgICBpZiAobGVuID09PSB2b2lkIDApIHsgbGVuID0gc3RyLmxlbmd0aDsgfVxuICAgICAgICB0aGlzLnN0ciA9IHN0cjtcbiAgICAgICAgdGhpcy5pZHggPSBpZHg7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzKTsgfTtcbiAgICBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWR4IDwgdGhpcy5sZW4gPyB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0ci5jaGFyQXQodGhpcy5pZHgrKylcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gU3RyaW5nSXRlcmF0b3I7XG59KCkpO1xudmFyIEFycmF5SXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFycmF5SXRlcmF0b3IoYXJyLCBpZHgsIGxlbikge1xuICAgICAgICBpZiAoaWR4ID09PSB2b2lkIDApIHsgaWR4ID0gMDsgfVxuICAgICAgICBpZiAobGVuID09PSB2b2lkIDApIHsgbGVuID0gdG9MZW5ndGgoYXJyKTsgfVxuICAgICAgICB0aGlzLmFyciA9IGFycjtcbiAgICAgICAgdGhpcy5pZHggPSBpZHg7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvcl8xLiQkaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuYXJyW3RoaXMuaWR4KytdXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFycmF5SXRlcmF0b3I7XG59KCkpO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3Iob2JqKSB7XG4gICAgdmFyIGkgPSBvYmpbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXTtcbiAgICBpZiAoIWkgJiYgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdJdGVyYXRvcihvYmopO1xuICAgIH1cbiAgICBpZiAoIWkgJiYgb2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcihvYmopO1xuICAgIH1cbiAgICBpZiAoIWkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0oKTtcbn1cbnZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG5mdW5jdGlvbiB0b0xlbmd0aChvKSB7XG4gICAgdmFyIGxlbiA9ICtvLmxlbmd0aDtcbiAgICBpZiAoaXNOYU4obGVuKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGxlbiA9PT0gMCB8fCAhbnVtYmVySXNGaW5pdGUobGVuKSkge1xuICAgICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgICBsZW4gPSBzaWduKGxlbikgKiBNYXRoLmZsb29yKE1hdGguYWJzKGxlbikpO1xuICAgIGlmIChsZW4gPD0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGxlbiA+IG1heFNhZmVJbnRlZ2VyKSB7XG4gICAgICAgIHJldHVybiBtYXhTYWZlSW50ZWdlcjtcbiAgICB9XG4gICAgcmV0dXJuIGxlbjtcbn1cbmZ1bmN0aW9uIG51bWJlcklzRmluaXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgcm9vdF8xLnJvb3QuaXNGaW5pdGUodmFsdWUpO1xufVxuZnVuY3Rpb24gc2lnbih2YWx1ZSkge1xuICAgIHZhciB2YWx1ZUFzTnVtYmVyID0gK3ZhbHVlO1xuICAgIGlmICh2YWx1ZUFzTnVtYmVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyO1xuICAgIH1cbiAgICBpZiAoaXNOYU4odmFsdWVBc051bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlQXNOdW1iZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyIDwgMCA/IC0xIDogMTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUl0ZXJhdG9yT2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvSXRlcmF0b3JPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gNjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFNjYWxhck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vU2NhbGFyT2JzZXJ2YWJsZScpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9FbXB0eU9ic2VydmFibGUnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgQXJyYXlMaWtlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFycmF5TGlrZU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJyYXlMaWtlT2JzZXJ2YWJsZShhcnJheUxpa2UsIG1hcEZuLCB0aGlzQXJnLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuYXJyYXlMaWtlID0gYXJyYXlMaWtlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgaWYgKCFtYXBGbiAmJiAhc2NoZWR1bGVyICYmIGFycmF5TGlrZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzU2NhbGFyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBhcnJheUxpa2VbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcEZuKSB7XG4gICAgICAgICAgICB0aGlzLm1hcEZuID0gbWFwRm4uYmluZCh0aGlzQXJnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBBcnJheUxpa2VPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChhcnJheUxpa2UsIG1hcEZuLCB0aGlzQXJnLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuZ3RoID09PSAxICYmICFtYXBGbikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJPYnNlcnZhYmxlXzEuU2NhbGFyT2JzZXJ2YWJsZShhcnJheUxpa2VbMF0sIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5TGlrZU9ic2VydmFibGUoYXJyYXlMaWtlLCBtYXBGbiwgdGhpc0FyZywgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXJyYXlMaWtlT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgYXJyYXlMaWtlID0gc3RhdGUuYXJyYXlMaWtlLCBpbmRleCA9IHN0YXRlLmluZGV4LCBsZW5ndGggPSBzdGF0ZS5sZW5ndGgsIG1hcEZuID0gc3RhdGUubWFwRm4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gbWFwRm4gPyBtYXBGbihhcnJheUxpa2VbaW5kZXhdLCBpbmRleCkgOiBhcnJheUxpa2VbaW5kZXhdO1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcbiAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuICAgIH07XG4gICAgQXJyYXlMaWtlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGFycmF5TGlrZSA9IF9hLmFycmF5TGlrZSwgbWFwRm4gPSBfYS5tYXBGbiwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyO1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShBcnJheUxpa2VPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgYXJyYXlMaWtlOiBhcnJheUxpa2UsIGluZGV4OiBpbmRleCwgbGVuZ3RoOiBsZW5ndGgsIG1hcEZuOiBtYXBGbiwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aCAmJiAhc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1hcEZuID8gbWFwRm4oYXJyYXlMaWtlW2ldLCBpKSA6IGFycmF5TGlrZVtpXTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFycmF5TGlrZU9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkFycmF5TGlrZU9ic2VydmFibGUgPSBBcnJheUxpa2VPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJyYXlMaWtlT2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvQXJyYXlMaWtlT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoJy4uL05vdGlmaWNhdGlvbicpO1xuLyoqXG4gKiBAc2VlIHtAbGluayBOb3RpZmljYXRpb259XG4gKlxuICogQHBhcmFtIHNjaGVkdWxlclxuICogQHBhcmFtIGRlbGF5XG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fFdlYlNvY2tldFN1YmplY3Q8VD58T2JzZXJ2YWJsZTxUPn1cbiAqIEBtZXRob2Qgb2JzZXJ2ZU9uXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IE9ic2VydmVPbk9wZXJhdG9yKHNjaGVkdWxlciwgZGVsYXkpKTtcbn1cbmV4cG9ydHMub2JzZXJ2ZU9uID0gb2JzZXJ2ZU9uO1xudmFyIE9ic2VydmVPbk9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgIH1cbiAgICBPYnNlcnZlT25PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBPYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuc2NoZWR1bGVyLCB0aGlzLmRlbGF5KSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZlT25PcGVyYXRvciA9IE9ic2VydmVPbk9wZXJhdG9yO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBPYnNlcnZlT25TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JzZXJ2ZU9uU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZlT25TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVNZXNzYWdlID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgICB0aGlzLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCBuZXcgT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIHRoaXMuZGVzdGluYXRpb24pKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVNZXNzYWdlKE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSgpKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZlT25TdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5PYnNlcnZlT25TdWJzY3JpYmVyID0gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbnZhciBPYnNlcnZlT25NZXNzYWdlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZlT25NZXNzYWdlKG5vdGlmaWNhdGlvbiwgZGVzdGluYXRpb24pIHtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb24gPSBub3RpZmljYXRpb247XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIE9ic2VydmVPbk1lc3NhZ2U7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZlT25NZXNzYWdlID0gT2JzZXJ2ZU9uTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL29ic2VydmVPbi5qc1xuICoqIG1vZHVsZSBpZCA9IDYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL09ic2VydmFibGUnKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHB1c2gtYmFzZWQgZXZlbnQgb3IgdmFsdWUgdGhhdCBhbiB7QGxpbmsgT2JzZXJ2YWJsZX0gY2FuIGVtaXQuXG4gKiBUaGlzIGNsYXNzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIG9wZXJhdG9ycyB0aGF0IG1hbmFnZSBub3RpZmljYXRpb25zLFxuICogbGlrZSB7QGxpbmsgbWF0ZXJpYWxpemV9LCB7QGxpbmsgZGVtYXRlcmlhbGl6ZX0sIHtAbGluayBvYnNlcnZlT259LCBhbmRcbiAqIG90aGVycy4gQmVzaWRlcyB3cmFwcGluZyB0aGUgYWN0dWFsIGRlbGl2ZXJlZCB2YWx1ZSwgaXQgYWxzbyBhbm5vdGF0ZXMgaXRcbiAqIHdpdGggbWV0YWRhdGEgb2YsIGZvciBpbnN0YW5jZSwgd2hhdCB0eXBlIG9mIHB1c2ggbWVzc2FnZSBpdCBpcyAoYG5leHRgLFxuICogYGVycm9yYCwgb3IgYGNvbXBsZXRlYCkuXG4gKlxuICogQHNlZSB7QGxpbmsgbWF0ZXJpYWxpemV9XG4gKiBAc2VlIHtAbGluayBkZW1hdGVyaWFsaXplfVxuICogQHNlZSB7QGxpbmsgb2JzZXJ2ZU9ufVxuICpcbiAqIEBjbGFzcyBOb3RpZmljYXRpb248VD5cbiAqL1xudmFyIE5vdGlmaWNhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBleGNlcHRpb24pIHtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmV4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGtpbmQgPT09ICdOJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsaXZlcnMgdG8gdGhlIGdpdmVuIGBvYnNlcnZlcmAgdGhlIHZhbHVlIHdyYXBwZWQgYnkgdGhpcyBOb3RpZmljYXRpb24uXG4gICAgICogQHBhcmFtIHtPYnNlcnZlcn0gb2JzZXJ2ZXJcbiAgICAgKiBAcmV0dXJuXG4gICAgICovXG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIubmV4dCAmJiBvYnNlcnZlci5uZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yICYmIG9ic2VydmVyLmVycm9yKHRoaXMuZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSAmJiBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHaXZlbiBzb21lIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2tzLCBkZWxpdmVyIHRoZSB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGVcbiAgICAgKiBjdXJyZW50IE5vdGlmaWNhdGlvbiB0byB0aGUgY29ycmVjdGx5IGNvcnJlc3BvbmRpbmcgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IHZvaWR9IG5leHQgQW4gT2JzZXJ2ZXIgYG5leHRgIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXJyOiBhbnkpOiB2b2lkfSBbZXJyb3JdIEFuIE9ic2VydmVyIGBlcnJvcmAgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIEFuIE9ic2VydmVyIGBjb21wbGV0ZWAgY2FsbGJhY2suXG4gICAgICogQHJldHVybiB7YW55fVxuICAgICAqL1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0ICYmIG5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IgJiYgZXJyb3IodGhpcy5leGNlcHRpb24pO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlICYmIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRha2VzIGFuIE9ic2VydmVyIG9yIGl0cyBpbmRpdmlkdWFsIGNhbGxiYWNrIGZ1bmN0aW9ucywgYW5kIGNhbGxzIGBvYnNlcnZlYFxuICAgICAqIG9yIGBkb2AgbWV0aG9kcyBhY2NvcmRpbmdseS5cbiAgICAgKiBAcGFyYW0ge09ic2VydmVyfGZ1bmN0aW9uKHZhbHVlOiBUKTogdm9pZH0gbmV4dE9yT2JzZXJ2ZXIgQW4gT2JzZXJ2ZXIgb3JcbiAgICAgKiB0aGUgYG5leHRgIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXJyOiBhbnkpOiB2b2lkfSBbZXJyb3JdIEFuIE9ic2VydmVyIGBlcnJvcmAgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIEFuIE9ic2VydmVyIGBjb21wbGV0ZWAgY2FsbGJhY2suXG4gICAgICogQHJldHVybiB7YW55fVxuICAgICAqL1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyICYmIHR5cGVvZiBuZXh0T3JPYnNlcnZlci5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlKG5leHRPck9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2ltcGxlIE9ic2VydmFibGUgdGhhdCBqdXN0IGRlbGl2ZXJzIHRoZSBub3RpZmljYXRpb24gcmVwcmVzZW50ZWRcbiAgICAgKiBieSB0aGlzIE5vdGlmaWNhdGlvbiBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJuIHthbnl9XG4gICAgICovXG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS50b09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5vZih0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS50aHJvdyh0aGlzLmV4Y2VwdGlvbik7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZW1wdHkoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBzaG9ydGN1dCB0byBjcmVhdGUgYSBOb3RpZmljYXRpb24gaW5zdGFuY2Ugb2YgdGhlIHR5cGUgYG5leHRgIGZyb20gYVxuICAgICAqIGdpdmVuIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7VH0gdmFsdWUgVGhlIGBuZXh0YCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHtOb3RpZmljYXRpb248VD59IFRoZSBcIm5leHRcIiBOb3RpZmljYXRpb24gcmVwcmVzZW50aW5nIHRoZVxuICAgICAqIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy51bmRlZmluZWRWYWx1ZU5vdGlmaWNhdGlvbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEEgc2hvcnRjdXQgdG8gY3JlYXRlIGEgTm90aWZpY2F0aW9uIGluc3RhbmNlIG9mIHRoZSB0eXBlIGBlcnJvcmAgZnJvbSBhXG4gICAgICogZ2l2ZW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHthbnl9IFtlcnJdIFRoZSBgZXJyb3JgIGV4Y2VwdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtOb3RpZmljYXRpb248VD59IFRoZSBcImVycm9yXCIgTm90aWZpY2F0aW9uIHJlcHJlc2VudGluZyB0aGVcbiAgICAgKiBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBzaG9ydGN1dCB0byBjcmVhdGUgYSBOb3RpZmljYXRpb24gaW5zdGFuY2Ugb2YgdGhlIHR5cGUgYGNvbXBsZXRlYC5cbiAgICAgKiBAcmV0dXJuIHtOb3RpZmljYXRpb248YW55Pn0gVGhlIHZhbHVlbGVzcyBcImNvbXBsZXRlXCIgTm90aWZpY2F0aW9uLlxuICAgICAqL1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGVOb3RpZmljYXRpb247XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdDJyk7XG4gICAgTm90aWZpY2F0aW9uLnVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbignTicsIHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcbn0oKSk7XG5leHBvcnRzLk5vdGlmaWNhdGlvbiA9IE5vdGlmaWNhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL05vdGlmaWNhdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDY0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZnJvbUV2ZW50XzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2Zyb21FdmVudCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZnJvbUV2ZW50ID0gZnJvbUV2ZW50XzEuZnJvbUV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbUV2ZW50LmpzXG4gKiogbW9kdWxlIGlkID0gNjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEZyb21FdmVudE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vRnJvbUV2ZW50T2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5mcm9tRXZlbnQgPSBGcm9tRXZlbnRPYnNlcnZhYmxlXzEuRnJvbUV2ZW50T2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL2Zyb21FdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDY2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciB0cnlDYXRjaF8xID0gcmVxdWlyZSgnLi4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5vbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLm9mZiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGlzTm9kZUxpc3Qoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuICEhc291cmNlT2JqICYmIHNvdXJjZU9iai50b1N0cmluZygpID09PSAnW29iamVjdCBOb2RlTGlzdF0nO1xufVxuZnVuY3Rpb24gaXNIVE1MQ29sbGVjdGlvbihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gISFzb3VyY2VPYmogJiYgc291cmNlT2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXSc7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikge1xuICAgIHJldHVybiAhIXNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBGcm9tRXZlbnRPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRnJvbUV2ZW50T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGcm9tRXZlbnRPYnNlcnZhYmxlKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBzZWxlY3Rvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zb3VyY2VPYmogPSBzb3VyY2VPYmo7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGV2ZW50cyBvZiBhIHNwZWNpZmljIHR5cGUgY29taW5nIGZyb20gdGhlXG4gICAgICogZ2l2ZW4gZXZlbnQgdGFyZ2V0LlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBmcm9tIERPTSBldmVudHMsIG9yIE5vZGVcbiAgICAgKiBFdmVudEVtaXR0ZXIgZXZlbnRzIG9yIG90aGVycy48L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL2Zyb21FdmVudC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBieSBhdHRhY2hpbmcgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYW4gXCJldmVudCB0YXJnZXRcIixcbiAgICAgKiB3aGljaCBtYXkgYmUgYW4gb2JqZWN0IHdpdGggYGFkZEV2ZW50TGlzdGVuZXJgIGFuZCBgcmVtb3ZlRXZlbnRMaXN0ZW5lcmAsXG4gICAgICogYSBOb2RlLmpzIEV2ZW50RW1pdHRlciwgYSBqUXVlcnkgc3R5bGUgRXZlbnRFbWl0dGVyLCBhIE5vZGVMaXN0IGZyb20gdGhlXG4gICAgICogRE9NLCBvciBhbiBIVE1MQ29sbGVjdGlvbiBmcm9tIHRoZSBET00uIFRoZSBldmVudCBoYW5kbGVyIGlzIGF0dGFjaGVkIHdoZW5cbiAgICAgKiB0aGUgb3V0cHV0IE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZCwgYW5kIHJlbW92ZWQgd2hlbiB0aGUgU3Vic2NyaXB0aW9uIGlzXG4gICAgICogdW5zdWJzY3JpYmVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdHMgY2xpY2tzIGhhcHBlbmluZyBvbiB0aGUgRE9NIGRvY3VtZW50PC9jYXB0aW9uPlxuICAgICAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gICAgICogY2xpY2tzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGZyb219XG4gICAgICogQHNlZSB7QGxpbmsgZnJvbUV2ZW50UGF0dGVybn1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RXZlbnRUYXJnZXRMaWtlfSB0YXJnZXQgVGhlIERPTUVsZW1lbnQsIGV2ZW50IHRhcmdldCwgTm9kZS5qc1xuICAgICAqIEV2ZW50RW1pdHRlciwgTm9kZUxpc3Qgb3IgSFRNTENvbGxlY3Rpb24gdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVyIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgb2YgaW50ZXJlc3QsIGJlaW5nIGVtaXR0ZWQgYnkgdGhlXG4gICAgICogYHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbiguLi5hcmdzOiBhbnkpOiBUfSBbc2VsZWN0b3JdIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvXG4gICAgICogcG9zdC1wcm9jZXNzIHJlc3VsdHMuIEl0IHRha2VzIHRoZSBhcmd1bWVudHMgZnJvbSB0aGUgZXZlbnQgaGFuZGxlciBhbmRcbiAgICAgKiBzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGU8VD59XG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgZnJvbUV2ZW50XG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBGcm9tRXZlbnRPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcm9tRXZlbnRPYnNlcnZhYmxlKHRhcmdldCwgZXZlbnROYW1lLCBzZWxlY3Rvcik7XG4gICAgfTtcbiAgICBGcm9tRXZlbnRPYnNlcnZhYmxlLnNldHVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZTtcbiAgICAgICAgaWYgKGlzTm9kZUxpc3Qoc291cmNlT2JqKSB8fCBpc0hUTUxDb2xsZWN0aW9uKHNvdXJjZU9iaikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VPYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBGcm9tRXZlbnRPYnNlcnZhYmxlLnNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9ialtpXSwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikpIHtcbiAgICAgICAgICAgIHNvdXJjZU9iai5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZU9iai5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgICAgICBzb3VyY2VPYmoub24oZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlT2JqLm9mZihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTm9kZVN0eWxlRXZlbnRFbW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgICAgICBzb3VyY2VPYmouYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5hZGQobmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkpO1xuICAgIH07XG4gICAgRnJvbUV2ZW50T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2VPYmogPSB0aGlzLnNvdXJjZU9iajtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHRoaXMuZXZlbnROYW1lO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICB2YXIgaGFuZGxlciA9IHNlbGVjdG9yID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHNlbGVjdG9yKS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChlKTsgfTtcbiAgICAgICAgRnJvbUV2ZW50T2JzZXJ2YWJsZS5zZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmosIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbUV2ZW50T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuRnJvbUV2ZW50T2JzZXJ2YWJsZSA9IEZyb21FdmVudE9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gcm9tRXZlbnRPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Gcm9tRXZlbnRPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gNjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBmcm9tRXZlbnRQYXR0ZXJuXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmZyb21FdmVudFBhdHRlcm4gPSBmcm9tRXZlbnRQYXR0ZXJuXzEuZnJvbUV2ZW50UGF0dGVybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudFBhdHRlcm4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9mcm9tRXZlbnRQYXR0ZXJuLmpzXG4gKiogbW9kdWxlIGlkID0gNjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL0Zyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlJyk7XG5leHBvcnRzLmZyb21FdmVudFBhdHRlcm4gPSBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZV8xLkZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlLmNyZWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudFBhdHRlcm4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4uanNcbiAqKiBtb2R1bGUgaWQgPSA2OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcbnZhciB0cnlDYXRjaF8xID0gcmVxdWlyZSgnLi4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUoYWRkSGFuZGxlciwgcmVtb3ZlSGFuZGxlciwgc2VsZWN0b3IpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuYWRkSGFuZGxlciA9IGFkZEhhbmRsZXI7XG4gICAgICAgIHRoaXMucmVtb3ZlSGFuZGxlciA9IHJlbW92ZUhhbmRsZXI7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIGZyb20gYW4gQVBJIGJhc2VkIG9uIGFkZEhhbmRsZXIvcmVtb3ZlSGFuZGxlclxuICAgICAqIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db252ZXJ0cyBhbnkgYWRkSGFuZGxlci9yZW1vdmVIYW5kbGVyIEFQSSB0byBhblxuICAgICAqIE9ic2VydmFibGUuPC9zcGFuPlxuICAgICAqXG4gICAgICogPGltZyBzcmM9XCIuL2ltZy9mcm9tRXZlbnRQYXR0ZXJuLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIGJ5IHVzaW5nIHRoZSBgYWRkSGFuZGxlcmAgYW5kIGByZW1vdmVIYW5kbGVyYFxuICAgICAqIGZ1bmN0aW9ucyB0byBhZGQgYW5kIHJlbW92ZSB0aGUgaGFuZGxlcnMsIHdpdGggYW4gb3B0aW9uYWwgc2VsZWN0b3JcbiAgICAgKiBmdW5jdGlvbiB0byBwcm9qZWN0IHRoZSBldmVudCBhcmd1bWVudHMgdG8gYSByZXN1bHQuIFRoZSBgYWRkSGFuZGxlcmAgaXNcbiAgICAgKiBjYWxsZWQgd2hlbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZCwgYW5kIGByZW1vdmVIYW5kbGVyYCBpc1xuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdHMgY2xpY2tzIGhhcHBlbmluZyBvbiB0aGUgRE9NIGRvY3VtZW50PC9jYXB0aW9uPlxuICAgICAqIGZ1bmN0aW9uIGFkZENsaWNrSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICogICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHJlbW92ZUNsaWNrSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICogICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudFBhdHRlcm4oXG4gICAgICogICBhZGRDbGlja0hhbmRsZXIsXG4gICAgICogICByZW1vdmVDbGlja0hhbmRsZXJcbiAgICAgKiApO1xuICAgICAqIGNsaWNrcy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBmcm9tfVxuICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaGFuZGxlcjogRnVuY3Rpb24pOiBhbnl9IGFkZEhhbmRsZXIgQSBmdW5jdGlvbiB0aGF0IHRha2VzXG4gICAgICogYSBgaGFuZGxlcmAgZnVuY3Rpb24gYXMgYXJndW1lbnQgYW5kIGF0dGFjaGVzIGl0IHNvbWVob3cgdG8gdGhlIGFjdHVhbFxuICAgICAqIHNvdXJjZSBvZiBldmVudHMuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihoYW5kbGVyOiBGdW5jdGlvbik6IHZvaWR9IHJlbW92ZUhhbmRsZXIgQSBmdW5jdGlvbiB0aGF0XG4gICAgICogdGFrZXMgYSBgaGFuZGxlcmAgZnVuY3Rpb24gYXMgYXJndW1lbnQgYW5kIHJlbW92ZXMgaXQgaW4gY2FzZSBpdCB3YXNcbiAgICAgKiBwcmV2aW91c2x5IGF0dGFjaGVkIHVzaW5nIGBhZGRIYW5kbGVyYC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLmFyZ3M6IGFueSk6IFR9IFtzZWxlY3Rvcl0gQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG9cbiAgICAgKiBwb3N0LXByb2Nlc3MgcmVzdWx0cy4gSXQgdGFrZXMgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZSBldmVudCBoYW5kbGVyIGFuZFxuICAgICAqIHNob3VsZCByZXR1cm4gYSBzaW5nbGUgdmFsdWUuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn1cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBmcm9tRXZlbnRQYXR0ZXJuXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoYWRkSGFuZGxlciwgcmVtb3ZlSGFuZGxlciwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZShhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyLCBzZWxlY3Rvcik7XG4gICAgfTtcbiAgICBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhZGRIYW5kbGVyID0gdGhpcy5hZGRIYW5kbGVyO1xuICAgICAgICB2YXIgcmVtb3ZlSGFuZGxlciA9IHRoaXMucmVtb3ZlSGFuZGxlcjtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBzZWxlY3RvciA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzZWxlY3RvcikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHJlc3VsdC5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IDogZnVuY3Rpb24gKGUpIHsgc3Vic2NyaWJlci5uZXh0KGUpOyB9O1xuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChhZGRIYW5kbGVyKShoYW5kbGVyKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihyZXN1bHQuZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5hZGQobmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL1RPRE86IGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuRnJvbUV2ZW50UGF0dGVybk9ic2VydmFibGUgPSBGcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZyb21FdmVudFBhdHRlcm5PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9Gcm9tRXZlbnRQYXR0ZXJuT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDcwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZnJvbVByb21pc2VfMSA9IHJlcXVpcmUoJy4uLy4uL29ic2VydmFibGUvZnJvbVByb21pc2UnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLmZyb21Qcm9taXNlID0gZnJvbVByb21pc2VfMS5mcm9tUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21Qcm9taXNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbVByb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA3MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUHJvbWlzZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vUHJvbWlzZU9ic2VydmFibGUnKTtcbmV4cG9ydHMuZnJvbVByb21pc2UgPSBQcm9taXNlT2JzZXJ2YWJsZV8xLlByb21pc2VPYnNlcnZhYmxlLmNyZWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21Qcm9taXNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDcyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgR2VuZXJhdGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL0dlbmVyYXRlT2JzZXJ2YWJsZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZ2VuZXJhdGUgPSBHZW5lcmF0ZU9ic2VydmFibGVfMS5HZW5lcmF0ZU9ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9nZW5lcmF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc1NjaGVkdWxlcicpO1xudmFyIHNlbGZTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEdlbmVyYXRlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEdlbmVyYXRlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHZW5lcmF0ZU9ic2VydmFibGUoaW5pdGlhbFN0YXRlLCBjb25kaXRpb24sIGl0ZXJhdGUsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgICAgdGhpcy5pdGVyYXRlID0gaXRlcmF0ZTtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgR2VuZXJhdGVPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlT2JzZXJ2YWJsZShpbml0aWFsU3RhdGVPck9wdGlvbnMuaW5pdGlhbFN0YXRlLCBpbml0aWFsU3RhdGVPck9wdGlvbnMuY29uZGl0aW9uLCBpbml0aWFsU3RhdGVPck9wdGlvbnMuaXRlcmF0ZSwgaW5pdGlhbFN0YXRlT3JPcHRpb25zLnJlc3VsdFNlbGVjdG9yIHx8IHNlbGZTZWxlY3RvciwgaW5pdGlhbFN0YXRlT3JPcHRpb25zLnNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlID09PSB1bmRlZmluZWQgfHwgaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihyZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGVPYnNlcnZhYmxlKGluaXRpYWxTdGF0ZU9yT3B0aW9ucywgY29uZGl0aW9uLCBpdGVyYXRlLCBzZWxmU2VsZWN0b3IsIHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlT2JzZXJ2YWJsZShpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUsIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBHZW5lcmF0ZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoR2VuZXJhdGVPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcjogc3Vic2NyaWJlcixcbiAgICAgICAgICAgICAgICBpdGVyYXRlOiB0aGlzLml0ZXJhdGUsXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiB0aGlzLmNvbmRpdGlvbixcbiAgICAgICAgICAgICAgICByZXN1bHRTZWxlY3RvcjogdGhpcy5yZXN1bHRTZWxlY3RvcixcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcywgY29uZGl0aW9uID0gX2EuY29uZGl0aW9uLCByZXN1bHRTZWxlY3RvciA9IF9hLnJlc3VsdFNlbGVjdG9yLCBpdGVyYXRlID0gX2EuaXRlcmF0ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBjb25kaXRpb25SZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gY29uZGl0aW9uKHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0U2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBpdGVyYXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICB9O1xuICAgIEdlbmVyYXRlT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIGNvbmRpdGlvbiA9IHN0YXRlLmNvbmRpdGlvbjtcbiAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUubmVlZEl0ZXJhdGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuc3RhdGUgPSBzdGF0ZS5pdGVyYXRlKHN0YXRlLnN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUubmVlZEl0ZXJhdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBjb25kaXRpb25SZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGNvbmRpdGlvbihzdGF0ZS5zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29uZGl0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gc3RhdGUucmVzdWx0U2VsZWN0b3Ioc3RhdGUuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuICAgIH07XG4gICAgcmV0dXJuIEdlbmVyYXRlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuR2VuZXJhdGVPYnNlcnZhYmxlID0gR2VuZXJhdGVPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2VuZXJhdGVPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9HZW5lcmF0ZU9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA3NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGludGVydmFsXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2ludGVydmFsJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5pbnRlcnZhbCA9IGludGVydmFsXzEuaW50ZXJ2YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL2ludGVydmFsLmpzXG4gKiogbW9kdWxlIGlkID0gNzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEludGVydmFsT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9JbnRlcnZhbE9ic2VydmFibGUnKTtcbmV4cG9ydHMuaW50ZXJ2YWwgPSBJbnRlcnZhbE9ic2VydmFibGVfMS5JbnRlcnZhbE9ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL2ludGVydmFsLmpzXG4gKiogbW9kdWxlIGlkID0gNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgaXNOdW1lcmljXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzTnVtZXJpYycpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBhc3luY18xID0gcmVxdWlyZSgnLi4vc2NoZWR1bGVyL2FzeW5jJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEludGVydmFsT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludGVydmFsT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnRlcnZhbE9ic2VydmFibGUocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgaWYgKCFpc051bWVyaWNfMS5pc051bWVyaWMocGVyaW9kKSB8fCBwZXJpb2QgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnBlcmlvZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNlcXVlbnRpYWwgbnVtYmVycyBldmVyeSBzcGVjaWZpZWRcbiAgICAgKiBpbnRlcnZhbCBvZiB0aW1lLCBvbiBhIHNwZWNpZmllZCBTY2hlZHVsZXIuXG4gICAgICpcbiAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RW1pdHMgaW5jcmVtZW50YWwgbnVtYmVycyBwZXJpb2RpY2FsbHkgaW4gdGltZS5cbiAgICAgKiA8L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL2ludGVydmFsLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogYGludGVydmFsYCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhbiBpbmZpbml0ZSBzZXF1ZW5jZSBvZlxuICAgICAqIGFzY2VuZGluZyBpbnRlZ2Vycywgd2l0aCBhIGNvbnN0YW50IGludGVydmFsIG9mIHRpbWUgb2YgeW91ciBjaG9vc2luZ1xuICAgICAqIGJldHdlZW4gdGhvc2UgZW1pc3Npb25zLiBUaGUgZmlyc3QgZW1pc3Npb24gaXMgbm90IHNlbnQgaW1tZWRpYXRlbHksIGJ1dFxuICAgICAqIG9ubHkgYWZ0ZXIgdGhlIGZpcnN0IHBlcmlvZCBoYXMgcGFzc2VkLiBCeSBkZWZhdWx0LCB0aGlzIG9wZXJhdG9yIHVzZXMgdGhlXG4gICAgICogYGFzeW5jYCBTY2hlZHVsZXIgdG8gcHJvdmlkZSBhIG5vdGlvbiBvZiB0aW1lLCBidXQgeW91IG1heSBwYXNzIGFueVxuICAgICAqIFNjaGVkdWxlciB0byBpdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIGFzY2VuZGluZyBudW1iZXJzLCBvbmUgZXZlcnkgc2Vjb25kICgxMDAwbXMpPC9jYXB0aW9uPlxuICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAgICAgKiBudW1iZXJzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIHRpbWVyfVxuICAgICAqIEBzZWUge0BsaW5rIGRlbGF5fVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwZXJpb2Q9MF0gVGhlIGludGVydmFsIHNpemUgaW4gbWlsbGlzZWNvbmRzIChieSBkZWZhdWx0KVxuICAgICAqIG9yIHRoZSB0aW1lIHVuaXQgZGV0ZXJtaW5lZCBieSB0aGUgc2NoZWR1bGVyJ3MgY2xvY2suXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9YXN5bmNdIFRoZSBTY2hlZHVsZXIgdG8gdXNlIGZvciBzY2hlZHVsaW5nXG4gICAgICogdGhlIGVtaXNzaW9uIG9mIHZhbHVlcywgYW5kIHByb3ZpZGluZyBhIG5vdGlvbiBvZiBcInRpbWVcIi5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgYSBzZXF1ZW50aWFsIG51bWJlciBlYWNoIHRpbWVcbiAgICAgKiBpbnRlcnZhbC5cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBpbnRlcnZhbFxuICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG4gICAgICovXG4gICAgSW50ZXJ2YWxPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHsgcGVyaW9kID0gMDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgICAgICByZXR1cm4gbmV3IEludGVydmFsT2JzZXJ2YWJsZShwZXJpb2QsIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBJbnRlcnZhbE9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dChpbmRleCk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuaW5kZXggKz0gMTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgcGVyaW9kKTtcbiAgICB9O1xuICAgIEludGVydmFsT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBwZXJpb2QgPSB0aGlzLnBlcmlvZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoSW50ZXJ2YWxPYnNlcnZhYmxlLmRpc3BhdGNoLCBwZXJpb2QsIHtcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgcGVyaW9kOiBwZXJpb2RcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEludGVydmFsT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuSW50ZXJ2YWxPYnNlcnZhYmxlID0gSW50ZXJ2YWxPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZXJ2YWxPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9JbnRlcnZhbE9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0FycmF5Jyk7XG5mdW5jdGlvbiBpc051bWVyaWModmFsKSB7XG4gICAgLy8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuICAgIC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcbiAgICAvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cbiAgICAvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcbiAgICByZXR1cm4gIWlzQXJyYXlfMS5pc0FycmF5KHZhbCkgJiYgKHZhbCAtIHBhcnNlRmxvYXQodmFsKSArIDEpID49IDA7XG59XG5leHBvcnRzLmlzTnVtZXJpYyA9IGlzTnVtZXJpYztcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTnVtZXJpYy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvaXNOdW1lcmljLmpzXG4gKiogbW9kdWxlIGlkID0gNzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEFzeW5jU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuL0FzeW5jU2NoZWR1bGVyJyk7XG5leHBvcnRzLmFzeW5jID0gbmV3IEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvc2NoZWR1bGVyL2FzeW5jLmpzXG4gKiogbW9kdWxlIGlkID0gNzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgRnV0dXJlQWN0aW9uXzEgPSByZXF1aXJlKCcuL0Z1dHVyZUFjdGlvbicpO1xudmFyIFF1ZXVlU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuL1F1ZXVlU2NoZWR1bGVyJyk7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcigpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZU5vdyA9IGZ1bmN0aW9uICh3b3JrLCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1dHVyZUFjdGlvbl8xLkZ1dHVyZUFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgMCk7XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFF1ZXVlU2NoZWR1bGVyXzEuUXVldWVTY2hlZHVsZXIpKTtcbmV4cG9ydHMuQXN5bmNTY2hlZHVsZXIgPSBBc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzXG4gKiogbW9kdWxlIGlkID0gODBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRnV0dXJlQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRnV0dXJlQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZ1dHVyZUFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgRnV0dXJlQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmsodGhpcy5zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRnV0dXJlQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIEZ1dHVyZUFjdGlvbi5wcm90b3R5cGUuX3NjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgLy8gQWx3YXlzIHJlcGxhY2UgdGhlIGN1cnJlbnQgc3RhdGUgd2l0aCB0aGUgbmV3IHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIC8vIFNldCB0aGUgcGVuZGluZyBmbGFnIGluZGljYXRpbmcgdGhhdCB0aGlzIGFjdGlvbiBoYXMgYmVlbiBzY2hlZHVsZWQsIG9yXG4gICAgICAgIC8vIGhhcyByZWN1cnNpdmVseSByZXNjaGVkdWxlZCBpdHNlbGYuXG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIC8vIElmIHRoaXMgYWN0aW9uIGhhcyBhbiBpbnRlcnZhbElEIGFuZCB0aGUgc3BlY2lmaWVkIGRlbGF5IG1hdGNoZXMgdGhlXG4gICAgICAgIC8vIGRlbGF5IHdlIHVzZWQgdG8gY3JlYXRlIHRoZSBpbnRlcnZhbElELCBkb24ndCBjYWxsIGBzZXRJbnRlcnZhbGAgYWdhaW4uXG4gICAgICAgIGlmIChpZCAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIC8vIElmIHRoaXMgYWN0aW9uIGhhcyBhbiBpbnRlcnZhbElELCBidXQgd2FzIHJlc2NoZWR1bGVkIHdpdGggYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gYGRlbGF5YCB0aW1lLCBjYW5jZWwgdGhlIGN1cnJlbnQgaW50ZXJ2YWxJRCBhbmQgY2FsbCBgc2V0SW50ZXJ2YWxgIHdpdGhcbiAgICAgICAgLy8gdGhlIG5ldyBgZGVsYXlgIHRpbWUuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgICAgICAgIHJvb3RfMS5yb290LmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEltcG9ydGFudCBpbXBsZW1lbnRhdGlvbiBub3RlOlxuICAgICAgICAvL1xuICAgICAgICAvLyBCeSBkZWZhdWx0LCBGdXR1cmVBY3Rpb24gb25seSBleGVjdXRlcyBvbmNlLiBIb3dldmVyLCBBY3Rpb25zIGhhdmUgdGhlXG4gICAgICAgIC8vIGFiaWxpdHkgdG8gYmUgcmVzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhlIHNjaGVkdWxlZCBjYWxsYmFjayAobWltaWNraW5nXG4gICAgICAgIC8vIHJlY3Vyc2lvbiBmb3IgYXN5bmNocm9ub3VzIG1ldGhvZHMpLiBUaGlzIGFsbG93cyB1cyB0byBpbXBsZW1lbnQgc2luZ2xlXG4gICAgICAgIC8vIGFuZCByZXBlYXRlZCBhY3Rpb25zIHdpdGggdGhlIHNhbWUgY29kZSBwYXRoIHdpdGhvdXQgYWRkaW5nIEFQSSBzdXJmYWNlXG4gICAgICAgIC8vIGFyZWEsIGFuZCBpbXBsZW1lbnQgdGFpbC1jYWxsIG9wdGltaXphdGlvbiBvdmVyIGFzeW5jaHJvbm91cyBib3VuZGFyaWVzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBIb3dldmVyLCBKUyBydW50aW1lcyBtYWtlIGEgZGlzdGluY3Rpb24gYmV0d2VlbiBpbnRlcnZhbHMgc2NoZWR1bGVkIGJ5XG4gICAgICAgIC8vIHJlcGVhdGVkbHkgY2FsbGluZyBgc2V0VGltZW91dGAgdnMuIGEgc2luZ2xlIGBzZXRJbnRlcnZhbGAgY2FsbCwgd2l0aFxuICAgICAgICAvLyB0aGUgbGF0dGVyIHByb3ZpZGluZyBhIGJldHRlciBndWFyYW50ZWUgb2YgcHJlY2lzaW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJbiBvcmRlciB0byBhY2NvbW1vZGF0ZSBib3RoIHNpbmdsZSBhbmQgcmVwZWF0ZWRseSByZXNjaGVkdWxlZCBhY3Rpb25zLFxuICAgICAgICAvLyB1c2UgYHNldEludGVydmFsYCBoZXJlIGZvciBib3RoIGNhc2VzLiBCeSBkZWZhdWx0LCB0aGUgaW50ZXJ2YWwgd2lsbCBiZVxuICAgICAgICAvLyBjYW5jZWxlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLCBvciBpZiB0aGUgYWN0aW9uIHNjaGVkdWxlcyBpdHNlbGYgdG9cbiAgICAgICAgLy8gcnVuIGFnYWluIHdpdGggYSBkaWZmZXJlbnQgYGRlbGF5YCB0aW1lLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGUgYWN0aW9uIHJlY3Vyc2l2ZWx5IHNjaGVkdWxlcyBpdHNlbGYgdG8gcnVuIGFnYWluIHdpdGggdGhlIHNhbWVcbiAgICAgICAgLy8gYGRlbGF5YCB0aW1lLCB0aGUgaW50ZXJ2YWwgaXMgbm90IGNhbmNlbGVkLCBidXQgYWxsb3dlZCB0byBsb29wIGFnYWluLlxuICAgICAgICAvLyBUaGUgY2hlY2sgb2Ygd2hldGhlciB0aGUgaW50ZXJ2YWwgc2hvdWxkIGJlIGNhbmNlbGVkIG9yIG5vdCBpcyBydW4gZXZlcnlcbiAgICAgICAgLy8gdGltZSB0aGUgaW50ZXJ2YWwgaXMgZXhlY3V0ZWQuIFRoZSBmaXJzdCB0aW1lIGFuIGFjdGlvbiBmYWlscyB0b1xuICAgICAgICAvLyByZXNjaGVkdWxlIGl0c2VsZiwgdGhlIGludGVydmFsIGlzIGNhbmNlbGVkLlxuICAgICAgICAvL1xuICAgICAgICB0aGlzLmlkID0gcm9vdF8xLnJvb3Quc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2goX3RoaXMpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLmZsdXNoKCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGVybWluYXRlIHRoaXMgaW50ZXJ2YWwgaWYgdGhlIGFjdGlvbiBkaWRuJ3QgcmVzY2hlZHVsZSBpdHNlbGYuXG4gICAgICAgICAgICAvLyBEb24ndCBjYWxsIGB0aGlzLnVuc3Vic2NyaWJlKClgIGhlcmUsIGJlY2F1c2UgdGhlIGFjdGlvbiBjb3VsZCBiZVxuICAgICAgICAgICAgLy8gcmVzY2hlZHVsZWQgbGF0ZXIuIEZvciBleGFtcGxlOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgICAgLy8gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uIGRvV29yayhjb3VudGVyKSB7XG4gICAgICAgICAgICAvLyAgIC8qIC4uLiBJJ20gYSBidXN5IHdvcmtlciBiZWUgLi4uICovXG4gICAgICAgICAgICAvLyAgIHZhciBvcmlnaW5hbEFjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICAvLyAgIC8qIHdhaXQgMTAwbXMgYmVmb3JlIHJlc2NoZWR1bGluZyB0aGlzIGFjdGlvbiBhZ2FpbiAqL1xuICAgICAgICAgICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICBvcmlnaW5hbEFjdGlvbi5zY2hlZHVsZShjb3VudGVyICsgMSk7XG4gICAgICAgICAgICAvLyAgIH0sIDEwMCk7XG4gICAgICAgICAgICAvLyB9LCAxMDAwKTtcbiAgICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgICAgaWYgKF90aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcm9vdF8xLnJvb3QuY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBGdXR1cmVBY3Rpb24ucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgdmFyIGluZGV4ID0gYWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICAgICAgICByb290XzEucm9vdC5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBGdXR1cmVBY3Rpb247XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5GdXR1cmVBY3Rpb24gPSBGdXR1cmVBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GdXR1cmVBY3Rpb24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9zY2hlZHVsZXIvRnV0dXJlQWN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gODFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIFF1ZXVlQWN0aW9uXzEgPSByZXF1aXJlKCcuL1F1ZXVlQWN0aW9uJyk7XG52YXIgRnV0dXJlQWN0aW9uXzEgPSByZXF1aXJlKCcuL0Z1dHVyZUFjdGlvbicpO1xudmFyIFF1ZXVlU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWV1ZVNjaGVkdWxlcigpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gW107IC8vIFhYWDogdXNlIGBhbnlgIHRvIHJlbW92ZSB0eXBlIHBhcmFtIGBUYCBmcm9tIGBWaXJ0dWFsVGltZVNjaGVkdWxlcmAuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVkSWQgPSBudWxsO1xuICAgIH1cbiAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUubm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICB9O1xuICAgIFF1ZXVlU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuc2NoZWR1bGVkSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICAvLyBYWFg6IHVzZSBgYW55YCB0byByZW1vdmUgdHlwZSBwYXJhbSBgVGAgZnJvbSBgVmlydHVhbFRpbWVTY2hlZHVsZXJgLlxuICAgICAgICBmb3IgKHZhciBhY3Rpb24gPSBudWxsOyBhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCk7KSB7XG4gICAgICAgICAgICBhY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gKGRlbGF5IDw9IDApID9cbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVOb3cod29yaywgc3RhdGUpIDpcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVMYXRlcih3b3JrLCBkZWxheSwgc3RhdGUpO1xuICAgIH07XG4gICAgUXVldWVTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlTm93ID0gZnVuY3Rpb24gKHdvcmssIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUXVldWVBY3Rpb25fMS5RdWV1ZUFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICBRdWV1ZVNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGVMYXRlciA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdXR1cmVBY3Rpb25fMS5GdXR1cmVBY3Rpb24odGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIHJldHVybiBRdWV1ZVNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnRzLlF1ZXVlU2NoZWR1bGVyID0gUXVldWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZVNjaGVkdWxlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3NjaGVkdWxlci9RdWV1ZVNjaGVkdWxlci5qc1xuICoqIG1vZHVsZSBpZCA9IDgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIEZ1dHVyZUFjdGlvbl8xID0gcmVxdWlyZSgnLi9GdXR1cmVBY3Rpb24nKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUXVldWVBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhRdWV1ZUFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZUFjdGlvbigpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIFF1ZXVlQWN0aW9uLnByb3RvdHlwZS5fc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHNjaGVkdWxlci5mbHVzaCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBRdWV1ZUFjdGlvbjtcbn0oRnV0dXJlQWN0aW9uXzEuRnV0dXJlQWN0aW9uKSk7XG5leHBvcnRzLlF1ZXVlQWN0aW9uID0gUXVldWVBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZUFjdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3NjaGVkdWxlci9RdWV1ZUFjdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWVyZ2VfMSA9IHJlcXVpcmUoJy4uLy4uL29ic2VydmFibGUvbWVyZ2UnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLm1lcmdlID0gbWVyZ2VfMS5tZXJnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvbWVyZ2UuanNcbiAqKiBtb2R1bGUgaWQgPSA4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWVyZ2VfMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9yL21lcmdlJyk7XG5leHBvcnRzLm1lcmdlID0gbWVyZ2VfMS5tZXJnZVN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9tZXJnZS5qc1xuICoqIG1vZHVsZSBpZCA9IDg1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBBcnJheU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL29ic2VydmFibGUvQXJyYXlPYnNlcnZhYmxlJyk7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoJy4vbWVyZ2VBbGwnKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc1NjaGVkdWxlcicpO1xuLyoqXG4gKiBDcmVhdGVzIGFuIG91dHB1dCBPYnNlcnZhYmxlIHdoaWNoIGNvbmN1cnJlbnRseSBlbWl0cyBhbGwgdmFsdWVzIGZyb20gZXZlcnlcbiAqIGdpdmVuIGlucHV0IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkZsYXR0ZW5zIG11bHRpcGxlIE9ic2VydmFibGVzIHRvZ2V0aGVyIGJ5IGJsZW5kaW5nXG4gKiB0aGVpciB2YWx1ZXMgaW50byBvbmUgT2JzZXJ2YWJsZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9tZXJnZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgbWVyZ2VgIHN1YnNjcmliZXMgdG8gZWFjaCBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIChlaXRoZXIgdGhlIHNvdXJjZSBvciBhblxuICogT2JzZXJ2YWJsZSBnaXZlbiBhcyBhcmd1bWVudCksIGFuZCBzaW1wbHkgZm9yd2FyZHMgKHdpdGhvdXQgZG9pbmcgYW55XG4gKiB0cmFuc2Zvcm1hdGlvbikgYWxsIHRoZSB2YWx1ZXMgZnJvbSBhbGwgdGhlIGlucHV0IE9ic2VydmFibGVzIHRvIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvbmx5IGNvbXBsZXRlcyBvbmNlIGFsbCBpbnB1dCBPYnNlcnZhYmxlc1xuICogaGF2ZSBjb21wbGV0ZWQuIEFueSBlcnJvciBkZWxpdmVyZWQgYnkgYW4gaW5wdXQgT2JzZXJ2YWJsZSB3aWxsIGJlIGltbWVkaWF0ZWx5XG4gKiBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NZXJnZSB0b2dldGhlciB0d28gT2JzZXJ2YWJsZXM6IDFzIGludGVydmFsIGFuZCBjbGlja3M8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAqIHZhciBjbGlja3NPclRpbWVyID0gY2xpY2tzLm1lcmdlKHRpbWVyKTtcbiAqIGNsaWNrc09yVGltZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1lcmdlIHRvZ2V0aGVyIDMgT2JzZXJ2YWJsZXMsIGJ1dCBvbmx5IDIgcnVuIGNvbmN1cnJlbnRseTwvY2FwdGlvbj5cbiAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcbiAqIHZhciB0aW1lcjMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkudGFrZSgxMCk7XG4gKiB2YXIgY29uY3VycmVudCA9IDI7IC8vIHRoZSBhcmd1bWVudFxuICogdmFyIG1lcmdlZCA9IHRpbWVyMS5tZXJnZSh0aW1lcjIsIHRpbWVyMywgY29uY3VycmVudCk7XG4gKiBtZXJnZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIG1lcmdlQWxsfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXB9XG4gKiBAc2VlIHtAbGluayBtZXJnZU1hcFRvfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gb3RoZXIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBtZXJnZSB3aXRoIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUuIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV0gTWF4aW11bSBudW1iZXIgb2YgaW5wdXRcbiAqIE9ic2VydmFibGVzIGJlaW5nIHN1YnNjcmliZWQgdG8gY29uY3VycmVudGx5LlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9bnVsbF0gVGhlIFNjaGVkdWxlciB0byB1c2UgZm9yIG1hbmFnaW5nXG4gKiBjb25jdXJyZW5jeSBvZiBpbnB1dCBPYnNlcnZhYmxlcy5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyB0aGF0IGFyZSB0aGUgcmVzdWx0IG9mXG4gKiBldmVyeSBpbnB1dCBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBtZXJnZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIG9ic2VydmFibGVzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIG1lcmdlU3RhdGljLmFwcGx5KHRoaXMsIG9ic2VydmFibGVzKTtcbn1cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggY29uY3VycmVudGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuICogZ2l2ZW4gaW5wdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnkgYmxlbmRpbmdcbiAqIHRoZWlyIHZhbHVlcyBpbnRvIG9uZSBPYnNlcnZhYmxlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGBtZXJnZWAgc3Vic2NyaWJlcyB0byBlYWNoIGdpdmVuIGlucHV0IE9ic2VydmFibGUgKGFzIGFyZ3VtZW50cyksIGFuZCBzaW1wbHlcbiAqIGZvcndhcmRzICh3aXRob3V0IGRvaW5nIGFueSB0cmFuc2Zvcm1hdGlvbikgYWxsIHRoZSB2YWx1ZXMgZnJvbSBhbGwgdGhlIGlucHV0XG4gKiBPYnNlcnZhYmxlcyB0byB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBvbmx5IGNvbXBsZXRlc1xuICogb25jZSBhbGwgaW5wdXQgT2JzZXJ2YWJsZXMgaGF2ZSBjb21wbGV0ZWQuIEFueSBlcnJvciBkZWxpdmVyZWQgYnkgYW4gaW5wdXRcbiAqIE9ic2VydmFibGUgd2lsbCBiZSBpbW1lZGlhdGVseSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NZXJnZSB0b2dldGhlciB0d28gT2JzZXJ2YWJsZXM6IDFzIGludGVydmFsIGFuZCBjbGlja3M8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAqIHZhciBjbGlja3NPclRpbWVyID0gUnguT2JzZXJ2YWJsZS5tZXJnZShjbGlja3MsIHRpbWVyKTtcbiAqIGNsaWNrc09yVGltZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1lcmdlIHRvZ2V0aGVyIDMgT2JzZXJ2YWJsZXMsIGJ1dCBvbmx5IDIgcnVuIGNvbmN1cnJlbnRseTwvY2FwdGlvbj5cbiAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcbiAqIHZhciB0aW1lcjMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkudGFrZSgxMCk7XG4gKiB2YXIgY29uY3VycmVudCA9IDI7IC8vIHRoZSBhcmd1bWVudFxuICogdmFyIG1lcmdlZCA9IFJ4Lk9ic2VydmFibGUubWVyZ2UodGltZXIxLCB0aW1lcjIsIHRpbWVyMywgY29uY3VycmVudCk7XG4gKiBtZXJnZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIG1lcmdlQWxsfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXB9XG4gKiBAc2VlIHtAbGluayBtZXJnZU1hcFRvfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5wdXQxIEFuIGlucHV0IE9ic2VydmFibGUgdG8gbWVyZ2Ugd2l0aCBvdGhlcnMuXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IGlucHV0MiBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIG1lcmdlIHdpdGggb3RoZXJzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV0gTWF4aW11bSBudW1iZXIgb2YgaW5wdXRcbiAqIE9ic2VydmFibGVzIGJlaW5nIHN1YnNjcmliZWQgdG8gY29uY3VycmVudGx5LlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9bnVsbF0gVGhlIFNjaGVkdWxlciB0byB1c2UgZm9yIG1hbmFnaW5nXG4gKiBjb25jdXJyZW5jeSBvZiBpbnB1dCBPYnNlcnZhYmxlcy5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyB0aGF0IGFyZSB0aGUgcmVzdWx0IG9mXG4gKiBldmVyeSBpbnB1dCBPYnNlcnZhYmxlLlxuICogQHN0YXRpYyB0cnVlXG4gKiBAbmFtZSBtZXJnZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2VTdGF0aWMoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuICAgIHZhciBsYXN0ID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIobGFzdCkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPiAxICYmIHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUob2JzZXJ2YWJsZXMsIHNjaGVkdWxlcikubGlmdChuZXcgbWVyZ2VBbGxfMS5NZXJnZUFsbE9wZXJhdG9yKGNvbmN1cnJlbnQpKTtcbn1cbmV4cG9ydHMubWVyZ2VTdGF0aWMgPSBtZXJnZVN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbWVyZ2UuanNcbiAqKiBtb2R1bGUgaWQgPSA4NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHJhY2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3JhY2UnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnJhY2UgPSByYWNlXzEucmFjZVN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9yYWNlLmpzXG4gKiogbW9kdWxlIGlkID0gODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgaXNBcnJheV8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0FycmF5Jyk7XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgZmlyc3Qgc291cmNlIE9ic2VydmFibGUgdG8gZW1pdCBhbiBpdGVtXG4gKiBmcm9tIHRoZSBjb21iaW5hdGlvbiBvZiB0aGlzIE9ic2VydmFibGUgYW5kIHN1cHBsaWVkIE9ic2VydmFibGVzXG4gKiBAcGFyYW0gey4uLk9ic2VydmFibGVzfSAuLi5vYnNlcnZhYmxlcyBzb3VyY2VzIHVzZWQgdG8gcmFjZSBmb3Igd2hpY2ggT2JzZXJ2YWJsZSBlbWl0cyBmaXJzdC5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBvdXRwdXQgb2YgdGhlIGZpcnN0IE9ic2VydmFibGUgdG8gZW1pdCBhbiBpdGVtLlxuICogQG1ldGhvZCByYWNlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiByYWNlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgb25seSBhcmd1bWVudCBpcyBhbiBhcnJheSwgaXQgd2FzIG1vc3QgbGlrZWx5IGNhbGxlZCB3aXRoXG4gICAgLy8gYHBhaXIoW29iczEsIG9iczIsIC4uLl0pYFxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheV8xLmlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG4gICAgfVxuICAgIG9ic2VydmFibGVzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIHJhY2VTdGF0aWMuYXBwbHkodGhpcywgb2JzZXJ2YWJsZXMpO1xufVxuZXhwb3J0cy5yYWNlID0gcmFjZTtcbmZ1bmN0aW9uIHJhY2VTdGF0aWMoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIC8vIGlmIHRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIGFycmF5LCBpdCB3YXMgbW9zdCBsaWtlbHkgY2FsbGVkIHdpdGhcbiAgICAvLyBgcGFpcihbb2JzMSwgb2JzMiwgLi4uXSlgXG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoaXNBcnJheV8xLmlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzKS5saWZ0KG5ldyBSYWNlT3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLnJhY2VTdGF0aWMgPSByYWNlU3RhdGljO1xudmFyIFJhY2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmFjZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBSYWNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgUmFjZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFJhY2VPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLlJhY2VPcGVyYXRvciA9IFJhY2VPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUmFjZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSYWNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSYWNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuaGFzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICB9XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKG9ic2VydmFibGUpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcy5wdXNoKG9ic2VydmFibGUpO1xuICAgIH07XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gdGhpcy5vYnNlcnZhYmxlcztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSYWNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICBpZiAoIXRoaXMuaGFzRmlyc3QpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gb3V0ZXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBSYWNlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnRzLlJhY2VTdWJzY3JpYmVyID0gUmFjZVN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvcmFjZS5qc1xuICoqIG1vZHVsZSBpZCA9IDg4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbmV2ZXJfMSA9IHJlcXVpcmUoJy4uLy4uL29ic2VydmFibGUvbmV2ZXInKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLm5ldmVyID0gbmV2ZXJfMS5uZXZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvbmV2ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTmV2ZXJPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL05ldmVyT2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5uZXZlciA9IE5ldmVyT2JzZXJ2YWJsZV8xLk5ldmVyT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXZlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvbmV2ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgbm9vcF8xID0gcmVxdWlyZSgnLi4vdXRpbC9ub29wJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIE5ldmVyT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5ldmVyT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOZXZlck9ic2VydmFibGUoKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBubyBpdGVtcyB0byB0aGUgT2JzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+QW4gT2JzZXJ2YWJsZSB0aGF0IG5ldmVyIGVtaXRzIGFueXRoaW5nLjwvc3Bhbj5cbiAgICAgKlxuICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvbmV2ZXIucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICpcbiAgICAgKiBUaGlzIHN0YXRpYyBvcGVyYXRvciBpcyB1c2VmdWwgZm9yIGNyZWF0aW5nIGEgc2ltcGxlIE9ic2VydmFibGUgdGhhdCBlbWl0c1xuICAgICAqIG5laXRoZXIgdmFsdWVzIG5vciBlcnJvcnMgbm9yIHRoZSBjb21wbGV0aW9uIG5vdGlmaWNhdGlvbi4gSXQgY2FuIGJlIHVzZWRcbiAgICAgKiBmb3IgdGVzdGluZyBwdXJwb3NlcyBvciBmb3IgY29tcG9zaW5nIHdpdGggb3RoZXIgT2JzZXJ2YWJsZXMuIFBsZWFzZSBub3RcbiAgICAgKiB0aGF0IGJ5IG5ldmVyIGVtaXR0aW5nIGEgY29tcGxldGUgbm90aWZpY2F0aW9uLCB0aGlzIE9ic2VydmFibGUga2VlcHMgdGhlXG4gICAgICogc3Vic2NyaXB0aW9uIGZyb20gYmVpbmcgZGlzcG9zZWQgYXV0b21hdGljYWxseS4gU3Vic2NyaXB0aW9ucyBuZWVkIHRvIGJlXG4gICAgICogbWFudWFsbHkgZGlzcG9zZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBudW1iZXIgNywgdGhlbiBuZXZlciBlbWl0IGFueXRoaW5nIGVsc2UgKG5vdCBldmVuIGNvbXBsZXRlKS48L2NhcHRpb24+XG4gICAgICogZnVuY3Rpb24gaW5mbygpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdXaWxsIG5vdCBiZSBjYWxsZWQnKTtcbiAgICAgKiB9XG4gICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUubmV2ZXIoKS5zdGFydFdpdGgoNyk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpLCBpbmZvLCBpbmZvKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGNyZWF0ZX1cbiAgICAgKiBAc2VlIHtAbGluayBlbXB0eX1cbiAgICAgKiBAc2VlIHtAbGluayBvZn1cbiAgICAgKiBAc2VlIHtAbGluayB0aHJvd31cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEEgXCJuZXZlclwiIE9ic2VydmFibGU6IG5ldmVyIGVtaXRzIGFueXRoaW5nLlxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBuYW1lIG5ldmVyXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBOZXZlck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IE5ldmVyT2JzZXJ2YWJsZSgpO1xuICAgIH07XG4gICAgTmV2ZXJPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgbm9vcF8xLm5vb3AoKTtcbiAgICB9O1xuICAgIHJldHVybiBOZXZlck9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLk5ldmVyT2JzZXJ2YWJsZSA9IE5ldmVyT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5ldmVyT2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvTmV2ZXJPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gOTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9ub29wLmpzXG4gKiogbW9kdWxlIGlkID0gOTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBvZl8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9vZicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUub2YgPSBvZl8xLm9mO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBBcnJheU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vQXJyYXlPYnNlcnZhYmxlJyk7XG5leHBvcnRzLm9mID0gQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlLm9mO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL29mLmpzXG4gKiogbW9kdWxlIGlkID0gOTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciByYW5nZV8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9yYW5nZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucmFuZ2UgPSByYW5nZV8xLnJhbmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFuZ2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS9yYW5nZS5qc1xuICoqIG1vZHVsZSBpZCA9IDk1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBSYW5nZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vUmFuZ2VPYnNlcnZhYmxlJyk7XG5leHBvcnRzLnJhbmdlID0gUmFuZ2VPYnNlcnZhYmxlXzEuUmFuZ2VPYnNlcnZhYmxlLmNyZWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmdlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9yYW5nZS5qc1xuICoqIG1vZHVsZSBpZCA9IDk2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgUmFuZ2VPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmFuZ2VPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJhbmdlT2JzZXJ2YWJsZShzdGFydCwgY291bnQsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgYSBzZXF1ZW5jZSBvZiBudW1iZXJzIHdpdGhpbiBhIHNwZWNpZmllZFxuICAgICAqIHJhbmdlLlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkVtaXRzIGEgc2VxdWVuY2Ugb2YgbnVtYmVycyBpbiBhIHJhbmdlLjwvc3Bhbj5cbiAgICAgKlxuICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvcmFuZ2UucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICpcbiAgICAgKiBgcmFuZ2VgIG9wZXJhdG9yIGVtaXRzIGEgcmFuZ2Ugb2Ygc2VxdWVudGlhbCBpbnRlZ2VycywgaW4gb3JkZXIsIHdoZXJlIHlvdVxuICAgICAqIHNlbGVjdCB0aGUgYHN0YXJ0YCBvZiB0aGUgcmFuZ2UgYW5kIGl0cyBgbGVuZ3RoYC4gQnkgZGVmYXVsdCwgdXNlcyBub1xuICAgICAqIFNjaGVkdWxlciBhbmQganVzdCBkZWxpdmVycyB0aGUgbm90aWZpY2F0aW9ucyBzeW5jaHJvbm91c2x5LCBidXQgbWF5IHVzZVxuICAgICAqIGFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byByZWd1bGF0ZSB0aG9zZSBkZWxpdmVyaWVzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdHMgdGhlIG51bWJlcnMgMSB0byAxMDwvY2FwdGlvbj5cbiAgICAgKiB2YXIgbnVtYmVycyA9IFJ4Lk9ic2VydmFibGUucmFuZ2UoMSwgMTApO1xuICAgICAqIG51bWJlcnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgdGltZXJ9XG4gICAgICogQHNlZSB7QGxpbmsgaW50ZXJ2YWx9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW50ZWdlciBpbiB0aGUgc2VxdWVuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtjb3VudD0wXSBUaGUgbnVtYmVyIG9mIHNlcXVlbnRpYWwgaW50ZWdlcnMgdG8gZ2VuZXJhdGUuXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIEEge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvciBzY2hlZHVsaW5nXG4gICAgICogdGhlIGVtaXNzaW9ucyBvZiB0aGUgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIG51bWJlcnMgdGhhdCBlbWl0cyBhIGZpbml0ZSByYW5nZSBvZlxuICAgICAqIHNlcXVlbnRpYWwgaW50ZWdlcnMuXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgcmFuZ2VcbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIFJhbmdlT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3RhcnQsIGNvdW50LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7IGNvdW50ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IFJhbmdlT2JzZXJ2YWJsZShzdGFydCwgY291bnQsIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBSYW5nZU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gc3RhdGUuc3RhcnQsIGluZGV4ID0gc3RhdGUuaW5kZXgsIGNvdW50ID0gc3RhdGUuY291bnQsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoaW5kZXggPj0gY291bnQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLm5leHQoc3RhcnQpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBzdGF0ZS5zdGFydCA9IHN0YXJ0ICsgMTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICBSYW5nZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0O1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLl9jb3VudDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKFJhbmdlT2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgY291bnQ6IGNvdW50LCBzdGFydDogc3RhcnQsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCsrID49IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChzdGFydCsrKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJhbmdlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuUmFuZ2VPYnNlcnZhYmxlID0gUmFuZ2VPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmFuZ2VPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9SYW5nZU9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA5N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHRocm93XzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL3Rocm93Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS50aHJvdyA9IHRocm93XzEuX3Rocm93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3cuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS90aHJvdy5qc1xuICoqIG1vZHVsZSBpZCA9IDk4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBFcnJvck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vRXJyb3JPYnNlcnZhYmxlJyk7XG5leHBvcnRzLl90aHJvdyA9IEVycm9yT2JzZXJ2YWJsZV8xLkVycm9yT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvdGhyb3cuanNcbiAqKiBtb2R1bGUgaWQgPSA5OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEVycm9yT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVycm9yT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFcnJvck9ic2VydmFibGUoZXJyb3IsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgbm8gaXRlbXMgdG8gdGhlIE9ic2VydmVyIGFuZCBpbW1lZGlhdGVseVxuICAgICAqIGVtaXRzIGFuIGVycm9yIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5KdXN0IGVtaXRzICdlcnJvcicsIGFuZCBub3RoaW5nIGVsc2UuXG4gICAgICogPC9zcGFuPlxuICAgICAqXG4gICAgICogPGltZyBzcmM9XCIuL2ltZy90aHJvdy5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgKlxuICAgICAqIFRoaXMgc3RhdGljIG9wZXJhdG9yIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgYSBzaW1wbGUgT2JzZXJ2YWJsZSB0aGF0IG9ubHlcbiAgICAgKiBlbWl0cyB0aGUgZXJyb3Igbm90aWZpY2F0aW9uLiBJdCBjYW4gYmUgdXNlZCBmb3IgY29tcG9zaW5nIHdpdGggb3RoZXJcbiAgICAgKiBPYnNlcnZhYmxlcywgc3VjaCBhcyBpbiBhIHtAbGluayBtZXJnZU1hcH0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBudW1iZXIgNywgdGhlbiBlbWl0IGFuIGVycm9yLjwvY2FwdGlvbj5cbiAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoJ29vcHMhJykpLnN0YXJ0V2l0aCg3KTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCksIGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgYW5kIGZsYXR0ZW5zIG51bWJlcnMgdG8gdGhlIHNlcXVlbmNlICdhJywgJ2InLCAnYycsIGJ1dCB0aHJvdyBhbiBlcnJvciBmb3IgMTM8L2NhcHRpb24+XG4gICAgICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAgICAgKiB2YXIgcmVzdWx0ID0gaW50ZXJ2YWwubWVyZ2VNYXAoeCA9PlxuICAgICAqICAgeCA9PT0gMTMgP1xuICAgICAqICAgICBSeC5PYnNlcnZhYmxlLnRocm93KCdUaGlydGVlbnMgYXJlIGJhZCcpIDpcbiAgICAgKiAgICAgUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKVxuICAgICAqICk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpLCBlID0+IGNvbnNvbGUuZXJyb3IoZSkpO1xuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuICAgICAqIEBzZWUge0BsaW5rIGVtcHR5fVxuICAgICAqIEBzZWUge0BsaW5rIG5ldmVyfVxuICAgICAqIEBzZWUge0BsaW5rIG9mfVxuICAgICAqXG4gICAgICogQHBhcmFtIHthbnl9IGVycm9yIFRoZSBwYXJ0aWN1bGFyIEVycm9yIHRvIHBhc3MgdG8gdGhlIGVycm9yIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQSB7QGxpbmsgU2NoZWR1bGVyfSB0byB1c2UgZm9yIHNjaGVkdWxpbmdcbiAgICAgKiB0aGUgZW1pc3Npb24gb2YgdGhlIGVycm9yIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBlcnJvciBPYnNlcnZhYmxlOiBlbWl0cyBvbmx5IHRoZSBlcnJvciBub3RpZmljYXRpb25cbiAgICAgKiB1c2luZyB0aGUgZ2l2ZW4gZXJyb3IgYXJndW1lbnQuXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgdGhyb3dcbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIEVycm9yT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZXJyb3IsIHNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yT2JzZXJ2YWJsZShlcnJvciwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIEVycm9yT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIGVycm9yID0gYXJnLmVycm9yLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG4gICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgRXJyb3JPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5lcnJvcjtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEVycm9yT2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEVycm9yT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuRXJyb3JPYnNlcnZhYmxlID0gRXJyb3JPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JPYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9FcnJvck9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS90aW1lcicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUudGltZXIgPSB0aW1lcl8xLnRpbWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb2JzZXJ2YWJsZS90aW1lci5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgVGltZXJPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL1RpbWVyT2JzZXJ2YWJsZScpO1xuZXhwb3J0cy50aW1lciA9IFRpbWVyT2JzZXJ2YWJsZV8xLlRpbWVyT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvdGltZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgaXNOdW1lcmljXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzTnVtZXJpYycpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBhc3luY18xID0gcmVxdWlyZSgnLi4vc2NoZWR1bGVyL2FzeW5jJyk7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNTY2hlZHVsZXInKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNEYXRlJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIFRpbWVyT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVyT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lck9ic2VydmFibGUoZHVlVGltZSwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wZXJpb2QgPSAtMTtcbiAgICAgICAgdGhpcy5kdWVUaW1lID0gMDtcbiAgICAgICAgaWYgKGlzTnVtZXJpY18xLmlzTnVtZXJpYyhwZXJpb2QpKSB7XG4gICAgICAgICAgICB0aGlzLnBlcmlvZCA9IE51bWJlcihwZXJpb2QpIDwgMSAmJiAxIHx8IE51bWJlcihwZXJpb2QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIocGVyaW9kKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gcGVyaW9kO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihzY2hlZHVsZXIpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmR1ZVRpbWUgPSBpc0RhdGVfMS5pc0RhdGUoZHVlVGltZSkgP1xuICAgICAgICAgICAgKCtkdWVUaW1lIC0gdGhpcy5zY2hlZHVsZXIubm93KCkpIDpcbiAgICAgICAgICAgIGR1ZVRpbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IHN0YXJ0cyBlbWl0dGluZyBhZnRlciBhbiBgaW5pdGlhbERlbGF5YCBhbmRcbiAgICAgKiBlbWl0cyBldmVyIGluY3JlYXNpbmcgbnVtYmVycyBhZnRlciBlYWNoIGBwZXJpb2RgIG9mIHRpbWUgdGhlcmVhZnRlci5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdHMgbGlrZSB7QGxpbmsgaW50ZXJ2YWx9LCBidXQgeW91IGNhbiBzcGVjaWZ5IHdoZW5cbiAgICAgKiBzaG91bGQgdGhlIGVtaXNzaW9ucyBzdGFydC48L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL3RpbWVyLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogYHRpbWVyYCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhbiBpbmZpbml0ZSBzZXF1ZW5jZSBvZiBhc2NlbmRpbmdcbiAgICAgKiBpbnRlZ2Vycywgd2l0aCBhIGNvbnN0YW50IGludGVydmFsIG9mIHRpbWUsIGBwZXJpb2RgIG9mIHlvdXIgY2hvb3NpbmdcbiAgICAgKiBiZXR3ZWVuIHRob3NlIGVtaXNzaW9ucy4gVGhlIGZpcnN0IGVtaXNzaW9uIGhhcHBlbnMgYWZ0ZXIgdGhlIHNwZWNpZmllZFxuICAgICAqIGBpbml0aWFsRGVsYXlgLiBUaGUgaW5pdGlhbCBkZWxheSBtYXkgYmUgYSB7QGxpbmsgRGF0ZX0uIEJ5IGRlZmF1bHQsIHRoaXNcbiAgICAgKiBvcGVyYXRvciB1c2VzIHRoZSBgYXN5bmNgIFNjaGVkdWxlciB0byBwcm92aWRlIGEgbm90aW9uIG9mIHRpbWUsIGJ1dCB5b3VcbiAgICAgKiBtYXkgcGFzcyBhbnkgU2NoZWR1bGVyIHRvIGl0LiBJZiBgcGVyaW9kYCBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgb3V0cHV0XG4gICAgICogT2JzZXJ2YWJsZSBlbWl0cyBvbmx5IG9uZSB2YWx1ZSwgYDBgLiBPdGhlcndpc2UsIGl0IGVtaXRzIGFuIGluZmluaXRlXG4gICAgICogc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0cyBhc2NlbmRpbmcgbnVtYmVycywgb25lIGV2ZXJ5IHNlY29uZCAoMTAwMG1zKSwgc3RhcnRpbmcgYWZ0ZXIgMyBzZWNvbmRzPC9jYXB0aW9uPlxuICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS50aW1lcigzMDAwLCAxMDAwKTtcbiAgICAgKiBudW1iZXJzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXRzIG9uZSBudW1iZXIgYWZ0ZXIgZml2ZSBzZWNvbmRzPC9jYXB0aW9uPlxuICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS50aW1lcig1MDAwKTtcbiAgICAgKiBudW1iZXJzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGludGVydmFsfVxuICAgICAqIEBzZWUge0BsaW5rIGRlbGF5fVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ8RGF0ZX0gaW5pdGlhbERlbGF5IFRoZSBpbml0aWFsIGRlbGF5IHRpbWUgdG8gd2FpdCBiZWZvcmVcbiAgICAgKiBlbWl0dGluZyB0aGUgZmlyc3QgdmFsdWUgb2YgYDBgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGVyaW9kXSBUaGUgcGVyaW9kIG9mIHRpbWUgYmV0d2VlbiBlbWlzc2lvbnMgb2YgdGhlXG4gICAgICogc3Vic2VxdWVudCBudW1iZXJzLlxuICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgU2NoZWR1bGVyIHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuICAgICAqIHRoZSBlbWlzc2lvbiBvZiB2YWx1ZXMsIGFuZCBwcm92aWRpbmcgYSBub3Rpb24gb2YgXCJ0aW1lXCIuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGEgYDBgIGFmdGVyIHRoZVxuICAgICAqIGBpbml0aWFsRGVsYXlgIGFuZCBldmVyIGluY3JlYXNpbmcgbnVtYmVycyBhZnRlciBlYWNoIGBwZXJpb2RgIG9mIHRpbWVcbiAgICAgKiB0aGVyZWFmdGVyLlxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBuYW1lIHRpbWVyXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBUaW1lck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGluaXRpYWxEZWxheSwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGluaXRpYWxEZWxheSA9PT0gdm9pZCAwKSB7IGluaXRpYWxEZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBUaW1lck9ic2VydmFibGUoaW5pdGlhbERlbGF5LCBwZXJpb2QsIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBUaW1lck9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5kZXgpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBlcmlvZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgcGVyaW9kKTtcbiAgICB9O1xuICAgIFRpbWVyT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHBlcmlvZCA9IF9hLnBlcmlvZCwgZHVlVGltZSA9IF9hLmR1ZVRpbWUsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShUaW1lck9ic2VydmFibGUuZGlzcGF0Y2gsIGR1ZVRpbWUsIHtcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCwgcGVyaW9kOiBwZXJpb2QsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZXJPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5UaW1lck9ic2VydmFibGUgPSBUaW1lck9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lck9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL1RpbWVyT2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTigrdmFsdWUpO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2lzRGF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHppcF8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS96aXAnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnppcCA9IHppcF8xLnppcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vYnNlcnZhYmxlL3ppcC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgemlwXzEgPSByZXF1aXJlKCcuLi9vcGVyYXRvci96aXAnKTtcbmV4cG9ydHMuemlwID0gemlwXzEuemlwU3RhdGljO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS96aXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNBcnJheScpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKCcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0Jyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xuLyoqXG4gKiBAcGFyYW0gb2JzZXJ2YWJsZXNcbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59XG4gKiBAbWV0aG9kIHppcFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gemlwUHJvdG8oKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIG9ic2VydmFibGVzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIHppcFN0YXRpYy5hcHBseSh0aGlzLCBvYnNlcnZhYmxlcyk7XG59XG5leHBvcnRzLnppcFByb3RvID0gemlwUHJvdG87XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBAcGFyYW0gb2JzZXJ2YWJsZXNcbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59XG4gKiBAc3RhdGljIHRydWVcbiAqIEBuYW1lIHppcFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gemlwU3RhdGljKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdO1xuICAgIGlmICh0eXBlb2YgcHJvamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGVfMS5BcnJheU9ic2VydmFibGUob2JzZXJ2YWJsZXMpLmxpZnQobmV3IFppcE9wZXJhdG9yKHByb2plY3QpKTtcbn1cbmV4cG9ydHMuemlwU3RhdGljID0gemlwU3RhdGljO1xudmFyIFppcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBaaXBPcGVyYXRvcihwcm9qZWN0KSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIFppcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFppcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5aaXBPcGVyYXRvciA9IFppcE9wZXJhdG9yO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBaaXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoWmlwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7IHZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5pdGVyYXRvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICB0aGlzLnByb2plY3QgPSAodHlwZW9mIHByb2plY3QgPT09ICdmdW5jdGlvbicpID8gcHJvamVjdCA6IG51bGw7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgIH1cbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKGlzQXJyYXlfMS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0FycmF5SXRlcmF0b3IodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0l0ZXJhdG9yKHZhbHVlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0oKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFppcEJ1ZmZlckl0ZXJhdG9yKHRoaXMuZGVzdGluYXRpb24sIHRoaXMsIHZhbHVlLCBpbmRleCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3Iuc3RpbGxVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChpdGVyYXRvci5zdWJzY3JpYmUoaXRlcmF0b3IsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLS07IC8vIG5vdCBhbiBvYnNlcnZhYmxlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUluYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tJdGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIC8vIGFib3J0IGlmIG5vdCBhbGwgb2YgdGhlbSBoYXZlIHZhbHVlc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLmhhc1ZhbHVlID09PSAnZnVuY3Rpb24nICYmICFpdGVyYXRvci5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzaG91bGRDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIGl0J3MgY29tcGxldGVkIG5vdyB0aGF0IHlvdSd2ZSBnb3R0ZW5cbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHZhbHVlLlxuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmhhc0NvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XG4gICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuWmlwU3Vic2NyaWJlciA9IFppcFN1YnNjcmliZXI7XG52YXIgU3RhdGljSXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRpY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5uZXh0UmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IHRoaXMuaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHRSZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHJldHVybiBuZXh0UmVzdWx0ICYmIG5leHRSZXN1bHQuZG9uZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNJdGVyYXRvcjtcbn0oKSk7XG52YXIgU3RhdGljQXJyYXlJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGljQXJyYXlJdGVyYXRvcihhcnJheSkge1xuICAgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvcl8xLiQkaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIHJldHVybiBpIDwgdGhpcy5sZW5ndGggPyB7IHZhbHVlOiBhcnJheVtpXSwgZG9uZTogZmFsc2UgfSA6IHsgZG9uZTogdHJ1ZSB9O1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA+IHRoaXMuaW5kZXg7XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gdGhpcy5pbmRleDtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNBcnJheUl0ZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgWmlwQnVmZmVySXRlcmF0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhaaXBCdWZmZXJJdGVyYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBCdWZmZXJJdGVyYXRvcihkZXN0aW5hdGlvbiwgcGFyZW50LCBvYnNlcnZhYmxlLCBpbmRleCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuc3RpbGxVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB9XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLy8gTk9URTogdGhlcmUgaXMgYWN0dWFsbHkgYSBuYW1lIGNvbGxpc2lvbiBoZXJlIHdpdGggU3Vic2NyaWJlci5uZXh0IGFuZCBJdGVyYXRvci5uZXh0XG4gICAgLy8gICAgdGhpcyBpcyBsZWdpdCBiZWNhdXNlIGBuZXh0KClgIHdpbGwgbmV2ZXIgYmUgY2FsbGVkIGJ5IGEgc3Vic2NyaXB0aW9uIGluIHRoaXMgY2FzZS5cbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBidWZmZXIuc2hpZnQoKSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLmhhc1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID4gMDtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGggPT09IDAgJiYgdGhpcy5pc0NvbXBsZXRlO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUluYWN0aXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2goaW5uZXJWYWx1ZSk7XG4gICAgICAgIHRoaXMucGFyZW50LmNoZWNrSXRlcmF0b3JzKCk7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB0aGlzLm9ic2VydmFibGUsIHRoaXMsIGluZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBCdWZmZXJJdGVyYXRvcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci96aXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBidWZmZXJfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2J1ZmZlcicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmJ1ZmZlciA9IGJ1ZmZlcl8xLmJ1ZmZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9idWZmZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgdW50aWwgYGNsb3NpbmdOb3RpZmllcmAgZW1pdHMuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbGxlY3RzIHZhbHVlcyBmcm9tIHRoZSBwYXN0IGFzIGFuIGFycmF5LCBhbmQgZW1pdHNcbiAqIHRoYXQgYXJyYXkgb25seSB3aGVuIGFub3RoZXIgT2JzZXJ2YWJsZSBlbWl0cy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9idWZmZXIucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQnVmZmVycyB0aGUgaW5jb21pbmcgT2JzZXJ2YWJsZSB2YWx1ZXMgdW50aWwgdGhlIGdpdmVuIGBjbG9zaW5nTm90aWZpZXJgXG4gKiBPYnNlcnZhYmxlIGVtaXRzIGEgdmFsdWUsIGF0IHdoaWNoIHBvaW50IGl0IGVtaXRzIHRoZSBidWZmZXIgb24gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZSBhbmQgc3RhcnRzIGEgbmV3IGJ1ZmZlciBpbnRlcm5hbGx5LCBhd2FpdGluZyB0aGUgbmV4dCB0aW1lXG4gKiBgY2xvc2luZ05vdGlmaWVyYCBlbWl0cy5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5PbiBldmVyeSBjbGljaywgZW1pdCBhcnJheSBvZiBtb3N0IHJlY2VudCBpbnRlcnZhbCBldmVudHM8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAqIHZhciBidWZmZXJlZCA9IGludGVydmFsLmJ1ZmZlcihjbGlja3MpO1xuICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGJ1ZmZlckNvdW50fVxuICogQHNlZSB7QGxpbmsgYnVmZmVyVGltZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlcldoZW59XG4gKiBAc2VlIHtAbGluayB3aW5kb3d9XG4gKlxuICogQHBhcmFtIHtPYnNlcnZhYmxlPGFueT59IGNsb3NpbmdOb3RpZmllciBBbiBPYnNlcnZhYmxlIHRoYXQgc2lnbmFscyB0aGVcbiAqIGJ1ZmZlciB0byBiZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VFtdPn0gQW4gT2JzZXJ2YWJsZSBvZiBidWZmZXJzLCB3aGljaCBhcmUgYXJyYXlzIG9mXG4gKiB2YWx1ZXMuXG4gKiBAbWV0aG9kIGJ1ZmZlclxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gYnVmZmVyKGNsb3NpbmdOb3RpZmllcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEJ1ZmZlck9wZXJhdG9yKGNsb3NpbmdOb3RpZmllcikpO1xufVxuZXhwb3J0cy5idWZmZXIgPSBidWZmZXI7XG52YXIgQnVmZmVyT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlck9wZXJhdG9yKGNsb3NpbmdOb3RpZmllcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdOb3RpZmllcjtcbiAgICB9XG4gICAgQnVmZmVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgQnVmZmVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdOb3RpZmllcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlck9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgQnVmZmVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcbiAgICB9XG4gICAgQnVmZmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgfTtcbiAgICBCdWZmZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9idWZmZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBidWZmZXJDb3VudF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvYnVmZmVyQ291bnQnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50XzEuYnVmZmVyQ291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJDb3VudC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9idWZmZXJDb3VudC5qc1xuICoqIG1vZHVsZSBpZCA9IDExMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIEJ1ZmZlcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcyB1bnRpbCB0aGUgc2l6ZSBoaXRzIHRoZSBtYXhpbXVtXG4gKiBgYnVmZmVyU2l6ZWAgZ2l2ZW4uXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbGxlY3RzIHZhbHVlcyBmcm9tIHRoZSBwYXN0IGFzIGFuIGFycmF5LCBhbmQgZW1pdHNcbiAqIHRoYXQgYXJyYXkgb25seSB3aGVuIGl0cyBzaXplIHJlYWNoZXMgYGJ1ZmZlclNpemVgLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2J1ZmZlckNvdW50LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEJ1ZmZlcnMgYSBudW1iZXIgb2YgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGJ5IGBidWZmZXJTaXplYCB0aGVuXG4gKiBlbWl0cyB0aGUgYnVmZmVyIGFuZCBjbGVhcnMgaXQsIGFuZCBzdGFydHMgYSBuZXcgYnVmZmVyIGVhY2hcbiAqIGBzdGFydEJ1ZmZlckV2ZXJ5YCB2YWx1ZXMuIElmIGBzdGFydEJ1ZmZlckV2ZXJ5YCBpcyBub3QgcHJvdmlkZWQgb3IgaXNcbiAqIGBudWxsYCwgdGhlbiBuZXcgYnVmZmVycyBhcmUgc3RhcnRlZCBpbW1lZGlhdGVseSBhdCB0aGUgc3RhcnQgb2YgdGhlIHNvdXJjZVxuICogYW5kIHdoZW4gZWFjaCBidWZmZXIgY2xvc2VzIGFuZCBpcyBlbWl0dGVkLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgdGhlIGxhc3QgdHdvIGNsaWNrIGV2ZW50cyBhcyBhbiBhcnJheTwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyQ291bnQoMik7XG4gKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+T24gZXZlcnkgY2xpY2ssIGVtaXQgdGhlIGxhc3QgdHdvIGNsaWNrIGV2ZW50cyBhcyBhbiBhcnJheTwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyQ291bnQoMiwgMSk7XG4gKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgYnVmZmVyfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyVGltZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlcldoZW59XG4gKiBAc2VlIHtAbGluayBwYWlyd2lzZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd0NvdW50fVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJTaXplIFRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIGJ1ZmZlciBlbWl0dGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydEJ1ZmZlckV2ZXJ5XSBJbnRlcnZhbCBhdCB3aGljaCB0byBzdGFydCBhIG5ldyBidWZmZXIuXG4gKiBGb3IgZXhhbXBsZSBpZiBgc3RhcnRCdWZmZXJFdmVyeWAgaXMgYDJgLCB0aGVuIGEgbmV3IGJ1ZmZlciB3aWxsIGJlIHN0YXJ0ZWRcbiAqIG9uIGV2ZXJ5IG90aGVyIHZhbHVlIGZyb20gdGhlIHNvdXJjZS4gQSBuZXcgYnVmZmVyIGlzIHN0YXJ0ZWQgYXQgdGhlXG4gKiBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBieSBkZWZhdWx0LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUW10+fSBBbiBPYnNlcnZhYmxlIG9mIGFycmF5cyBvZiBidWZmZXJlZCB2YWx1ZXMuXG4gKiBAbWV0aG9kIGJ1ZmZlckNvdW50XG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBidWZmZXJDb3VudChidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0QnVmZmVyRXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydEJ1ZmZlckV2ZXJ5ID0gbnVsbDsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkpO1xufVxuZXhwb3J0cy5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50O1xudmFyIEJ1ZmZlckNvdW50T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5O1xuICAgIH1cbiAgICBCdWZmZXJDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEJ1ZmZlckNvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmJ1ZmZlclNpemUsIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlckNvdW50T3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBCdWZmZXJDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCdWZmZXJDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW1tdXTtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgfVxuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gKHRoaXMuY291bnQgKz0gMSk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciBidWZmZXJTaXplID0gdGhpcy5idWZmZXJTaXplO1xuICAgICAgICB2YXIgc3RhcnRCdWZmZXJFdmVyeSA9ICh0aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPT0gbnVsbCkgPyBidWZmZXJTaXplIDogdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5O1xuICAgICAgICB2YXIgYnVmZmVycyA9IHRoaXMuYnVmZmVycztcbiAgICAgICAgdmFyIGxlbiA9IGJ1ZmZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgcmVtb3ZlID0gLTE7XG4gICAgICAgIGlmIChjb3VudCAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSA9IGk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmUgIT09IC0xKSB7XG4gICAgICAgICAgICBidWZmZXJzLnNwbGljZShyZW1vdmUsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnM7XG4gICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJDb3VudC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2J1ZmZlckNvdW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgYnVmZmVyVGltZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvYnVmZmVyVGltZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmJ1ZmZlclRpbWUgPSBidWZmZXJUaW1lXzEuYnVmZmVyVGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvYnVmZmVyVGltZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4uL3NjaGVkdWxlci9hc3luYycpO1xuLyoqXG4gKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgZm9yIGEgc3BlY2lmaWMgdGltZSBwZXJpb2QuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbGxlY3RzIHZhbHVlcyBmcm9tIHRoZSBwYXN0IGFzIGFuIGFycmF5LCBhbmQgZW1pdHNcbiAqIHRob3NlIGFycmF5cyBwZXJpb2RpY2FsbHkgaW4gdGltZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9idWZmZXJUaW1lLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEJ1ZmZlcnMgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBmb3IgYSBzcGVjaWZpYyB0aW1lIGR1cmF0aW9uIGBidWZmZXJUaW1lU3BhbmAuXG4gKiBVbmxlc3MgdGhlIG9wdGlvbmFsIGFyZ3VtZW50IGBidWZmZXJDcmVhdGlvbkludGVydmFsYCBpcyBnaXZlbiwgaXQgZW1pdHMgYW5kXG4gKiByZXNldHMgdGhlIGJ1ZmZlciBldmVyeSBgYnVmZmVyVGltZVNwYW5gIG1pbGxpc2Vjb25kcy4gSWZcbiAqIGBidWZmZXJDcmVhdGlvbkludGVydmFsYCBpcyBnaXZlbiwgdGhpcyBvcGVyYXRvciBvcGVucyB0aGUgYnVmZmVyIGV2ZXJ5XG4gKiBgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbGAgbWlsbGlzZWNvbmRzIGFuZCBjbG9zZXMgKGVtaXRzIGFuZCByZXNldHMpIHRoZVxuICogYnVmZmVyIGV2ZXJ5IGBidWZmZXJUaW1lU3BhbmAgbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkV2ZXJ5IHNlY29uZCwgZW1pdCBhbiBhcnJheSBvZiB0aGUgcmVjZW50IGNsaWNrIGV2ZW50czwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyVGltZSgxMDAwKTtcbiAqIGJ1ZmZlcmVkLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FdmVyeSA1IHNlY29uZHMsIGVtaXQgdGhlIGNsaWNrIGV2ZW50cyBmcm9tIHRoZSBuZXh0IDIgc2Vjb25kczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgYnVmZmVyZWQgPSBjbGlja3MuYnVmZmVyVGltZSgyMDAwLCA1MDAwKTtcbiAqIGJ1ZmZlcmVkLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBidWZmZXJ9XG4gKiBAc2VlIHtAbGluayBidWZmZXJDb3VudH1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlcldoZW59XG4gKiBAc2VlIHtAbGluayB3aW5kb3dUaW1lfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJUaW1lU3BhbiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZmlsbCBlYWNoIGJ1ZmZlciBhcnJheS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYnVmZmVyQ3JlYXRpb25JbnRlcnZhbF0gVGhlIGludGVydmFsIGF0IHdoaWNoIHRvIHN0YXJ0IG5ld1xuICogYnVmZmVycy5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUgc2NoZWR1bGVyIG9uIHdoaWNoIHRvIHNjaGVkdWxlIHRoZVxuICogaW50ZXJ2YWxzIHRoYXQgZGV0ZXJtaW5lIGJ1ZmZlciBib3VuZGFyaWVzLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUW10+fSBBbiBvYnNlcnZhYmxlIG9mIGFycmF5cyBvZiBidWZmZXJlZCB2YWx1ZXMuXG4gKiBAbWV0aG9kIGJ1ZmZlclRpbWVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGJ1ZmZlclRpbWUoYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHNjaGVkdWxlcikge1xuICAgIGlmIChidWZmZXJDcmVhdGlvbkludGVydmFsID09PSB2b2lkIDApIHsgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IG51bGw7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLmJ1ZmZlclRpbWUgPSBidWZmZXJUaW1lO1xudmFyIEJ1ZmZlclRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyVGltZU9wZXJhdG9yKGJ1ZmZlclRpbWVTcGFuLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5idWZmZXJUaW1lU3BhbiA9IGJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgQnVmZmVyVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEJ1ZmZlclRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYnVmZmVyVGltZVNwYW4sIHRoaXMuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUaW1lT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBCdWZmZXJUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5idWZmZXJUaW1lU3BhbiA9IGJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICAgICAgaWYgKGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgIT09IG51bGwgJiYgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VTdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgYnVmZmVyOiBidWZmZXIgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw6IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IHRoaXMsIHNjaGVkdWxlcjogc2NoZWR1bGVyIH07XG4gICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDbG9zZSwgYnVmZmVyVGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlckNyZWF0aW9uLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGltZVNwYW5Pbmx5U3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIGJ1ZmZlcjogYnVmZmVyLCBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4gfTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seSwgYnVmZmVyVGltZVNwYW4sIHRpbWVTcGFuT25seVN0YXRlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBidWZmZXJzID0gdGhpcy5idWZmZXJzO1xuICAgICAgICB2YXIgbGVuID0gYnVmZmVycy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZmZlcnNbaV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5sZW5ndGggPSAwO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJzID0gX2EuYnVmZmVycywgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKGJ1ZmZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChidWZmZXJzLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZUJ1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIHZhciBidWZmZXJzID0gdGhpcy5idWZmZXJzO1xuICAgICAgICBidWZmZXJzLnNwbGljZShidWZmZXJzLmluZGV4T2YoYnVmZmVyKSwgMSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaEJ1ZmZlclRpbWVTcGFuT25seShzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICB2YXIgcHJldkJ1ZmZlciA9IHN0YXRlLmJ1ZmZlcjtcbiAgICBpZiAocHJldkJ1ZmZlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmNsb3NlQnVmZmVyKHByZXZCdWZmZXIpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXIgPSBzdWJzY3JpYmVyLm9wZW5CdWZmZXIoKTtcbiAgICBpZiAoIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgc3RhdGUuYnVmZmVyVGltZVNwYW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQnVmZmVyQ3JlYXRpb24oc3RhdGUpIHtcbiAgICB2YXIgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IHN0YXRlLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIGJ1ZmZlclRpbWVTcGFuID0gc3RhdGUuYnVmZmVyVGltZVNwYW4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXI7XG4gICAgdmFyIGJ1ZmZlciA9IHN1YnNjcmliZXIub3BlbkJ1ZmZlcigpO1xuICAgIHZhciBhY3Rpb24gPSB0aGlzO1xuICAgIGlmICghc3Vic2NyaWJlci5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICBhY3Rpb24uYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlckNsb3NlLCBidWZmZXJUaW1lU3BhbiwgeyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBidWZmZXI6IGJ1ZmZlciB9KSk7XG4gICAgICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJDbG9zZShhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCBidWZmZXIgPSBhcmcuYnVmZmVyO1xuICAgIHN1YnNjcmliZXIuY2xvc2VCdWZmZXIoYnVmZmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9idWZmZXJUaW1lLmpzXG4gKiogbW9kdWxlIGlkID0gMTEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgYnVmZmVyVG9nZ2xlXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9idWZmZXJUb2dnbGUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5idWZmZXJUb2dnbGUgPSBidWZmZXJUb2dnbGVfMS5idWZmZXJUb2dnbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvYnVmZmVyVG9nZ2xlLmpzXG4gKiogbW9kdWxlIGlkID0gMTE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaXB0aW9uJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgc3RhcnRpbmcgZnJvbSBhbiBlbWlzc2lvbiBmcm9tXG4gKiBgb3BlbmluZ3NgIGFuZCBlbmRpbmcgd2hlbiB0aGUgb3V0cHV0IG9mIGBjbG9zaW5nU2VsZWN0b3JgIGVtaXRzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db2xsZWN0cyB2YWx1ZXMgZnJvbSB0aGUgcGFzdCBhcyBhbiBhcnJheS4gU3RhcnRzXG4gKiBjb2xsZWN0aW5nIG9ubHkgd2hlbiBgb3BlbmluZ2AgZW1pdHMsIGFuZCBjYWxscyB0aGUgYGNsb3NpbmdTZWxlY3RvcmBcbiAqIGZ1bmN0aW9uIHRvIGdldCBhbiBPYnNlcnZhYmxlIHRoYXQgdGVsbHMgd2hlbiB0byBjbG9zZSB0aGUgYnVmZmVyLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2J1ZmZlclRvZ2dsZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBCdWZmZXJzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgYnkgb3BlbmluZyB0aGUgYnVmZmVyIHZpYSBzaWduYWxzIGZyb20gYW5cbiAqIE9ic2VydmFibGUgcHJvdmlkZWQgdG8gYG9wZW5pbmdzYCwgYW5kIGNsb3NpbmcgYW5kIHNlbmRpbmcgdGhlIGJ1ZmZlcnMgd2hlblxuICogYSBTdWJzY3JpYmFibGUgb3IgUHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYGNsb3NpbmdTZWxlY3RvcmAgZnVuY3Rpb24gZW1pdHMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RXZlcnkgb3RoZXIgc2Vjb25kLCBlbWl0IHRoZSBjbGljayBldmVudHMgZnJvbSB0aGUgbmV4dCA1MDBtczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgb3BlbmluZ3MgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIGJ1ZmZlcmVkID0gY2xpY2tzLmJ1ZmZlclRvZ2dsZShvcGVuaW5ncywgaSA9PlxuICogICBpICUgMiA/IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoNTAwKSA6IFJ4Lk9ic2VydmFibGUuZW1wdHkoKVxuICogKTtcbiAqIGJ1ZmZlcmVkLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBidWZmZXJ9XG4gKiBAc2VlIHtAbGluayBidWZmZXJDb3VudH1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRpbWV9XG4gKiBAc2VlIHtAbGluayBidWZmZXJXaGVufVxuICogQHNlZSB7QGxpbmsgd2luZG93VG9nZ2xlfVxuICpcbiAqIEBwYXJhbSB7U3Vic2NyaWJhYmxlT3JQcm9taXNlPE8+fSBvcGVuaW5ncyBBIFN1YnNjcmliYWJsZSBvciBQcm9taXNlIG9mIG5vdGlmaWNhdGlvbnMgdG8gc3RhcnQgbmV3XG4gKiBidWZmZXJzLlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogTyk6IFN1YnNjcmliYWJsZU9yUHJvbWlzZX0gY2xvc2luZ1NlbGVjdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlc1xuICogdGhlIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIGBvcGVuaW5nc2Agb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIFN1YnNjcmliYWJsZSBvciBQcm9taXNlLFxuICogd2hpY2gsIHdoZW4gaXQgZW1pdHMsIHNpZ25hbHMgdGhhdCB0aGUgYXNzb2NpYXRlZCBidWZmZXIgc2hvdWxkIGJlIGVtaXR0ZWRcbiAqIGFuZCBjbGVhcmVkLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUW10+fSBBbiBvYnNlcnZhYmxlIG9mIGFycmF5cyBvZiBidWZmZXJlZCB2YWx1ZXMuXG4gKiBAbWV0aG9kIGJ1ZmZlclRvZ2dsZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gYnVmZmVyVG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBCdWZmZXJUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSk7XG59XG5leHBvcnRzLmJ1ZmZlclRvZ2dsZSA9IGJ1ZmZlclRvZ2dsZTtcbnZhciBCdWZmZXJUb2dnbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyVG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLm9wZW5pbmdzID0gb3BlbmluZ3M7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBCdWZmZXJUb2dnbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub3BlbmluZ3MsIHRoaXMuY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVG9nZ2xlT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIG9wZW5pbmdzKSk7XG4gICAgfVxuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRzW2ldLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB3aGlsZSAoY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGNvbnRleHQuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnRleHQuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB3aGlsZSAoY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGNvbnRleHQuYnVmZmVyKTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBjb250ZXh0LmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBjb250ZXh0LnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIG91dGVyVmFsdWUgPyB0aGlzLmNsb3NlQnVmZmVyKG91dGVyVmFsdWUpIDogdGhpcy5vcGVuQnVmZmVyKGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5jbG9zZUJ1ZmZlcihpbm5lclN1Yi5jb250ZXh0KTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlTdWJzY3JpYmUoY2xvc2luZ05vdGlmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZUJ1ZmZlciA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIGlmIChjb250ZXh0cyAmJiBjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gY29udGV4dC5idWZmZXIsIHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICBjb250ZXh0cy5zcGxpY2UoY29udGV4dHMuaW5kZXhPZihjb250ZXh0KSwgMSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgY29udGV4dCA9IHsgYnVmZmVyOiBidWZmZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH07XG4gICAgICAgIGNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUJ1ZmZlcihjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRvZ2dsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2J1ZmZlclRvZ2dsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGJ1ZmZlcldoZW5fMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2J1ZmZlcldoZW4nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5idWZmZXJXaGVuID0gYnVmZmVyV2hlbl8xLmJ1ZmZlcldoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2J1ZmZlcldoZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcbnZhciB0cnlDYXRjaF8xID0gcmVxdWlyZSgnLi4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBCdWZmZXJzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMsIHVzaW5nIGEgZmFjdG9yeSBmdW5jdGlvbiBvZiBjbG9zaW5nXG4gKiBPYnNlcnZhYmxlcyB0byBkZXRlcm1pbmUgd2hlbiB0byBjbG9zZSwgZW1pdCwgYW5kIHJlc2V0IHRoZSBidWZmZXIuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbGxlY3RzIHZhbHVlcyBmcm9tIHRoZSBwYXN0IGFzIGFuIGFycmF5LiBXaGVuIGl0XG4gKiBzdGFydHMgY29sbGVjdGluZyB2YWx1ZXMsIGl0IGNhbGxzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdFxuICogdGVsbHMgd2hlbiB0byBjbG9zZSB0aGUgYnVmZmVyIGFuZCByZXN0YXJ0IGNvbGxlY3RpbmcuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvYnVmZmVyV2hlbi5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBPcGVucyBhIGJ1ZmZlciBpbW1lZGlhdGVseSwgdGhlbiBjbG9zZXMgdGhlIGJ1ZmZlciB3aGVuIHRoZSBvYnNlcnZhYmxlXG4gKiByZXR1cm5lZCBieSBjYWxsaW5nIGBjbG9zaW5nU2VsZWN0b3JgIGZ1bmN0aW9uIGVtaXRzIGEgdmFsdWUuIFdoZW4gaXQgY2xvc2VzXG4gKiB0aGUgYnVmZmVyLCBpdCBpbW1lZGlhdGVseSBvcGVucyBhIG5ldyBidWZmZXIgYW5kIHJlcGVhdHMgdGhlIHByb2Nlc3MuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBhbiBhcnJheSBvZiB0aGUgbGFzdCBjbGlja3MgZXZlcnkgWzEtNV0gcmFuZG9tIHNlY29uZHM8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGJ1ZmZlcmVkID0gY2xpY2tzLmJ1ZmZlcldoZW4oKCkgPT5cbiAqICAgUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwICsgTWF0aC5yYW5kb20oKSAqIDQwMDApXG4gKiApO1xuICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGJ1ZmZlcn1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlckNvdW50fVxuICogQHNlZSB7QGxpbmsgYnVmZmVyVGltZX1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd1doZW59XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigpOiBPYnNlcnZhYmxlfSBjbG9zaW5nU2VsZWN0b3IgQSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vXG4gKiBhcmd1bWVudHMgYW5kIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHNpZ25hbHMgYnVmZmVyIGNsb3N1cmUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFRbXT59IEFuIG9ic2VydmFibGUgb2YgYXJyYXlzIG9mIGJ1ZmZlcmVkIHZhbHVlcy5cbiAqIEBtZXRob2QgYnVmZmVyV2hlblxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gYnVmZmVyV2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBCdWZmZXJXaGVuT3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSk7XG59XG5leHBvcnRzLmJ1ZmZlcldoZW4gPSBidWZmZXJXaGVuO1xudmFyIEJ1ZmZlcldoZW5PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyV2hlbk9wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgQnVmZmVyV2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEJ1ZmZlcldoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyV2hlbk9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgQnVmZmVyV2hlblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCdWZmZXJXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgfVxuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmliaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoY2xvc2luZ1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXIgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMuY2xvc2luZ1NlbGVjdG9yKSgpO1xuICAgICAgICBpZiAoY2xvc2luZ05vdGlmaWVyID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uID0gY2xvc2luZ1N1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYWRkKGNsb3NpbmdTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IHRydWU7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyV2hlblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyV2hlbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2J1ZmZlcldoZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBjYWNoZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY2FjaGUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jYWNoZSA9IGNhY2hlXzEuY2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9jYWNoZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHVibGlzaFJlcGxheV8xID0gcmVxdWlyZSgnLi9wdWJsaXNoUmVwbGF5Jyk7XG4vKipcbiAqIEBwYXJhbSBidWZmZXJTaXplXG4gKiBAcGFyYW0gd2luZG93VGltZVxuICogQHBhcmFtIHNjaGVkdWxlclxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fVxuICogQG1ldGhvZCBjYWNoZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gY2FjaGUoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGJ1ZmZlclNpemUgPT09IHZvaWQgMCkgeyBidWZmZXJTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkgeyB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgcmV0dXJuIHB1Ymxpc2hSZXBsYXlfMS5wdWJsaXNoUmVwbGF5LmNhbGwodGhpcywgYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKS5yZWZDb3VudCgpO1xufVxuZXhwb3J0cy5jYWNoZSA9IGNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9jYWNoZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVwbGF5U3ViamVjdF8xID0gcmVxdWlyZSgnLi4vUmVwbGF5U3ViamVjdCcpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZSgnLi9tdWx0aWNhc3QnKTtcbi8qKlxuICogQHBhcmFtIGJ1ZmZlclNpemVcbiAqIEBwYXJhbSB3aW5kb3dUaW1lXG4gKiBAcGFyYW0gc2NoZWR1bGVyXG4gKiBAcmV0dXJuIHtDb25uZWN0YWJsZU9ic2VydmFibGU8VD59XG4gKiBAbWV0aG9kIHB1Ymxpc2hSZXBsYXlcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZXBsYXkoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGJ1ZmZlclNpemUgPT09IHZvaWQgMCkgeyBidWZmZXJTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkgeyB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgcmV0dXJuIG11bHRpY2FzdF8xLm11bHRpY2FzdC5jYWxsKHRoaXMsIG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMucHVibGlzaFJlcGxheSA9IHB1Ymxpc2hSZXBsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoUmVwbGF5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvcHVibGlzaFJlcGxheS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuL1N1YmplY3QnKTtcbnZhciBxdWV1ZV8xID0gcmVxdWlyZSgnLi9zY2hlZHVsZXIvcXVldWUnKTtcbnZhciBvYnNlcnZlT25fMSA9IHJlcXVpcmUoJy4vb3BlcmF0b3Ivb2JzZXJ2ZU9uJyk7XG4vKipcbiAqIEBjbGFzcyBSZXBsYXlTdWJqZWN0PFQ+XG4gKi9cbnZhciBSZXBsYXlTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwbGF5U3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7IGJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cbiAgICAgICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkgeyB3aW5kb3dUaW1lID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZSA8IDEgPyAxIDogYnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5fd2luZG93VGltZSA9IHdpbmRvd1RpbWUgPCAxID8gMSA6IHdpbmRvd1RpbWU7XG4gICAgfVxuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLl9nZXROb3coKTtcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaChuZXcgUmVwbGF5RXZlbnQobm93LCB2YWx1ZSkpO1xuICAgICAgICB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cyhub3cpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cyh0aGlzLl9nZXROb3coKSk7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlciA9IG5ldyBvYnNlcnZlT25fMS5PYnNlcnZlT25TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHNjaGVkdWxlcikpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgbGVuID0gZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4gJiYgIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChldmVudHNbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fZ2V0Tm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2NoZWR1bGVyIHx8IHF1ZXVlXzEucXVldWUpLm5vdygpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzID0gZnVuY3Rpb24gKG5vdykge1xuICAgICAgICB2YXIgYnVmZmVyU2l6ZSA9IHRoaXMuYnVmZmVyU2l6ZTtcbiAgICAgICAgdmFyIF93aW5kb3dUaW1lID0gdGhpcy5fd2luZG93VGltZTtcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzO1xuICAgICAgICB2YXIgZXZlbnRzQ291bnQgPSBldmVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgc3BsaWNlQ291bnQgPSAwO1xuICAgICAgICAvLyBUcmltIGV2ZW50cyB0aGF0IGZhbGwgb3V0IG9mIHRoZSB0aW1lIHdpbmRvdy5cbiAgICAgICAgLy8gU3RhcnQgYXQgdGhlIGZyb250IG9mIHRoZSBsaXN0LiBCcmVhayBlYXJseSBvbmNlXG4gICAgICAgIC8vIHdlIGVuY291bnRlciBhbiBldmVudCB0aGF0IGZhbGxzIHdpdGhpbiB0aGUgd2luZG93LlxuICAgICAgICB3aGlsZSAoc3BsaWNlQ291bnQgPCBldmVudHNDb3VudCkge1xuICAgICAgICAgICAgaWYgKChub3cgLSBldmVudHNbc3BsaWNlQ291bnRdLnRpbWUpIDwgX3dpbmRvd1RpbWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwbGljZUNvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50c0NvdW50ID4gYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgc3BsaWNlQ291bnQgPSBNYXRoLm1heChzcGxpY2VDb3VudCwgZXZlbnRzQ291bnQgLSBidWZmZXJTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BsaWNlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICBldmVudHMuc3BsaWNlKDAsIHNwbGljZUNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGxheVN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLlJlcGxheVN1YmplY3QgPSBSZXBsYXlTdWJqZWN0O1xudmFyIFJlcGxheUV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBsYXlFdmVudCh0aW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBSZXBsYXlFdmVudDtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXBsYXlTdWJqZWN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvUmVwbGF5U3ViamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUXVldWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoJy4vUXVldWVTY2hlZHVsZXInKTtcbmV4cG9ydHMucXVldWUgPSBuZXcgUXVldWVTY2hlZHVsZXJfMS5RdWV1ZVNjaGVkdWxlcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVldWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9zY2hlZHVsZXIvcXVldWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2YgaW52b2tpbmcgYSBzcGVjaWZpZWQgc2VsZWN0b3Igb24gaXRlbXNcbiAqIGVtaXR0ZWQgYnkgYSBDb25uZWN0YWJsZU9ic2VydmFibGUgdGhhdCBzaGFyZXMgYSBzaW5nbGUgc3Vic2NyaXB0aW9uIHRvIHRoZSB1bmRlcmx5aW5nIHN0cmVhbS5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL211bHRpY2FzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciAtIGEgZnVuY3Rpb24gdGhhdCBjYW4gdXNlIHRoZSBtdWx0aWNhc3RlZCBzb3VyY2Ugc3RyZWFtXG4gKiBhcyBtYW55IHRpbWVzIGFzIG5lZWRlZCwgd2l0aG91dCBjYXVzaW5nIG11bHRpcGxlIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBzdHJlYW0uXG4gKiBTdWJzY3JpYmVycyB0byB0aGUgZ2l2ZW4gc291cmNlIHdpbGwgcmVjZWl2ZSBhbGwgbm90aWZpY2F0aW9ucyBvZiB0aGUgc291cmNlIGZyb20gdGhlXG4gKiB0aW1lIG9mIHRoZSBzdWJzY3JpcHRpb24gZm9yd2FyZC5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0cyBvZiBpbnZva2luZyB0aGUgc2VsZWN0b3JcbiAqIG9uIHRoZSBpdGVtcyBlbWl0dGVkIGJ5IGEgYENvbm5lY3RhYmxlT2JzZXJ2YWJsZWAgdGhhdCBzaGFyZXMgYSBzaW5nbGUgc3Vic2NyaXB0aW9uIHRvXG4gKiB0aGUgdW5kZXJseWluZyBzdHJlYW0uXG4gKiBAbWV0aG9kIG11bHRpY2FzdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbXVsdGljYXN0KHN1YmplY3RPclN1YmplY3RGYWN0b3J5KSB7XG4gICAgdmFyIHN1YmplY3RGYWN0b3J5O1xuICAgIGlmICh0eXBlb2Ygc3ViamVjdE9yU3ViamVjdEZhY3RvcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN1YmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gc3ViamVjdEZhY3RvcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEuQ29ubmVjdGFibGVPYnNlcnZhYmxlKHRoaXMsIHN1YmplY3RGYWN0b3J5KTtcbn1cbmV4cG9ydHMubXVsdGljYXN0ID0gbXVsdGljYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGljYXN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbXVsdGljYXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTIzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcbi8qKlxuICogQGNsYXNzIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPlxuICovXG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGFibGVPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIHN1YmplY3RGYWN0b3J5KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgIH1cbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdWJqZWN0KCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5nZXRTdWJqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcbiAgICAgICAgaWYgKHN1YmplY3QgJiYgIXN1YmplY3QuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5zdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMuZ2V0U3ViamVjdCgpKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChuZXcgQ29ubmVjdGFibGVTdWJzY3JpcHRpb24odGhpcykpO1xuICAgICAgICByZXR1cm4gKHRoaXMuc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVmQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVmQ291bnRPYnNlcnZhYmxlKHRoaXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgb3BlbmVkIGZvciBgQ29ubmVjdGFibGVTdWJzY3JpcHRpb25gLlxuICAgICAqIE5vdCB0byBjYWxsIGZyb20gb3RoZXJzLlxuICAgICAqL1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX2Nsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YmplY3QgPSBudWxsO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Db25uZWN0YWJsZU9ic2VydmFibGUgPSBDb25uZWN0YWJsZU9ic2VydmFibGU7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIENvbm5lY3RhYmxlU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGFibGVTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVTdWJzY3JpcHRpb24oY29ubmVjdGFibGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICB9XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpcHRpb24ucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgY29ubmVjdGFibGUuX2Nsb3NlU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIENvbm5lY3RhYmxlU3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUmVmQ291bnRPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVmQ291bnRPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50T2JzZXJ2YWJsZShjb25uZWN0YWJsZSwgcmVmQ291bnQpIHtcbiAgICAgICAgaWYgKHJlZkNvdW50ID09PSB2b2lkIDApIHsgcmVmQ291bnQgPSAwOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgICAgIHRoaXMucmVmQ291bnQgPSByZWZDb3VudDtcbiAgICB9XG4gICAgUmVmQ291bnRPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgdmFyIHJlZkNvdW50U3Vic2NyaWJlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcyk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb25uZWN0YWJsZS5zdWJzY3JpYmUocmVmQ291bnRTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQgJiYgKyt0aGlzLnJlZkNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICByZWZDb3VudFN1YnNjcmliZXIuY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUmVmQ291bnRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVmQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVmQ291bnRPYnNlcnZhYmxlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG51bGwpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMucmVmQ291bnRPYnNlcnZhYmxlID0gcmVmQ291bnRPYnNlcnZhYmxlO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSByZWZDb3VudE9ic2VydmFibGUuY29ubmVjdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMpO1xuICAgIH1cbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRDb25uZWN0YWJsZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRDb25uZWN0YWJsZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9yZXNldENvbm5lY3RhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHRoaXMucmVmQ291bnRPYnNlcnZhYmxlO1xuICAgICAgICB2YXIgb2JzQ29ubmVjdGlvbiA9IG9ic2VydmFibGUuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHN1YkNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIGlmIChzdWJDb25uZWN0aW9uICYmIHN1YkNvbm5lY3Rpb24gPT09IG9ic0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIG9ic2VydmFibGUucmVmQ291bnQgPSAwO1xuICAgICAgICAgICAgb2JzQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy5yZWZDb3VudE9ic2VydmFibGU7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlLnJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC0tb2JzZXJ2YWJsZS5yZWZDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIG9ic0Nvbm5lY3Rpb24gPSBvYnNlcnZhYmxlLmNvbm5lY3Rpb247XG4gICAgICAgICAgICB2YXIgc3ViQ29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgICAgIGlmIChzdWJDb25uZWN0aW9uICYmIHN1YkNvbm5lY3Rpb24gPT09IG9ic0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBvYnNDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgY2F0Y2hfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2NhdGNoJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY2F0Y2ggPSBjYXRjaF8xLl9jYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdGNoLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2NhdGNoLmpzXG4gKiogbW9kdWxlIGlkID0gMTI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogQ2F0Y2hlcyBlcnJvcnMgb24gdGhlIG9ic2VydmFibGUgdG8gYmUgaGFuZGxlZCBieSByZXR1cm5pbmcgYSBuZXcgb2JzZXJ2YWJsZSBvciB0aHJvd2luZyBhbiBlcnJvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNlbGVjdG9yIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhcyBhcmd1bWVudHMgYGVycmAsIHdoaWNoIGlzIHRoZSBlcnJvciwgYW5kIGBjYXVnaHRgLCB3aGljaFxuICogIGlzIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSwgaW4gY2FzZSB5b3UnZCBsaWtlIHRvIFwicmV0cnlcIiB0aGF0IG9ic2VydmFibGUgYnkgcmV0dXJuaW5nIGl0IGFnYWluLiBXaGF0ZXZlciBvYnNlcnZhYmxlXG4gKiAgaXMgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RvcmAgd2lsbCBiZSB1c2VkIHRvIGNvbnRpbnVlIHRoZSBvYnNlcnZhYmxlIGNoYWluLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gb2JzZXJ2YWJsZSB0aGF0IG9yaWdpbmF0ZXMgZnJvbSBlaXRoZXIgdGhlIHNvdXJjZSBvciB0aGUgb2JzZXJ2YWJsZSByZXR1cm5lZCBieSB0aGVcbiAqICBjYXRjaCBgc2VsZWN0b3JgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBjYXRjaFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gX2NhdGNoKHNlbGVjdG9yKSB7XG4gICAgdmFyIG9wZXJhdG9yID0gbmV3IENhdGNoT3BlcmF0b3Ioc2VsZWN0b3IpO1xuICAgIHZhciBjYXVnaHQgPSB0aGlzLmxpZnQob3BlcmF0b3IpO1xuICAgIHJldHVybiAob3BlcmF0b3IuY2F1Z2h0ID0gY2F1Z2h0KTtcbn1cbmV4cG9ydHMuX2NhdGNoID0gX2NhdGNoO1xudmFyIENhdGNoT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhdGNoT3BlcmF0b3Ioc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIH1cbiAgICBDYXRjaE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IENhdGNoU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmNhdWdodCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENhdGNoT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBDYXRjaFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYXRjaFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2F0Y2hTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzZWxlY3RvciwgY2F1Z2h0KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLmNhdWdodCA9IGNhdWdodDtcbiAgICB9XG4gICAgLy8gTk9URTogb3ZlcnJpZGluZyBgZXJyb3JgIGluc3RlYWQgb2YgYF9lcnJvcmAgYmVjYXVzZSB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaGF2ZSB0aGlzIGZsYWcgdGhpcyBzdWJzY3JpYmVyIGFzIGBpc1N0b3BwZWRgLlxuICAgIENhdGNoU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0b3IoZXJyLCB0aGlzLmNhdWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhdGNoU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ucmVtb3ZlKHRoaXMpO1xuICAgICAgICByZXN1bHQuc3Vic2NyaWJlKHRoaXMuZGVzdGluYXRpb24pO1xuICAgIH07XG4gICAgcmV0dXJuIENhdGNoU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdGNoLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvY2F0Y2guanNcbiAqKiBtb2R1bGUgaWQgPSAxMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBjb21iaW5lQWxsXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9jb21iaW5lQWxsJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29tYmluZUFsbCA9IGNvbWJpbmVBbGxfMS5jb21iaW5lQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUFsbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9jb21iaW5lQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTI3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKCcuL2NvbWJpbmVMYXRlc3QnKTtcbi8qKlxuICogQ29udmVydHMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSBpbnRvIGEgZmlyc3Qtb3JkZXIgT2JzZXJ2YWJsZSBieSB3YWl0aW5nXG4gKiBmb3IgdGhlIG91dGVyIE9ic2VydmFibGUgdG8gY29tcGxldGUsIHRoZW4gYXBwbHlpbmcge0BsaW5rIGNvbWJpbmVMYXRlc3R9LlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5GbGF0dGVucyBhbiBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzIGJ5IGFwcGx5aW5nXG4gKiB7QGxpbmsgY29tYmluZUxhdGVzdH0gd2hlbiB0aGUgT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlcyBjb21wbGV0ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvY29tYmluZUFsbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBUYWtlcyBhbiBPYnNlcnZhYmxlIG9mIE9ic2VydmFibGVzLCBhbmQgY29sbGVjdHMgYWxsIE9ic2VydmFibGVzIGZyb20gaXQuXG4gKiBPbmNlIHRoZSBvdXRlciBPYnNlcnZhYmxlIGNvbXBsZXRlcywgaXQgc3Vic2NyaWJlcyB0byBhbGwgY29sbGVjdGVkXG4gKiBPYnNlcnZhYmxlcyBhbmQgY29tYmluZXMgdGhlaXIgdmFsdWVzIHVzaW5nIHRoZSB7QGxpbmsgY29tYmluZUxhdGVzdH1cbiAqIHN0cmF0ZWd5LCBzdWNoIHRoYXQ6XG4gKiAtIEV2ZXJ5IHRpbWUgYW4gaW5uZXIgT2JzZXJ2YWJsZSBlbWl0cywgdGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzLlxuICogLSBXaGVuIHRoZSByZXR1cm5lZCBvYnNlcnZhYmxlIGVtaXRzLCBpdCBlbWl0cyBhbGwgb2YgdGhlIGxhdGVzdCB2YWx1ZXMgYnk6XG4gKiAgIC0gSWYgYSBgcHJvamVjdGAgZnVuY3Rpb24gaXMgcHJvdmlkZWQsIGl0IGlzIGNhbGxlZCB3aXRoIGVhY2ggcmVjZW50IHZhbHVlXG4gKiAgICAgZnJvbSBlYWNoIGlubmVyIE9ic2VydmFibGUgaW4gd2hhdGV2ZXIgb3JkZXIgdGhleSBhcnJpdmVkLCBhbmQgdGhlIHJlc3VsdFxuICogICAgIG9mIHRoZSBgcHJvamVjdGAgZnVuY3Rpb24gaXMgd2hhdCBpcyBlbWl0dGVkIGJ5IHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqICAgLSBJZiB0aGVyZSBpcyBubyBgcHJvamVjdGAgZnVuY3Rpb24sIGFuIGFycmF5IG9mIGFsbCBvZiB0aGUgbW9zdCByZWNlbnRcbiAqICAgICB2YWx1ZXMgaXMgZW1pdHRlZCBieSB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+TWFwIHR3byBjbGljayBldmVudHMgdG8gYSBmaW5pdGUgaW50ZXJ2YWwgT2JzZXJ2YWJsZSwgdGhlbiBhcHBseSBjb21iaW5lQWxsPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBoaWdoZXJPcmRlciA9IGNsaWNrcy5tYXAoZXYgPT5cbiAqICAgUnguT2JzZXJ2YWJsZS5pbnRlcnZhbChNYXRoLnJhbmRvbSgpKjIwMDApLnRha2UoMylcbiAqICkudGFrZSgyKTtcbiAqIHZhciByZXN1bHQgPSBoaWdoZXJPcmRlci5jb21iaW5lQWxsKCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbWJpbmVMYXRlc3R9XG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbcHJvamVjdF0gQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG8gbWFwIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWVzIGZyb20gZWFjaCBpbm5lciBPYnNlcnZhYmxlIGludG8gYSBuZXcgcmVzdWx0LiBUYWtlcyBlYWNoIG9mIHRoZSBtb3N0XG4gKiByZWNlbnQgdmFsdWVzIGZyb20gZWFjaCBjb2xsZWN0ZWQgaW5uZXIgT2JzZXJ2YWJsZSBhcyBhcmd1bWVudHMsIGluIG9yZGVyLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiBwcm9qZWN0ZWQgcmVzdWx0cyBvciBhcnJheXMgb2YgcmVjZW50XG4gKiB2YWx1ZXMuXG4gKiBAbWV0aG9kIGNvbWJpbmVBbGxcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVBbGwocHJvamVjdCkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IGNvbWJpbmVMYXRlc3RfMS5Db21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpO1xufVxuZXhwb3J0cy5jb21iaW5lQWxsID0gY29tYmluZUFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVBbGwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9jb21iaW5lQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY29tYmluZUxhdGVzdCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmNvbWJpbmVMYXRlc3QgPSBjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvY29tYmluZUxhdGVzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY29uY2F0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29uY2F0ID0gY29uY2F0XzEuY29uY2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGNvbmNhdEFsbF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY29uY2F0QWxsJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29uY2F0QWxsID0gY29uY2F0QWxsXzEuY29uY2F0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdEFsbC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoJy4vbWVyZ2VBbGwnKTtcbi8qKlxuICogQ29udmVydHMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSBpbnRvIGEgZmlyc3Qtb3JkZXIgT2JzZXJ2YWJsZSBieVxuICogY29uY2F0ZW5hdGluZyB0aGUgaW5uZXIgT2JzZXJ2YWJsZXMgaW4gb3JkZXIuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkZsYXR0ZW5zIGFuIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXMgYnkgcHV0dGluZyBvbmVcbiAqIGlubmVyIE9ic2VydmFibGUgYWZ0ZXIgdGhlIG90aGVyLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdEFsbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBKb2lucyBldmVyeSBPYnNlcnZhYmxlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSAoYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSksIGluXG4gKiBhIHNlcmlhbCBmYXNoaW9uLiBJdCBzdWJzY3JpYmVzIHRvIGVhY2ggaW5uZXIgT2JzZXJ2YWJsZSBvbmx5IGFmdGVyIHRoZVxuICogcHJldmlvdXMgaW5uZXIgT2JzZXJ2YWJsZSBoYXMgY29tcGxldGVkLCBhbmQgbWVyZ2VzIGFsbCBvZiB0aGVpciB2YWx1ZXMgaW50b1xuICogdGhlIHJldHVybmVkIG9ic2VydmFibGUuXG4gKlxuICogX19XYXJuaW5nOl9fIElmIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBlbWl0cyBPYnNlcnZhYmxlcyBxdWlja2x5IGFuZFxuICogZW5kbGVzc2x5LCBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVzIGl0IGVtaXRzIGdlbmVyYWxseSBjb21wbGV0ZSBzbG93ZXIgdGhhblxuICogdGhlIHNvdXJjZSBlbWl0cywgeW91IGNhbiBydW4gaW50byBtZW1vcnkgaXNzdWVzIGFzIHRoZSBpbmNvbWluZyBPYnNlcnZhYmxlc1xuICogY29sbGVjdCBpbiBhbiB1bmJvdW5kZWQgYnVmZmVyLlxuICpcbiAqIE5vdGU6IGBjb25jYXRBbGxgIGlzIGVxdWl2YWxlbnQgdG8gYG1lcmdlQWxsYCB3aXRoIGNvbmN1cnJlbmN5IHBhcmFtZXRlciBzZXRcbiAqIHRvIGAxYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Gb3IgZWFjaCBjbGljayBldmVudCwgdGljayBldmVyeSBzZWNvbmQgZnJvbSAwIHRvIDMsIHdpdGggbm8gY29uY3VycmVuY3k8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGhpZ2hlck9yZGVyID0gY2xpY2tzLm1hcChldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoNCkpO1xuICogdmFyIGZpcnN0T3JkZXIgPSBoaWdoZXJPcmRlci5jb25jYXRBbGwoKTtcbiAqIGZpcnN0T3JkZXIuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbWJpbmVBbGx9XG4gKiBAc2VlIHtAbGluayBjb25jYXR9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cbiAqIEBzZWUge0BsaW5rIGV4aGF1c3R9XG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaH1cbiAqIEBzZWUge0BsaW5rIHppcEFsbH1cbiAqXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIGVtaXR0aW5nIHZhbHVlcyBmcm9tIGFsbCB0aGUgaW5uZXJcbiAqIE9ic2VydmFibGVzIGNvbmNhdGVuYXRlZC5cbiAqIEBtZXRob2QgY29uY2F0QWxsXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgbWVyZ2VBbGxfMS5NZXJnZUFsbE9wZXJhdG9yKDEpKTtcbn1cbmV4cG9ydHMuY29uY2F0QWxsID0gY29uY2F0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvY29uY2F0QWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgY29uY2F0TWFwXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9jb25jYXRNYXAnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jb25jYXRNYXAgPSBjb25jYXRNYXBfMS5jb25jYXRNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvY29uY2F0TWFwLmpzXG4gKiogbW9kdWxlIGlkID0gMTMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZSgnLi9tZXJnZU1hcCcpO1xuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIHNvdXJjZSB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlIHdoaWNoIGlzIG1lcmdlZCBpbiB0aGUgb3V0cHV0XG4gKiBPYnNlcnZhYmxlLCBpbiBhIHNlcmlhbGl6ZWQgZmFzaGlvbiB3YWl0aW5nIGZvciBlYWNoIG9uZSB0byBjb21wbGV0ZSBiZWZvcmVcbiAqIG1lcmdpbmcgdGhlIG5leHQuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPk1hcHMgZWFjaCB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlLCB0aGVuIGZsYXR0ZW5zIGFsbCBvZlxuICogdGhlc2UgaW5uZXIgT2JzZXJ2YWJsZXMgdXNpbmcge0BsaW5rIGNvbmNhdEFsbH0uPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvY29uY2F0TWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGJhc2VkIG9uIGFwcGx5aW5nIGEgZnVuY3Rpb24gdGhhdCB5b3VcbiAqIHN1cHBseSB0byBlYWNoIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHdoZXJlIHRoYXQgZnVuY3Rpb25cbiAqIHJldHVybnMgYW4gKHNvLWNhbGxlZCBcImlubmVyXCIpIE9ic2VydmFibGUuIEVhY2ggbmV3IGlubmVyIE9ic2VydmFibGUgaXNcbiAqIGNvbmNhdGVuYXRlZCB3aXRoIHRoZSBwcmV2aW91cyBpbm5lciBPYnNlcnZhYmxlLlxuICpcbiAqIF9fV2FybmluZzpfXyBpZiBzb3VyY2UgdmFsdWVzIGFycml2ZSBlbmRsZXNzbHkgYW5kIGZhc3RlciB0aGFuIHRoZWlyXG4gKiBjb3JyZXNwb25kaW5nIGlubmVyIE9ic2VydmFibGVzIGNhbiBjb21wbGV0ZSwgaXQgd2lsbCByZXN1bHQgaW4gbWVtb3J5IGlzc3Vlc1xuICogYXMgaW5uZXIgT2JzZXJ2YWJsZXMgYW1hc3MgaW4gYW4gdW5ib3VuZGVkIGJ1ZmZlciB3YWl0aW5nIGZvciB0aGVpciB0dXJuIHRvXG4gKiBiZSBzdWJzY3JpYmVkIHRvLlxuICpcbiAqIE5vdGU6IGBjb25jYXRNYXBgIGlzIGVxdWl2YWxlbnQgdG8gYG1lcmdlTWFwYCB3aXRoIGNvbmN1cnJlbmN5IHBhcmFtZXRlciBzZXRcbiAqIHRvIGAxYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Gb3IgZWFjaCBjbGljayBldmVudCwgdGljayBldmVyeSBzZWNvbmQgZnJvbSAwIHRvIDMsIHdpdGggbm8gY29uY3VycmVuY3k8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5jb25jYXRNYXAoZXYgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDQpKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgY29uY2F0fVxuICogQHNlZSB7QGxpbmsgY29uY2F0QWxsfVxuICogQHNlZSB7QGxpbmsgY29uY2F0TWFwVG99XG4gKiBAc2VlIHtAbGluayBleGhhdXN0TWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXB9XG4gKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgP2luZGV4OiBudW1iZXIpOiBPYnNlcnZhYmxlfSBwcm9qZWN0IEEgZnVuY3Rpb25cbiAqIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXR1cm5zIGFuXG4gKiBPYnNlcnZhYmxlLlxuICogQHBhcmFtIHtmdW5jdGlvbihvdXRlclZhbHVlOiBULCBpbm5lclZhbHVlOiBJLCBvdXRlckluZGV4OiBudW1iZXIsIGlubmVySW5kZXg6IG51bWJlcik6IGFueX0gW3Jlc3VsdFNlbGVjdG9yXVxuICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuICogYW5kIHRoZSBpbmRpY2VzIG9mIHRoZSBzb3VyY2UgKG91dGVyKSBlbWlzc2lvbiBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVcbiAqIGVtaXNzaW9uLiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uIGFyZTpcbiAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIC0gYG91dGVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG4gKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIG9ic2VydmFibGUgb2YgdmFsdWVzIG1lcmdlZCBmcm9tIHRoZSBwcm9qZWN0ZWRcbiAqIE9ic2VydmFibGVzIGFzIHRoZXkgd2VyZSBzdWJzY3JpYmVkIHRvLCBvbmUgYXQgYSB0aW1lLiBPcHRpb25hbGx5LCB0aGVzZVxuICogdmFsdWVzIG1heSBoYXZlIGJlZW4gcHJvamVjdGVkIGZyb20gYSBwYXNzZWQgYHByb2plY3RSZXN1bHRgIGFyZ3VtZW50LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gKiBwcm9qZWN0aW9uIGZ1bmN0aW9uIChhbmQgdGhlIG9wdGlvbmFsIGByZXN1bHRTZWxlY3RvcmApIHRvIGVhY2ggaXRlbSBlbWl0dGVkXG4gKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIHRha2luZyB2YWx1ZXMgZnJvbSBlYWNoIHByb2plY3RlZCBpbm5lclxuICogT2JzZXJ2YWJsZSBzZXF1ZW50aWFsbHkuXG4gKiBAbWV0aG9kIGNvbmNhdE1hcFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gY29uY2F0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgbWVyZ2VNYXBfMS5NZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCAxKSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcCA9IGNvbmNhdE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2NvbmNhdE1hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG4vKipcbiAqIFByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIGFuIE9ic2VydmFibGUgd2hpY2ggaXMgbWVyZ2VkIGluIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPk1hcHMgZWFjaCB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlLCB0aGVuIGZsYXR0ZW5zIGFsbCBvZlxuICogdGhlc2UgaW5uZXIgT2JzZXJ2YWJsZXMgdXNpbmcge0BsaW5rIG1lcmdlQWxsfS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9tZXJnZU1hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBiYXNlZCBvbiBhcHBseWluZyBhIGZ1bmN0aW9uIHRoYXQgeW91XG4gKiBzdXBwbHkgdG8gZWFjaCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGVyZSB0aGF0IGZ1bmN0aW9uXG4gKiByZXR1cm5zIGFuIE9ic2VydmFibGUsIGFuZCB0aGVuIG1lcmdpbmcgdGhvc2UgcmVzdWx0aW5nIE9ic2VydmFibGVzIGFuZFxuICogZW1pdHRpbmcgdGhlIHJlc3VsdHMgb2YgdGhpcyBtZXJnZXIuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+TWFwIGFuZCBmbGF0dGVuIGVhY2ggbGV0dGVyIHRvIGFuIE9ic2VydmFibGUgdGlja2luZyBldmVyeSAxIHNlY29uZDwvY2FwdGlvbj5cbiAqIHZhciBsZXR0ZXJzID0gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKTtcbiAqIHZhciByZXN1bHQgPSBsZXR0ZXJzLm1lcmdlTWFwKHggPT5cbiAqICAgUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS5tYXAoaSA9PiB4K2kpXG4gKiApO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG4gKiBAc2VlIHtAbGluayBleGhhdXN0TWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2V9XG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwVG99XG4gKiBAc2VlIHtAbGluayBtZXJnZVNjYW59XG4gKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgP2luZGV4OiBudW1iZXIpOiBPYnNlcnZhYmxlfSBwcm9qZWN0IEEgZnVuY3Rpb25cbiAqIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXR1cm5zIGFuXG4gKiBPYnNlcnZhYmxlLlxuICogQHBhcmFtIHtmdW5jdGlvbihvdXRlclZhbHVlOiBULCBpbm5lclZhbHVlOiBJLCBvdXRlckluZGV4OiBudW1iZXIsIGlubmVySW5kZXg6IG51bWJlcik6IGFueX0gW3Jlc3VsdFNlbGVjdG9yXVxuICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuICogYW5kIHRoZSBpbmRpY2VzIG9mIHRoZSBzb3VyY2UgKG91dGVyKSBlbWlzc2lvbiBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVcbiAqIGVtaXNzaW9uLiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uIGFyZTpcbiAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIC0gYG91dGVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG4gKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbY29uY3VycmVudD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldIE1heGltdW0gbnVtYmVyIG9mIGlucHV0XG4gKiBPYnNlcnZhYmxlcyBiZWluZyBzdWJzY3JpYmVkIHRvIGNvbmN1cnJlbnRseS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZVxuICogcHJvamVjdGlvbiBmdW5jdGlvbiAoYW5kIHRoZSBvcHRpb25hbCBgcmVzdWx0U2VsZWN0b3JgKSB0byBlYWNoIGl0ZW0gZW1pdHRlZFxuICogYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBtZXJnaW5nIHRoZSByZXN1bHRzIG9mIHRoZSBPYnNlcnZhYmxlcyBvYnRhaW5lZFxuICogZnJvbSB0aGlzIHRyYW5zZm9ybWF0aW9uLlxuICogQG1ldGhvZCBtZXJnZU1hcFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7IH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgTWVyZ2VNYXBPcGVyYXRvcihwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkpO1xufVxuZXhwb3J0cy5tZXJnZU1hcCA9IG1lcmdlTWFwO1xudmFyIE1lcmdlTWFwT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwT3BlcmF0b3IocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICB9XG4gICAgTWVyZ2VNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTWVyZ2VNYXBTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByb2plY3QsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NZXJnZU1hcE9wZXJhdG9yID0gTWVyZ2VNYXBPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWVyZ2VNYXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVyZ2VNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAoaXNoLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBpc2gsIHZhbHVlLCBpbmRleCkpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeVJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9ub3RpZnlSZXN1bHRTZWxlY3RvciA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnRzLk1lcmdlTWFwU3Vic2NyaWJlciA9IE1lcmdlTWFwU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbWVyZ2VNYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBjb25jYXRNYXBUb18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY29uY2F0TWFwVG8nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5jb25jYXRNYXBUbyA9IGNvbmNhdE1hcFRvXzEuY29uY2F0TWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXBUby5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9jb25jYXRNYXBUby5qc1xuICoqIG1vZHVsZSBpZCA9IDEzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWVyZ2VNYXBUb18xID0gcmVxdWlyZSgnLi9tZXJnZU1hcFRvJyk7XG4vKipcbiAqIFByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIHRoZSBzYW1lIE9ic2VydmFibGUgd2hpY2ggaXMgbWVyZ2VkIG11bHRpcGxlXG4gKiB0aW1lcyBpbiBhIHNlcmlhbGl6ZWQgZmFzaGlvbiBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgY29uY2F0TWFwfSwgYnV0IG1hcHMgZWFjaCB2YWx1ZVxuICogYWx3YXlzIHRvIHRoZSBzYW1lIGlubmVyIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvY29uY2F0TWFwVG8ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogTWFwcyBlYWNoIHNvdXJjZSB2YWx1ZSB0byB0aGUgZ2l2ZW4gT2JzZXJ2YWJsZSBgaW5uZXJPYnNlcnZhYmxlYCByZWdhcmRsZXNzXG4gKiBvZiB0aGUgc291cmNlIHZhbHVlLCBhbmQgdGhlbiBmbGF0dGVucyB0aG9zZSByZXN1bHRpbmcgT2JzZXJ2YWJsZXMgaW50byBvbmVcbiAqIHNpbmdsZSBPYnNlcnZhYmxlLCB3aGljaCBpcyB0aGUgb3V0cHV0IE9ic2VydmFibGUuIEVhY2ggbmV3IGBpbm5lck9ic2VydmFibGVgXG4gKiBpbnN0YW5jZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBjb25jYXRlbmF0ZWQgd2l0aCB0aGUgcHJldmlvdXNcbiAqIGBpbm5lck9ic2VydmFibGVgIGluc3RhbmNlLlxuICpcbiAqIF9fV2FybmluZzpfXyBpZiBzb3VyY2UgdmFsdWVzIGFycml2ZSBlbmRsZXNzbHkgYW5kIGZhc3RlciB0aGFuIHRoZWlyXG4gKiBjb3JyZXNwb25kaW5nIGlubmVyIE9ic2VydmFibGVzIGNhbiBjb21wbGV0ZSwgaXQgd2lsbCByZXN1bHQgaW4gbWVtb3J5IGlzc3Vlc1xuICogYXMgaW5uZXIgT2JzZXJ2YWJsZXMgYW1hc3MgaW4gYW4gdW5ib3VuZGVkIGJ1ZmZlciB3YWl0aW5nIGZvciB0aGVpciB0dXJuIHRvXG4gKiBiZSBzdWJzY3JpYmVkIHRvLlxuICpcbiAqIE5vdGU6IGBjb25jYXRNYXBUb2AgaXMgZXF1aXZhbGVudCB0byBgbWVyZ2VNYXBUb2Agd2l0aCBjb25jdXJyZW5jeSBwYXJhbWV0ZXJcbiAqIHNldCB0byBgMWAuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Rm9yIGVhY2ggY2xpY2sgZXZlbnQsIHRpY2sgZXZlcnkgc2Vjb25kIGZyb20gMCB0byAzLCB3aXRoIG5vIGNvbmN1cnJlbmN5PC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3MuY29uY2F0TWFwVG8oUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDQpKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgY29uY2F0fVxuICogQHNlZSB7QGxpbmsgY29uY2F0QWxsfVxuICogQHNlZSB7QGxpbmsgY29uY2F0TWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cbiAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcFRvfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5uZXJPYnNlcnZhYmxlIEFuIE9ic2VydmFibGUgdG8gcmVwbGFjZSBlYWNoIHZhbHVlIGZyb21cbiAqIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cbiAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcbiAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIChvdXRlcikgZW1pc3Npb24gYW5kIHRoZSBpbm5lciBPYnNlcnZhYmxlXG4gKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG4gKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIG9mIHZhbHVlcyBtZXJnZWQgdG9nZXRoZXIgYnkgam9pbmluZyB0aGVcbiAqIHBhc3NlZCBvYnNlcnZhYmxlIHdpdGggaXRzZWxmLCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkXG4gKiBmcm9tIHRoZSBzb3VyY2UuXG4gKiBAbWV0aG9kIGNvbmNhdE1hcFRvXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBjb25jYXRNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgbWVyZ2VNYXBUb18xLk1lcmdlTWFwVG9PcGVyYXRvcihpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yLCAxKSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcFRvID0gY29uY2F0TWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXBUby5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2NvbmNhdE1hcFRvLmpzXG4gKiogbW9kdWxlIGlkID0gMTM3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gdGhlIHNhbWUgT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgbXVsdGlwbGVcbiAqIHRpbWVzIGluIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBtZXJnZU1hcH0sIGJ1dCBtYXBzIGVhY2ggdmFsdWUgYWx3YXlzXG4gKiB0byB0aGUgc2FtZSBpbm5lciBPYnNlcnZhYmxlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlTWFwVG8ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogTWFwcyBlYWNoIHNvdXJjZSB2YWx1ZSB0byB0aGUgZ2l2ZW4gT2JzZXJ2YWJsZSBgaW5uZXJPYnNlcnZhYmxlYCByZWdhcmRsZXNzXG4gKiBvZiB0aGUgc291cmNlIHZhbHVlLCBhbmQgdGhlbiBtZXJnZXMgdGhvc2UgcmVzdWx0aW5nIE9ic2VydmFibGVzIGludG8gb25lXG4gKiBzaW5nbGUgT2JzZXJ2YWJsZSwgd2hpY2ggaXMgdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkZvciBlYWNoIGNsaWNrIGV2ZW50LCBzdGFydCBhbiBpbnRlcnZhbCBPYnNlcnZhYmxlIHRpY2tpbmcgZXZlcnkgMSBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5tZXJnZU1hcFRvKFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cbiAqIEBzZWUge0BsaW5rIG1lcmdlfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VBbGx9XG4gKiBAc2VlIHtAbGluayBtZXJnZU1hcH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcFRvfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gaW5uZXJPYnNlcnZhYmxlIEFuIE9ic2VydmFibGUgdG8gcmVwbGFjZSBlYWNoIHZhbHVlIGZyb21cbiAqIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cbiAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcbiAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIChvdXRlcikgZW1pc3Npb24gYW5kIHRoZSBpbm5lciBPYnNlcnZhYmxlXG4gKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG4gKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSBNYXhpbXVtIG51bWJlciBvZiBpbnB1dFxuICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgZnJvbSB0aGUgZ2l2ZW5cbiAqIGBpbm5lck9ic2VydmFibGVgIChhbmQgb3B0aW9uYWxseSB0cmFuc2Zvcm1lZCB0aHJvdWdoIGByZXN1bHRTZWxlY3RvcmApIGV2ZXJ5XG4gKiB0aW1lIGEgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIG1lcmdlTWFwVG9cbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNZXJnZU1hcFRvT3BlcmF0b3IoaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkpO1xufVxuZXhwb3J0cy5tZXJnZU1hcFRvID0gbWVyZ2VNYXBUbztcbi8vIFRPRE86IEZpZ3VyZSBvdXQgY29ycmVjdCBzaWduYXR1cmUgaGVyZTogYW4gT3BlcmF0b3I8T2JzZXJ2YWJsZTxUPiwgUj5cbi8vICAgICAgIG5lZWRzIHRvIGltcGxlbWVudCBjYWxsKG9ic2VydmVyOiBTdWJzY3JpYmVyPFI+KTogU3Vic2NyaWJlcjxPYnNlcnZhYmxlPFQ+PlxudmFyIE1lcmdlTWFwVG9PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVyZ2VNYXBUb09wZXJhdG9yKGlzaCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIHRoaXMuaXNoID0gaXNoO1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgfVxuICAgIE1lcmdlTWFwVG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTWVyZ2VNYXBUb1N1YnNjcmliZXIob2JzZXJ2ZXIsIHRoaXMuaXNoLCB0aGlzLnJlc3VsdFNlbGVjdG9yLCB0aGlzLmNvbmN1cnJlbnQpKTtcbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcFRvT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NZXJnZU1hcFRvT3BlcmF0b3IgPSBNZXJnZU1hcFRvT3BlcmF0b3I7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIE1lcmdlTWFwVG9TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVyZ2VNYXBUb1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVyZ2VNYXBUb1N1YnNjcmliZXIoZGVzdGluYXRpb24sIGlzaCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5pc2ggPSBpc2g7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB9XG4gICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gdGhpcy5yZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgICAgIHZhciBpc2ggPSB0aGlzLmlzaDtcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICAgICAgdGhpcy5faW5uZXJTdWIoaXNoLCBkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChpc2gsIGRlc3RpbmF0aW9uLCByZXN1bHRTZWxlY3RvciwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgaXNoLCB2YWx1ZSwgaW5kZXgpKTtcbiAgICB9O1xuICAgIE1lcmdlTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZXN1bHRTZWxlY3RvciA9IF9hLnJlc3VsdFNlbGVjdG9yLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5U2VsZWN0UmVzdWx0KG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLnRyeVNlbGVjdFJlc3VsdCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJlc3VsdFNlbGVjdG9yID0gX2EucmVzdWx0U2VsZWN0b3IsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHRTZWxlY3RvcihvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIE1lcmdlTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcFRvU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnRzLk1lcmdlTWFwVG9TdWJzY3JpYmVyID0gTWVyZ2VNYXBUb1N1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcFRvLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbWVyZ2VNYXBUby5qc1xuICoqIG1vZHVsZSBpZCA9IDEzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGNvdW50XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9jb3VudCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmNvdW50ID0gY291bnRfMS5jb3VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvdW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogQ291bnRzIHRoZSBudW1iZXIgb2YgZW1pc3Npb25zIG9uIHRoZSBzb3VyY2UgYW5kIGVtaXRzIHRoYXQgbnVtYmVyIHdoZW4gdGhlXG4gKiBzb3VyY2UgY29tcGxldGVzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5UZWxscyBob3cgbWFueSB2YWx1ZXMgd2VyZSBlbWl0dGVkLCB3aGVuIHRoZSBzb3VyY2VcbiAqIGNvbXBsZXRlcy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9jb3VudC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgY291bnRgIHRyYW5zZm9ybXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHZhbHVlcyBpbnRvIGFuIE9ic2VydmFibGUgdGhhdFxuICogZW1pdHMgYSBzaW5nbGUgdmFsdWUgdGhhdCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2YgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlXG4gKiBzb3VyY2UgT2JzZXJ2YWJsZS4gSWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRlcm1pbmF0ZXMgd2l0aCBhbiBlcnJvciwgYGNvdW50YFxuICogd2lsbCBwYXNzIHRoaXMgZXJyb3Igbm90aWZpY2F0aW9uIGFsb25nIHdpdGhvdXQgZW1pdHRpbmcgYW4gdmFsdWUgZmlyc3QuIElmXG4gKiB0aGUgc291cmNlIE9ic2VydmFibGUgZG9lcyBub3QgdGVybWluYXRlIGF0IGFsbCwgYGNvdW50YCB3aWxsIG5laXRoZXIgZW1pdFxuICogYSB2YWx1ZSBub3IgdGVybWluYXRlLiBUaGlzIG9wZXJhdG9yIHRha2VzIGFuIG9wdGlvbmFsIGBwcmVkaWNhdGVgIGZ1bmN0aW9uXG4gKiBhcyBhcmd1bWVudCwgaW4gd2hpY2ggY2FzZSB0aGUgb3V0cHV0IGVtaXNzaW9uIHdpbGwgcmVwcmVzZW50IHRoZSBudW1iZXIgb2ZcbiAqIHNvdXJjZSB2YWx1ZXMgdGhhdCBtYXRjaGVkIGB0cnVlYCB3aXRoIHRoZSBgcHJlZGljYXRlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db3VudHMgaG93IG1hbnkgc2Vjb25kcyBoYXZlIHBhc3NlZCBiZWZvcmUgdGhlIGZpcnN0IGNsaWNrIGhhcHBlbmVkPC9jYXB0aW9uPlxuICogdmFyIHNlY29uZHMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBzZWNvbmRzQmVmb3JlQ2xpY2sgPSBzZWNvbmRzLnRha2VVbnRpbChjbGlja3MpO1xuICogdmFyIHJlc3VsdCA9IHNlY29uZHNCZWZvcmVDbGljay5jb3VudCgpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db3VudHMgaG93IG1hbnkgb2RkIG51bWJlcnMgYXJlIHRoZXJlIGJldHdlZW4gMSBhbmQgNzwvY2FwdGlvbj5cbiAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCA3KTtcbiAqIHZhciByZXN1bHQgPSBudW1iZXJzLmNvdW50KGkgPT4gaSAlIDIgPT09IDEpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBtYXh9XG4gKiBAc2VlIHtAbGluayBtaW59XG4gKiBAc2VlIHtAbGluayByZWR1Y2V9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaTogbnVtYmVyLCBzb3VyY2U6IE9ic2VydmFibGU8VD4pOiBib29sZWFufSBbcHJlZGljYXRlXSBBXG4gKiBib29sZWFuIGZ1bmN0aW9uIHRvIHNlbGVjdCB3aGF0IHZhbHVlcyBhcmUgdG8gYmUgY291bnRlZC4gSXQgaXMgcHJvdmlkZWQgd2l0aFxuICogYXJndW1lbnRzIG9mOlxuICogLSBgdmFsdWVgOiB0aGUgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiAtIGBpbmRleGA6IHRoZSAoemVyby1iYXNlZCkgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIC0gYHNvdXJjZWA6IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIG9uZSBudW1iZXIgdGhhdCByZXByZXNlbnRzIHRoZSBjb3VudCBhc1xuICogZGVzY3JpYmVkIGFib3ZlLlxuICogQG1ldGhvZCBjb3VudFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gY291bnQocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgQ291bnRPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXMpKTtcbn1cbmV4cG9ydHMuY291bnQgPSBjb3VudDtcbnZhciBDb3VudE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb3VudE9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIENvdW50U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgfVxuICAgIENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlQcmVkaWNhdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlKHZhbHVlLCB0aGlzLmluZGV4KyssIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuY291bnQpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9jb3VudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGRlbWF0ZXJpYWxpemVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2RlbWF0ZXJpYWxpemUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kZW1hdGVyaWFsaXplID0gZGVtYXRlcmlhbGl6ZV8xLmRlbWF0ZXJpYWxpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZW1hdGVyaWFsaXplLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbWF0ZXJpYWxpemUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCB0cmFuc2Zvcm1zIE5vdGlmaWNhdGlvbiBvYmplY3RzIGludG8gdGhlIGl0ZW1zIG9yIG5vdGlmaWNhdGlvbnMgdGhleSByZXByZXNlbnQuXG4gKlxuICogQHNlZSB7QGxpbmsgTm90aWZpY2F0aW9ufVxuICpcbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBhbmQgbm90aWZpY2F0aW9ucyBlbWJlZGRlZCBpbiBOb3RpZmljYXRpb24gb2JqZWN0cyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgZGVtYXRlcmlhbGl6ZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZGVtYXRlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLmRlbWF0ZXJpYWxpemUgPSBkZW1hdGVyaWFsaXplO1xudmFyIERlTWF0ZXJpYWxpemVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBEZU1hdGVyaWFsaXplT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlTWF0ZXJpYWxpemVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICBEZU1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUub2JzZXJ2ZSh0aGlzLmRlc3RpbmF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBEZU1hdGVyaWFsaXplU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZW1hdGVyaWFsaXplLmpzXG4gKiogbW9kdWxlIGlkID0gMTQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZGVib3VuY2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2RlYm91bmNlJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVib3VuY2UgPSBkZWJvdW5jZV8xLmRlYm91bmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvZGVib3VuY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBFbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIG9ubHkgYWZ0ZXIgYSBwYXJ0aWN1bGFyIHRpbWUgc3BhblxuICogZGV0ZXJtaW5lZCBieSBhbm90aGVyIE9ic2VydmFibGUgaGFzIHBhc3NlZCB3aXRob3V0IGFub3RoZXIgc291cmNlIGVtaXNzaW9uLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGRlYm91bmNlVGltZX0sIGJ1dCB0aGUgdGltZSBzcGFuIG9mXG4gKiBlbWlzc2lvbiBzaWxlbmNlIGlzIGRldGVybWluZWQgYnkgYSBzZWNvbmQgT2JzZXJ2YWJsZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9kZWJvdW5jZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgZGVib3VuY2VgIGRlbGF5cyB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIGJ1dCBkcm9wcyBwcmV2aW91c1xuICogcGVuZGluZyBkZWxheWVkIGVtaXNzaW9ucyBpZiBhIG5ldyB2YWx1ZSBhcnJpdmVzIG9uIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIFRoaXMgb3BlcmF0b3Iga2VlcHMgdHJhY2sgb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSwgYW5kIHNwYXducyBhIGR1cmF0aW9uIE9ic2VydmFibGUgYnkgY2FsbGluZyB0aGVcbiAqIGBkdXJhdGlvblNlbGVjdG9yYCBmdW5jdGlvbi4gVGhlIHZhbHVlIGlzIGVtaXR0ZWQgb25seSB3aGVuIHRoZSBkdXJhdGlvblxuICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcywgYW5kIGlmIG5vIG90aGVyIHZhbHVlIHdhcyBlbWl0dGVkIG9uXG4gKiB0aGUgc291cmNlIE9ic2VydmFibGUgc2luY2UgdGhlIGR1cmF0aW9uIE9ic2VydmFibGUgd2FzIHNwYXduZWQuIElmIGEgbmV3XG4gKiB2YWx1ZSBhcHBlYXJzIGJlZm9yZSB0aGUgZHVyYXRpb24gT2JzZXJ2YWJsZSBlbWl0cywgdGhlIHByZXZpb3VzIHZhbHVlIHdpbGxcbiAqIGJlIGRyb3BwZWQgYW5kIHdpbGwgbm90IGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIExpa2Uge0BsaW5rIGRlYm91bmNlVGltZX0sIHRoaXMgaXMgYSByYXRlLWxpbWl0aW5nIG9wZXJhdG9yLCBhbmQgYWxzbyBhXG4gKiBkZWxheS1saWtlIG9wZXJhdG9yIHNpbmNlIG91dHB1dCBlbWlzc2lvbnMgZG8gbm90IG5lY2Vzc2FyaWx5IG9jY3VyIGF0IHRoZVxuICogc2FtZSB0aW1lIGFzIHRoZXkgZGlkIG9uIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBtb3N0IHJlY2VudCBjbGljayBhZnRlciBhIGJ1cnN0IG9mIGNsaWNrczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcmVzdWx0ID0gY2xpY2tzLmRlYm91bmNlKCgpID0+IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBhdWRpdH1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlVGltZX1cbiAqIEBzZWUge0BsaW5rIGRlbGF5V2hlbn1cbiAqIEBzZWUge0BsaW5rIHRocm90dGxlfVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQpOiBPYnNlcnZhYmxlfFByb21pc2V9IGR1cmF0aW9uU2VsZWN0b3IgQSBmdW5jdGlvblxuICogdGhhdCByZWNlaXZlcyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBmb3IgY29tcHV0aW5nIHRoZSB0aW1lb3V0XG4gKiBkdXJhdGlvbiBmb3IgZWFjaCBzb3VyY2UgdmFsdWUsIHJldHVybmVkIGFzIGFuIE9ic2VydmFibGUgb3IgYSBQcm9taXNlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGRlbGF5cyB0aGUgZW1pc3Npb25zIG9mIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgYnkgdGhlIHNwZWNpZmllZCBkdXJhdGlvbiBPYnNlcnZhYmxlIHJldHVybmVkIGJ5XG4gKiBgZHVyYXRpb25TZWxlY3RvcmAsIGFuZCBtYXkgZHJvcCBzb21lIHZhbHVlcyBpZiB0aGV5IG9jY3VyIHRvbyBmcmVxdWVudGx5LlxuICogQG1ldGhvZCBkZWJvdW5jZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xufVxuZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlO1xudmFyIERlYm91bmNlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBEZWJvdW5jZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IERlYm91bmNlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRGVib3VuY2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVib3VuY2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlYm91bmNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmR1cmF0aW9uU2VsZWN0b3IuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5TmV4dCh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZHVyYXRpb24pO1xuICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZWJvdW5jZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGRlYm91bmNlVGltZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZGVib3VuY2VUaW1lJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVib3VuY2VUaW1lID0gZGVib3VuY2VUaW1lXzEuZGVib3VuY2VUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlYm91bmNlVGltZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4uL3NjaGVkdWxlci9hc3luYycpO1xuLyoqXG4gKiBFbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIG9ubHkgYWZ0ZXIgYSBwYXJ0aWN1bGFyIHRpbWUgc3BhblxuICogaGFzIHBhc3NlZCB3aXRob3V0IGFub3RoZXIgc291cmNlIGVtaXNzaW9uLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGRlbGF5fSwgYnV0IHBhc3NlcyBvbmx5IHRoZSBtb3N0XG4gKiByZWNlbnQgdmFsdWUgZnJvbSBlYWNoIGJ1cnN0IG9mIGVtaXNzaW9ucy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9kZWJvdW5jZVRpbWUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYGRlYm91bmNlVGltZWAgZGVsYXlzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IGRyb3BzXG4gKiBwcmV2aW91cyBwZW5kaW5nIGRlbGF5ZWQgZW1pc3Npb25zIGlmIGEgbmV3IHZhbHVlIGFycml2ZXMgb24gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gVGhpcyBvcGVyYXRvciBrZWVwcyB0cmFjayBvZiB0aGUgbW9zdCByZWNlbnQgdmFsdWUgZnJvbSB0aGVcbiAqIHNvdXJjZSBPYnNlcnZhYmxlLCBhbmQgZW1pdHMgdGhhdCBvbmx5IHdoZW4gYGR1ZVRpbWVgIGVub3VnaCB0aW1lIGhhcyBwYXNzZWRcbiAqIHdpdGhvdXQgYW55IG90aGVyIHZhbHVlIGFwcGVhcmluZyBvbiB0aGUgc291cmNlIE9ic2VydmFibGUuIElmIGEgbmV3IHZhbHVlXG4gKiBhcHBlYXJzIGJlZm9yZSBgZHVlVGltZWAgc2lsZW5jZSBvY2N1cnMsIHRoZSBwcmV2aW91cyB2YWx1ZSB3aWxsIGJlIGRyb3BwZWRcbiAqIGFuZCB3aWxsIG5vdCBiZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiBUaGlzIGlzIGEgcmF0ZS1saW1pdGluZyBvcGVyYXRvciwgYmVjYXVzZSBpdCBpcyBpbXBvc3NpYmxlIGZvciBtb3JlIHRoYW4gb25lXG4gKiB2YWx1ZSB0byBiZSBlbWl0dGVkIGluIGFueSB0aW1lIHdpbmRvdyBvZiBkdXJhdGlvbiBgZHVlVGltZWAsIGJ1dCBpdCBpcyBhbHNvXG4gKiBhIGRlbGF5LWxpa2Ugb3BlcmF0b3Igc2luY2Ugb3V0cHV0IGVtaXNzaW9ucyBkbyBub3Qgb2NjdXIgYXQgdGhlIHNhbWUgdGltZSBhc1xuICogdGhleSBkaWQgb24gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBPcHRpb25hbGx5IHRha2VzIGEge0BsaW5rIFNjaGVkdWxlcn0gZm9yXG4gKiBtYW5hZ2luZyB0aW1lcnMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCB0aGUgbW9zdCByZWNlbnQgY2xpY2sgYWZ0ZXIgYSBidXJzdCBvZiBjbGlja3M8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5kZWJvdW5jZVRpbWUoMTAwMCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGF1ZGl0VGltZX1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuICogQHNlZSB7QGxpbmsgZGVsYXl9XG4gKiBAc2VlIHtAbGluayBzYW1wbGVUaW1lfVxuICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdWVUaW1lIFRoZSB0aW1lb3V0IGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcyAob3IgdGhlIHRpbWVcbiAqIHVuaXQgZGV0ZXJtaW5lZCBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYCkgZm9yIHRoZSB3aW5kb3cgb2ZcbiAqIHRpbWUgcmVxdWlyZWQgdG8gd2FpdCBmb3IgZW1pc3Npb24gc2lsZW5jZSBiZWZvcmUgZW1pdHRpbmcgdGhlIG1vc3QgcmVjZW50XG4gKiBzb3VyY2UgdmFsdWUuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1hc3luY10gVGhlIHtAbGluayBTY2hlZHVsZXJ9IHRvIHVzZSBmb3JcbiAqIG1hbmFnaW5nIHRoZSB0aW1lcnMgdGhhdCBoYW5kbGUgdGhlIHRpbWVvdXQgZm9yIGVhY2ggdmFsdWUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZGVsYXlzIHRoZSBlbWlzc2lvbnMgb2YgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSBieSB0aGUgc3BlY2lmaWVkIGBkdWVUaW1lYCwgYW5kIG1heSBkcm9wIHNvbWUgdmFsdWVzIGlmIHRoZXkgb2NjdXJcbiAqIHRvbyBmcmVxdWVudGx5LlxuICogQG1ldGhvZCBkZWJvdW5jZVRpbWVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IERlYm91bmNlVGltZU9wZXJhdG9yKGR1ZVRpbWUsIHNjaGVkdWxlcikpO1xufVxuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWU7XG52YXIgRGVib3VuY2VUaW1lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYm91bmNlVGltZU9wZXJhdG9yKGR1ZVRpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRGVib3VuY2VUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVib3VuY2VUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1ZVRpbWUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VUaW1lT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVib3VuY2VUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG4gICAgICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkZCh0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdWVUaW1lLCB0aGlzKSk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkTmV4dCgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5kZWJvdW5jZWROZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyRGVib3VuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZWJvdW5jZWRTdWJzY3JpcHRpb24gPSB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGRlYm91bmNlZFN1YnNjcmlwdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZGVib3VuY2VkU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGRlYm91bmNlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChzdWJzY3JpYmVyKSB7XG4gICAgc3Vic2NyaWJlci5kZWJvdW5jZWROZXh0KCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZWJvdW5jZVRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBkZWZhdWx0SWZFbXB0eV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZGVmYXVsdElmRW1wdHknKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kZWZhdWx0SWZFbXB0eSA9IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0SWZFbXB0eS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9kZWZhdWx0SWZFbXB0eS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIEVtaXRzIGEgZ2l2ZW4gdmFsdWUgaWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGNvbXBsZXRlcyB3aXRob3V0IGVtaXR0aW5nIGFueVxuICogYG5leHRgIHZhbHVlLCBvdGhlcndpc2UgbWlycm9ycyB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPklmIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0dXJucyBvdXQgdG8gYmUgZW1wdHksIHRoZW5cbiAqIHRoaXMgb3BlcmF0b3Igd2lsbCBlbWl0IGEgZGVmYXVsdCB2YWx1ZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9kZWZhdWx0SWZFbXB0eS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgZGVmYXVsdElmRW1wdHlgIGVtaXRzIHRoZSB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgb3IgYVxuICogc3BlY2lmaWVkIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGlzIGVtcHR5IChjb21wbGV0ZXMgd2l0aG91dFxuICogaGF2aW5nIGVtaXR0ZWQgYW55IGBuZXh0YCB2YWx1ZSkuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+SWYgbm8gY2xpY2tzIGhhcHBlbiBpbiA1IHNlY29uZHMsIHRoZW4gZW1pdCBcIm5vIGNsaWNrc1wiPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBjbGlja3NCZWZvcmVGaXZlID0gY2xpY2tzLnRha2VVbnRpbChSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMDApKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3NCZWZvcmVGaXZlLmRlZmF1bHRJZkVtcHR5KCdubyBjbGlja3MnKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZW1wdHl9XG4gKiBAc2VlIHtAbGluayBsYXN0fVxuICpcbiAqIEBwYXJhbSB7YW55fSBbZGVmYXVsdFZhbHVlPW51bGxdIFRoZSBkZWZhdWx0IHZhbHVlIHVzZWQgaWYgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSBpcyBlbXB0eS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBlaXRoZXIgdGhlIHNwZWNpZmllZFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGVtaXRzIG5vIGl0ZW1zLCBvciB0aGUgdmFsdWVzIGVtaXR0ZWRcbiAqIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgZGVmYXVsdElmRW1wdHlcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHZvaWQgMCkgeyBkZWZhdWx0VmFsdWUgPSBudWxsOyB9XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRGVmYXVsdElmRW1wdHlPcGVyYXRvcihkZWZhdWx0VmFsdWUpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdElmRW1wdHkgPSBkZWZhdWx0SWZFbXB0eTtcbnZhciBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgRGVmYXVsdElmRW1wdHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kZWZhdWx0VmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IHRydWU7XG4gICAgfVxuICAgIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdElmRW1wdHkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZWZhdWx0SWZFbXB0eS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGRlbGF5XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9kZWxheScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmRlbGF5ID0gZGVsYXlfMS5kZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbGF5LmpzXG4gKiogbW9kdWxlIGlkID0gMTQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuLi9zY2hlZHVsZXIvYXN5bmMnKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNEYXRlJyk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIE5vdGlmaWNhdGlvbl8xID0gcmVxdWlyZSgnLi4vTm90aWZpY2F0aW9uJyk7XG4vKipcbiAqIERlbGF5cyB0aGUgZW1pc3Npb24gb2YgaXRlbXMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgYSBnaXZlbiB0aW1lb3V0IG9yXG4gKiB1bnRpbCBhIGdpdmVuIERhdGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlRpbWUgc2hpZnRzIGVhY2ggaXRlbSBieSBzb21lIHNwZWNpZmllZCBhbW91bnQgb2ZcbiAqIG1pbGxpc2Vjb25kcy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9kZWxheS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBJZiB0aGUgZGVsYXkgYXJndW1lbnQgaXMgYSBOdW1iZXIsIHRoaXMgb3BlcmF0b3IgdGltZSBzaGlmdHMgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSBieSB0aGF0IGFtb3VudCBvZiB0aW1lIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMuIFRoZSByZWxhdGl2ZVxuICogdGltZSBpbnRlcnZhbHMgYmV0d2VlbiB0aGUgdmFsdWVzIGFyZSBwcmVzZXJ2ZWQuXG4gKlxuICogSWYgdGhlIGRlbGF5IGFyZ3VtZW50IGlzIGEgRGF0ZSwgdGhpcyBvcGVyYXRvciB0aW1lIHNoaWZ0cyB0aGUgc3RhcnQgb2YgdGhlXG4gKiBPYnNlcnZhYmxlIGV4ZWN1dGlvbiB1bnRpbCB0aGUgZ2l2ZW4gZGF0ZSBvY2N1cnMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RGVsYXkgZWFjaCBjbGljayBieSBvbmUgc2Vjb25kPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBkZWxheWVkQ2xpY2tzID0gY2xpY2tzLmRlbGF5KDEwMDApOyAvLyBlYWNoIGNsaWNrIGVtaXR0ZWQgYWZ0ZXIgMSBzZWNvbmRcbiAqIGRlbGF5ZWRDbGlja3Muc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkRlbGF5IGFsbCBjbGlja3MgdW50aWwgYSBmdXR1cmUgZGF0ZSBoYXBwZW5zPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBkYXRlID0gbmV3IERhdGUoJ01hcmNoIDE1LCAyMDUwIDEyOjAwOjAwJyk7IC8vIGluIHRoZSBmdXR1cmVcbiAqIHZhciBkZWxheWVkQ2xpY2tzID0gY2xpY2tzLmRlbGF5KGRhdGUpOyAvLyBjbGljayBlbWl0dGVkIG9ubHkgYWZ0ZXIgdGhhdCBkYXRlXG4gKiBkZWxheWVkQ2xpY2tzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBkZWJvdW5jZVRpbWV9XG4gKiBAc2VlIHtAbGluayBkZWxheVdoZW59XG4gKlxuICogQHBhcmFtIHtudW1iZXJ8RGF0ZX0gZGVsYXkgVGhlIGRlbGF5IGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcyAoYSBgbnVtYmVyYCkgb3JcbiAqIGEgYERhdGVgIHVudGlsIHdoaWNoIHRoZSBlbWlzc2lvbiBvZiB0aGUgc291cmNlIGl0ZW1zIGlzIGRlbGF5ZWQuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1hc3luY10gVGhlIFNjaGVkdWxlciB0byB1c2UgZm9yXG4gKiBtYW5hZ2luZyB0aGUgdGltZXJzIHRoYXQgaGFuZGxlIHRoZSB0aW1lLXNoaWZ0IGZvciBlYWNoIGl0ZW0uXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZGVsYXlzIHRoZSBlbWlzc2lvbnMgb2YgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSBieSB0aGUgc3BlY2lmaWVkIHRpbWVvdXQgb3IgRGF0ZS5cbiAqIEBtZXRob2QgZGVsYXlcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGRlbGF5KGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHZhciBhYnNvbHV0ZURlbGF5ID0gaXNEYXRlXzEuaXNEYXRlKGRlbGF5KTtcbiAgICB2YXIgZGVsYXlGb3IgPSBhYnNvbHV0ZURlbGF5ID8gKCtkZWxheSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkZWxheSk7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRGVsYXlPcGVyYXRvcihkZWxheUZvciwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLmRlbGF5ID0gZGVsYXk7XG52YXIgRGVsYXlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlPcGVyYXRvcihkZWxheSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVsYXlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVsYXksIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIERlbGF5U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlbGF5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBEZWxheVN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN0YXRlLnNvdXJjZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gc291cmNlLnF1ZXVlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gc3RhdGUuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSBzdGF0ZS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDAgJiYgKHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpIDw9IDApIHtcbiAgICAgICAgICAgIHF1ZXVlLnNoaWZ0KCkubm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlfMSA9IE1hdGgubWF4KDAsIHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgZGVsYXlfMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzb3VyY2UuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX3NjaGVkdWxlID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShEZWxheVN1YnNjcmliZXIuZGlzcGF0Y2gsIHRoaXMuZGVsYXksIHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcywgZGVzdGluYXRpb246IHRoaXMuZGVzdGluYXRpb24sIHNjaGVkdWxlcjogc2NoZWR1bGVyXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9yZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBtZXNzYWdlID0gbmV3IERlbGF5TWVzc2FnZShzY2hlZHVsZXIubm93KCkgKyB0aGlzLmRlbGF5LCBub3RpZmljYXRpb24pO1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlKHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU5vdGlmaWNhdGlvbihOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZXJyb3JlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbnZhciBEZWxheU1lc3NhZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlbGF5TWVzc2FnZSh0aW1lLCBub3RpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb24gPSBub3RpZmljYXRpb247XG4gICAgfVxuICAgIHJldHVybiBEZWxheU1lc3NhZ2U7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZWxheS5qc1xuICoqIG1vZHVsZSBpZCA9IDE1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGRlbGF5V2hlbl8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZGVsYXlXaGVuJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGVsYXlXaGVuID0gZGVsYXlXaGVuXzEuZGVsYXlXaGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXlXaGVuLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2RlbGF5V2hlbi5qc1xuICoqIG1vZHVsZSBpZCA9IDE1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogRGVsYXlzIHRoZSBlbWlzc2lvbiBvZiBpdGVtcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBieSBhIGdpdmVuIHRpbWUgc3BhblxuICogZGV0ZXJtaW5lZCBieSB0aGUgZW1pc3Npb25zIG9mIGFub3RoZXIgT2JzZXJ2YWJsZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBkZWxheX0sIGJ1dCB0aGUgdGltZSBzcGFuIG9mIHRoZVxuICogZGVsYXkgZHVyYXRpb24gaXMgZGV0ZXJtaW5lZCBieSBhIHNlY29uZCBPYnNlcnZhYmxlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2RlbGF5V2hlbi5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgZGVsYXlXaGVuYCB0aW1lIHNoaWZ0cyBlYWNoIGVtaXR0ZWQgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgYVxuICogdGltZSBzcGFuIGRldGVybWluZWQgYnkgYW5vdGhlciBPYnNlcnZhYmxlLiBXaGVuIHRoZSBzb3VyY2UgZW1pdHMgYSB2YWx1ZSxcbiAqIHRoZSBgZGVsYXlEdXJhdGlvblNlbGVjdG9yYCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgc291cmNlIHZhbHVlIGFzXG4gKiBhcmd1bWVudCwgYW5kIHNob3VsZCByZXR1cm4gYW4gT2JzZXJ2YWJsZSwgY2FsbGVkIHRoZSBcImR1cmF0aW9uXCIgT2JzZXJ2YWJsZS5cbiAqIFRoZSBzb3VyY2UgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgb25seSB3aGVuIHRoZSBkdXJhdGlvblxuICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcy5cbiAqXG4gKiBPcHRpb25hbGx5LCBgZGVsYXlXaGVuYCB0YWtlcyBhIHNlY29uZCBhcmd1bWVudCwgYHN1YnNjcmlwdGlvbkRlbGF5YCwgd2hpY2hcbiAqIGlzIGFuIE9ic2VydmFibGUuIFdoZW4gYHN1YnNjcmlwdGlvbkRlbGF5YCBlbWl0cyBpdHMgZmlyc3QgdmFsdWUgb3JcbiAqIGNvbXBsZXRlcywgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGlzIHN1YnNjcmliZWQgdG8gYW5kIHN0YXJ0cyBiZWhhdmluZyBsaWtlXG4gKiBkZXNjcmliZWQgaW4gdGhlIHByZXZpb3VzIHBhcmFncmFwaC4gSWYgYHN1YnNjcmlwdGlvbkRlbGF5YCBpcyBub3QgcHJvdmlkZWQsXG4gKiBgZGVsYXlXaGVuYCB3aWxsIHN1YnNjcmliZSB0byB0aGUgc291cmNlIE9ic2VydmFibGUgYXMgc29vbiBhcyB0aGUgb3V0cHV0XG4gKiBPYnNlcnZhYmxlIGlzIHN1YnNjcmliZWQuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RGVsYXkgZWFjaCBjbGljayBieSBhIHJhbmRvbSBhbW91bnQgb2YgdGltZSwgYmV0d2VlbiAwIGFuZCA1IHNlY29uZHM8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGRlbGF5ZWRDbGlja3MgPSBjbGlja3MuZGVsYXlXaGVuKGV2ZW50ID0+XG4gKiAgIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoTWF0aC5yYW5kb20oKSAqIDUwMDApXG4gKiApO1xuICogZGVsYXllZENsaWNrcy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZGVib3VuY2V9XG4gKiBAc2VlIHtAbGluayBkZWxheX1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUKTogT2JzZXJ2YWJsZX0gZGVsYXlEdXJhdGlvblNlbGVjdG9yIEEgZnVuY3Rpb24gdGhhdFxuICogcmV0dXJucyBhbiBPYnNlcnZhYmxlIGZvciBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGljaFxuICogaXMgdGhlbiB1c2VkIHRvIGRlbGF5IHRoZSBlbWlzc2lvbiBvZiB0aGF0IGl0ZW0gb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlXG4gKiB1bnRpbCB0aGUgT2JzZXJ2YWJsZSByZXR1cm5lZCBmcm9tIHRoaXMgZnVuY3Rpb24gZW1pdHMgYSB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gc3Vic2NyaXB0aW9uRGVsYXkgQW4gT2JzZXJ2YWJsZSB0aGF0IHRyaWdnZXJzIHRoZVxuICogc3Vic2NyaXB0aW9uIHRvIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbmNlIGl0IGVtaXRzIGFueSB2YWx1ZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBkZWxheXMgdGhlIGVtaXNzaW9ucyBvZiB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlIGJ5IGFuIGFtb3VudCBvZiB0aW1lIHNwZWNpZmllZCBieSB0aGUgT2JzZXJ2YWJsZSByZXR1cm5lZCBieVxuICogYGRlbGF5RHVyYXRpb25TZWxlY3RvcmAuXG4gKiBAbWV0aG9kIGRlbGF5V2hlblxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUodGhpcywgc3Vic2NyaXB0aW9uRGVsYXkpXG4gICAgICAgICAgICAubGlmdChuZXcgRGVsYXlXaGVuT3BlcmF0b3IoZGVsYXlEdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xufVxuZXhwb3J0cy5kZWxheVdoZW4gPSBkZWxheVdoZW47XG52YXIgRGVsYXlXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlbGF5V2hlbk9wZXJhdG9yKGRlbGF5RHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvciA9IGRlbGF5RHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgRGVsYXlXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGVsYXlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5V2hlbk9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRGVsYXlXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlbGF5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVsYXlXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVsYXlEdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQob3V0ZXJWYWx1ZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKGlubmVyU3ViKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlOb3RpZmllciA9IHRoaXMuZGVsYXlEdXJhdGlvblNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkZWxheU5vdGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlEZWxheShkZWxheU5vdGlmaWVyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUucmVtb3ZlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbklkeCA9IHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlc1tzdWJzY3JpcHRpb25JZHhdO1xuICAgICAgICAgICAgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSWR4LCAxKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnNwbGljZShzdWJzY3JpcHRpb25JZHgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnRyeURlbGF5ID0gZnVuY3Rpb24gKGRlbGF5Tm90aWZpZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhciBub3RpZmllclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZGVsYXlOb3RpZmllciwgdmFsdWUpO1xuICAgICAgICB0aGlzLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMuZGVsYXlOb3RpZmllclN1YnNjcmlwdGlvbnMucHVzaChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlZCAmJiB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUoc291cmNlLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uRGVsYXkgPSBzdWJzY3JpcHRpb25EZWxheTtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25EZWxheS5zdWJzY3JpYmUobmV3IFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihwYXJlbnQsIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnNvdXJjZVN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc291cmNlU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnN1YnNjcmliZSh0aGlzLnBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9kZWxheVdoZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZGlzdGluY3RVbnRpbENoYW5nZWQnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhbGwgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgdGhhdCBhcmUgZGlzdGluY3QgYnkgY29tcGFyaXNvbiBmcm9tIHRoZSBwcmV2aW91cyBpdGVtLlxuICogSWYgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGl0IHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoIGl0ZW0gdG8gdGVzdCBmb3Igd2hldGhlciBvciBub3QgdGhhdCB2YWx1ZSBzaG91bGQgYmUgZW1pdHRlZC5cbiAqIElmIGEgY29tcGFyYXRvciBmdW5jdGlvbiBpcyBub3QgcHJvdmlkZWQsIGFuIGVxdWFsaXR5IGNoZWNrIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjb21wYXJlXSBvcHRpb25hbCBjb21wYXJpc29uIGZ1bmN0aW9uIGNhbGxlZCB0byB0ZXN0IGlmIGFuIGl0ZW0gaXMgZGlzdGluY3QgZnJvbSB0aGUgcHJldmlvdXMgaXRlbSBpbiB0aGUgc291cmNlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGggZGlzdGluY3QgdmFsdWVzLlxuICogQG1ldGhvZCBkaXN0aW5jdFVudGlsQ2hhbmdlZFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yKGNvbXBhcmUsIGtleVNlbGVjdG9yKSk7XG59XG5leHBvcnRzLmRpc3RpbmN0VW50aWxDaGFuZ2VkID0gZGlzdGluY3RVbnRpbENoYW5nZWQ7XG52YXIgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvcihjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgfVxuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY29tcGFyZSwgdGhpcy5rZXlTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5oYXNLZXkgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4ID09PSB5O1xuICAgIH07XG4gICAgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5U2VsZWN0b3IgPSB0aGlzLmtleVNlbGVjdG9yO1xuICAgICAgICB2YXIga2V5ID0gdmFsdWU7XG4gICAgICAgIGlmIChrZXlTZWxlY3Rvcikge1xuICAgICAgICAgICAga2V5ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaCh0aGlzLmtleVNlbGVjdG9yKSh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc0tleSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaCh0aGlzLmNvbXBhcmUpKHRoaXMua2V5LCBrZXkpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhc0tleSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJvb2xlYW4ocmVzdWx0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvZGlzdGluY3RVbnRpbENoYW5nZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBkb18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZG8nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5kbyA9IGRvXzEuX2RvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG8uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvZG8uanNcbiAqKiBtb2R1bGUgaWQgPSAxNTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBQZXJmb3JtIGEgc2lkZSBlZmZlY3QgZm9yIGV2ZXJ5IGVtaXNzaW9uIG9uIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IHJldHVyblxuICogYW4gT2JzZXJ2YWJsZSB0aGF0IGlzIGlkZW50aWNhbCB0byB0aGUgc291cmNlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JbnRlcmNlcHRzIGVhY2ggZW1pc3Npb24gb24gdGhlIHNvdXJjZSBhbmQgcnVucyBhXG4gKiBmdW5jdGlvbiwgYnV0IHJldHVybnMgYW4gb3V0cHV0IHdoaWNoIGlzIGlkZW50aWNhbCB0byB0aGUgc291cmNlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2RvLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFJldHVybnMgYSBtaXJyb3JlZCBPYnNlcnZhYmxlIG9mIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IG1vZGlmaWVkIHNvIHRoYXRcbiAqIHRoZSBwcm92aWRlZCBPYnNlcnZlciBpcyBjYWxsZWQgdG8gcGVyZm9ybSBhIHNpZGUgZWZmZWN0IGZvciBldmVyeSB2YWx1ZSxcbiAqIGVycm9yLCBhbmQgY29tcGxldGlvbiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UuIEFueSBlcnJvcnMgdGhhdCBhcmUgdGhyb3duIGluXG4gKiB0aGUgYWZvcmVtZW50aW9uZWQgT2JzZXJ2ZXIgb3IgaGFuZGxlcnMgYXJlIHNhZmVseSBzZW50IGRvd24gdGhlIGVycm9yIHBhdGhcbiAqIG9mIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiBUaGlzIG9wZXJhdG9yIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHlvdXIgT2JzZXJ2YWJsZXMgZm9yIHRoZSBjb3JyZWN0IHZhbHVlc1xuICogb3IgcGVyZm9ybWluZyBvdGhlciBzaWRlIGVmZmVjdHMuXG4gKlxuICogTm90ZTogdGhpcyBpcyBkaWZmZXJlbnQgdG8gYSBgc3Vic2NyaWJlYCBvbiB0aGUgT2JzZXJ2YWJsZS4gSWYgdGhlIE9ic2VydmFibGVcbiAqIHJldHVybmVkIGJ5IGBkb2AgaXMgbm90IHN1YnNjcmliZWQsIHRoZSBzaWRlIGVmZmVjdHMgc3BlY2lmaWVkIGJ5IHRoZVxuICogT2JzZXJ2ZXIgd2lsbCBuZXZlciBoYXBwZW4uIGBkb2AgdGhlcmVmb3JlIHNpbXBseSBzcGllcyBvbiBleGlzdGluZ1xuICogZXhlY3V0aW9uLCBpdCBkb2VzIG5vdCB0cmlnZ2VyIGFuIGV4ZWN1dGlvbiB0byBoYXBwZW4gbGlrZSBgc3Vic2NyaWJlYCBkb2VzLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBldmVyeSBldmVyeSBjbGljayB0byB0aGUgY2xpZW50WCBwb3NpdGlvbiBvZiB0aGF0IGNsaWNrLCB3aGlsZSBhbHNvIGxvZ2dpbmcgdGhlIGNsaWNrIGV2ZW50PC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBwb3NpdGlvbnMgPSBjbGlja3NcbiAqICAgLmRvKGV2ID0+IGNvbnNvbGUubG9nKGV2KSlcbiAqICAgLm1hcChldiA9PiBldi5jbGllbnRYKTtcbiAqIHBvc2l0aW9ucy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgbWFwfVxuICogQHNlZSB7QGxpbmsgc3Vic2NyaWJlfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2ZXJ8ZnVuY3Rpb259IFtuZXh0T3JPYnNlcnZlcl0gQSBub3JtYWwgT2JzZXJ2ZXIgb2JqZWN0IG9yIGFcbiAqIGNhbGxiYWNrIGZvciBgbmV4dGAuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGZvciBlcnJvcnMgaW4gdGhlIHNvdXJjZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjb21wbGV0ZV0gQ2FsbGJhY2sgZm9yIHRoZSBjb21wbGV0aW9uIG9mIHRoZSBzb3VyY2UuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIGlkZW50aWNhbCB0byB0aGUgc291cmNlLCBidXQgcnVucyB0aGVcbiAqIHNwZWNpZmllZCBPYnNlcnZlciBvciBjYWxsYmFjayhzKSBmb3IgZWFjaCBpdGVtLlxuICogQG1ldGhvZCBkb1xuICogQG5hbWUgZG9cbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIF9kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSk7XG59XG5leHBvcnRzLl9kbyA9IF9kbztcbnZhciBEb09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb09wZXJhdG9yKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5uZXh0T3JPYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgICB9XG4gICAgRG9PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBEb1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5uZXh0T3JPYnNlcnZlciwgdGhpcy5lcnJvciwgdGhpcy5jb21wbGV0ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERvT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBEb1N1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEb1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdmFyIHNhZmVTdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkZChzYWZlU3Vic2NyaWJlcik7XG4gICAgICAgIHRoaXMuc2FmZVN1YnNjcmliZXIgPSBzYWZlU3Vic2NyaWJlcjtcbiAgICB9XG4gICAgRG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgc2FmZVN1YnNjcmliZXIgPSB0aGlzLnNhZmVTdWJzY3JpYmVyO1xuICAgICAgICBzYWZlU3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgaWYgKHNhZmVTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb1N1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHNhZmVTdWJzY3JpYmVyID0gdGhpcy5zYWZlU3Vic2NyaWJlcjtcbiAgICAgICAgc2FmZVN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgaWYgKHNhZmVTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihzYWZlU3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERvU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2FmZVN1YnNjcmliZXIgPSB0aGlzLnNhZmVTdWJzY3JpYmVyO1xuICAgICAgICBzYWZlU3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICBpZiAoc2FmZVN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKHNhZmVTdWJzY3JpYmVyLnN5bmNFcnJvclZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERvU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvZG8uanNcbiAqKiBtb2R1bGUgaWQgPSAxNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBleHBhbmRfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2V4cGFuZCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmV4cGFuZCA9IGV4cGFuZF8xLmV4cGFuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGFuZC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9leHBhbmQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHdoZXJlIGZvciBlYWNoIGl0ZW0gaW4gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB0aGUgc3VwcGxpZWQgZnVuY3Rpb24gaXMgYXBwbGllZCB0byBlYWNoIGl0ZW0sXG4gKiByZXN1bHRpbmcgaW4gYSBuZXcgdmFsdWUgdG8gdGhlbiBiZSBhcHBsaWVkIGFnYWluIHdpdGggdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvamVjdCB0aGUgZnVuY3Rpb24gZm9yIHByb2plY3RpbmcgdGhlIG5leHQgZW1pdHRlZCBpdGVtIG9mIHRoZSBPYnNlcnZhYmxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50XSB0aGUgbWF4IG51bWJlciBvZiBvYnNlcnZhYmxlcyB0aGF0IGNhbiBiZSBjcmVhdGVkIGNvbmN1cnJlbnRseS4gZGVmYXVsdHMgdG8gaW5maW5pdHkuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gVGhlIFNjaGVkdWxlciB0byB1c2UgZm9yIG1hbmFnaW5nIHRoZSBleHBhbnNpb25zLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSBjb250YWluaW5nIHRoZSBleHBhbnNpb25zIG9mIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgZXhwYW5kXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBleHBhbmQocHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IHVuZGVmaW5lZDsgfVxuICAgIGNvbmN1cnJlbnQgPSAoY29uY3VycmVudCB8fCAwKSA8IDEgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBjb25jdXJyZW50O1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikpO1xufVxuZXhwb3J0cy5leHBhbmQgPSBleHBhbmQ7XG52YXIgRXhwYW5kT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4cGFuZE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRXhwYW5kT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRXhwYW5kU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMuY29uY3VycmVudCwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBFeHBhbmRPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLkV4cGFuZE9wZXJhdG9yID0gRXhwYW5kT3BlcmF0b3I7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEV4cGFuZFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFeHBhbmRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV4cGFuZFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoY29uY3VycmVudCA8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBFeHBhbmRTdWJzY3JpYmVyLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCByZXN1bHQgPSBhcmcucmVzdWx0LCB2YWx1ZSA9IGFyZy52YWx1ZSwgaW5kZXggPSBhcmcuaW5kZXg7XG4gICAgICAgIHN1YnNjcmliZXIuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaCh0aGlzLnByb2plY3QpKHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLnNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgcmVzdWx0OiByZXN1bHQsIHZhbHVlOiB2YWx1ZSwgaW5kZXg6IGluZGV4IH07XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoRXhwYW5kU3Vic2NyaWJlci5kaXNwYXRjaCwgMCwgc3RhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1Byb2plY3Rpb24gPSBmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCByZXN1bHQsIHZhbHVlLCBpbmRleCkpO1xuICAgIH07XG4gICAgRXhwYW5kU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCAmJiB0aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX25leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkICYmIHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFeHBhbmRTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydHMuRXhwYW5kU3Vic2NyaWJlciA9IEV4cGFuZFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBhbmQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9leHBhbmQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2ZpbHRlcicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZpbHRlciA9IGZpbHRlcl8xLmZpbHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9maWx0ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBGaWx0ZXIgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgb25seSBlbWl0dGluZyB0aG9zZSB0aGF0XG4gKiBzYXRpc2Z5IGEgc3BlY2lmaWVkIHByZWRpY2F0ZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZVxuICogW0FycmF5LnByb3RvdHlwZS5maWx0ZXIoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVyKSxcbiAqIGl0IG9ubHkgZW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgaWYgaXQgcGFzc2VzIGEgY3JpdGVyaW9uIGZ1bmN0aW9uLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2ZpbHRlci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBTaW1pbGFyIHRvIHRoZSB3ZWxsLWtub3duIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2QsIHRoaXMgb3BlcmF0b3JcbiAqIHRha2VzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcGFzc2VzIHRoZW0gdGhyb3VnaCBhIGBwcmVkaWNhdGVgXG4gKiBmdW5jdGlvbiBhbmQgb25seSBlbWl0cyB0aG9zZSB2YWx1ZXMgdGhhdCB5aWVsZGVkIGB0cnVlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IG9ubHkgY2xpY2sgZXZlbnRzIHdob3NlIHRhcmdldCB3YXMgYSBESVYgZWxlbWVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgY2xpY2tzT25EaXZzID0gY2xpY2tzLmZpbHRlcihldiA9PiBldi50YXJnZXQudGFnTmFtZSA9PT0gJ0RJVicpO1xuICogY2xpY2tzT25EaXZzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdH1cbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0S2V5fVxuICogQHNlZSB7QGxpbmsgZGlzdGluY3RVbnRpbENoYW5nZWR9XG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZH1cbiAqIEBzZWUge0BsaW5rIGlnbm9yZUVsZW1lbnRzfVxuICogQHNlZSB7QGxpbmsgcGFydGl0aW9ufVxuICogQHNlZSB7QGxpbmsgc2tpcH1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdGhhdFxuICogZXZhbHVhdGVzIGVhY2ggdmFsdWUgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIElmIGl0IHJldHVybnMgYHRydWVgLFxuICogdGhlIHZhbHVlIGlzIGVtaXR0ZWQsIGlmIGBmYWxzZWAgdGhlIHZhbHVlIGlzIG5vdCBwYXNzZWQgdG8gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS4gVGhlIGBpbmRleGAgcGFyYW1ldGVyIGlzIHRoZSBudW1iZXIgYGlgIGZvciB0aGUgaS10aCBzb3VyY2VcbiAqIGVtaXNzaW9uIHRoYXQgaGFzIGhhcHBlbmVkIHNpbmNlIHRoZSBzdWJzY3JpcHRpb24sIHN0YXJ0aW5nIGZyb20gdGhlIG51bWJlclxuICogYDBgLlxuICogQHBhcmFtIHthbnl9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBhcmd1bWVudCB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIG9mIGB0aGlzYFxuICogaW4gdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIHRoYXQgd2VyZVxuICogYWxsb3dlZCBieSB0aGUgYHByZWRpY2F0ZWAgZnVuY3Rpb24uXG4gKiBAbWV0aG9kIGZpbHRlclxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykpO1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG52YXIgRmlsdGVyT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmlsdGVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRmlsdGVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBGaWx0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsdGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWx0ZXJTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIH1cbiAgICAvLyB0aGUgdHJ5IGNhdGNoIGJsb2NrIGJlbG93IGlzIGxlZnQgc3BlY2lmaWNhbGx5IGZvclxuICAgIC8vIG9wdGltaXphdGlvbiBhbmQgcGVyZiByZWFzb25zLiBhIHRyeUNhdGNoZXIgaXMgbm90IG5lY2Vzc2FyeSBoZXJlLlxuICAgIEZpbHRlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZS5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvZmlsdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMTYwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZmluYWxseV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZmluYWxseScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZpbmFsbHkgPSBmaW5hbGx5XzEuX2ZpbmFsbHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5hbGx5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2ZpbmFsbHkuanNcbiAqKiBtb2R1bGUgaWQgPSAxNjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaXB0aW9uJyk7XG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBidXQgd2lsbCBjYWxsIGEgc3BlY2lmaWVkIGZ1bmN0aW9uIHdoZW5cbiAqIHRoZSBzb3VyY2UgdGVybWluYXRlcyBvbiBjb21wbGV0ZSBvciBlcnJvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZpbmFsbHlTZWxlY3RvciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBzb3VyY2UgdGVybWluYXRlcy5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBzb3VyY2UsIGJ1dCB3aWxsIGNhbGwgdGhlIHNwZWNpZmllZCBmdW5jdGlvbiBvbiB0ZXJtaW5hdGlvbi5cbiAqIEBtZXRob2QgZmluYWxseVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gX2ZpbmFsbHkoZmluYWxseVNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRmluYWxseU9wZXJhdG9yKGZpbmFsbHlTZWxlY3RvcikpO1xufVxuZXhwb3J0cy5fZmluYWxseSA9IF9maW5hbGx5O1xudmFyIEZpbmFsbHlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmluYWxseU9wZXJhdG9yKGZpbmFsbHlTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmZpbmFsbHlTZWxlY3RvciA9IGZpbmFsbHlTZWxlY3RvcjtcbiAgICB9XG4gICAgRmluYWxseU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEZpbmFsbHlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZmluYWxseVNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluYWxseU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRmluYWxseVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaW5hbGx5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaW5hbGx5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZmluYWxseVNlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5hZGQobmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbihmaW5hbGx5U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIEZpbmFsbHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluYWxseS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2ZpbmFsbHkuanNcbiAqKiBtb2R1bGUgaWQgPSAxNjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBmaXJzdF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZmlyc3QnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5maXJzdCA9IGZpcnN0XzEuZmlyc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9maXJzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZSgnLi4vdXRpbC9FbXB0eUVycm9yJyk7XG4vKipcbiAqIEVtaXRzIG9ubHkgdGhlIGZpcnN0IHZhbHVlIChvciB0aGUgZmlyc3QgdmFsdWUgdGhhdCBtZWV0cyBzb21lIGNvbmRpdGlvbilcbiAqIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbWl0cyBvbmx5IHRoZSBmaXJzdCB2YWx1ZS4gT3IgZW1pdHMgb25seSB0aGUgZmlyc3RcbiAqIHZhbHVlIHRoYXQgcGFzc2VzIHNvbWUgdGVzdC48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9maXJzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGBmaXJzdGAgZW1pdHMgdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUsIHRoZW4gY29tcGxldGVzLiBJZiBjYWxsZWQgd2l0aCBhIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLCBgZmlyc3RgXG4gKiBlbWl0cyB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIHNvdXJjZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBjb25kaXRpb24uIEl0XG4gKiBtYXkgYWxzbyB0YWtlIGEgYHJlc3VsdFNlbGVjdG9yYCBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSBvdXRwdXQgdmFsdWUgZnJvbVxuICogdGhlIGlucHV0IHZhbHVlLCBhbmQgYSBgZGVmYXVsdFZhbHVlYCB0byBlbWl0IGluIGNhc2UgdGhlIHNvdXJjZSBjb21wbGV0ZXNcbiAqIGJlZm9yZSBpdCBpcyBhYmxlIHRvIGVtaXQgYSB2YWxpZCB2YWx1ZS4gVGhyb3dzIGFuIGVycm9yIGlmIGBkZWZhdWx0VmFsdWVgXG4gKiB3YXMgbm90IHByb3ZpZGVkIGFuZCBhIG1hdGNoaW5nIGVsZW1lbnQgaXMgbm90IGZvdW5kLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgb25seSB0aGUgZmlyc3QgY2xpY2sgdGhhdCBoYXBwZW5zIG9uIHRoZSBET008L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5maXJzdCgpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0cyB0aGUgZmlyc3QgY2xpY2sgdGhhdCBoYXBwZW5zIG9uIGEgRElWPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3MuZmlyc3QoZXYgPT4gZXYudGFyZ2V0LnRhZ05hbWUgPT09ICdESVYnKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZmlsdGVyfVxuICogQHNlZSB7QGxpbmsgZmluZH1cbiAqIEBzZWUge0BsaW5rIHRha2V9XG4gKlxuICogQHRocm93cyB7RW1wdHlFcnJvcn0gRGVsaXZlcnMgYW4gRW1wdHlFcnJvciB0byB0aGUgT2JzZXJ2ZXIncyBgZXJyb3JgXG4gKiBjYWxsYmFjayBpZiB0aGUgT2JzZXJ2YWJsZSBjb21wbGV0ZXMgYmVmb3JlIGFueSBgbmV4dGAgbm90aWZpY2F0aW9uIHdhcyBzZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIHNvdXJjZTogT2JzZXJ2YWJsZTxUPik6IGJvb2xlYW59IFtwcmVkaWNhdGVdXG4gKiBBbiBvcHRpb25hbCBmdW5jdGlvbiBjYWxsZWQgd2l0aCBlYWNoIGl0ZW0gdG8gdGVzdCBmb3IgY29uZGl0aW9uIG1hdGNoaW5nLlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IFJ9IFtyZXN1bHRTZWxlY3Rvcl0gQSBmdW5jdGlvbiB0b1xuICogcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcbiAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIE9ic2VydmFibGUuIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoaXNcbiAqIGZ1bmN0aW9uIGFyZTpcbiAqIC0gYHZhbHVlYDogdGhlIHZhbHVlIHRoYXQgd2FzIGVtaXR0ZWQgb24gdGhlIHNvdXJjZS5cbiAqIC0gYGluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgc291cmNlLlxuICogQHBhcmFtIHtSfSBbZGVmYXVsdFZhbHVlXSBUaGUgZGVmYXVsdCB2YWx1ZSBlbWl0dGVkIGluIGNhc2Ugbm8gdmFsaWQgdmFsdWVcbiAqIHdhcyBmb3VuZCBvbiB0aGUgc291cmNlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUfFI+fSBhbiBPYnNlcnZhYmxlIG9mIHRoZSBmaXJzdCBpdGVtIHRoYXQgbWF0Y2hlcyB0aGVcbiAqIGNvbmRpdGlvbi5cbiAqIEBtZXRob2QgZmlyc3RcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGZpcnN0KHByZWRpY2F0ZSwgcmVzdWx0U2VsZWN0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEZpcnN0T3BlcmF0b3IocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlLCB0aGlzKSk7XG59XG5leHBvcnRzLmZpcnN0ID0gZmlyc3Q7XG52YXIgRmlyc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlyc3RPcGVyYXRvcihwcmVkaWNhdGUsIHJlc3VsdFNlbGVjdG9yLCBkZWZhdWx0VmFsdWUsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIEZpcnN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEZpcnN0U3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuZGVmYXVsdFZhbHVlLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpcnN0T3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBGaXJzdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaXJzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmlyc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHJlc3VsdFNlbGVjdG9yLCBkZWZhdWx0VmFsdWUsIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgfVxuICAgIEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyeVByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcmVkaWNhdGUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl9lbWl0ID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0RmluYWwodmFsdWUpO1xuICAgIH07XG4gICAgRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXRGaW5hbChyZXN1bHQpO1xuICAgIH07XG4gICAgRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fZW1pdEZpbmFsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgfTtcbiAgICBGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0NvbXBsZXRlZCAmJiB0eXBlb2YgdGhpcy5kZWZhdWx0VmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmlyc3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmlyc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9maXJzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYW4gT2JzZXJ2YWJsZSBvciBhIHNlcXVlbmNlIHdhcyBxdWVyaWVkIGJ1dCBoYXMgbm9cbiAqIGVsZW1lbnRzLlxuICpcbiAqIEBzZWUge0BsaW5rIGZpcnN0fVxuICogQHNlZSB7QGxpbmsgbGFzdH1cbiAqIEBzZWUge0BsaW5rIHNpbmdsZX1cbiAqXG4gKiBAY2xhc3MgRW1wdHlFcnJvclxuICovXG52YXIgRW1wdHlFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVtcHR5RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1wdHlFcnJvcigpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgJ25vIGVsZW1lbnRzIGluIHNlcXVlbmNlJyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdFbXB0eUVycm9yJztcbiAgICB9XG4gICAgcmV0dXJuIEVtcHR5RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLkVtcHR5RXJyb3IgPSBFbXB0eUVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1wdHlFcnJvci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvRW1wdHlFcnJvci5qc1xuICoqIG1vZHVsZSBpZCA9IDE2NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGdyb3VwQnlfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2dyb3VwQnknKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5ncm91cEJ5ID0gZ3JvdXBCeV8xLmdyb3VwQnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncm91cEJ5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2dyb3VwQnkuanNcbiAqKiBtb2R1bGUgaWQgPSAxNjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaXB0aW9uJyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4uL1N1YmplY3QnKTtcbnZhciBNYXBfMSA9IHJlcXVpcmUoJy4uL3V0aWwvTWFwJyk7XG52YXIgRmFzdE1hcF8xID0gcmVxdWlyZSgnLi4vdXRpbC9GYXN0TWFwJyk7XG4vKipcbiAqIEdyb3VwcyB0aGUgaXRlbXMgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlIGFjY29yZGluZyB0byBhIHNwZWNpZmllZCBjcml0ZXJpb24sXG4gKiBhbmQgZW1pdHMgdGhlc2UgZ3JvdXBlZCBpdGVtcyBhcyBgR3JvdXBlZE9ic2VydmFibGVzYCwgb25lXG4gKiB7QGxpbmsgR3JvdXBlZE9ic2VydmFibGV9IHBlciBncm91cC5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2dyb3VwQnkucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IEt9IGtleVNlbGVjdG9yIGEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB0aGUga2V5XG4gKiBmb3IgZWFjaCBpdGVtLlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IFJ9IFtlbGVtZW50U2VsZWN0b3JdIGEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB0aGVcbiAqIHJldHVybiBlbGVtZW50IGZvciBlYWNoIGl0ZW0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGdyb3VwZWQ6IEdyb3VwZWRPYnNlcnZhYmxlPEssUj4pOiBPYnNlcnZhYmxlPGFueT59IFtkdXJhdGlvblNlbGVjdG9yXVxuICogYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0byBkZXRlcm1pbmUgaG93IGxvbmcgZWFjaCBncm91cCBzaG91bGRcbiAqIGV4aXN0LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxHcm91cGVkT2JzZXJ2YWJsZTxLLFI+Pn0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzXG4gKiBHcm91cGVkT2JzZXJ2YWJsZXMsIGVhY2ggb2Ygd2hpY2ggY29ycmVzcG9uZHMgdG8gYSB1bmlxdWUga2V5IHZhbHVlIGFuZCBlYWNoXG4gKiBvZiB3aGljaCBlbWl0cyB0aG9zZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aGF0IHNoYXJlIHRoYXQga2V5XG4gKiB2YWx1ZS5cbiAqIEBtZXRob2QgZ3JvdXBCeVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZ3JvdXBCeShrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKHRoaXMsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IpKTtcbn1cbmV4cG9ydHMuZ3JvdXBCeSA9IGdyb3VwQnk7XG52YXIgR3JvdXBCeU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcm91cEJ5T3BlcmF0b3Ioc291cmNlLCBrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZWxlbWVudFNlbGVjdG9yID0gZWxlbWVudFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBHcm91cEJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgR3JvdXBCeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5rZXlTZWxlY3RvciwgdGhpcy5lbGVtZW50U2VsZWN0b3IsIHRoaXMuZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwQnlPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEdyb3VwQnlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR3JvdXBCeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR3JvdXBCeVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuYWRkKGRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBrZXkgPSB0aGlzLmtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ3JvdXAodmFsdWUsIGtleSk7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2dyb3VwID0gZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuICAgICAgICBpZiAoIWdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzID0gdGhpcy5ncm91cHMgPSB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IG5ldyBGYXN0TWFwXzEuRmFzdE1hcCgpIDogbmV3IE1hcF8xLk1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cCA9IGdyb3Vwcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgICAgZ3JvdXBzLnNldChrZXksIGdyb3VwID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpO1xuICAgICAgICAgICAgdmFyIGdyb3VwZWRPYnNlcnZhYmxlID0gbmV3IEdyb3VwZWRPYnNlcnZhYmxlKGtleSwgZ3JvdXAsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdER1cmF0aW9uKGtleSwgZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGdyb3VwZWRPYnNlcnZhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbGVtZW50U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdEVsZW1lbnQodmFsdWUsIGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJ5R3JvdXBOZXh0KHZhbHVlLCBncm91cCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fc2VsZWN0RWxlbWVudCA9IGZ1bmN0aW9uICh2YWx1ZSwgZ3JvdXApIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZWxlbWVudFNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlHcm91cE5leHQocmVzdWx0LCBncm91cCk7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX3NlbGVjdER1cmF0aW9uID0gZnVuY3Rpb24gKGtleSwgZ3JvdXApIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uU2VsZWN0b3IobmV3IEdyb3VwZWRPYnNlcnZhYmxlKGtleSwgZ3JvdXApKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQoZHVyYXRpb24uc3Vic2NyaWJlKG5ldyBHcm91cER1cmF0aW9uU3Vic2NyaWJlcihrZXksIGdyb3VwLCB0aGlzKSkpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnRyeUdyb3VwTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgZ3JvdXApIHtcbiAgICAgICAgaWYgKCFncm91cC5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgZ3JvdXAubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBncm91cC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmdyb3Vwcy5kZWxldGUoa2V5KTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVW5zdWJzY3JpYmVkICYmICF0aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0ZW1wdGVkVG9VbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwQnlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBHcm91cER1cmF0aW9uU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHBhcmVudCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnRyeUVycm9yKGVycik7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyeUNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBncm91cCA9IHRoaXMuZ3JvdXA7XG4gICAgICAgIGlmICghZ3JvdXAuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIGdyb3VwLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlR3JvdXAodGhpcy5rZXkpO1xuICAgIH07XG4gICAgR3JvdXBEdXJhdGlvblN1YnNjcmliZXIucHJvdG90eXBlLnRyeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXAgPSB0aGlzLmdyb3VwO1xuICAgICAgICBpZiAoIWdyb3VwLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICBncm91cC5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUdyb3VwKHRoaXMua2V5KTtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cER1cmF0aW9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8qKlxuICogQW4gT2JzZXJ2YWJsZSByZXByZXNlbnRpbmcgdmFsdWVzIGJlbG9uZ2luZyB0byB0aGUgc2FtZSBncm91cCByZXByZXNlbnRlZCBieVxuICogYSBjb21tb24ga2V5LiBUaGUgdmFsdWVzIGVtaXR0ZWQgYnkgYSBHcm91cGVkT2JzZXJ2YWJsZSBjb21lIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gVGhlIGNvbW1vbiBrZXkgaXMgYXZhaWxhYmxlIGFzIHRoZSBmaWVsZCBga2V5YCBvbiBhXG4gKiBHcm91cGVkT2JzZXJ2YWJsZSBpbnN0YW5jZS5cbiAqXG4gKiBAY2xhc3MgR3JvdXBlZE9ic2VydmFibGU8SywgVD5cbiAqL1xudmFyIEdyb3VwZWRPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR3JvdXBlZE9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cFN1YmplY3QsIHJlZkNvdW50U3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5ncm91cFN1YmplY3QgPSBncm91cFN1YmplY3Q7XG4gICAgICAgIHRoaXMucmVmQ291bnRTdWJzY3JpcHRpb24gPSByZWZDb3VudFN1YnNjcmlwdGlvbjtcbiAgICB9XG4gICAgR3JvdXBlZE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZWZDb3VudFN1YnNjcmlwdGlvbiA9IF9hLnJlZkNvdW50U3Vic2NyaXB0aW9uLCBncm91cFN1YmplY3QgPSBfYS5ncm91cFN1YmplY3Q7XG4gICAgICAgIGlmIChyZWZDb3VudFN1YnNjcmlwdGlvbiAmJiAhcmVmQ291bnRTdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQobmV3IElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24ocmVmQ291bnRTdWJzY3JpcHRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKGdyb3VwU3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwZWRPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Hcm91cGVkT2JzZXJ2YWJsZSA9IEdyb3VwZWRPYnNlcnZhYmxlO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uKHBhcmVudCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudC5jb3VudCsrO1xuICAgIH1cbiAgICBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudC5pc1Vuc3Vic2NyaWJlZCAmJiAhdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgcGFyZW50LmNvdW50IC09IDE7XG4gICAgICAgICAgICBpZiAocGFyZW50LmNvdW50ID09PSAwICYmIHBhcmVudC5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwQnkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9ncm91cEJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMTY3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuL3Jvb3QnKTtcbnZhciBNYXBQb2x5ZmlsbF8xID0gcmVxdWlyZSgnLi9NYXBQb2x5ZmlsbCcpO1xuZXhwb3J0cy5NYXAgPSByb290XzEucm9vdC5NYXAgfHwgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1hcFBvbHlmaWxsXzEuTWFwUG9seWZpbGw7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL01hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTWFwUG9seWZpbGwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcFBvbHlmaWxsKCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgIH1cbiAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICByZXR1cm4gaSA9PT0gLTEgPyB1bmRlZmluZWQgOiB0aGlzLl92YWx1ZXNbaV07XG4gICAgfTtcbiAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBNYXBQb2x5ZmlsbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB0aGlzLl9rZXlzLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5zaXplLS07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTWFwUG9seWZpbGwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH07XG4gICAgTWFwUG9seWZpbGwucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2IsIHRoaXNBcmcpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xuICAgICAgICAgICAgY2IuY2FsbCh0aGlzQXJnLCB0aGlzLl92YWx1ZXNbaV0sIHRoaXMuX2tleXNbaV0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWFwUG9seWZpbGw7XG59KCkpO1xuZXhwb3J0cy5NYXBQb2x5ZmlsbCA9IE1hcFBvbHlmaWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwUG9seWZpbGwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL01hcFBvbHlmaWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTY5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBGYXN0TWFwID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYXN0TWFwKCkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHt9O1xuICAgIH1cbiAgICBGYXN0TWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMudmFsdWVzW2tleV0gPSBudWxsO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEZhc3RNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBGYXN0TWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1trZXldO1xuICAgIH07XG4gICAgRmFzdE1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYiwgdGhpc0FyZykge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB2YWx1ZXNba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNiLmNhbGwodGhpc0FyZywgdmFsdWVzW2tleV0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZhc3RNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHt9O1xuICAgIH07XG4gICAgcmV0dXJuIEZhc3RNYXA7XG59KCkpO1xuZXhwb3J0cy5GYXN0TWFwID0gRmFzdE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhc3RNYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL0Zhc3RNYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBpZ25vcmVFbGVtZW50c18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvaWdub3JlRWxlbWVudHMnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5pZ25vcmVFbGVtZW50cyA9IGlnbm9yZUVsZW1lbnRzXzEuaWdub3JlRWxlbWVudHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9pZ25vcmVFbGVtZW50cy5qc1xuICoqIG1vZHVsZSBpZCA9IDE3MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgbm9vcF8xID0gcmVxdWlyZSgnLi4vdXRpbC9ub29wJyk7XG4vKipcbiAqIElnbm9yZXMgYWxsIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBvbmx5IHBhc3NlcyBjYWxscyBvZiBgY29tcGxldGVgIG9yIGBlcnJvcmAuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9pZ25vcmVFbGVtZW50cy5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBlbXB0eSBPYnNlcnZhYmxlIHRoYXQgb25seSBjYWxscyBgY29tcGxldGVgXG4gKiBvciBgZXJyb3JgLCBiYXNlZCBvbiB3aGljaCBvbmUgaXMgY2FsbGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgaWdub3JlRWxlbWVudHNcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLmlnbm9yZUVsZW1lbnRzID0gaWdub3JlRWxlbWVudHM7XG47XG52YXIgSWdub3JlRWxlbWVudHNPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSWdub3JlRWxlbWVudHNPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgSWdub3JlRWxlbWVudHNPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIElnbm9yZUVsZW1lbnRzT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgbm9vcF8xLm5vb3AoKTtcbiAgICB9O1xuICAgIHJldHVybiBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2lnbm9yZUVsZW1lbnRzLmpzXG4gKiogbW9kdWxlIGlkID0gMTcyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgYXVkaXRfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2F1ZGl0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuYXVkaXQgPSBhdWRpdF8xLmF1ZGl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvYXVkaXQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogSWdub3JlcyBzb3VyY2UgdmFsdWVzIGZvciBhIGR1cmF0aW9uIGRldGVybWluZWQgYnkgYW5vdGhlciBPYnNlcnZhYmxlLCB0aGVuXG4gKiBlbWl0cyB0aGUgbW9zdCByZWNlbnQgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZW4gcmVwZWF0cyB0aGlzXG4gKiBwcm9jZXNzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGF1ZGl0VGltZX0sIGJ1dCB0aGUgc2lsZW5jaW5nXG4gKiBkdXJhdGlvbiBpcyBkZXRlcm1pbmVkIGJ5IGEgc2Vjb25kIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvYXVkaXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYGF1ZGl0YCBpcyBzaW1pbGFyIHRvIGB0aHJvdHRsZWAsIGJ1dCBlbWl0cyB0aGUgbGFzdCB2YWx1ZSBmcm9tIHRoZSBzaWxlbmNlZFxuICogdGltZSB3aW5kb3csIGluc3RlYWQgb2YgdGhlIGZpcnN0IHZhbHVlLiBgYXVkaXRgIGVtaXRzIHRoZSBtb3N0IHJlY2VudCB2YWx1ZVxuICogZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGFzIHNvb24gYXMgaXRzIGludGVybmFsXG4gKiB0aW1lciBiZWNvbWVzIGRpc2FibGVkLCBhbmQgaWdub3JlcyBzb3VyY2UgdmFsdWVzIHdoaWxlIHRoZSB0aW1lciBpcyBlbmFibGVkLlxuICogSW5pdGlhbGx5LCB0aGUgdGltZXIgaXMgZGlzYWJsZWQuIEFzIHNvb24gYXMgdGhlIGZpcnN0IHNvdXJjZSB2YWx1ZSBhcnJpdmVzLFxuICogdGhlIHRpbWVyIGlzIGVuYWJsZWQgYnkgY2FsbGluZyB0aGUgYGR1cmF0aW9uU2VsZWN0b3JgIGZ1bmN0aW9uIHdpdGggdGhlXG4gKiBzb3VyY2UgdmFsdWUsIHdoaWNoIHJldHVybnMgdGhlIFwiZHVyYXRpb25cIiBPYnNlcnZhYmxlLiBXaGVuIHRoZSBkdXJhdGlvblxuICogT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlIG9yIGNvbXBsZXRlcywgdGhlIHRpbWVyIGlzIGRpc2FibGVkLCB0aGVuIHRoZSBtb3N0XG4gKiByZWNlbnQgc291cmNlIHZhbHVlIGlzIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLCBhbmQgdGhpcyBwcm9jZXNzXG4gKiByZXBlYXRzIGZvciB0aGUgbmV4dCBzb3VyY2UgdmFsdWUuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBjbGlja3MgYXQgYSByYXRlIG9mIGF0IG1vc3Qgb25lIGNsaWNrIHBlciBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5hdWRpdChldiA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgYXVkaXRUaW1lfVxuICogQHNlZSB7QGxpbmsgZGVib3VuY2V9XG4gKiBAc2VlIHtAbGluayBkZWxheVdoZW59XG4gKiBAc2VlIHtAbGluayBzYW1wbGV9XG4gKiBAc2VlIHtAbGluayB0aHJvdHRsZX1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUKTogT2JzZXJ2YWJsZXxQcm9taXNlfSBkdXJhdGlvblNlbGVjdG9yIEEgZnVuY3Rpb25cbiAqIHRoYXQgcmVjZWl2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgZm9yIGNvbXB1dGluZyB0aGUgc2lsZW5jaW5nXG4gKiBkdXJhdGlvbiwgcmV0dXJuZWQgYXMgYW4gT2JzZXJ2YWJsZSBvciBhIFByb21pc2UuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgcGVyZm9ybXMgcmF0ZS1saW1pdGluZyBvZlxuICogZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBhdWRpdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gYXVkaXQoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvcikpO1xufVxuZXhwb3J0cy5hdWRpdCA9IGF1ZGl0O1xudmFyIEF1ZGl0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBBdWRpdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEF1ZGl0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdE9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgQXVkaXRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGl0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMudGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHRoaXMuZHVyYXRpb25TZWxlY3RvcikodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGR1cmF0aW9uID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGl0U3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJUaHJvdHRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdmFsdWUgPSBfYS52YWx1ZSwgaGFzVmFsdWUgPSBfYS5oYXNWYWx1ZSwgdGhyb3R0bGVkID0gX2EudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh0aHJvdHRsZWQpO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGl0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaHJvdHRsZSgpO1xuICAgIH07XG4gICAgQXVkaXRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRocm90dGxlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaXRTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGl0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvYXVkaXQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBhdWRpdFRpbWVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2F1ZGl0VGltZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmF1ZGl0VGltZSA9IGF1ZGl0VGltZV8xLmF1ZGl0VGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGl0VGltZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9hdWRpdFRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4uL3NjaGVkdWxlci9hc3luYycpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogSWdub3JlcyBzb3VyY2UgdmFsdWVzIGZvciBgZHVyYXRpb25gIG1pbGxpc2Vjb25kcywgdGhlbiBlbWl0cyB0aGUgbW9zdCByZWNlbnRcbiAqIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB0aGVuIHJlcGVhdHMgdGhpcyBwcm9jZXNzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5XaGVuIGl0IHNlZXMgYSBzb3VyY2UgdmFsdWVzLCBpdCBpZ25vcmVzIHRoYXQgcGx1c1xuICogdGhlIG5leHQgb25lcyBmb3IgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGl0IGVtaXRzIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWUgZnJvbSB0aGUgc291cmNlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2F1ZGl0VGltZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgYXVkaXRUaW1lYCBpcyBzaW1pbGFyIHRvIGB0aHJvdHRsZVRpbWVgLCBidXQgZW1pdHMgdGhlIGxhc3QgdmFsdWUgZnJvbSB0aGVcbiAqIHNpbGVuY2VkIHRpbWUgd2luZG93LCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB2YWx1ZS4gYGF1ZGl0VGltZWAgZW1pdHMgdGhlIG1vc3RcbiAqIHJlY2VudCB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYXMgc29vbiBhc1xuICogaXRzIGludGVybmFsIHRpbWVyIGJlY29tZXMgZGlzYWJsZWQsIGFuZCBpZ25vcmVzIHNvdXJjZSB2YWx1ZXMgd2hpbGUgdGhlXG4gKiB0aW1lciBpcyBlbmFibGVkLiBJbml0aWFsbHksIHRoZSB0aW1lciBpcyBkaXNhYmxlZC4gQXMgc29vbiBhcyB0aGUgZmlyc3RcbiAqIHNvdXJjZSB2YWx1ZSBhcnJpdmVzLCB0aGUgdGltZXIgaXMgZW5hYmxlZC4gQWZ0ZXIgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMgKG9yXG4gKiB0aGUgdGltZSB1bml0IGRldGVybWluZWQgaW50ZXJuYWxseSBieSB0aGUgb3B0aW9uYWwgYHNjaGVkdWxlcmApIGhhcyBwYXNzZWQsXG4gKiB0aGUgdGltZXIgaXMgZGlzYWJsZWQsIHRoZW4gdGhlIG1vc3QgcmVjZW50IHNvdXJjZSB2YWx1ZSBpcyBlbWl0dGVkIG9uIHRoZVxuICogb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGlzIHByb2Nlc3MgcmVwZWF0cyBmb3IgdGhlIG5leHQgc291cmNlIHZhbHVlLlxuICogT3B0aW9uYWxseSB0YWtlcyBhIHtAbGluayBTY2hlZHVsZXJ9IGZvciBtYW5hZ2luZyB0aW1lcnMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBjbGlja3MgYXQgYSByYXRlIG9mIGF0IG1vc3Qgb25lIGNsaWNrIHBlciBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5hdWRpdFRpbWUoMTAwMCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGF1ZGl0fVxuICogQHNlZSB7QGxpbmsgZGVib3VuY2VUaW1lfVxuICogQHNlZSB7QGxpbmsgZGVsYXl9XG4gKiBAc2VlIHtAbGluayBzYW1wbGVUaW1lfVxuICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaW1lIHRvIHdhaXQgYmVmb3JlIGVtaXR0aW5nIHRoZSBtb3N0IHJlY2VudCBzb3VyY2VcbiAqIHZhbHVlLCBtZWFzdXJlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkIGludGVybmFsbHlcbiAqIGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvclxuICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgcmF0ZS1saW1pdGluZyBiZWhhdmlvci5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IEFuIE9ic2VydmFibGUgdGhhdCBwZXJmb3JtcyByYXRlLWxpbWl0aW5nIG9mXG4gKiBlbWlzc2lvbnMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIGF1ZGl0VGltZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gYXVkaXRUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEF1ZGl0VGltZU9wZXJhdG9yKGR1cmF0aW9uLCBzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuYXVkaXRUaW1lID0gYXVkaXRUaW1lO1xudmFyIEF1ZGl0VGltZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdWRpdFRpbWVPcGVyYXRvcihkdXJhdGlvbiwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIEF1ZGl0VGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEF1ZGl0VGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvbiwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpdFRpbWVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEF1ZGl0VGltZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBdWRpdFRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGl0VGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIEF1ZGl0VGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1cmF0aW9uLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1ZGl0VGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyVGhyb3R0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHZhbHVlID0gX2EudmFsdWUsIGhhc1ZhbHVlID0gX2EuaGFzVmFsdWUsIHRocm90dGxlZCA9IF9hLnRocm90dGxlZDtcbiAgICAgICAgaWYgKHRocm90dGxlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaXRUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChzdWJzY3JpYmVyKSB7XG4gICAgc3Vic2NyaWJlci5jbGVhclRocm90dGxlKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdFRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9hdWRpdFRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBsYXN0XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9sYXN0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubGFzdCA9IGxhc3RfMS5sYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFzdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9sYXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKCcuLi91dGlsL0VtcHR5RXJyb3InKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgb25seSB0aGUgbGFzdCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogSXQgb3B0aW9uYWxseSB0YWtlcyBhIHByZWRpY2F0ZSBmdW5jdGlvbiBhcyBhIHBhcmFtZXRlciwgaW4gd2hpY2ggY2FzZSwgcmF0aGVyIHRoYW4gZW1pdHRpbmdcbiAqIHRoZSBsYXN0IGl0ZW0gZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZSByZXN1bHRpbmcgT2JzZXJ2YWJsZSB3aWxsIGVtaXQgdGhlIGxhc3QgaXRlbVxuICogZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgdGhhdCBzYXRpc2ZpZXMgdGhlIHByZWRpY2F0ZS5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2xhc3QucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHRocm93cyB7RW1wdHlFcnJvcn0gRGVsaXZlcnMgYW4gRW1wdHlFcnJvciB0byB0aGUgT2JzZXJ2ZXIncyBgZXJyb3JgXG4gKiBjYWxsYmFjayBpZiB0aGUgT2JzZXJ2YWJsZSBjb21wbGV0ZXMgYmVmb3JlIGFueSBgbmV4dGAgbm90aWZpY2F0aW9uIHdhcyBzZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJlZGljYXRlIC0gdGhlIGNvbmRpdGlvbiBhbnkgc291cmNlIGVtaXR0ZWQgaXRlbSBoYXMgdG8gc2F0aXNmeS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBvbmx5IHRoZSBsYXN0IGl0ZW0gc2F0aXNmeWluZyB0aGUgZ2l2ZW4gY29uZGl0aW9uXG4gKiBmcm9tIHRoZSBzb3VyY2UsIG9yIGFuIE5vU3VjaEVsZW1lbnRFeGNlcHRpb24gaWYgbm8gc3VjaCBpdGVtcyBhcmUgZW1pdHRlZC5cbiAqIEB0aHJvd3MgLSBUaHJvd3MgaWYgbm8gaXRlbXMgdGhhdCBtYXRjaCB0aGUgcHJlZGljYXRlIGFyZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgbGFzdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbGFzdChwcmVkaWNhdGUsIHJlc3VsdFNlbGVjdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBMYXN0T3BlcmF0b3IocHJlZGljYXRlLCByZXN1bHRTZWxlY3RvciwgZGVmYXVsdFZhbHVlLCB0aGlzKSk7XG59XG5leHBvcnRzLmxhc3QgPSBsYXN0O1xudmFyIExhc3RPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGFzdE9wZXJhdG9yKHByZWRpY2F0ZSwgcmVzdWx0U2VsZWN0b3IsIGRlZmF1bHRWYWx1ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgTGFzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBMYXN0U3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuZGVmYXVsdFZhbHVlLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIExhc3RPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIExhc3RTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGFzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGFzdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgcmVzdWx0U2VsZWN0b3IsIGRlZmF1bHRWYWx1ZSwgc291cmNlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICBpZiAodHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKHRoaXMucHJlZGljYXRlKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlQcmVkaWNhdGUodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIGluZGV4LCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFZhbHVlID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICB9O1xuICAgIExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHRoaXMubGFzdFZhbHVlKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTGFzdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXN0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbGFzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGxldF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvbGV0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubGV0ID0gbGV0XzEubGV0UHJvdG87XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubGV0QmluZCA9IGxldF8xLmxldFByb3RvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2xldC5qc1xuICoqIG1vZHVsZSBpZCA9IDE3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBwYXJhbSBmdW5jXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fVxuICogQG1ldGhvZCBsZXRcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGxldFByb3RvKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuYyh0aGlzKTtcbn1cbmV4cG9ydHMubGV0UHJvdG8gPSBsZXRQcm90bztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxldC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2xldC5qc1xuICoqIG1vZHVsZSBpZCA9IDE4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGV2ZXJ5XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9ldmVyeScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmV2ZXJ5ID0gZXZlcnlfMS5ldmVyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZXJ5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2V2ZXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMTgxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2hldGhlciBvciBub3QgZXZlcnkgaXRlbSBvZiB0aGUgc291cmNlIHNhdGlzZmllcyB0aGUgY29uZGl0aW9uIHNwZWNpZmllZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByZWRpY2F0ZSBhIGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyBpZiBhbiBpdGVtIG1lZXRzIGEgc3BlY2lmaWVkIGNvbmRpdGlvbi5cbiAqIEBwYXJhbSB7YW55fSBbdGhpc0FyZ10gb3B0aW9uYWwgb2JqZWN0IHRvIHVzZSBmb3IgYHRoaXNgIGluIHRoZSBjYWxsYmFja1xuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSBvZiBib29sZWFucyB0aGF0IGRldGVybWluZXMgaWYgYWxsIGl0ZW1zIG9mIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBtZWV0IHRoZSBjb25kaXRpb24gc3BlY2lmaWVkLlxuICogQG1ldGhvZCBldmVyeVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZXZlcnkocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRXZlcnlPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcsIHRoaXMpKTtcbn1cbmV4cG9ydHMuZXZlcnkgPSBldmVyeTtcbnZhciBFdmVyeU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVyeU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZywgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgRXZlcnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgRXZlcnlTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZXJ5T3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBFdmVyeVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFdmVyeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXZlcnlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcbiAgICB9XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVyeVZhbHVlTWF0Y2gpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGV2ZXJ5VmFsdWVNYXRjaCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmluZGV4KyssIHRoaXMuc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVyeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVyeS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2V2ZXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMTgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWFwXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tYXAnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAgPSBtYXBfMS5tYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvbWFwLmpzXG4gKiogbW9kdWxlIGlkID0gMTgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogQXBwbGllcyBhIGdpdmVuIGBwcm9qZWN0YCBmdW5jdGlvbiB0byBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSwgYW5kIGVtaXRzIHRoZSByZXN1bHRpbmcgdmFsdWVzIGFzIGFuIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxpa2UgW0FycmF5LnByb3RvdHlwZS5tYXAoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFwKSxcbiAqIGl0IHBhc3NlcyBlYWNoIHNvdXJjZSB2YWx1ZSB0aHJvdWdoIGEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gdG8gZ2V0XG4gKiBjb3JyZXNwb25kaW5nIG91dHB1dCB2YWx1ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFNpbWlsYXIgdG8gdGhlIHdlbGwga25vd24gYEFycmF5LnByb3RvdHlwZS5tYXBgIGZ1bmN0aW9uLCB0aGlzIG9wZXJhdG9yXG4gKiBhcHBsaWVzIGEgcHJvamVjdGlvbiB0byBlYWNoIHZhbHVlIGFuZCBlbWl0cyB0aGF0IHByb2plY3Rpb24gaW4gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgZXZlcnkgZXZlcnkgY2xpY2sgdG8gdGhlIGNsaWVudFggcG9zaXRpb24gb2YgdGhhdCBjbGljazwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcG9zaXRpb25zID0gY2xpY2tzLm1hcChldiA9PiBldi5jbGllbnRYKTtcbiAqIHBvc2l0aW9ucy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgbWFwVG99XG4gKiBAc2VlIHtAbGluayBwbHVja31cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogUn0gcHJvamVjdCBUaGUgZnVuY3Rpb24gdG8gYXBwbHlcbiAqIHRvIGVhY2ggYHZhbHVlYCBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gVGhlIGBpbmRleGAgcGFyYW1ldGVyIGlzXG4gKiB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggZW1pc3Npb24gdGhhdCBoYXMgaGFwcGVuZWQgc2luY2UgdGhlXG4gKiBzdWJzY3JpcHRpb24sIHN0YXJ0aW5nIGZyb20gdGhlIG51bWJlciBgMGAuXG4gKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRlZmluZSB3aGF0IGB0aGlzYCBpcyBpbiB0aGVcbiAqIGBwcm9qZWN0YCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgdmFsdWVzIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSB0cmFuc2Zvcm1lZCBieSB0aGUgZ2l2ZW4gYHByb2plY3RgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBtYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9qZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLiBBcmUgeW91IGxvb2tpbmcgZm9yIGBtYXBUbygpYD8nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykpO1xufVxuZXhwb3J0cy5tYXAgPSBtYXA7XG52YXIgTWFwT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcE9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgbG9va3MgdW5vcHRpbWl6ZWQsIGJ1dCBpdCdzIGFjdHVhbGx5IHB1cnBvc2VmdWxseSBOT1RcbiAgICAvLyB1c2luZyB0cnkvY2F0Y2ggb3B0aW1pemF0aW9ucy5cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL21hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDE4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIG1hcFRvXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tYXBUbycpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1hcFRvID0gbWFwVG9fMS5tYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFRvLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL21hcFRvLmpzXG4gKiogbW9kdWxlIGlkID0gMTg1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogRW1pdHMgdGhlIGdpdmVuIGNvbnN0YW50IHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBldmVyeSB0aW1lIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZSB7QGxpbmsgbWFwfSwgYnV0IGl0IG1hcHMgZXZlcnkgc291cmNlIHZhbHVlIHRvXG4gKiB0aGUgc2FtZSBvdXRwdXQgdmFsdWUgZXZlcnkgdGltZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9tYXBUby5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBUYWtlcyBhIGNvbnN0YW50IGB2YWx1ZWAgYXMgYXJndW1lbnQsIGFuZCBlbWl0cyB0aGF0IHdoZW5ldmVyIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZS4gSW4gb3RoZXIgd29yZHMsIGlnbm9yZXMgdGhlIGFjdHVhbCBzb3VyY2UgdmFsdWUsXG4gKiBhbmQgc2ltcGx5IHVzZXMgdGhlIGVtaXNzaW9uIG1vbWVudCB0byBrbm93IHdoZW4gdG8gZW1pdCB0aGUgZ2l2ZW4gYHZhbHVlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgZXZlcnkgZXZlcnkgY2xpY2sgdG8gdGhlIHN0cmluZyAnSGknPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBncmVldGluZ3MgPSBjbGlja3MubWFwVG8oJ0hpJyk7XG4gKiBncmVldGluZ3Muc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIG1hcH1cbiAqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcCBlYWNoIHNvdXJjZSB2YWx1ZSB0by5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgZ2l2ZW4gYHZhbHVlYCBldmVyeSB0aW1lXG4gKiB0aGUgc291cmNlIE9ic2VydmFibGUgZW1pdHMgc29tZXRoaW5nLlxuICogQG1ldGhvZCBtYXBUb1xuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWFwVG8odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBNYXBUb09wZXJhdG9yKHZhbHVlKSk7XG59XG5leHBvcnRzLm1hcFRvID0gbWFwVG87XG52YXIgTWFwVG9PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwVG9PcGVyYXRvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIE1hcFRvT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTWFwVG9TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBUb09wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWFwVG9TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWFwVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hcFRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIE1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy52YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwVG9TdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9tYXBUby5qc1xuICoqIG1vZHVsZSBpZCA9IDE4NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIG1hdGVyaWFsaXplXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tYXRlcmlhbGl6ZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1hdGVyaWFsaXplID0gbWF0ZXJpYWxpemVfMS5tYXRlcmlhbGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGVyaWFsaXplLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL21hdGVyaWFsaXplLmpzXG4gKiogbW9kdWxlIGlkID0gMTg3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoJy4uL05vdGlmaWNhdGlvbicpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCByZXByZXNlbnRzIGFsbCBvZiB0aGUgZW1pc3Npb25zIGFuZCBub3RpZmljYXRpb25zXG4gKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBpbnRvIGVtaXNzaW9ucyBtYXJrZWQgd2l0aCB0aGVpciBvcmlnaW5hbCB0eXBlc1xuICogd2l0aGluIGEgYE5vdGlmaWNhdGlvbmAgb2JqZWN0cy5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL21hdGVyaWFsaXplLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBzZWUge0BsaW5rIE5vdGlmaWNhdGlvbn1cbiAqXG4gKiBAc2NoZWR1bGVyIG1hdGVyaWFsaXplIGRvZXMgbm90IG9wZXJhdGUgYnkgZGVmYXVsdCBvbiBhIHBhcnRpY3VsYXIgU2NoZWR1bGVyLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxOb3RpZmljYXRpb248VD4+fSBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgdGhhdCBhcmUgdGhlIHJlc3VsdCBvZlxuICogbWF0ZXJpYWxpemluZyB0aGUgaXRlbXMgYW5kIG5vdGlmaWNhdGlvbnMgb2YgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBtYXRlcmlhbGl6ZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgTWF0ZXJpYWxpemVPcGVyYXRvcigpKTtcbn1cbmV4cG9ydHMubWF0ZXJpYWxpemUgPSBtYXRlcmlhbGl6ZTtcbnZhciBNYXRlcmlhbGl6ZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXRlcmlhbGl6ZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBNYXRlcmlhbGl6ZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IE1hdGVyaWFsaXplU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWF0ZXJpYWxpemVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIE1hdGVyaWFsaXplU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1hdGVyaWFsaXplU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXRlcmlhbGl6ZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yKGVycikpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgTWF0ZXJpYWxpemVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hdGVyaWFsaXplU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGVyaWFsaXplLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvbWF0ZXJpYWxpemUuanNcbiAqKiBtb2R1bGUgaWQgPSAxODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBtZXJnZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvbWVyZ2UnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tZXJnZSA9IG1lcmdlXzEubWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9tZXJnZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tZXJnZUFsbCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1lcmdlQWxsID0gbWVyZ2VBbGxfMS5tZXJnZUFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL21lcmdlQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTkwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL21lcmdlTWFwJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWVyZ2VNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZsYXRNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvbWVyZ2VNYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBtZXJnZU1hcFRvXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tZXJnZU1hcFRvJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZmxhdE1hcFRvID0gbWVyZ2VNYXBUb18xLm1lcmdlTWFwVG87XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWVyZ2VNYXBUbyA9IG1lcmdlTWFwVG9fMS5tZXJnZU1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXBUby5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9tZXJnZU1hcFRvLmpzXG4gKiogbW9kdWxlIGlkID0gMTkyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbXVsdGljYXN0XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tdWx0aWNhc3QnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tdWx0aWNhc3QgPSBtdWx0aWNhc3RfMS5tdWx0aWNhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aWNhc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvbXVsdGljYXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9vYnNlcnZlT24nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5vYnNlcnZlT24gPSBvYnNlcnZlT25fMS5vYnNlcnZlT247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivb2JzZXJ2ZU9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgcGFydGl0aW9uXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9wYXJ0aXRpb24nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBwYXJ0aXRpb25fMS5wYXJ0aXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvcGFydGl0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTk1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBub3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvbm90Jyk7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKCcuL2ZpbHRlcicpO1xuLyoqXG4gKiBTcGxpdHMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGludG8gdHdvLCBvbmUgd2l0aCB2YWx1ZXMgdGhhdCBzYXRpc2Z5IGFcbiAqIHByZWRpY2F0ZSwgYW5kIGFub3RoZXIgd2l0aCB2YWx1ZXMgdGhhdCBkb24ndCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgZmlsdGVyfSwgYnV0IHJldHVybnMgdHdvIE9ic2VydmFibGVzOlxuICogb25lIGxpa2UgdGhlIG91dHB1dCBvZiB7QGxpbmsgZmlsdGVyfSwgYW5kIHRoZSBvdGhlciB3aXRoIHZhbHVlcyB0aGF0IGRpZCBub3RcbiAqIHBhc3MgdGhlIGNvbmRpdGlvbi48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9wYXJ0aXRpb24ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYHBhcnRpdGlvbmAgb3V0cHV0cyBhbiBhcnJheSB3aXRoIHR3byBPYnNlcnZhYmxlcyB0aGF0IHBhcnRpdGlvbiB0aGUgdmFsdWVzXG4gKiBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0aHJvdWdoIHRoZSBnaXZlbiBgcHJlZGljYXRlYCBmdW5jdGlvbi4gVGhlIGZpcnN0XG4gKiBPYnNlcnZhYmxlIGluIHRoYXQgYXJyYXkgZW1pdHMgc291cmNlIHZhbHVlcyBmb3Igd2hpY2ggdGhlIHByZWRpY2F0ZSBhcmd1bWVudFxuICogcmV0dXJucyB0cnVlLiBUaGUgc2Vjb25kIE9ic2VydmFibGUgZW1pdHMgc291cmNlIHZhbHVlcyBmb3Igd2hpY2ggdGhlXG4gKiBwcmVkaWNhdGUgcmV0dXJucyBmYWxzZS4gVGhlIGZpcnN0IGJlaGF2ZXMgbGlrZSB7QGxpbmsgZmlsdGVyfSBhbmQgdGhlIHNlY29uZFxuICogYmVoYXZlcyBsaWtlIHtAbGluayBmaWx0ZXJ9IHdpdGggdGhlIHByZWRpY2F0ZSBuZWdhdGVkLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlBhcnRpdGlvbiBjbGljayBldmVudHMgaW50byB0aG9zZSBvbiBESVYgZWxlbWVudHMgYW5kIHRob3NlIGVsc2V3aGVyZTwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcGFydHMgPSBjbGlja3MucGFydGl0aW9uKGV2ID0+IGV2LnRhcmdldC50YWdOYW1lID09PSAnRElWJyk7XG4gKiB2YXIgY2xpY2tzT25EaXZzID0gcGFydHNbMF07XG4gKiB2YXIgY2xpY2tzRWxzZXdoZXJlID0gcGFydHNbMV07XG4gKiBjbGlja3NPbkRpdnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coJ0RJViBjbGlja2VkOiAnLCB4KSk7XG4gKiBjbGlja3NFbHNld2hlcmUuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coJ090aGVyIGNsaWNrZWQ6ICcsIHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBmaWx0ZXJ9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZSBBIGZ1bmN0aW9uIHRoYXRcbiAqIGV2YWx1YXRlcyBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBpdCByZXR1cm5zIGB0cnVlYCxcbiAqIHRoZSB2YWx1ZSBpcyBlbWl0dGVkIG9uIHRoZSBmaXJzdCBPYnNlcnZhYmxlIGluIHRoZSByZXR1cm5lZCBhcnJheSwgaWZcbiAqIGBmYWxzZWAgdGhlIHZhbHVlIGlzIGVtaXR0ZWQgb24gdGhlIHNlY29uZCBPYnNlcnZhYmxlIGluIHRoZSBhcnJheS4gVGhlXG4gKiBgaW5kZXhgIHBhcmFtZXRlciBpcyB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggc291cmNlIGVtaXNzaW9uIHRoYXQgaGFzXG4gKiBoYXBwZW5lZCBzaW5jZSB0aGUgc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXIgYDBgLlxuICogQHBhcmFtIHthbnl9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBhcmd1bWVudCB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIG9mIGB0aGlzYFxuICogaW4gdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7W09ic2VydmFibGU8VD4sIE9ic2VydmFibGU8VD5dfSBBbiBhcnJheSB3aXRoIHR3byBPYnNlcnZhYmxlczogb25lXG4gKiB3aXRoIHZhbHVlcyB0aGF0IHBhc3NlZCB0aGUgcHJlZGljYXRlLCBhbmQgYW5vdGhlciB3aXRoIHZhbHVlcyB0aGF0IGRpZCBub3RcbiAqIHBhc3MgdGhlIHByZWRpY2F0ZS5cbiAqIEBtZXRob2QgcGFydGl0aW9uXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBwYXJ0aXRpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZmlsdGVyXzEuZmlsdGVyLmNhbGwodGhpcywgcHJlZGljYXRlKSxcbiAgICAgICAgZmlsdGVyXzEuZmlsdGVyLmNhbGwodGhpcywgbm90XzEubm90KHByZWRpY2F0ZSwgdGhpc0FyZykpXG4gICAgXTtcbn1cbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGl0aW9uLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvcGFydGl0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTk2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIG5vdChwcmVkLCB0aGlzQXJnKSB7XG4gICAgZnVuY3Rpb24gbm90UHJlZCgpIHtcbiAgICAgICAgcmV0dXJuICEobm90UHJlZC5wcmVkLmFwcGx5KG5vdFByZWQudGhpc0FyZywgYXJndW1lbnRzKSk7XG4gICAgfVxuICAgIG5vdFByZWQucHJlZCA9IHByZWQ7XG4gICAgbm90UHJlZC50aGlzQXJnID0gdGhpc0FyZztcbiAgICByZXR1cm4gbm90UHJlZDtcbn1cbmV4cG9ydHMubm90ID0gbm90O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9ub3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBwbHVja18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvcGx1Y2snKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wbHVjayA9IHBsdWNrXzEucGx1Y2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVjay5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9wbHVjay5qc1xuICoqIG1vZHVsZSBpZCA9IDE5OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWFwXzEgPSByZXF1aXJlKCcuL21hcCcpO1xuLyoqXG4gKiBNYXBzIGVhY2ggc291cmNlIHZhbHVlIChhbiBvYmplY3QpIHRvIGl0cyBzcGVjaWZpZWQgbmVzdGVkIHByb3BlcnR5LlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MaWtlIHtAbGluayBtYXB9LCBidXQgbWVhbnQgb25seSBmb3IgcGlja2luZyBvbmUgb2ZcbiAqIHRoZSBuZXN0ZWQgcHJvcGVydGllcyBvZiBldmVyeSBlbWl0dGVkIG9iamVjdC48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9wbHVjay5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBHaXZlbiBhIGxpc3Qgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIGEgcGF0aCB0byBhbiBvYmplY3QgcHJvcGVydHksIHJldHJpZXZlc1xuICogdGhlIHZhbHVlIG9mIGEgc3BlY2lmaWVkIG5lc3RlZCBwcm9wZXJ0eSBmcm9tIGFsbCB2YWx1ZXMgaW4gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gSWYgYSBwcm9wZXJ0eSBjYW4ndCBiZSByZXNvbHZlZCwgaXQgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgZm9yXG4gKiB0aGF0IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBldmVyeSBldmVyeSBjbGljayB0byB0aGUgdGFnTmFtZSBvZiB0aGUgY2xpY2tlZCB0YXJnZXQgZWxlbWVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgdGFnTmFtZXMgPSBjbGlja3MucGx1Y2soJ3RhcmdldCcsICd0YWdOYW1lJyk7XG4gKiB0YWdOYW1lcy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgbWFwfVxuICpcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBwcm9wZXJ0aWVzIFRoZSBuZXN0ZWQgcHJvcGVydGllcyB0byBwbHVjayBmcm9tIGVhY2ggc291cmNlXG4gKiB2YWx1ZSAoYW4gb2JqZWN0KS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSBvZiBwcm9wZXJ0eSB2YWx1ZXMgZnJvbSB0aGVcbiAqIHNvdXJjZSB2YWx1ZXMuXG4gKiBAbWV0aG9kIHBsdWNrXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBwbHVjaygpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHByb3BlcnRpZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcF8xLm1hcC5jYWxsKHRoaXMsIHBsdWNrZXIocHJvcGVydGllcywgbGVuZ3RoKSk7XG59XG5leHBvcnRzLnBsdWNrID0gcGx1Y2s7XG5mdW5jdGlvbiBwbHVja2VyKHByb3BzLCBsZW5ndGgpIHtcbiAgICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQcm9wID0geDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBjdXJyZW50UHJvcFtwcm9wc1tpXV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFByb3AgPSBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudFByb3A7XG4gICAgfTtcbiAgICByZXR1cm4gbWFwcGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Y2suanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9wbHVjay5qc1xuICoqIG1vZHVsZSBpZCA9IDE5OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHB1Ymxpc2hfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3B1Ymxpc2gnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wdWJsaXNoID0gcHVibGlzaF8xLnB1Ymxpc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3B1Ymxpc2guanNcbiAqKiBtb2R1bGUgaWQgPSAyMDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4uL1N1YmplY3QnKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoJy4vbXVsdGljYXN0Jyk7XG4vKipcbiAqIFJldHVybnMgYSBDb25uZWN0YWJsZU9ic2VydmFibGUsIHdoaWNoIGlzIGEgdmFyaWV0eSBvZiBPYnNlcnZhYmxlIHRoYXQgd2FpdHMgdW50aWwgaXRzIGNvbm5lY3QgbWV0aG9kIGlzIGNhbGxlZFxuICogYmVmb3JlIGl0IGJlZ2lucyBlbWl0dGluZyBpdGVtcyB0byB0aG9zZSBPYnNlcnZlcnMgdGhhdCBoYXZlIHN1YnNjcmliZWQgdG8gaXQuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9wdWJsaXNoLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEByZXR1cm4gYSBDb25uZWN0YWJsZU9ic2VydmFibGUgdGhhdCB1cG9uIGNvbm5lY3Rpb24gY2F1c2VzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0byBlbWl0IGl0ZW1zIHRvIGl0cyBPYnNlcnZlcnMuXG4gKiBAbWV0aG9kIHB1Ymxpc2hcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2goKSB7XG4gICAgcmV0dXJuIG11bHRpY2FzdF8xLm11bHRpY2FzdC5jYWxsKHRoaXMsIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpKTtcbn1cbmV4cG9ydHMucHVibGlzaCA9IHB1Ymxpc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvcHVibGlzaC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHB1Ymxpc2hCZWhhdmlvcl8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvcHVibGlzaEJlaGF2aW9yJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUucHVibGlzaEJlaGF2aW9yID0gcHVibGlzaEJlaGF2aW9yXzEucHVibGlzaEJlaGF2aW9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaEJlaGF2aW9yLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3B1Ymxpc2hCZWhhdmlvci5qc1xuICoqIG1vZHVsZSBpZCA9IDIwMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9CZWhhdmlvclN1YmplY3QnKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoJy4vbXVsdGljYXN0Jyk7XG4vKipcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHJldHVybiB7Q29ubmVjdGFibGVPYnNlcnZhYmxlPFQ+fVxuICogQG1ldGhvZCBwdWJsaXNoQmVoYXZpb3JcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hCZWhhdmlvcih2YWx1ZSkge1xuICAgIHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QuY2FsbCh0aGlzLCBuZXcgQmVoYXZpb3JTdWJqZWN0XzEuQmVoYXZpb3JTdWJqZWN0KHZhbHVlKSk7XG59XG5leHBvcnRzLnB1Ymxpc2hCZWhhdmlvciA9IHB1Ymxpc2hCZWhhdmlvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hCZWhhdmlvci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3B1Ymxpc2hCZWhhdmlvci5qc1xuICoqIG1vZHVsZSBpZCA9IDIwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuL1N1YmplY3QnKTtcbnZhciB0aHJvd0Vycm9yXzEgPSByZXF1aXJlKCcuL3V0aWwvdGhyb3dFcnJvcicpO1xudmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEgPSByZXF1aXJlKCcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InKTtcbi8qKlxuICogQGNsYXNzIEJlaGF2aW9yU3ViamVjdDxUPlxuICovXG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgIH1cbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcmVkKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yXzEudGhyb3dFcnJvcih0aGlzLmVycm9yVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFzdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbmV4dC5jYWxsKHRoaXMsIHRoaXMuX3ZhbHVlID0gdmFsdWUpO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuaGFzRXJyb3JlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgdGhpcy5lcnJvclZhbHVlID0gZXJyKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL0JlaGF2aW9yU3ViamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHB1Ymxpc2hSZXBsYXlfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3B1Ymxpc2hSZXBsYXknKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wdWJsaXNoUmVwbGF5ID0gcHVibGlzaFJlcGxheV8xLnB1Ymxpc2hSZXBsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoUmVwbGF5LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3B1Ymxpc2hSZXBsYXkuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBwdWJsaXNoTGFzdF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvcHVibGlzaExhc3QnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5wdWJsaXNoTGFzdCA9IHB1Ymxpc2hMYXN0XzEucHVibGlzaExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoTGFzdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9wdWJsaXNoTGFzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9Bc3luY1N1YmplY3QnKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoJy4vbXVsdGljYXN0Jyk7XG4vKipcbiAqIEByZXR1cm4ge0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPn1cbiAqIEBtZXRob2QgcHVibGlzaExhc3RcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hMYXN0KCkge1xuICAgIHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QuY2FsbCh0aGlzLCBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCkpO1xufVxuZXhwb3J0cy5wdWJsaXNoTGFzdCA9IHB1Ymxpc2hMYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaExhc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9wdWJsaXNoTGFzdC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHJhY2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3JhY2UnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5yYWNlID0gcmFjZV8xLnJhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3JhY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3JlZHVjZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnJlZHVjZSA9IHJlZHVjZV8xLnJlZHVjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHVjZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9yZWR1Y2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBhcHBsaWVzIGEgc3BlY2lmaWVkIGFjY3VtdWxhdG9yIGZ1bmN0aW9uIHRvIHRoZSBmaXJzdCBpdGVtIGVtaXR0ZWQgYnkgYSBzb3VyY2UgT2JzZXJ2YWJsZSxcbiAqIHRoZW4gZmVlZHMgdGhlIHJlc3VsdCBvZiB0aGF0IGZ1bmN0aW9uIGFsb25nIHdpdGggdGhlIHNlY29uZCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGludG8gdGhlIHNhbWVcbiAqIGZ1bmN0aW9uLCBhbmQgc28gb24gdW50aWwgYWxsIGl0ZW1zIGhhdmUgYmVlbiBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYW5kIGVtaXRzIHRoZSBmaW5hbCByZXN1bHQgZnJvbVxuICogdGhlIGZpbmFsIGNhbGwgdG8geW91ciBmdW5jdGlvbiBhcyBpdHMgc29sZSBpdGVtLlxuICogVGhpcyB0ZWNobmlxdWUsIHdoaWNoIGlzIGNhbGxlZCBcInJlZHVjZVwiIGhlcmUsIGlzIHNvbWV0aW1lcyBjYWxsZWQgXCJhZ2dyZWdhdGUsXCIgXCJmb2xkLFwiIFwiYWNjdW11bGF0ZSxcIiBcImNvbXByZXNzLFwiIG9yXG4gKiBcImluamVjdFwiIGluIG90aGVyIHByb2dyYW1taW5nIGNvbnRleHRzLlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvcmVkdWNlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7aW5pdGlhbFZhbHVlfSB0aGUgaW5pdGlhbCAoc2VlZCkgYWNjdW11bGF0b3IgdmFsdWVcbiAqIEBwYXJhbSB7YWNjdW11bGF0b3J9IGFuIGFjY3VtdWxhdG9yIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgb24gZWFjaCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB0aGVcbiAqIHJlc3VsdCBvZiB3aGljaCB3aWxsIGJlIHVzZWQgaW4gdGhlIG5leHQgYWNjdW11bGF0b3IgY2FsbC5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhIHNpbmdsZSBpdGVtIHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBhY2N1bXVsYXRpbmcgdGhlIG91dHB1dCBmcm9tIHRoZVxuICogaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIHJlZHVjZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gcmVkdWNlKHByb2plY3QsIHNlZWQpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBSZWR1Y2VPcGVyYXRvcihwcm9qZWN0LCBzZWVkKSk7XG59XG5leHBvcnRzLnJlZHVjZSA9IHJlZHVjZTtcbnZhciBSZWR1Y2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVkdWNlT3BlcmF0b3IocHJvamVjdCwgc2VlZCkge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xuICAgIH1cbiAgICBSZWR1Y2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBSZWR1Y2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy5zZWVkKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVkdWNlT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5SZWR1Y2VPcGVyYXRvciA9IFJlZHVjZU9wZXJhdG9yO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBSZWR1Y2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVkdWNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWR1Y2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCBzZWVkKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFjYyA9IHNlZWQ7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuaGFzU2VlZCA9IHR5cGVvZiBzZWVkICE9PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgUmVkdWNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUgfHwgKHRoaXMuaGFzVmFsdWUgPSB0aGlzLmhhc1NlZWQpKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlSZWR1Y2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY2MgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWR1Y2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVkdWNlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodGhpcy5hY2MsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2MgPSByZXN1bHQ7XG4gICAgfTtcbiAgICBSZWR1Y2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlIHx8IHRoaXMuaGFzU2VlZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuYWNjKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVkdWNlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuUmVkdWNlU3Vic2NyaWJlciA9IFJlZHVjZVN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1Y2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9yZWR1Y2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyMTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciByZXBlYXRfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3JlcGVhdCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnJlcGVhdCA9IHJlcGVhdF8xLnJlcGVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9yZXBlYXQuanNcbiAqKiBtb2R1bGUgaWQgPSAyMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vb2JzZXJ2YWJsZS9FbXB0eU9ic2VydmFibGUnKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVwZWF0cyB0aGUgc3RyZWFtIG9mIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGF0IG1vc3QgY291bnQgdGltZXMsXG4gKiBvbiBhIHBhcnRpY3VsYXIgU2NoZWR1bGVyLlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvcmVwZWF0LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyXSB0aGUgU2NoZWR1bGVyIHRvIGVtaXQgdGhlIGl0ZW1zIG9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb3VudF0gdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgc291cmNlIE9ic2VydmFibGUgaXRlbXMgYXJlIHJlcGVhdGVkLCBhIGNvdW50IG9mIDAgd2lsbCB5aWVsZFxuICogYW4gZW1wdHkgT2JzZXJ2YWJsZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCByZXBlYXRzIHRoZSBzdHJlYW0gb2YgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYXQgbW9zdFxuICogY291bnQgdGltZXMuXG4gKiBAbWV0aG9kIHJlcGVhdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZSgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlmdChuZXcgUmVwZWF0T3BlcmF0b3IoLTEsIHRoaXMpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFJlcGVhdE9wZXJhdG9yKGNvdW50IC0gMSwgdGhpcykpO1xuICAgIH1cbn1cbmV4cG9ydHMucmVwZWF0ID0gcmVwZWF0O1xudmFyIFJlcGVhdE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBlYXRPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJlcGVhdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFJlcGVhdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFJlcGVhdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXBlYXRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlcGVhdFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBSZXBlYXRTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXBlYXRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvcmVwZWF0LmpzXG4gKiogbW9kdWxlIGlkID0gMjEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgcmV0cnlfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3JldHJ5Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUucmV0cnkgPSByZXRyeV8xLnJldHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvcmV0cnkuanNcbiAqKiBtb2R1bGUgaWQgPSAyMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcmVzdWJzY3JpYmluZyB0byBpdCBpZiBpdCBjYWxscyBgZXJyb3JgIGFuZCB0aGVcbiAqIHByZWRpY2F0ZSByZXR1cm5zIHRydWUgZm9yIHRoYXQgc3BlY2lmaWMgZXhjZXB0aW9uIGFuZCByZXRyeSBjb3VudC5cbiAqIElmIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBjYWxscyBgZXJyb3JgLCB0aGlzIG1ldGhvZCB3aWxsIHJlc3Vic2NyaWJlIHRvIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBmb3IgYSBtYXhpbXVtIG9mXG4gKiBjb3VudCByZXN1YnNjcmlwdGlvbnMgKGdpdmVuIGFzIGEgbnVtYmVyIHBhcmFtZXRlcikgcmF0aGVyIHRoYW4gcHJvcGFnYXRpbmcgdGhlIGBlcnJvcmAgY2FsbC5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3JldHJ5LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEFueSBhbmQgYWxsIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpbGwgYmUgZW1pdHRlZCBieSB0aGUgcmVzdWx0aW5nIE9ic2VydmFibGUsIGV2ZW4gdGhvc2UgZW1pdHRlZFxuICogZHVyaW5nIGZhaWxlZCBzdWJzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgaWYgYW4gT2JzZXJ2YWJsZSBmYWlscyBhdCBmaXJzdCBidXQgZW1pdHMgWzEsIDJdIHRoZW4gc3VjY2VlZHMgdGhlIHNlY29uZFxuICogdGltZSBhbmQgZW1pdHM6IFsxLCAyLCAzLCA0LCA1XSB0aGVuIHRoZSBjb21wbGV0ZSBzdHJlYW0gb2YgZW1pc3Npb25zIGFuZCBub3RpZmljYXRpb25zXG4gKiB3b3VsZCBiZTogWzEsIDIsIDEsIDIsIDMsIDQsIDUsIGBjb21wbGV0ZWBdLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBiZWZvcmUgZmFpbGluZy5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBtb2RpZmllZCB3aXRoIHRoZSByZXRyeSBsb2dpYy5cbiAqIEBtZXRob2QgcmV0cnlcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHJldHJ5KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHsgY291bnQgPSAtMTsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFJldHJ5T3BlcmF0b3IoY291bnQsIHRoaXMpKTtcbn1cbmV4cG9ydHMucmV0cnkgPSByZXRyeTtcbnZhciBSZXRyeU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXRyeU9wZXJhdG9yKGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgUmV0cnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBSZXRyeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5jb3VudCwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUmV0cnlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmV0cnlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJldHJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY291bnQsIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJldHJ5U3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHNvdXJjZSA9IF9hLnNvdXJjZSwgY291bnQgPSBfYS5jb3VudDtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvdW50ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3JldHJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMjE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgcmV0cnlXaGVuXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9yZXRyeVdoZW4nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5yZXRyeVdoZW4gPSByZXRyeVdoZW5fMS5yZXRyeVdoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeVdoZW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvcmV0cnlXaGVuLmpzXG4gKiogbW9kdWxlIGlkID0gMjE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4uL1N1YmplY3QnKTtcbnZhciB0cnlDYXRjaF8xID0gcmVxdWlyZSgnLi4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlIHNvdXJjZSBvYnNlcnZhYmxlIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBhbiBgZXJyb3JgLlxuICogQW4gYGVycm9yYCB3aWxsIGNhdXNlIHRoZSBlbWlzc2lvbiBvZiB0aGUgVGhyb3dhYmxlIHRoYXQgY2F1c2UgdGhlIGVycm9yIHRvIHRoZSBPYnNlcnZhYmxlIHJldHVybmVkIGZyb21cbiAqIG5vdGlmaWNhdGlvbkhhbmRsZXIuIElmIHRoYXQgT2JzZXJ2YWJsZSBjYWxscyBvbkNvbXBsZXRlIG9yIGBlcnJvcmAgdGhlbiByZXRyeSB3aWxsIGNhbGwgYGNvbXBsZXRlYCBvciBgZXJyb3JgXG4gKiBvbiB0aGUgY2hpbGQgc3Vic2NyaXB0aW9uLiBPdGhlcndpc2UsIHRoaXMgT2JzZXJ2YWJsZSB3aWxsIHJlc3Vic2NyaWJlIHRvIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSwgb24gYSBwYXJ0aWN1bGFyXG4gKiBTY2hlZHVsZXIuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9yZXRyeVdoZW4ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHBhcmFtIHtub3RpZmljYXRpb25IYW5kbGVyfSByZWNlaXZlcyBhbiBPYnNlcnZhYmxlIG9mIG5vdGlmaWNhdGlvbnMgd2l0aCB3aGljaCBhIHVzZXIgY2FuIGBjb21wbGV0ZWAgb3IgYGVycm9yYCxcbiAqIGFib3J0aW5nIHRoZSByZXRyeS5cbiAqIEBwYXJhbSB7c2NoZWR1bGVyfSB0aGUgU2NoZWR1bGVyIG9uIHdoaWNoIHRvIHN1YnNjcmliZSB0byB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSB0aGUgc291cmNlIE9ic2VydmFibGUgbW9kaWZpZWQgd2l0aCByZXRyeSBsb2dpYy5cbiAqIEBtZXRob2QgcmV0cnlXaGVuXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiByZXRyeVdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBSZXRyeVdoZW5PcGVyYXRvcihub3RpZmllciwgdGhpcykpO1xufVxuZXhwb3J0cy5yZXRyeVdoZW4gPSByZXRyeVdoZW47XG52YXIgUmV0cnlXaGVuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJldHJ5V2hlbk9wZXJhdG9yKG5vdGlmaWVyLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgUmV0cnlXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgUmV0cnlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5V2hlbk9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgUmV0cnlXaGVuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJldHJ5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmV0cnlXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgbm90aWZpZXIsIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICB2YXIgcmV0cmllcyA9IHRoaXMucmV0cmllcztcbiAgICAgICAgICAgIHZhciByZXRyaWVzU3Vic2NyaXB0aW9uID0gdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKCFyZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgcmV0cmllcyA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2godGhpcy5ub3RpZmllcikoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICBpZiAocmV0cmllcyA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJldHJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG4gICAgICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSByZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgZXJyb3JzLm5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBlcnJvcnMgPSBfYS5lcnJvcnMsIHJldHJpZXNTdWJzY3JpcHRpb24gPSBfYS5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICBlcnJvcnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0cmllc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSBudWxsO1xuICAgIH07XG4gICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBlcnJvcnMgPSBfYS5lcnJvcnMsIHJldHJpZXMgPSBfYS5yZXRyaWVzLCByZXRyaWVzU3Vic2NyaXB0aW9uID0gX2EucmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuICAgICAgICB0aGlzLnJldHJpZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG4gICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IHJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuc291cmNlLnN1YnNjcmliZSh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXRyeVdoZW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5V2hlbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3JldHJ5V2hlbi5qc1xuICoqIG1vZHVsZSBpZCA9IDIxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHNhbXBsZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivc2FtcGxlJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2FtcGxlID0gc2FtcGxlXzEuc2FtcGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3NhbXBsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDIxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKCcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0Jyk7XG4vKipcbiAqIEVtaXRzIHRoZSBtb3N0IHJlY2VudGx5IGVtaXR0ZWQgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgd2hlbmV2ZXJcbiAqIGFub3RoZXIgT2JzZXJ2YWJsZSwgdGhlIGBub3RpZmllcmAsIGVtaXRzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIHNhbXBsZVRpbWV9LCBidXQgc2FtcGxlcyB3aGVuZXZlclxuICogdGhlIGBub3RpZmllcmAgT2JzZXJ2YWJsZSBlbWl0cyBzb21ldGhpbmcuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvc2FtcGxlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFdoZW5ldmVyIHRoZSBgbm90aWZpZXJgIE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZSBvciBjb21wbGV0ZXMsIGBzYW1wbGVgXG4gKiBsb29rcyBhdCB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIGVtaXRzIHdoaWNoZXZlciB2YWx1ZSBpdCBoYXMgbW9zdCByZWNlbnRseVxuICogZW1pdHRlZCBzaW5jZSB0aGUgcHJldmlvdXMgc2FtcGxpbmcsIHVubGVzcyB0aGUgc291cmNlIGhhcyBub3QgZW1pdHRlZFxuICogYW55dGhpbmcgc2luY2UgdGhlIHByZXZpb3VzIHNhbXBsaW5nLiBUaGUgYG5vdGlmaWVyYCBpcyBzdWJzY3JpYmVkIHRvIGFzIHNvb25cbiAqIGFzIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBzdWJzY3JpYmVkLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk9uIGV2ZXJ5IGNsaWNrLCBzYW1wbGUgdGhlIG1vc3QgcmVjZW50IFwic2Vjb25kc1wiIHRpbWVyPC9jYXB0aW9uPlxuICogdmFyIHNlY29uZHMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBzZWNvbmRzLnNhbXBsZShjbGlja3MpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBhdWRpdH1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cbiAqIEBzZWUge0BsaW5rIHRocm90dGxlfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZTxhbnk+fSBub3RpZmllciBUaGUgT2JzZXJ2YWJsZSB0byB1c2UgZm9yIHNhbXBsaW5nIHRoZVxuICogc291cmNlIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2Ygc2FtcGxpbmcgdGhlXG4gKiB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgd2hlbmV2ZXIgdGhlIG5vdGlmaWVyIE9ic2VydmFibGVcbiAqIGVtaXRzIHZhbHVlIG9yIGNvbXBsZXRlcy5cbiAqIEBtZXRob2Qgc2FtcGxlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBzYW1wbGUobm90aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTYW1wbGVPcGVyYXRvcihub3RpZmllcikpO1xufVxuZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGU7XG52YXIgU2FtcGxlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbXBsZU9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgU2FtcGxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2FtcGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTYW1wbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FtcGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBub3RpZmllcikpO1xuICAgIH1cbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBTYW1wbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3NhbXBsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDIxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHNhbXBsZVRpbWVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3NhbXBsZVRpbWUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zYW1wbGVUaW1lID0gc2FtcGxlVGltZV8xLnNhbXBsZVRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGVUaW1lLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3NhbXBsZVRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuLi9zY2hlZHVsZXIvYXN5bmMnKTtcbi8qKlxuICogRW1pdHMgdGhlIG1vc3QgcmVjZW50bHkgZW1pdHRlZCB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB3aXRoaW5cbiAqIHBlcmlvZGljIHRpbWUgaW50ZXJ2YWxzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5TYW1wbGVzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBhdCBwZXJpb2RpYyB0aW1lXG4gKiBpbnRlcnZhbHMsIGVtaXR0aW5nIHdoYXQgaXQgc2FtcGxlcy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9zYW1wbGVUaW1lLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGBzYW1wbGVUaW1lYCBwZXJpb2RpY2FsbHkgbG9va3MgYXQgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBlbWl0cyB3aGljaGV2ZXJcbiAqIHZhbHVlIGl0IGhhcyBtb3N0IHJlY2VudGx5IGVtaXR0ZWQgc2luY2UgdGhlIHByZXZpb3VzIHNhbXBsaW5nLCB1bmxlc3MgdGhlXG4gKiBzb3VyY2UgaGFzIG5vdCBlbWl0dGVkIGFueXRoaW5nIHNpbmNlIHRoZSBwcmV2aW91cyBzYW1wbGluZy4gVGhlIHNhbXBsaW5nXG4gKiBoYXBwZW5zIHBlcmlvZGljYWxseSBpbiB0aW1lIGV2ZXJ5IGBwZXJpb2RgIG1pbGxpc2Vjb25kcyAob3IgdGhlIHRpbWUgdW5pdFxuICogZGVmaW5lZCBieSB0aGUgb3B0aW9uYWwgYHNjaGVkdWxlcmAgYXJndW1lbnQpLiBUaGUgc2FtcGxpbmcgc3RhcnRzIGFzIHNvb24gYXNcbiAqIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBpcyBzdWJzY3JpYmVkLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkV2ZXJ5IHNlY29uZCwgZW1pdCB0aGUgbW9zdCByZWNlbnQgY2xpY2sgYXQgbW9zdCBvbmNlPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3Muc2FtcGxlVGltZSgxMDAwKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgYXVkaXRUaW1lfVxuICogQHNlZSB7QGxpbmsgZGVib3VuY2VUaW1lfVxuICogQHNlZSB7QGxpbmsgZGVsYXl9XG4gKiBAc2VlIHtAbGluayBzYW1wbGV9XG4gKiBAc2VlIHtAbGluayB0aHJvdHRsZVRpbWV9XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHBlcmlvZCBUaGUgc2FtcGxpbmcgcGVyaW9kIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlXG4gKiB0aW1lIHVuaXQgZGV0ZXJtaW5lZCBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvclxuICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgc2FtcGxpbmcuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2Ygc2FtcGxpbmcgdGhlXG4gKiB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYXQgdGhlIHNwZWNpZmllZCB0aW1lIGludGVydmFsLlxuICogQG1ldGhvZCBzYW1wbGVUaW1lXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBzYW1wbGVUaW1lKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTYW1wbGVUaW1lT3BlcmF0b3IocGVyaW9kLCBzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2FtcGxlVGltZSA9IHNhbXBsZVRpbWU7XG52YXIgU2FtcGxlVGltZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVUaW1lT3BlcmF0b3IocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2Q7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBTYW1wbGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2FtcGxlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wZXJpb2QsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlVGltZU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU2FtcGxlVGltZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYW1wbGVUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYW1wbGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTm90aWZpY2F0aW9uLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogdGhpcywgcGVyaW9kOiBwZXJpb2QgfSkpO1xuICAgIH1cbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTYW1wbGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmxhc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTm90aWZpY2F0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG4gICAgc3Vic2NyaWJlci5ub3RpZnlOZXh0KCk7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgcGVyaW9kKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZVRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9zYW1wbGVUaW1lLmpzXG4gKiogbW9kdWxlIGlkID0gMjIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgc2Nhbl8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivc2NhbicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNjYW4gPSBzY2FuXzEuc2Nhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2Nhbi5qc1xuICoqIG1vZHVsZSBpZCA9IDIyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIEFwcGxpZXMgYW4gYWNjdW11bGF0aW9uIGZ1bmN0aW9uIG92ZXIgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBhbmQgcmV0dXJucyBlYWNoXG4gKiBpbnRlcm1lZGlhdGUgcmVzdWx0LCB3aXRoIGFuIG9wdGlvbmFsIHNlZWQgdmFsdWUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgcmVkdWNlfSwgYnV0IGVtaXRzIHRoZSBjdXJyZW50XG4gKiBhY2N1bXVsYXRpb24gd2hlbmV2ZXIgdGhlIHNvdXJjZSBlbWl0cyBhIHZhbHVlLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3NjYW4ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQ29tYmluZXMgdG9nZXRoZXIgYWxsIHZhbHVlcyBlbWl0dGVkIG9uIHRoZSBzb3VyY2UsIHVzaW5nIGFuIGFjY3VtdWxhdG9yXG4gKiBmdW5jdGlvbiB0aGF0IGtub3dzIGhvdyB0byBqb2luIGEgbmV3IHNvdXJjZSB2YWx1ZSBpbnRvIHRoZSBhY2N1bXVsYXRpb24gZnJvbVxuICogdGhlIHBhc3QuIElzIHNpbWlsYXIgdG8ge0BsaW5rIHJlZHVjZX0sIGJ1dCBlbWl0cyB0aGUgaW50ZXJtZWRpYXRlXG4gKiBhY2N1bXVsYXRpb25zLlxuICpcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGFwcGxpZXMgYSBzcGVjaWZpZWQgYGFjY3VtdWxhdG9yYCBmdW5jdGlvbiB0byBlYWNoXG4gKiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBhIGBzZWVkYCB2YWx1ZSBpcyBzcGVjaWZpZWQsIHRoZW5cbiAqIHRoYXQgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbml0aWFsIHZhbHVlIGZvciB0aGUgYWNjdW11bGF0b3IuIElmIG5vIHNlZWRcbiAqIHZhbHVlIGlzIHNwZWNpZmllZCwgdGhlIGZpcnN0IGl0ZW0gb2YgdGhlIHNvdXJjZSBpcyB1c2VkIGFzIHRoZSBzZWVkLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvdW50IHRoZSBudW1iZXIgb2YgY2xpY2sgZXZlbnRzPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBvbmVzID0gY2xpY2tzLm1hcFRvKDEpO1xuICogdmFyIHNlZWQgPSAwO1xuICogdmFyIGNvdW50ID0gb25lcy5zY2FuKChhY2MsIG9uZSkgPT4gYWNjICsgb25lLCBzZWVkKTtcbiAqIGNvdW50LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBleHBhbmR9XG4gKiBAc2VlIHtAbGluayBtZXJnZVNjYW59XG4gKiBAc2VlIHtAbGluayByZWR1Y2V9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogUn0gYWNjdW11bGF0b3JcbiAqIFRoZSBhY2N1bXVsYXRvciBmdW5jdGlvbiBjYWxsZWQgb24gZWFjaCBzb3VyY2UgdmFsdWUuXG4gKiBAcGFyYW0ge1R8Un0gW3NlZWRdIFRoZSBpbml0aWFsIGFjY3VtdWxhdGlvbiB2YWx1ZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59IEFuIG9ic2VydmFibGUgb2YgdGhlIGFjY3VtdWxhdGVkIHZhbHVlcy5cbiAqIEBtZXRob2Qgc2NhblxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCkpO1xufVxuZXhwb3J0cy5zY2FuID0gc2NhbjtcbnZhciBTY2FuT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgfVxuICAgIFNjYW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBTY2FuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmFjY3VtdWxhdG9yLCB0aGlzLnNlZWQpKTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTY2FuU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNjYW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjYW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWNjdW11bGF0b3JTZXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvclNldCA9IHR5cGVvZiBzZWVkICE9PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJzZWVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VlZDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjdW11bGF0b3JTZXQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fc2VlZCA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjY3VtdWxhdG9yU2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNlZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmFjY3VtdWxhdG9yKHRoaXMuc2VlZCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVkID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9zY2FuLmpzXG4gKiogbW9kdWxlIGlkID0gMjIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3NoYXJlJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc2hhcmUgPSBzaGFyZV8xLnNoYXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2hhcmUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZSgnLi9tdWx0aWNhc3QnKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9TdWJqZWN0Jyk7XG5mdW5jdGlvbiBzaGFyZVN1YmplY3RGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIG5ldyBPYnNlcnZhYmxlIHRoYXQgbXVsdGljYXN0cyAoc2hhcmVzKSB0aGUgb3JpZ2luYWwgT2JzZXJ2YWJsZS4gQXMgbG9uZyBhcyB0aGVyZSBpcyBhdCBsZWFzdCBvbmVcbiAqIFN1YnNjcmliZXIgdGhpcyBPYnNlcnZhYmxlIHdpbGwgYmUgc3Vic2NyaWJlZCBhbmQgZW1pdHRpbmcgZGF0YS4gV2hlbiBhbGwgc3Vic2NyaWJlcnMgaGF2ZSB1bnN1YnNjcmliZWQgaXQgd2lsbFxuICogdW5zdWJzY3JpYmUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUuIEJlY2F1c2UgdGhlIE9ic2VydmFibGUgaXMgbXVsdGljYXN0aW5nIGl0IG1ha2VzIHRoZSBzdHJlYW0gYGhvdGAuXG4gKiBUaGlzIGlzIGFuIGFsaWFzIGZvciAucHVibGlzaCgpLnJlZkNvdW50KCkuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9zaGFyZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBhbiBPYnNlcnZhYmxlIHRoYXQgdXBvbiBjb25uZWN0aW9uIGNhdXNlcyB0aGUgc291cmNlIE9ic2VydmFibGUgdG8gZW1pdCBpdGVtcyB0byBpdHMgT2JzZXJ2ZXJzXG4gKiBAbWV0aG9kIHNoYXJlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBzaGFyZSgpIHtcbiAgICByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0LmNhbGwodGhpcywgc2hhcmVTdWJqZWN0RmFjdG9yeSkucmVmQ291bnQoKTtcbn1cbmV4cG9ydHMuc2hhcmUgPSBzaGFyZTtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3Ivc2hhcmUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBzaW5nbGVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3NpbmdsZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNpbmdsZSA9IHNpbmdsZV8xLnNpbmdsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9zaW5nbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoJy4uL3V0aWwvRW1wdHlFcnJvcicpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc2luZ2xlIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgdGhhdCBtYXRjaGVzIGEgc3BlY2lmaWVkXG4gKiBwcmVkaWNhdGUsIGlmIHRoYXQgT2JzZXJ2YWJsZSBlbWl0cyBvbmUgc3VjaCBpdGVtLiBJZiB0aGUgc291cmNlIE9ic2VydmFibGUgZW1pdHMgbW9yZSB0aGFuIG9uZSBzdWNoIGl0ZW0gb3Igbm9cbiAqIHN1Y2ggaXRlbXMsIG5vdGlmeSBvZiBhbiBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gb3IgTm9TdWNoRWxlbWVudEV4Y2VwdGlvbiByZXNwZWN0aXZlbHkuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9zaW5nbGUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHRocm93cyB7RW1wdHlFcnJvcn0gRGVsaXZlcnMgYW4gRW1wdHlFcnJvciB0byB0aGUgT2JzZXJ2ZXIncyBgZXJyb3JgXG4gKiBjYWxsYmFjayBpZiB0aGUgT2JzZXJ2YWJsZSBjb21wbGV0ZXMgYmVmb3JlIGFueSBgbmV4dGAgbm90aWZpY2F0aW9uIHdhcyBzZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gYSBwcmVkaWNhdGUgZnVuY3Rpb24gdG8gZXZhbHVhdGUgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHNpbmdsZSBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRoYXQgbWF0Y2hlc1xuICogdGhlIHByZWRpY2F0ZS5cbiAuXG4gKiBAbWV0aG9kIHNpbmdsZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gc2luZ2xlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpcykpO1xufVxuZXhwb3J0cy5zaW5nbGUgPSBzaW5nbGU7XG52YXIgU2luZ2xlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgU2luZ2xlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2luZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBTaW5nbGVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFNpbmdsZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW5nbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNpbmdsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnNlZW5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB9XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuYXBwbHlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zZWVuVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgZWxlbWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWVuVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zaW5nbGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gdGhpcy5wcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgdGhpcy50cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLnRyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCwgdGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh0aGlzLnNlZW5WYWx1ZSA/IHRoaXMuc2luZ2xlVmFsdWUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTaW5nbGVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2luZ2xlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3Ivc2luZ2xlLmpzXG4gKiogbW9kdWxlIGlkID0gMjI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgc2tpcF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivc2tpcCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNraXAgPSBza2lwXzEuc2tpcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2tpcC5qc1xuICoqIG1vZHVsZSBpZCA9IDIyN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIGBuYCBpdGVtcyBlbWl0dGVkIGJ5IGFuIE9ic2VydmFibGUuXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9za2lwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aGUgYG5gIG9mIHRpbWVzLCBpdGVtcyBlbWl0dGVkIGJ5IHNvdXJjZSBPYnNlcnZhYmxlIHNob3VsZCBiZSBza2lwcGVkLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAbWV0aG9kIHNraXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHNraXAodG90YWwpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBTa2lwT3BlcmF0b3IodG90YWwpKTtcbn1cbmV4cG9ydHMuc2tpcCA9IHNraXA7XG52YXIgU2tpcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTa2lwT3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgIH1cbiAgICBTa2lwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU2tpcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFNraXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2tpcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB9XG4gICAgU2tpcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCsrdGhpcy5jb3VudCA+IHRoaXMudG90YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3NraXAuanNcbiAqKiBtb2R1bGUgaWQgPSAyMjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBza2lwVW50aWxfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3NraXBVbnRpbCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnNraXBVbnRpbCA9IHNraXBVbnRpbF8xLnNraXBVbnRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBVbnRpbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9za2lwVW50aWwuanNcbiAqKiBtb2R1bGUgaWQgPSAyMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBza2lwcyBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB1bnRpbCBhIHNlY29uZCBPYnNlcnZhYmxlIGVtaXRzIGFuIGl0ZW0uXG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9za2lwVW50aWwucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHBhcmFtIHtPYnNlcnZhYmxlfSB0aGUgc2Vjb25kIE9ic2VydmFibGUgdGhhdCBoYXMgdG8gZW1pdCBhbiBpdGVtIGJlZm9yZSB0aGUgc291cmNlIE9ic2VydmFibGUncyBlbGVtZW50cyBiZWdpbiB0b1xuICogYmUgbWlycm9yZWQgYnkgdGhlIHJlc3VsdGluZyBPYnNlcnZhYmxlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIGl0ZW1zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHVudGlsIHRoZSBzZWNvbmQgT2JzZXJ2YWJsZSBlbWl0c1xuICogYW4gaXRlbSwgdGhlbiBlbWl0cyB0aGUgcmVtYWluaW5nIGl0ZW1zLlxuICogQG1ldGhvZCBza2lwVW50aWxcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHNraXBVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7XG59XG5leHBvcnRzLnNraXBVbnRpbCA9IHNraXBVbnRpbDtcbnZhciBTa2lwVW50aWxPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcFVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBTa2lwVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBTa2lwVW50aWxTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBTa2lwVW50aWxPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFNraXBVbnRpbFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTa2lwVW50aWxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBVbnRpbFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5vdGlmaWVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzSW5uZXJTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgbm90aWZpZXIpKTtcbiAgICB9XG4gICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbm5lclN0b3BwZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNraXBVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0lubmVyU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBVbnRpbFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3Ivc2tpcFVudGlsLmpzXG4gKiogbW9kdWxlIGlkID0gMjMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgc2tpcFdoaWxlXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9za2lwV2hpbGUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5za2lwV2hpbGUgPSBza2lwV2hpbGVfMS5za2lwV2hpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2tpcFdoaWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMjMxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgc2tpcHMgYWxsIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFzIGxvbmcgYXMgYSBzcGVjaWZpZWQgY29uZGl0aW9uIGhvbGRzXG4gKiB0cnVlLCBidXQgZW1pdHMgYWxsIGZ1cnRoZXIgc291cmNlIGl0ZW1zIGFzIHNvb24gYXMgdGhlIGNvbmRpdGlvbiBiZWNvbWVzIGZhbHNlLlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvc2tpcFdoaWxlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSAtIGEgZnVuY3Rpb24gdG8gdGVzdCBlYWNoIGl0ZW0gZW1pdHRlZCBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IGFuIE9ic2VydmFibGUgdGhhdCBiZWdpbnMgZW1pdHRpbmcgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgd2hlbiB0aGVcbiAqIHNwZWNpZmllZCBwcmVkaWNhdGUgYmVjb21lcyBmYWxzZS5cbiAqIEBtZXRob2Qgc2tpcFdoaWxlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgU2tpcFdoaWxlT3BlcmF0b3IocHJlZGljYXRlKSk7XG59XG5leHBvcnRzLnNraXBXaGlsZSA9IHNraXBXaGlsZTtcbnZhciBTa2lwV2hpbGVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcFdoaWxlT3BlcmF0b3IocHJlZGljYXRlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIH1cbiAgICBTa2lwV2hpbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBTa2lwV2hpbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFdoaWxlT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTa2lwV2hpbGVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2tpcFdoaWxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwV2hpbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5za2lwcGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAodGhpcy5za2lwcGluZykge1xuICAgICAgICAgICAgdGhpcy50cnlDYWxsUHJlZGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuc2tpcHBpbmcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlDYWxsUHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgICAgICB0aGlzLnNraXBwaW5nID0gQm9vbGVhbihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9za2lwV2hpbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBzdGFydFdpdGhfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3N0YXJ0V2l0aCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnN0YXJ0V2l0aCA9IHN0YXJ0V2l0aF8xLnN0YXJ0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9zdGFydFdpdGguanNcbiAqKiBtb2R1bGUgaWQgPSAyMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEFycmF5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vb2JzZXJ2YWJsZS9BcnJheU9ic2VydmFibGUnKTtcbnZhciBTY2FsYXJPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL1NjYWxhck9ic2VydmFibGUnKTtcbnZhciBFbXB0eU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL29ic2VydmFibGUvRW1wdHlPYnNlcnZhYmxlJyk7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKCcuL2NvbmNhdCcpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiBhIHNwZWNpZmllZCBJdGVyYWJsZSBiZWZvcmUgaXQgYmVnaW5zIHRvIGVtaXQgaXRlbXMgZW1pdHRlZCBieSB0aGVcbiAqIHNvdXJjZSBPYnNlcnZhYmxlLlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvc3RhcnRXaXRoLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7VmFsdWVzfSBhbiBJdGVyYWJsZSB0aGF0IGNvbnRhaW5zIHRoZSBpdGVtcyB5b3Ugd2FudCB0aGUgbW9kaWZpZWQgT2JzZXJ2YWJsZSB0byBlbWl0IGZpcnN0LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlIGFuZCB0aGVuIGVtaXRzIHRoZSBpdGVtc1xuICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIHN0YXJ0V2l0aFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gc3RhcnRXaXRoKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycmF5W19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBhcnJheS5wb3AoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG51bGw7XG4gICAgfVxuICAgIHZhciBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gY29uY2F0XzEuY29uY2F0U3RhdGljKG5ldyBTY2FsYXJPYnNlcnZhYmxlXzEuU2NhbGFyT2JzZXJ2YWJsZShhcnJheVswXSwgc2NoZWR1bGVyKSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxlbiA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdFN0YXRpYyhuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKGFycmF5LCBzY2hlZHVsZXIpLCB0aGlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjb25jYXRfMS5jb25jYXRTdGF0aWMobmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZShzY2hlZHVsZXIpLCB0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLnN0YXJ0V2l0aCA9IHN0YXJ0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3N0YXJ0V2l0aC5qc1xuICoqIG1vZHVsZSBpZCA9IDIzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHN1YnNjcmliZU9uXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9zdWJzY3JpYmVPbicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZU9uID0gc3Vic2NyaWJlT25fMS5zdWJzY3JpYmVPbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3N1YnNjcmliZU9uLmpzXG4gKiogbW9kdWxlIGlkID0gMjM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBTdWJzY3JpYmVPbk9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL29ic2VydmFibGUvU3Vic2NyaWJlT25PYnNlcnZhYmxlJyk7XG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHN1YnNjcmliZXMgT2JzZXJ2ZXJzIHRvIHRoaXMgT2JzZXJ2YWJsZSBvbiB0aGUgc3BlY2lmaWVkIFNjaGVkdWxlci5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3N1YnNjcmliZU9uLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSB0aGUgU2NoZWR1bGVyIHRvIHBlcmZvcm0gc3Vic2NyaXB0aW9uIGFjdGlvbnMgb24uXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSB0aGUgc291cmNlIE9ic2VydmFibGUgbW9kaWZpZWQgc28gdGhhdCBpdHMgc3Vic2NyaXB0aW9ucyBoYXBwZW4gb24gdGhlIHNwZWNpZmllZCBTY2hlZHVsZXJcbiAuXG4gKiBAbWV0aG9kIHN1YnNjcmliZU9uXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVPbk9ic2VydmFibGVfMS5TdWJzY3JpYmVPbk9ic2VydmFibGUodGhpcywgZGVsYXksIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLnN1YnNjcmliZU9uID0gc3Vic2NyaWJlT247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3N1YnNjcmliZU9uLmpzXG4gKiogbW9kdWxlIGlkID0gMjM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBhc2FwXzEgPSByZXF1aXJlKCcuLi9zY2hlZHVsZXIvYXNhcCcpO1xudmFyIGlzTnVtZXJpY18xID0gcmVxdWlyZSgnLi4vdXRpbC9pc051bWVyaWMnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgU3Vic2NyaWJlT25PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlT25PYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZU9uT2JzZXJ2YWJsZShzb3VyY2UsIGRlbGF5VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChkZWxheVRpbWUgPT09IHZvaWQgMCkgeyBkZWxheVRpbWUgPSAwOyB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc2FwXzEuYXNhcDsgfVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuZGVsYXlUaW1lID0gZGVsYXlUaW1lO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgaWYgKCFpc051bWVyaWNfMS5pc051bWVyaWMoZGVsYXlUaW1lKSB8fCBkZWxheVRpbWUgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5VGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBhc2FwXzEuYXNhcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzYXBfMS5hc2FwOyB9XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgZGVsYXksIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVPbk9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmcuc291cmNlLCBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlT25PYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGRlbGF5ID0gdGhpcy5kZWxheVRpbWU7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5kaXNwYXRjaCwgZGVsYXksIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZU9uT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuU3Vic2NyaWJlT25PYnNlcnZhYmxlID0gU3Vic2NyaWJlT25PYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlT25PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb2JzZXJ2YWJsZS9TdWJzY3JpYmVPbk9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIEFzYXBTY2hlZHVsZXJfMSA9IHJlcXVpcmUoJy4vQXNhcFNjaGVkdWxlcicpO1xuZXhwb3J0cy5hc2FwID0gbmV3IEFzYXBTY2hlZHVsZXJfMS5Bc2FwU2NoZWR1bGVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc2FwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvc2NoZWR1bGVyL2FzYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAyMzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgQXNhcEFjdGlvbl8xID0gcmVxdWlyZSgnLi9Bc2FwQWN0aW9uJyk7XG52YXIgUXVldWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoJy4vUXVldWVTY2hlZHVsZXInKTtcbnZhciBBc2FwU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXNhcFNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2FwU2NoZWR1bGVyKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgQXNhcFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGVOb3cgPSBmdW5jdGlvbiAod29yaywgc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc2FwQWN0aW9uXzEuQXNhcEFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXNhcFNjaGVkdWxlcjtcbn0oUXVldWVTY2hlZHVsZXJfMS5RdWV1ZVNjaGVkdWxlcikpO1xuZXhwb3J0cy5Bc2FwU2NoZWR1bGVyID0gQXNhcFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzYXBTY2hlZHVsZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9zY2hlZHVsZXIvQXNhcFNjaGVkdWxlci5qc1xuICoqIG1vZHVsZSBpZCA9IDIzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBJbW1lZGlhdGVfMSA9IHJlcXVpcmUoJy4uL3V0aWwvSW1tZWRpYXRlJyk7XG52YXIgRnV0dXJlQWN0aW9uXzEgPSByZXF1aXJlKCcuL0Z1dHVyZUFjdGlvbicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBBc2FwQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXNhcEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2FwQWN0aW9uKCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUuX3NjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3NjaGVkdWxlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICBpZiAoIXNjaGVkdWxlci5zY2hlZHVsZWRJZCkge1xuICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZElkID0gSW1tZWRpYXRlXzEuSW1tZWRpYXRlLnNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZXIuZmx1c2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBzY2hlZHVsZWRJZCA9IHNjaGVkdWxlci5zY2hlZHVsZWRJZCwgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl91bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAoYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNjaGVkdWxlci5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWRJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBJbW1lZGlhdGVfMS5JbW1lZGlhdGUuY2xlYXJJbW1lZGlhdGUoc2NoZWR1bGVkSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXNhcEFjdGlvbjtcbn0oRnV0dXJlQWN0aW9uXzEuRnV0dXJlQWN0aW9uKSk7XG5leHBvcnRzLkFzYXBBY3Rpb24gPSBBc2FwQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcEFjdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3NjaGVkdWxlci9Bc2FwQWN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMjQwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcblNvbWUgY3JlZGl0IGZvciB0aGlzIGhlbHBlciBnb2VzIHRvIGh0dHA6Ly9naXRodWIuY29tL1l1enVKUy9zZXRJbW1lZGlhdGVcbiovXG5cInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuL3Jvb3QnKTtcbnZhciBJbW1lZGlhdGVEZWZpbml0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbW1lZGlhdGVEZWZpbml0aW9uKHJvb3QpIHtcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICAgICAgaWYgKHJvb3Quc2V0SW1tZWRpYXRlICYmIHR5cGVvZiByb290LnNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSByb290LnNldEltbWVkaWF0ZS5iaW5kKHJvb3QpO1xuICAgICAgICAgICAgdGhpcy5jbGVhckltbWVkaWF0ZSA9IHJvb3QuY2xlYXJJbW1lZGlhdGUuYmluZChyb290KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubmV4dEhhbmRsZSA9IDE7XG4gICAgICAgICAgICB0aGlzLnRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW5Vc2VQcm9jZXNzTmV4dFRpY2soKSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgICAgICAgICB0aGlzLnNldEltbWVkaWF0ZSA9IHRoaXMuY3JlYXRlUHJvY2Vzc05leHRUaWNrU2V0SW1tZWRpYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVBvc3RNZXNzYWdlU2V0SW1tZWRpYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNhblVzZU1lc3NhZ2VDaGFubmVsKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SW1tZWRpYXRlID0gdGhpcy5jcmVhdGVNZXNzYWdlQ2hhbm5lbFNldEltbWVkaWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jYW5Vc2VSZWFkeVN0YXRlQ2hhbmdlKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgICAgICAgICB0aGlzLnNldEltbWVkaWF0ZSA9IHRoaXMuY3JlYXRlUmVhZHlTdGF0ZUNoYW5nZVNldEltbWVkaWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJbW1lZGlhdGUgPSB0aGlzLmNyZWF0ZVNldFRpbWVvdXRTZXRJbW1lZGlhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaSA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjbGVhckltbWVkaWF0ZS5pbnN0YW5jZS50YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2kuaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5jbGVhckltbWVkaWF0ZSA9IGNpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmlkZW50aWZ5ID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG4gICAgfTtcbiAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jYW5Vc2VQcm9jZXNzTmV4dFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aWZ5KHRoaXMucm9vdC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuICAgIH07XG4gICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY2FuVXNlTWVzc2FnZUNoYW5uZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMucm9vdC5NZXNzYWdlQ2hhbm5lbCk7XG4gICAgfTtcbiAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jYW5Vc2VSZWFkeVN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLnJvb3QuZG9jdW1lbnQ7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50ICYmICdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKTtcbiAgICB9O1xuICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmNhblVzZVBvc3RNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgcm9vdC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChyb290LnBvc3RNZXNzYWdlICYmICFyb290LmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzXzEgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IHJvb3Qub25tZXNzYWdlO1xuICAgICAgICAgICAgcm9vdC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91c18xID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcm9vdC5wb3N0TWVzc2FnZSgnJywgJyonKTtcbiAgICAgICAgICAgIHJvb3Qub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXNfMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdGhlIHNhbWUgYXJndW1lbnRzIGFzIHNldEltbWVkaWF0ZSwgYnV0XG4gICAgLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcmVxdWlyZXMgbm8gYXJndW1lbnRzLlxuICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLnBhcnRpYWxseUFwcGxpZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSByZXN1bHQsIGhhbmRsZXIgPSBfYS5oYW5kbGVyLCBhcmdzID0gX2EuYXJncztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24oJycgKyBoYW5kbGVyKSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm4uaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIGZuLmFyZ3MgPSBhcmdzO1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfTtcbiAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5hZGRGcm9tU2V0SW1tZWRpYXRlQXJndW1lbnRzID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdGhpcy50YXNrc0J5SGFuZGxlW3RoaXMubmV4dEhhbmRsZV0gPSB0aGlzLnBhcnRpYWxseUFwcGxpZWQuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dEhhbmRsZSsrO1xuICAgIH07XG4gICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY3JlYXRlUHJvY2Vzc05leHRUaWNrU2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBzZXRJbW1lZGlhdGUuaW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgICAgICAgICAgaW5zdGFuY2Uucm9vdC5wcm9jZXNzLm5leHRUaWNrKGluc3RhbmNlLnBhcnRpYWxseUFwcGxpZWQoaW5zdGFuY2UucnVuSWZQcmVzZW50LCBoYW5kbGUpKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgICAgIH07XG4gICAgICAgIGZuLmluc3RhbmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH07XG4gICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY3JlYXRlUG9zdE1lc3NhZ2VTZXRJbW1lZGlhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSAnc2V0SW1tZWRpYXRlJCcgKyByb290Lk1hdGgucmFuZG9tKCkgKyAnJCc7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbiBnbG9iYWxNZXNzYWdlSGFuZGxlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZ2xvYmFsTWVzc2FnZUhhbmRsZXIuaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSByb290ICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG9uR2xvYmFsTWVzc2FnZS5pbnN0YW5jZSA9IHRoaXM7XG4gICAgICAgIHJvb3QuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBzZXRJbW1lZGlhdGUsIG1lc3NhZ2VQcmVmaXggPSBfYS5tZXNzYWdlUHJlZml4LCBpbnN0YW5jZSA9IF9hLmluc3RhbmNlO1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGluc3RhbmNlLmFkZEZyb21TZXRJbW1lZGlhdGVBcmd1bWVudHMoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGluc3RhbmNlLnJvb3QucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgJyonKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgICAgIH07XG4gICAgICAgIGZuLmluc3RhbmNlID0gdGhpcztcbiAgICAgICAgZm4ubWVzc2FnZVByZWZpeCA9IG1lc3NhZ2VQcmVmaXg7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9O1xuICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLnJ1bklmUHJlc2VudCA9IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogJ1dhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLidcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gJ3RvbyBtdWNoIHJlY3Vyc2lvbicgZXJyb3IuXG4gICAgICAgICAgICB0aGlzLnJvb3Quc2V0VGltZW91dCh0aGlzLnBhcnRpYWxseUFwcGxpZWQodGhpcy5ydW5JZlByZXNlbnQsIGhhbmRsZSksIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0aGlzLnRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEltbWVkaWF0ZURlZmluaXRpb24ucHJvdG90eXBlLmNyZWF0ZU1lc3NhZ2VDaGFubmVsU2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyB0aGlzLnJvb3QuTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgX3RoaXMucnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHNldEltbWVkaWF0ZSwgY2hhbm5lbCA9IF9hLmNoYW5uZWwsIGluc3RhbmNlID0gX2EuaW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICAgICAgfTtcbiAgICAgICAgZm4uY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgIGZuLmluc3RhbmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH07XG4gICAgSW1tZWRpYXRlRGVmaW5pdGlvbi5wcm90b3R5cGUuY3JlYXRlUmVhZHlTdGF0ZUNoYW5nZVNldEltbWVkaWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gc2V0SW1tZWRpYXRlLmluc3RhbmNlO1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBpbnN0YW5jZS5yb290O1xuICAgICAgICAgICAgdmFyIGRvYyA9IHJvb3QuZG9jdW1lbnQ7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICAgICAgfTtcbiAgICAgICAgZm4uaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfTtcbiAgICBJbW1lZGlhdGVEZWZpbml0aW9uLnByb3RvdHlwZS5jcmVhdGVTZXRUaW1lb3V0U2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBzZXRJbW1lZGlhdGUuaW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gaW5zdGFuY2UuYWRkRnJvbVNldEltbWVkaWF0ZUFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgICAgICAgICAgaW5zdGFuY2Uucm9vdC5zZXRUaW1lb3V0KGluc3RhbmNlLnBhcnRpYWxseUFwcGxpZWQoaW5zdGFuY2UucnVuSWZQcmVzZW50LCBoYW5kbGUpLCAwKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgICAgIH07XG4gICAgICAgIGZuLmluc3RhbmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH07XG4gICAgcmV0dXJuIEltbWVkaWF0ZURlZmluaXRpb247XG59KCkpO1xuZXhwb3J0cy5JbW1lZGlhdGVEZWZpbml0aW9uID0gSW1tZWRpYXRlRGVmaW5pdGlvbjtcbmV4cG9ydHMuSW1tZWRpYXRlID0gbmV3IEltbWVkaWF0ZURlZmluaXRpb24ocm9vdF8xLnJvb3QpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1tZWRpYXRlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvdXRpbC9JbW1lZGlhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBuZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrO1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGltbWVkaWF0ZUlkcyA9IHt9O1xudmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBUaGF0J3Mgbm90IGhvdyBub2RlLmpzIGltcGxlbWVudHMgaXQgYnV0IHRoZSBleHBvc2VkIGFwaSBpcyB0aGUgc2FtZS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gc2V0SW1tZWRpYXRlIDogZnVuY3Rpb24oZm4pIHtcbiAgdmFyIGlkID0gbmV4dEltbWVkaWF0ZUlkKys7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTtcblxuICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkge1xuICAgIGlmIChpbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAvLyBmbi5jYWxsKCkgaXMgZmFzdGVyIHNvIHdlIG9wdGltaXplIGZvciB0aGUgY29tbW9uIHVzZS1jYXNlXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndVxuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbi5jYWxsKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nXG4gICAgICBleHBvcnRzLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpZDtcbn07XG5cbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNsZWFySW1tZWRpYXRlIDogZnVuY3Rpb24oaWQpIHtcbiAgZGVsZXRlIGltbWVkaWF0ZUlkc1tpZF07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbiAqKiBtb2R1bGUgaWQgPSAyNDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBzd2l0Y2hfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3N3aXRjaCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnN3aXRjaCA9IHN3aXRjaF8xLl9zd2l0Y2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2guanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivc3dpdGNoLmpzXG4gKiogbW9kdWxlIGlkID0gMjQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogQ29udmVydHMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZSBpbnRvIGEgZmlyc3Qtb3JkZXIgT2JzZXJ2YWJsZSBieVxuICogc3Vic2NyaWJpbmcgdG8gb25seSB0aGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIG9mIHRob3NlIGlubmVyIE9ic2VydmFibGVzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5GbGF0dGVucyBhbiBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzIGJ5IGRyb3BwaW5nIHRoZVxuICogcHJldmlvdXMgaW5uZXIgT2JzZXJ2YWJsZSBvbmNlIGEgbmV3IG9uZSBhcHBlYXJzLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3N3aXRjaC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgc3dpdGNoYCBzdWJzY3JpYmVzIHRvIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBPYnNlcnZhYmxlcywgYWxzbyBrbm93biBhcyBhXG4gKiBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZS4gRWFjaCB0aW1lIGl0IG9ic2VydmVzIG9uZSBvZiB0aGVzZSBlbWl0dGVkIGlubmVyXG4gKiBPYnNlcnZhYmxlcywgdGhlIG91dHB1dCBPYnNlcnZhYmxlIHN1YnNjcmliZXMgdG8gdGhlIGlubmVyIE9ic2VydmFibGUgYW5kXG4gKiBiZWdpbnMgZW1pdHRpbmcgdGhlIGl0ZW1zIGVtaXR0ZWQgYnkgdGhhdC4gU28gZmFyLCBpdCBiZWhhdmVzXG4gKiBsaWtlIHtAbGluayBtZXJnZUFsbH0uIEhvd2V2ZXIsIHdoZW4gYSBuZXcgaW5uZXIgT2JzZXJ2YWJsZSBpcyBlbWl0dGVkLFxuICogYHN3aXRjaGAgdW5zdWJzY3JpYmVzIGZyb20gdGhlIGVhcmxpZXItZW1pdHRlZCBpbm5lciBPYnNlcnZhYmxlIGFuZFxuICogc3Vic2NyaWJlcyB0byB0aGUgbmV3IGlubmVyIE9ic2VydmFibGUgYW5kIGJlZ2lucyBlbWl0dGluZyBpdGVtcyBmcm9tIGl0LiBJdFxuICogY29udGludWVzIHRvIGJlaGF2ZSBsaWtlIHRoaXMgZm9yIHN1YnNlcXVlbnQgaW5uZXIgT2JzZXJ2YWJsZXMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+UmVydW4gYW4gaW50ZXJ2YWwgT2JzZXJ2YWJsZSBvbiBldmVyeSBjbGljayBldmVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiAvLyBFYWNoIGNsaWNrIGV2ZW50IGlzIG1hcHBlZCB0byBhbiBPYnNlcnZhYmxlIHRoYXQgdGlja3MgZXZlcnkgc2Vjb25kXG4gKiB2YXIgaGlnaGVyT3JkZXIgPSBjbGlja3MubWFwKChldikgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKSk7XG4gKiB2YXIgc3dpdGNoZWQgPSBoaWdoZXJPcmRlci5zd2l0Y2goKTtcbiAqIC8vIFRoZSBvdXRjb21lIGlzIHRoYXQgYHN3aXRjaGVkYCBpcyBlc3NlbnRpYWxseSBhIHRpbWVyIHRoYXQgcmVzdGFydHNcbiAqIC8vIG9uIGV2ZXJ5IGNsaWNrLiBUaGUgaW50ZXJ2YWwgT2JzZXJ2YWJsZXMgZnJvbSBvbGRlciBjbGlja3MgZG8gbm90IG1lcmdlXG4gKiAvLyB3aXRoIHRoZSBjdXJyZW50IGludGVydmFsIE9ic2VydmFibGUuXG4gKiBzd2l0Y2hlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgY29tYmluZUFsbH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cbiAqIEBzZWUge0BsaW5rIGV4aGF1c3R9XG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcH1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcFRvfVxuICogQHNlZSB7QGxpbmsgemlwQWxsfVxuICpcbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgaXRlbXMgZW1pdHRlZCBieSB0aGVcbiAqIE9ic2VydmFibGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2Qgc3dpdGNoXG4gKiBAbmFtZSBzd2l0Y2hcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIF9zd2l0Y2goKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgU3dpdGNoT3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLl9zd2l0Y2ggPSBfc3dpdGNoO1xudmFyIFN3aXRjaE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTd2l0Y2hPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgU3dpdGNoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgU3dpdGNoU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTd2l0Y2hTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3dpdGNoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTd2l0Y2hTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBTd2l0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSW5uZXIoKTtcbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdGhpcy5hZGQodGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgdmFsdWUpKTtcbiAgICB9O1xuICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmVJbm5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLmFjdGl2ZSA+IDAgPyB0aGlzLmFjdGl2ZSAtIDEgOiAwO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgU3dpdGNoU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFN3aXRjaFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSW5uZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkICYmIHRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3N3aXRjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDI0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivc3dpdGNoTWFwJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gc3dpdGNoTWFwXzEuc3dpdGNoTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3N3aXRjaE1hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDI0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKCcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0Jyk7XG4vKipcbiAqIFByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIGFuIE9ic2VydmFibGUgd2hpY2ggaXMgbWVyZ2VkIGluIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUsIGVtaXR0aW5nIHZhbHVlcyBvbmx5IGZyb20gdGhlIG1vc3QgcmVjZW50bHkgcHJvamVjdGVkIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPk1hcHMgZWFjaCB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlLCB0aGVuIGZsYXR0ZW5zIGFsbCBvZlxuICogdGhlc2UgaW5uZXIgT2JzZXJ2YWJsZXMgdXNpbmcge0BsaW5rIHN3aXRjaH0uPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvc3dpdGNoTWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGJhc2VkIG9uIGFwcGx5aW5nIGEgZnVuY3Rpb24gdGhhdCB5b3VcbiAqIHN1cHBseSB0byBlYWNoIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHdoZXJlIHRoYXQgZnVuY3Rpb25cbiAqIHJldHVybnMgYW4gKHNvLWNhbGxlZCBcImlubmVyXCIpIE9ic2VydmFibGUuIEVhY2ggdGltZSBpdCBvYnNlcnZlcyBvbmUgb2YgdGhlc2VcbiAqIGlubmVyIE9ic2VydmFibGVzLCB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmVnaW5zIGVtaXR0aW5nIHRoZSBpdGVtcyBlbWl0dGVkIGJ5XG4gKiB0aGF0IGlubmVyIE9ic2VydmFibGUuIFdoZW4gYSBuZXcgaW5uZXIgT2JzZXJ2YWJsZSBpcyBlbWl0dGVkLCBgc3dpdGNoTWFwYFxuICogc3RvcHMgZW1pdHRpbmcgaXRlbXMgZnJvbSB0aGUgZWFybGllci1lbWl0dGVkIGlubmVyIE9ic2VydmFibGUgYW5kIGJlZ2luc1xuICogZW1pdHRpbmcgaXRlbXMgZnJvbSB0aGUgbmV3IG9uZS4gSXQgY29udGludWVzIHRvIGJlaGF2ZSBsaWtlIHRoaXMgZm9yXG4gKiBzdWJzZXF1ZW50IGlubmVyIE9ic2VydmFibGVzLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlJlcnVuIGFuIGludGVydmFsIE9ic2VydmFibGUgb24gZXZlcnkgY2xpY2sgZXZlbnQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy5zd2l0Y2hNYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgY29uY2F0TWFwfVxuICogQHNlZSB7QGxpbmsgZXhoYXVzdE1hcH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuICogQHNlZSB7QGxpbmsgc3dpdGNofVxuICogQHNlZSB7QGxpbmsgc3dpdGNoTWFwVG99XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgP2luZGV4OiBudW1iZXIpOiBPYnNlcnZhYmxlfSBwcm9qZWN0IEEgZnVuY3Rpb25cbiAqIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCByZXR1cm5zIGFuXG4gKiBPYnNlcnZhYmxlLlxuICogQHBhcmFtIHtmdW5jdGlvbihvdXRlclZhbHVlOiBULCBpbm5lclZhbHVlOiBJLCBvdXRlckluZGV4OiBudW1iZXIsIGlubmVySW5kZXg6IG51bWJlcik6IGFueX0gW3Jlc3VsdFNlbGVjdG9yXVxuICogQSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZSBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYmFzZWQgb24gdGhlIHZhbHVlc1xuICogYW5kIHRoZSBpbmRpY2VzIG9mIHRoZSBzb3VyY2UgKG91dGVyKSBlbWlzc2lvbiBhbmQgdGhlIGlubmVyIE9ic2VydmFibGVcbiAqIGVtaXNzaW9uLiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uIGFyZTpcbiAqIC0gYG91dGVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIC0gYG91dGVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG4gKiAtIGBpbm5lckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgZnJvbSB0aGUgcHJvamVjdGVkIE9ic2VydmFibGVcbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZVxuICogcHJvamVjdGlvbiBmdW5jdGlvbiAoYW5kIHRoZSBvcHRpb25hbCBgcmVzdWx0U2VsZWN0b3JgKSB0byBlYWNoIGl0ZW0gZW1pdHRlZFxuICogYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCB0YWtpbmcgb25seSB0aGUgdmFsdWVzIGZyb20gdGhlIG1vc3QgcmVjZW50bHlcbiAqIHByb2plY3RlZCBpbm5lciBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBzd2l0Y2hNYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFN3aXRjaE1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSk7XG59XG5leHBvcnRzLnN3aXRjaE1hcCA9IHN3aXRjaE1hcDtcbnZhciBTd2l0Y2hNYXBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICBTd2l0Y2hNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBTd2l0Y2hNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy5yZXN1bHRTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaE1hcE9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU3dpdGNoTWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN3aXRjaE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSB0aGlzLmlubmVyU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQodGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmVzdWx0LCB2YWx1ZSwgaW5kZXgpKTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gdGhpcy5pbm5lclN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICBpZiAodGhpcy5yZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5fdHJ5Tm90aWZ5TmV4dChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3RvcihvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9zd2l0Y2hNYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAyNDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBzd2l0Y2hNYXBUb18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivc3dpdGNoTWFwVG8nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zd2l0Y2hNYXBUbyA9IHN3aXRjaE1hcFRvXzEuc3dpdGNoTWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXBUby5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9zd2l0Y2hNYXBUby5qc1xuICoqIG1vZHVsZSBpZCA9IDI0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKCcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0Jyk7XG4vKipcbiAqIFByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIHRoZSBzYW1lIE9ic2VydmFibGUgd2hpY2ggaXMgZmxhdHRlbmVkIG11bHRpcGxlXG4gKiB0aW1lcyB3aXRoIHtAbGluayBzd2l0Y2h9IGluIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBzd2l0Y2hNYXB9LCBidXQgbWFwcyBlYWNoIHZhbHVlXG4gKiBhbHdheXMgdG8gdGhlIHNhbWUgaW5uZXIgT2JzZXJ2YWJsZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9zd2l0Y2hNYXBUby5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBNYXBzIGVhY2ggc291cmNlIHZhbHVlIHRvIHRoZSBnaXZlbiBPYnNlcnZhYmxlIGBpbm5lck9ic2VydmFibGVgIHJlZ2FyZGxlc3NcbiAqIG9mIHRoZSBzb3VyY2UgdmFsdWUsIGFuZCB0aGVuIGZsYXR0ZW5zIHRob3NlIHJlc3VsdGluZyBPYnNlcnZhYmxlcyBpbnRvIG9uZVxuICogc2luZ2xlIE9ic2VydmFibGUsIHdoaWNoIGlzIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlc1xuICogZW1pdHMgdmFsdWVzIG9ubHkgZnJvbSB0aGUgbW9zdCByZWNlbnRseSBlbWl0dGVkIGluc3RhbmNlIG9mXG4gKiBgaW5uZXJPYnNlcnZhYmxlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5SZXJ1biBhbiBpbnRlcnZhbCBPYnNlcnZhYmxlIG9uIGV2ZXJ5IGNsaWNrIGV2ZW50PC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3Muc3dpdGNoTWFwVG8oUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKSk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcFRvfVxuICogQHNlZSB7QGxpbmsgc3dpdGNofVxuICogQHNlZSB7QGxpbmsgc3dpdGNoTWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cbiAqXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IGlubmVyT2JzZXJ2YWJsZSBBbiBPYnNlcnZhYmxlIHRvIHJlcGxhY2UgZWFjaCB2YWx1ZSBmcm9tXG4gKiB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG91dGVyVmFsdWU6IFQsIGlubmVyVmFsdWU6IEksIG91dGVySW5kZXg6IG51bWJlciwgaW5uZXJJbmRleDogbnVtYmVyKTogYW55fSBbcmVzdWx0U2VsZWN0b3JdXG4gKiBBIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBiYXNlZCBvbiB0aGUgdmFsdWVzXG4gKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSAob3V0ZXIpIGVtaXNzaW9uIGFuZCB0aGUgaW5uZXIgT2JzZXJ2YWJsZVxuICogZW1pc3Npb24uIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXJlOlxuICogLSBgb3V0ZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG4gKiAtIGBpbm5lclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuICogLSBgb3V0ZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGZyb20gdGhlIGdpdmVuXG4gKiBgaW5uZXJPYnNlcnZhYmxlYCBldmVyeSB0aW1lIGEgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgZnJvbSB0aGUgZ2l2ZW5cbiAqIGBpbm5lck9ic2VydmFibGVgIChhbmQgb3B0aW9uYWxseSB0cmFuc2Zvcm1lZCB0aHJvdWdoIGByZXN1bHRTZWxlY3RvcmApIGV2ZXJ5XG4gKiB0aW1lIGEgdmFsdWUgaXMgZW1pdHRlZCBvbiB0aGUgc291cmNlIE9ic2VydmFibGUsIGFuZCB0YWtpbmcgb25seSB0aGUgdmFsdWVzXG4gKiBmcm9tIHRoZSBtb3N0IHJlY2VudGx5IHByb2plY3RlZCBpbm5lciBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCBzd2l0Y2hNYXBUb1xuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gc3dpdGNoTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFN3aXRjaE1hcFRvT3BlcmF0b3IoaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvcikpO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHN3aXRjaE1hcFRvO1xudmFyIFN3aXRjaE1hcFRvT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN3aXRjaE1hcFRvT3BlcmF0b3Iob2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICBTd2l0Y2hNYXBUb09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFRvU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9ic2VydmFibGUsIHRoaXMucmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hNYXBUb09wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU3dpdGNoTWFwVG9TdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3dpdGNoTWFwVG9TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN3aXRjaE1hcFRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgaW5uZXIsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5pbm5lciA9IGlubmVyO1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBTd2l0Y2hNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZCh0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB0aGlzLmlubmVyLCB2YWx1ZSwgdGhpcy5pbmRleCsrKSk7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gdGhpcy5pbm5lclN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgU3dpdGNoTWFwVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN3aXRjaE1hcFRvU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZXN1bHRTZWxlY3RvciA9IF9hLnJlc3VsdFNlbGVjdG9yLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5UmVzdWx0U2VsZWN0b3Iob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLnRyeVJlc3VsdFNlbGVjdG9yID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcmVzdWx0U2VsZWN0b3IgPSBfYS5yZXN1bHRTZWxlY3RvciwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIFN3aXRjaE1hcFRvU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXBUby5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3N3aXRjaE1hcFRvLmpzXG4gKiogbW9kdWxlIGlkID0gMjQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgdGFrZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvdGFrZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRha2UgPSB0YWtlXzEudGFrZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvdGFrZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IHJlcXVpcmUoJy4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InKTtcbnZhciBFbXB0eU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL29ic2VydmFibGUvRW1wdHlPYnNlcnZhYmxlJyk7XG4vKipcbiAqIEVtaXRzIG9ubHkgdGhlIGZpcnN0IGBjb3VudGAgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5UYWtlcyB0aGUgZmlyc3QgYGNvdW50YCB2YWx1ZXMgZnJvbSB0aGUgc291cmNlLCB0aGVuXG4gKiBjb21wbGV0ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvdGFrZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgdGFrZWAgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgb25seSB0aGUgZmlyc3QgYGNvdW50YCB2YWx1ZXMgZW1pdHRlZFxuICogYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiB0aGUgc291cmNlIGVtaXRzIGZld2VyIHRoYW4gYGNvdW50YCB2YWx1ZXMgdGhlblxuICogYWxsIG9mIGl0cyB2YWx1ZXMgYXJlIGVtaXR0ZWQuIEFmdGVyIHRoYXQsIGl0IGNvbXBsZXRlcywgcmVnYXJkbGVzcyBpZiB0aGVcbiAqIHNvdXJjZSBjb21wbGV0ZXMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+VGFrZSB0aGUgZmlyc3QgNSBzZWNvbmRzIG9mIGFuIGluZmluaXRlIDEtc2Vjb25kIGludGVydmFsIE9ic2VydmFibGU8L2NhcHRpb24+XG4gKiB2YXIgaW50ZXJ2YWwgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIGZpdmUgPSBpbnRlcnZhbC50YWtlKDUpO1xuICogZml2ZS5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgdGFrZUxhc3R9XG4gKiBAc2VlIHtAbGluayB0YWtlVW50aWx9XG4gKiBAc2VlIHtAbGluayB0YWtlV2hpbGV9XG4gKiBAc2VlIHtAbGluayBza2lwfVxuICpcbiAqIEB0aHJvd3Mge0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yfSBXaGVuIHVzaW5nIGB0YWtlKGkpYCwgaXQgZGVsaXZlcnMgYW5cbiAqIEFyZ3VtZW50T3V0T3JSYW5nZUVycm9yIHRvIHRoZSBPYnNlcnZlcidzIGBlcnJvcmAgY2FsbGJhY2sgaWYgYGkgPCAwYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGBuZXh0YCB2YWx1ZXMgdG8gZW1pdC5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBvbmx5IHRoZSBmaXJzdCBgY291bnRgXG4gKiB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIG9yIGFsbCBvZiB0aGUgdmFsdWVzIGZyb20gdGhlIHNvdXJjZVxuICogaWYgdGhlIHNvdXJjZSBlbWl0cyBmZXdlciB0aGFuIGBjb3VudGAgdmFsdWVzLlxuICogQG1ldGhvZCB0YWtlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0YWtlKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlT3BlcmF0b3IoY291bnQpKTtcbiAgICB9XG59XG5leHBvcnRzLnRha2UgPSB0YWtlO1xudmFyIFRha2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZU9wZXJhdG9yKHRvdGFsKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgaWYgKHRoaXMudG90YWwgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUYWtlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGFrZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2VPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRha2VTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFrZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB9XG4gICAgVGFrZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgPD0gdG90YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudCA9PT0gdG90YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvdGFrZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYW4gZWxlbWVudCB3YXMgcXVlcmllZCBhdCBhIGNlcnRhaW4gaW5kZXggb2YgYW5cbiAqIE9ic2VydmFibGUsIGJ1dCBubyBzdWNoIGluZGV4IG9yIHBvc2l0aW9uIGV4aXN0cyBpbiB0aGF0IHNlcXVlbmNlLlxuICpcbiAqIEBzZWUge0BsaW5rIGVsZW1lbnRBdH1cbiAqIEBzZWUge0BsaW5rIHRha2V9XG4gKiBAc2VlIHtAbGluayB0YWtlTGFzdH1cbiAqXG4gKiBAY2xhc3MgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JcbiAqL1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IoKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsICdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbiAgICB9XG4gICAgcmV0dXJuIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzXG4gKiogbW9kdWxlIGlkID0gMjUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgdGFrZUxhc3RfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3Rha2VMYXN0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGFrZUxhc3QgPSB0YWtlTGFzdF8xLnRha2VMYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZUxhc3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvdGFrZUxhc3QuanNcbiAqKiBtb2R1bGUgaWQgPSAyNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEgPSByZXF1aXJlKCcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJyk7XG52YXIgRW1wdHlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0VtcHR5T2JzZXJ2YWJsZScpO1xuLyoqXG4gKiBFbWl0cyBvbmx5IHRoZSBsYXN0IGBjb3VudGAgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5SZW1lbWJlcnMgdGhlIGxhdGVzdCBgY291bnRgIHZhbHVlcywgdGhlbiBlbWl0cyB0aG9zZVxuICogb25seSB3aGVuIHRoZSBzb3VyY2UgY29tcGxldGVzLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3Rha2VMYXN0LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGB0YWtlTGFzdGAgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgYXQgbW9zdCB0aGUgbGFzdCBgY291bnRgIHZhbHVlc1xuICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIElmIHRoZSBzb3VyY2UgZW1pdHMgZmV3ZXIgdGhhbiBgY291bnRgXG4gKiB2YWx1ZXMgdGhlbiBhbGwgb2YgaXRzIHZhbHVlcyBhcmUgZW1pdHRlZC4gVGhpcyBvcGVyYXRvciBtdXN0IHdhaXQgdW50aWwgdGhlXG4gKiBgY29tcGxldGVgIG5vdGlmaWNhdGlvbiBlbWlzc2lvbiBmcm9tIHRoZSBzb3VyY2UgaW4gb3JkZXIgdG8gZW1pdCB0aGUgYG5leHRgXG4gKiB2YWx1ZXMgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLCBiZWNhdXNlIG90aGVyd2lzZSBpdCBpcyBpbXBvc3NpYmxlIHRvIGtub3dcbiAqIHdoZXRoZXIgb3Igbm90IG1vcmUgdmFsdWVzIHdpbGwgYmUgZW1pdHRlZCBvbiB0aGUgc291cmNlLiBGb3IgdGhpcyByZWFzb24sXG4gKiBhbGwgdmFsdWVzIGFyZSBlbWl0dGVkIHN5bmNocm9ub3VzbHksIGZvbGxvd2VkIGJ5IHRoZSBjb21wbGV0ZSBub3RpZmljYXRpb24uXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+VGFrZSB0aGUgbGFzdCAzIHZhbHVlcyBvZiBhbiBPYnNlcnZhYmxlIHdpdGggbWFueSB2YWx1ZXM8L2NhcHRpb24+XG4gKiB2YXIgbWFueSA9IFJ4Lk9ic2VydmFibGUucmFuZ2UoMSwgMTAwKTtcbiAqIHZhciBsYXN0VGhyZWUgPSBtYW55LnRha2VMYXN0KDMpO1xuICogbGFzdFRocmVlLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayB0YWtlfVxuICogQHNlZSB7QGxpbmsgdGFrZVVudGlsfVxuICogQHNlZSB7QGxpbmsgdGFrZVdoaWxlfVxuICogQHNlZSB7QGxpbmsgc2tpcH1cbiAqXG4gKiBAdGhyb3dzIHtBcmd1bWVudE91dE9mUmFuZ2VFcnJvcn0gV2hlbiB1c2luZyBgdGFrZUxhc3QoaSlgLCBpdCBkZWxpdmVycyBhblxuICogQXJndW1lbnRPdXRPclJhbmdlRXJyb3IgdG8gdGhlIE9ic2VydmVyJ3MgYGVycm9yYCBjYWxsYmFjayBpZiBgaSA8IDBgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgdmFsdWVzIHRvIGVtaXQgZnJvbSB0aGUgZW5kIG9mXG4gKiB0aGUgc2VxdWVuY2Ugb2YgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGF0IG1vc3QgdGhlIGxhc3QgY291bnRcbiAqIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgdGFrZUxhc3RcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHRha2VMYXN0KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW1wdHlPYnNlcnZhYmxlXzEuRW1wdHlPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlTGFzdE9wZXJhdG9yKGNvdW50KSk7XG4gICAgfVxufVxuZXhwb3J0cy50YWtlTGFzdCA9IHRha2VMYXN0O1xudmFyIFRha2VMYXN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VMYXN0T3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBpZiAodGhpcy50b3RhbCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRha2VMYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGFrZUxhc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlTGFzdE9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgVGFrZUxhc3RTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZUxhc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIHRoaXMucmluZyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB9XG4gICAgVGFrZUxhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmluZyA9IHRoaXMucmluZztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbDtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5jb3VudCsrO1xuICAgICAgICBpZiAocmluZy5sZW5ndGggPCB0b3RhbCkge1xuICAgICAgICAgICAgcmluZy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGNvdW50ICUgdG90YWw7XG4gICAgICAgICAgICByaW5nW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYWtlTGFzdFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5jb3VudCA+PSB0aGlzLnRvdGFsID8gdGhpcy50b3RhbCA6IHRoaXMuY291bnQ7XG4gICAgICAgICAgICB2YXIgcmluZyA9IHRoaXMucmluZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSAoY291bnQrKykgJSB0b3RhbDtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHJpbmdbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlTGFzdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlTGFzdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3Rha2VMYXN0LmpzXG4gKiogbW9kdWxlIGlkID0gMjU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgdGFrZVVudGlsXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci90YWtlVW50aWwnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS50YWtlVW50aWwgPSB0YWtlVW50aWxfMS50YWtlVW50aWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvdGFrZVVudGlsLmpzXG4gKiogbW9kdWxlIGlkID0gMjU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogRW1pdHMgdGhlIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB1bnRpbCBhIGBub3RpZmllcmBcbiAqIE9ic2VydmFibGUgZW1pdHMgYSB2YWx1ZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGV0cyB2YWx1ZXMgcGFzcyB1bnRpbCBhIHNlY29uZCBPYnNlcnZhYmxlLFxuICogYG5vdGlmaWVyYCwgZW1pdHMgc29tZXRoaW5nLiBUaGVuLCBpdCBjb21wbGV0ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvdGFrZVVudGlsLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGB0YWtlVW50aWxgIHN1YnNjcmliZXMgYW5kIGJlZ2lucyBtaXJyb3JpbmcgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJdCBhbHNvXG4gKiBtb25pdG9ycyBhIHNlY29uZCBPYnNlcnZhYmxlLCBgbm90aWZpZXJgIHRoYXQgeW91IHByb3ZpZGUuIElmIHRoZSBgbm90aWZpZXJgXG4gKiBlbWl0cyBhIHZhbHVlIG9yIGEgY29tcGxldGUgbm90aWZpY2F0aW9uLCB0aGUgb3V0cHV0IE9ic2VydmFibGUgc3RvcHNcbiAqIG1pcnJvcmluZyB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIGNvbXBsZXRlcy5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5UaWNrIGV2ZXJ5IHNlY29uZCB1bnRpbCB0aGUgZmlyc3QgY2xpY2sgaGFwcGVuczwvY2FwdGlvbj5cbiAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGludGVydmFsLnRha2VVbnRpbChjbGlja3MpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayB0YWtlfVxuICogQHNlZSB7QGxpbmsgdGFrZUxhc3R9XG4gKiBAc2VlIHtAbGluayB0YWtlV2hpbGV9XG4gKiBAc2VlIHtAbGluayBza2lwfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gbm90aWZpZXIgVGhlIE9ic2VydmFibGUgd2hvc2UgZmlyc3QgZW1pdHRlZCB2YWx1ZSB3aWxsXG4gKiBjYXVzZSB0aGUgb3V0cHV0IE9ic2VydmFibGUgb2YgYHRha2VVbnRpbGAgdG8gc3RvcCBlbWl0dGluZyB2YWx1ZXMgZnJvbSB0aGVcbiAqIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSB2YWx1ZXMgZnJvbSB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlIHVudGlsIHN1Y2ggdGltZSBhcyBgbm90aWZpZXJgIGVtaXRzIGl0cyBmaXJzdCB2YWx1ZS5cbiAqIEBtZXRob2QgdGFrZVVudGlsXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0YWtlVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikpO1xufVxuZXhwb3J0cy50YWtlVW50aWwgPSB0YWtlVW50aWw7XG52YXIgVGFrZVVudGlsT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgVGFrZVVudGlsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGFrZVVudGlsU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBUYWtlVW50aWxTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFrZVVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBub3RpZmllcikpO1xuICAgIH1cbiAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub29wXG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci90YWtlVW50aWwuanNcbiAqKiBtb2R1bGUgaWQgPSAyNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB0YWtlV2hpbGVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3Rha2VXaGlsZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRha2VXaGlsZSA9IHRha2VXaGlsZV8xLnRha2VXaGlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VXaGlsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci90YWtlV2hpbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBFbWl0cyB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgc28gbG9uZyBhcyBlYWNoIHZhbHVlIHNhdGlzZmllc1xuICogdGhlIGdpdmVuIGBwcmVkaWNhdGVgLCBhbmQgdGhlbiBjb21wbGV0ZXMgYXMgc29vbiBhcyB0aGlzIGBwcmVkaWNhdGVgIGlzIG5vdFxuICogc2F0aXNmaWVkLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5UYWtlcyB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIG9ubHkgd2hpbGUgdGhleSBwYXNzIHRoZVxuICogY29uZGl0aW9uIGdpdmVuLiBXaGVuIHRoZSBmaXJzdCB2YWx1ZSBkb2VzIG5vdCBzYXRpc2Z5LCBpdCBjb21wbGV0ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvdGFrZVdoaWxlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGB0YWtlV2hpbGVgIHN1YnNjcmliZXMgYW5kIGJlZ2lucyBtaXJyb3JpbmcgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBFYWNoIHZhbHVlXG4gKiBlbWl0dGVkIG9uIHRoZSBzb3VyY2UgaXMgZ2l2ZW4gdG8gdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYVxuICogYm9vbGVhbiwgcmVwcmVzZW50aW5nIGEgY29uZGl0aW9uIHRvIGJlIHNhdGlzZmllZCBieSB0aGUgc291cmNlIHZhbHVlcy4gVGhlXG4gKiBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0cyB0aGUgc291cmNlIHZhbHVlcyB1bnRpbCBzdWNoIHRpbWUgYXMgdGhlIGBwcmVkaWNhdGVgXG4gKiByZXR1cm5zIGZhbHNlLCBhdCB3aGljaCBwb2ludCBgdGFrZVdoaWxlYCBzdG9wcyBtaXJyb3JpbmcgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSBhbmQgY29tcGxldGVzIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrIGV2ZW50cyBvbmx5IHdoaWxlIHRoZSBjbGllbnRYIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiAyMDA8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy50YWtlV2hpbGUoZXYgPT4gZXYuY2xpZW50WCA+IDIwMCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIHRha2V9XG4gKiBAc2VlIHtAbGluayB0YWtlTGFzdH1cbiAqIEBzZWUge0BsaW5rIHRha2VVbnRpbH1cbiAqIEBzZWUge0BsaW5rIHNraXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZSBBIGZ1bmN0aW9uIHRoYXRcbiAqIGV2YWx1YXRlcyBhIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCByZXR1cm5zIGEgYm9vbGVhbi5cbiAqIEFsc28gdGFrZXMgdGhlICh6ZXJvLWJhc2VkKSBpbmRleCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSB2YWx1ZXMgZnJvbSB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlIHNvIGxvbmcgYXMgZWFjaCB2YWx1ZSBzYXRpc2ZpZXMgdGhlIGNvbmRpdGlvbiBkZWZpbmVkIGJ5IHRoZVxuICogYHByZWRpY2F0ZWAsIHRoZW4gY29tcGxldGVzLlxuICogQG1ldGhvZCB0YWtlV2hpbGVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHRha2VXaGlsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpKTtcbn1cbmV4cG9ydHMudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xudmFyIFRha2VXaGlsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgfVxuICAgIFRha2VXaGlsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFRha2VXaGlsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlV2hpbGVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRha2VXaGlsZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUYWtlV2hpbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VXaGlsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB9XG4gICAgVGFrZVdoaWxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlKHZhbHVlLCB0aGlzLmluZGV4KyspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0T3JDb21wbGV0ZSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9O1xuICAgIFRha2VXaGlsZVN1YnNjcmliZXIucHJvdG90eXBlLm5leHRPckNvbXBsZXRlID0gZnVuY3Rpb24gKHZhbHVlLCBwcmVkaWNhdGVSZXN1bHQpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKEJvb2xlYW4ocHJlZGljYXRlUmVzdWx0KSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVdoaWxlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VXaGlsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3Rha2VXaGlsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHRocm90dGxlXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci90aHJvdHRsZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRocm90dGxlID0gdGhyb3R0bGVfMS50aHJvdHRsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3Rocm90dGxlLmpzXG4gKiogbW9kdWxlIGlkID0gMjU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogRW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgdGhlbiBpZ25vcmVzIHN1YnNlcXVlbnQgc291cmNlXG4gKiB2YWx1ZXMgZm9yIGEgZHVyYXRpb24gZGV0ZXJtaW5lZCBieSBhbm90aGVyIE9ic2VydmFibGUsIHRoZW4gcmVwZWF0cyB0aGlzXG4gKiBwcm9jZXNzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIHRocm90dGxlVGltZX0sIGJ1dCB0aGUgc2lsZW5jaW5nXG4gKiBkdXJhdGlvbiBpcyBkZXRlcm1pbmVkIGJ5IGEgc2Vjb25kIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvdGhyb3R0bGUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYHRocm90dGxlYCBlbWl0cyB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuICogd2hlbiBpdHMgaW50ZXJuYWwgdGltZXIgaXMgZGlzYWJsZWQsIGFuZCBpZ25vcmVzIHNvdXJjZSB2YWx1ZXMgd2hlbiB0aGUgdGltZXJcbiAqIGlzIGVuYWJsZWQuIEluaXRpYWxseSwgdGhlIHRpbWVyIGlzIGRpc2FibGVkLiBBcyBzb29uIGFzIHRoZSBmaXJzdCBzb3VyY2VcbiAqIHZhbHVlIGFycml2ZXMsIGl0IGlzIGZvcndhcmRlZCB0byB0aGUgb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGVuIHRoZSB0aW1lclxuICogaXMgZW5hYmxlZCBieSBjYWxsaW5nIHRoZSBgZHVyYXRpb25TZWxlY3RvcmAgZnVuY3Rpb24gd2l0aCB0aGUgc291cmNlIHZhbHVlLFxuICogd2hpY2ggcmV0dXJucyB0aGUgXCJkdXJhdGlvblwiIE9ic2VydmFibGUuIFdoZW4gdGhlIGR1cmF0aW9uIE9ic2VydmFibGUgZW1pdHMgYVxuICogdmFsdWUgb3IgY29tcGxldGVzLCB0aGUgdGltZXIgaXMgZGlzYWJsZWQsIGFuZCB0aGlzIHByb2Nlc3MgcmVwZWF0cyBmb3IgdGhlXG4gKiBuZXh0IHNvdXJjZSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IGNsaWNrcyBhdCBhIHJhdGUgb2YgYXQgbW9zdCBvbmUgY2xpY2sgcGVyIHNlY29uZDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcmVzdWx0ID0gY2xpY2tzLnRocm90dGxlKGV2ID0+IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBhdWRpdH1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlfVxuICogQHNlZSB7QGxpbmsgZGVsYXlXaGVufVxuICogQHNlZSB7QGxpbmsgc2FtcGxlfVxuICogQHNlZSB7QGxpbmsgdGhyb3R0bGVUaW1lfVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQpOiBPYnNlcnZhYmxlfFByb21pc2V9IGR1cmF0aW9uU2VsZWN0b3IgQSBmdW5jdGlvblxuICogdGhhdCByZWNlaXZlcyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBmb3IgY29tcHV0aW5nIHRoZSBzaWxlbmNpbmdcbiAqIGR1cmF0aW9uIGZvciBlYWNoIHNvdXJjZSB2YWx1ZSwgcmV0dXJuZWQgYXMgYW4gT2JzZXJ2YWJsZSBvciBhIFByb21pc2UuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgcGVyZm9ybXMgdGhlIHRocm90dGxlIG9wZXJhdGlvbiB0b1xuICogbGltaXQgdGhlIHJhdGUgb2YgZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS5cbiAqIEBtZXRob2QgdGhyb3R0bGVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpKTtcbn1cbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcbnZhciBUaHJvdHRsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICB9XG4gICAgVGhyb3R0bGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBUaHJvdHRsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRocm90dGxlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRocm90dGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRocm90dGxlZCkge1xuICAgICAgICAgICAgdGhpcy50cnlEdXJhdGlvblNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlEdXJhdGlvblNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdEFuZFRocm90dGxlKHZhbHVlLCBkdXJhdGlvbik7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLmVtaXRBbmRUaHJvdHRsZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKSk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IHRoaXMudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh0aHJvdHRsZWQpO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci90aHJvdHRsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI2MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHRocm90dGxlVGltZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvdGhyb3R0bGVUaW1lJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGhyb3R0bGVUaW1lID0gdGhyb3R0bGVUaW1lXzEudGhyb3R0bGVUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3Rocm90dGxlVGltZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI2MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4uL3NjaGVkdWxlci9hc3luYycpO1xuLyoqXG4gKiBFbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB0aGVuIGlnbm9yZXMgc3Vic2VxdWVudCBzb3VyY2VcbiAqIHZhbHVlcyBmb3IgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMsIHRoZW4gcmVwZWF0cyB0aGlzIHByb2Nlc3MuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxldHMgYSB2YWx1ZSBwYXNzLCB0aGVuIGlnbm9yZXMgc291cmNlIHZhbHVlcyBmb3IgdGhlXG4gKiBuZXh0IGBkdXJhdGlvbmAgbWlsbGlzZWNvbmRzLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3Rocm90dGxlVGltZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgdGhyb3R0bGVUaW1lYCBlbWl0cyB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuICogd2hlbiBpdHMgaW50ZXJuYWwgdGltZXIgaXMgZGlzYWJsZWQsIGFuZCBpZ25vcmVzIHNvdXJjZSB2YWx1ZXMgd2hlbiB0aGUgdGltZXJcbiAqIGlzIGVuYWJsZWQuIEluaXRpYWxseSwgdGhlIHRpbWVyIGlzIGRpc2FibGVkLiBBcyBzb29uIGFzIHRoZSBmaXJzdCBzb3VyY2VcbiAqIHZhbHVlIGFycml2ZXMsIGl0IGlzIGZvcndhcmRlZCB0byB0aGUgb3V0cHV0IE9ic2VydmFibGUsIGFuZCB0aGVuIHRoZSB0aW1lclxuICogaXMgZW5hYmxlZC4gQWZ0ZXIgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMgKG9yIHRoZSB0aW1lIHVuaXQgZGV0ZXJtaW5lZFxuICogaW50ZXJuYWxseSBieSB0aGUgb3B0aW9uYWwgYHNjaGVkdWxlcmApIGhhcyBwYXNzZWQsIHRoZSB0aW1lciBpcyBkaXNhYmxlZCxcbiAqIGFuZCB0aGlzIHByb2Nlc3MgcmVwZWF0cyBmb3IgdGhlIG5leHQgc291cmNlIHZhbHVlLiBPcHRpb25hbGx5IHRha2VzIGFcbiAqIHtAbGluayBTY2hlZHVsZXJ9IGZvciBtYW5hZ2luZyB0aW1lcnMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBjbGlja3MgYXQgYSByYXRlIG9mIGF0IG1vc3Qgb25lIGNsaWNrIHBlciBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy50aHJvdHRsZVRpbWUoMTAwMCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGF1ZGl0VGltZX1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlVGltZX1cbiAqIEBzZWUge0BsaW5rIGRlbGF5fVxuICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cbiAqIEBzZWUge0BsaW5rIHRocm90dGxlfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaW1lIHRvIHdhaXQgYmVmb3JlIGVtaXR0aW5nIGFub3RoZXIgdmFsdWUgYWZ0ZXJcbiAqIGVtaXR0aW5nIHRoZSBsYXN0IHZhbHVlLCBtZWFzdXJlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkXG4gKiBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUge0BsaW5rIFNjaGVkdWxlcn0gdG8gdXNlIGZvclxuICogbWFuYWdpbmcgdGhlIHRpbWVycyB0aGF0IGhhbmRsZSB0aGUgc2FtcGxpbmcuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgcGVyZm9ybXMgdGhlIHRocm90dGxlIG9wZXJhdGlvbiB0b1xuICogbGltaXQgdGhlIHJhdGUgb2YgZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS5cbiAqIEBtZXRob2QgdGhyb3R0bGVUaW1lXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZVRpbWUoZHVyYXRpb24sIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlcikpO1xufVxuZXhwb3J0cy50aHJvdHRsZVRpbWUgPSB0aHJvdHRsZVRpbWU7XG52YXIgVGhyb3R0bGVUaW1lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRocm90dGxlVGltZU9wZXJhdG9yKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgVGhyb3R0bGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlVGltZU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRocm90dGxlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1cmF0aW9uLCB7IHN1YnNjcmliZXI6IHRoaXMgfSkpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJUaHJvdHRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IHRoaXMudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLnRocm90dGxlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KGFyZykge1xuICAgIHZhciBzdWJzY3JpYmVyID0gYXJnLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5jbGVhclRocm90dGxlKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZVRpbWUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci90aHJvdHRsZVRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB0aW1lb3V0XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci90aW1lb3V0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGltZW91dCA9IHRpbWVvdXRfMS50aW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci90aW1lb3V0LmpzXG4gKiogbW9kdWxlIGlkID0gMjYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuLi9zY2hlZHVsZXIvYXN5bmMnKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNEYXRlJyk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBAcGFyYW0gZHVlXG4gKiBAcGFyYW0gZXJyb3JUb1NlbmRcbiAqIEBwYXJhbSBzY2hlZHVsZXJcbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj58V2ViU29ja2V0U3ViamVjdDxUPnxPYnNlcnZhYmxlPFQ+fVxuICogQG1ldGhvZCB0aW1lb3V0XG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0aW1lb3V0KGR1ZSwgZXJyb3JUb1NlbmQsIHNjaGVkdWxlcikge1xuICAgIGlmIChlcnJvclRvU2VuZCA9PT0gdm9pZCAwKSB7IGVycm9yVG9TZW5kID0gbnVsbDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG4gICAgdmFyIGFic29sdXRlVGltZW91dCA9IGlzRGF0ZV8xLmlzRGF0ZShkdWUpO1xuICAgIHZhciB3YWl0Rm9yID0gYWJzb2x1dGVUaW1lb3V0ID8gKCtkdWUgLSBzY2hlZHVsZXIubm93KCkpIDogTWF0aC5hYnMoZHVlKTtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUaW1lb3V0T3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCBlcnJvclRvU2VuZCwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0O1xudmFyIFRpbWVvdXRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZW91dE9wZXJhdG9yKHdhaXRGb3IsIGFic29sdXRlVGltZW91dCwgZXJyb3JUb1NlbmQsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLndhaXRGb3IgPSB3YWl0Rm9yO1xuICAgICAgICB0aGlzLmFic29sdXRlVGltZW91dCA9IGFic29sdXRlVGltZW91dDtcbiAgICAgICAgdGhpcy5lcnJvclRvU2VuZCA9IGVycm9yVG9TZW5kO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgVGltZW91dE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFRpbWVvdXRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWJzb2x1dGVUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMuZXJyb3JUb1NlbmQsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dE9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgVGltZW91dFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lb3V0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lb3V0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWJzb2x1dGVUaW1lb3V0LCB3YWl0Rm9yLCBlcnJvclRvU2VuZCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG4gICAgICAgIHRoaXMud2FpdEZvciA9IHdhaXRGb3I7XG4gICAgICAgIHRoaXMuZXJyb3JUb1NlbmQgPSBlcnJvclRvU2VuZDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9wcmV2aW91c0luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5faGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUsIFwicHJldmlvdXNJbmRleFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzSW5kZXg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUsIFwiaGFzQ29tcGxldGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzQ29tcGxldGVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBUaW1lb3V0U3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzQ29tcGxldGVkICYmIHNvdXJjZS5wcmV2aW91c0luZGV4ID09PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgIHNvdXJjZS5ub3RpZnlUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVvdXRTdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShUaW1lb3V0U3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQsIHRoaXMud2FpdEZvciwgeyBzdWJzY3JpYmVyOiB0aGlzLCBpbmRleDogY3VycmVudEluZGV4IH0pO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzSW5kZXggPSBjdXJyZW50SW5kZXg7XG4gICAgfTtcbiAgICBUaW1lb3V0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgaWYgKCF0aGlzLmFic29sdXRlVGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLl9oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLl9oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgVGltZW91dFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXJyb3IodGhpcy5lcnJvclRvU2VuZCB8fCBuZXcgRXJyb3IoJ3RpbWVvdXQnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvdGltZW91dC5qc1xuICoqIG1vZHVsZSBpZCA9IDI2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHRpbWVvdXRXaXRoXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci90aW1lb3V0V2l0aCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRpbWVvdXRXaXRoID0gdGltZW91dFdpdGhfMS50aW1lb3V0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRXaXRoLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3RpbWVvdXRXaXRoLmpzXG4gKiogbW9kdWxlIGlkID0gMjY1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuLi9zY2hlZHVsZXIvYXN5bmMnKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNEYXRlJyk7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBAcGFyYW0gZHVlXG4gKiBAcGFyYW0gd2l0aE9ic2VydmFibGVcbiAqIEBwYXJhbSBzY2hlZHVsZXJcbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj58V2ViU29ja2V0U3ViamVjdDxUPnxPYnNlcnZhYmxlPFQ+fVxuICogQG1ldGhvZCB0aW1lb3V0V2l0aFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gdGltZW91dFdpdGgoZHVlLCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICB2YXIgYWJzb2x1dGVUaW1lb3V0ID0gaXNEYXRlXzEuaXNEYXRlKGR1ZSk7XG4gICAgdmFyIHdhaXRGb3IgPSBhYnNvbHV0ZVRpbWVvdXQgPyAoK2R1ZSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkdWUpO1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFRpbWVvdXRXaXRoT3BlcmF0b3Iod2FpdEZvciwgYWJzb2x1dGVUaW1lb3V0LCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnRpbWVvdXRXaXRoID0gdGltZW91dFdpdGg7XG52YXIgVGltZW91dFdpdGhPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZW91dFdpdGhPcGVyYXRvcih3YWl0Rm9yLCBhYnNvbHV0ZVRpbWVvdXQsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy53YWl0Rm9yID0gd2FpdEZvcjtcbiAgICAgICAgdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG4gICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIFRpbWVvdXRXaXRoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVGltZW91dFdpdGhTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWJzb2x1dGVUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRoaXMud2l0aE9ic2VydmFibGUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRpbWVvdXRXaXRoU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVvdXRXaXRoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lb3V0V2l0aFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFic29sdXRlVGltZW91dCwgd2FpdEZvciwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLmFic29sdXRlVGltZW91dCA9IGFic29sdXRlVGltZW91dDtcbiAgICAgICAgdGhpcy53YWl0Rm9yID0gd2FpdEZvcjtcbiAgICAgICAgdGhpcy53aXRoT2JzZXJ2YWJsZSA9IHdpdGhPYnNlcnZhYmxlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy50aW1lb3V0U3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLCBcInByZXZpb3VzSW5kZXhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0luZGV4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZSwgXCJoYXNDb21wbGV0ZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNDb21wbGV0ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzQ29tcGxldGVkICYmIHNvdXJjZS5wcmV2aW91c0luZGV4ID09PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgIHNvdXJjZS5oYW5kbGVUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgdmFyIHRpbWVvdXRTdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgaW5kZXg6IGN1cnJlbnRJbmRleCB9O1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShUaW1lb3V0V2l0aFN1YnNjcmliZXIuZGlzcGF0Y2hUaW1lb3V0LCB0aGlzLndhaXRGb3IsIHRpbWVvdXRTdGF0ZSk7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgdGhpcy5fcHJldmlvdXNJbmRleCA9IGN1cnJlbnRJbmRleDtcbiAgICB9O1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgaWYgKCF0aGlzLmFic29sdXRlVGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZW91dFdpdGhTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5faGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuX2hhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLmhhbmRsZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdmFyIHdpdGhPYnNlcnZhYmxlID0gdGhpcy53aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uYWRkKHRoaXMudGltZW91dFN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgd2l0aE9ic2VydmFibGUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRpbWVvdXRXaXRoU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0V2l0aC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3RpbWVvdXRXaXRoLmpzXG4gKiogbW9kdWxlIGlkID0gMjY2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgdG9BcnJheV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvdG9BcnJheScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRvQXJyYXkgPSB0b0FycmF5XzEudG9BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvdG9BcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDI2N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIEByZXR1cm4ge09ic2VydmFibGU8YW55W10+fFdlYlNvY2tldFN1YmplY3Q8VD58T2JzZXJ2YWJsZTxUPn1cbiAqIEBtZXRob2QgdG9BcnJheVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUb0FycmF5T3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xudmFyIFRvQXJyYXlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9BcnJheU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBUb0FycmF5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgVG9BcnJheVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFRvQXJyYXlPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRvQXJyYXlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVG9BcnJheVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVG9BcnJheVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgfVxuICAgIFRvQXJyYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHRoaXMuYXJyYXkucHVzaCh4KTtcbiAgICB9O1xuICAgIFRvQXJyYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLmFycmF5KTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRvQXJyYXlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9BcnJheS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3RvQXJyYXkuanNcbiAqKiBtb2R1bGUgaWQgPSAyNjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB0b1Byb21pc2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3RvUHJvbWlzZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IHRvUHJvbWlzZV8xLnRvUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHJvbWlzZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci90b1Byb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xuLyoqXG4gKiBAcGFyYW0gUHJvbWlzZUN0b3JcbiAqIEByZXR1cm4ge1Byb21pc2U8VD59XG4gKiBAbWV0aG9kIHRvUHJvbWlzZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gdG9Qcm9taXNlKFByb21pc2VDdG9yKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAoIVByb21pc2VDdG9yKSB7XG4gICAgICAgIGlmIChyb290XzEucm9vdC5SeCAmJiByb290XzEucm9vdC5SeC5jb25maWcgJiYgcm9vdF8xLnJvb3QuUnguY29uZmlnLlByb21pc2UpIHtcbiAgICAgICAgICAgIFByb21pc2VDdG9yID0gcm9vdF8xLnJvb3QuUnguY29uZmlnLlByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocm9vdF8xLnJvb3QuUHJvbWlzZSkge1xuICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSByb290XzEucm9vdC5Qcm9taXNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiB2YWx1ZSA9IHg7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRvUHJvbWlzZSA9IHRvUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHJvbWlzZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3RvUHJvbWlzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHdpbmRvd18xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivd2luZG93Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUud2luZG93ID0gd2luZG93XzEud2luZG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3dpbmRvdy5qc1xuICoqIG1vZHVsZSBpZCA9IDI3MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9TdWJqZWN0Jyk7XG52YXIgT3V0ZXJTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9PdXRlclN1YnNjcmliZXInKTtcbnZhciBzdWJzY3JpYmVUb1Jlc3VsdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCcpO1xuLyoqXG4gKiBCcmFuY2ggb3V0IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgYXMgYSBuZXN0ZWQgT2JzZXJ2YWJsZSB3aGVuZXZlclxuICogYHdpbmRvd0JvdW5kYXJpZXNgIGVtaXRzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGJ1ZmZlcn0sIGJ1dCBlbWl0cyBhIG5lc3RlZCBPYnNlcnZhYmxlXG4gKiBpbnN0ZWFkIG9mIGFuIGFycmF5Ljwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3dpbmRvdy5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aW5kb3dzIG9mIGl0ZW1zIGl0IGNvbGxlY3RzIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIGVtaXRzIGNvbm5lY3RlZCwgbm9uLW92ZXJsYXBwaW5nXG4gKiB3aW5kb3dzLiBJdCBlbWl0cyB0aGUgY3VycmVudCB3aW5kb3cgYW5kIG9wZW5zIGEgbmV3IG9uZSB3aGVuZXZlciB0aGVcbiAqIE9ic2VydmFibGUgYHdpbmRvd0JvdW5kYXJpZXNgIGVtaXRzIGFuIGl0ZW0uIEJlY2F1c2UgZWFjaCB3aW5kb3cgaXMgYW5cbiAqIE9ic2VydmFibGUsIHRoZSBvdXRwdXQgaXMgYSBoaWdoZXItb3JkZXIgT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5JbiBldmVyeSB3aW5kb3cgb2YgMSBzZWNvbmQgZWFjaCwgZW1pdCBhdCBtb3N0IDIgY2xpY2sgZXZlbnRzPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gKiB2YXIgcmVzdWx0ID0gY2xpY2tzLndpbmRvdyhpbnRlcnZhbClcbiAqICAgLm1hcCh3aW4gPT4gd2luLnRha2UoMikpIC8vIGVhY2ggd2luZG93IGhhcyBhdCBtb3N0IDIgZW1pc3Npb25zXG4gKiAgIC5tZXJnZUFsbCgpOyAvLyBmbGF0dGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzXG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIHdpbmRvd0NvdW50fVxuICogQHNlZSB7QGxpbmsgd2luZG93VGltZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd1RvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd1doZW59XG4gKiBAc2VlIHtAbGluayBidWZmZXJ9XG4gKlxuICogQHBhcmFtIHtPYnNlcnZhYmxlPGFueT59IHdpbmRvd0JvdW5kYXJpZXMgQW4gT2JzZXJ2YWJsZSB0aGF0IGNvbXBsZXRlcyB0aGVcbiAqIHByZXZpb3VzIHdpbmRvdyBhbmQgc3RhcnRzIGEgbmV3IHdpbmRvdy5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIE9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggYXJlXG4gKiBPYnNlcnZhYmxlcyBlbWl0dGluZyB2YWx1ZXMgb2YgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQG1ldGhvZCB3aW5kb3dcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHdpbmRvdyh3aW5kb3dCb3VuZGFyaWVzKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93T3BlcmF0b3Iod2luZG93Qm91bmRhcmllcykpO1xufVxuZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG52YXIgV2luZG93T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd09wZXJhdG9yKHdpbmRvd0JvdW5kYXJpZXMpIHtcbiAgICAgICAgdGhpcy53aW5kb3dCb3VuZGFyaWVzID0gd2luZG93Qm91bmRhcmllcztcbiAgICB9XG4gICAgV2luZG93T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2luZG93U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd0JvdW5kYXJpZXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFdpbmRvd1N1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhXaW5kb3dTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1N1YnNjcmliZXIoZGVzdGluYXRpb24sIHdpbmRvd0JvdW5kYXJpZXMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMud2luZG93Qm91bmRhcmllcyA9IHdpbmRvd0JvdW5kYXJpZXM7XG4gICAgICAgIHRoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgd2luZG93Qm91bmRhcmllcykpO1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coKTtcbiAgICB9XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy53aW5kb3cubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMud2luZG93LmVycm9yKGVycik7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUub3BlbldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZXaW5kb3cgPSB0aGlzLndpbmRvdztcbiAgICAgICAgaWYgKHByZXZXaW5kb3cpIHtcbiAgICAgICAgICAgIHByZXZXaW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgbmV3V2luZG93ID0gdGhpcy53aW5kb3cgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKG5ld1dpbmRvdyk7XG4gICAgICAgIGRlc3RpbmF0aW9uLm5leHQobmV3V2luZG93KTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvdy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3dpbmRvdy5qc1xuICoqIG1vZHVsZSBpZCA9IDI3MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHdpbmRvd0NvdW50XzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci93aW5kb3dDb3VudCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLndpbmRvd0NvdW50ID0gd2luZG93Q291bnRfMS53aW5kb3dDb3VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd0NvdW50LmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3dpbmRvd0NvdW50LmpzXG4gKiogbW9kdWxlIGlkID0gMjczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9TdWJqZWN0Jyk7XG4vKipcbiAqIEJyYW5jaCBvdXQgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcyBhcyBhIG5lc3RlZCBPYnNlcnZhYmxlIHdpdGggZWFjaFxuICogbmVzdGVkIE9ic2VydmFibGUgZW1pdHRpbmcgYXQgbW9zdCBgd2luZG93U2l6ZWAgdmFsdWVzLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5JdCdzIGxpa2Uge0BsaW5rIGJ1ZmZlckNvdW50fSwgYnV0IGVtaXRzIGEgbmVzdGVkXG4gKiBPYnNlcnZhYmxlIGluc3RlYWQgb2YgYW4gYXJyYXkuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvd2luZG93Q291bnQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0cyB3aW5kb3dzIGV2ZXJ5IGBzdGFydFdpbmRvd0V2ZXJ5YFxuICogaXRlbXMsIGVhY2ggY29udGFpbmluZyBubyBtb3JlIHRoYW4gYHdpbmRvd1NpemVgIGl0ZW1zLiBXaGVuIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgY29tcGxldGVzIG9yIGVuY291bnRlcnMgYW4gZXJyb3IsIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0c1xuICogdGhlIGN1cnJlbnQgd2luZG93IGFuZCBwcm9wYWdhdGVzIHRoZSBub3RpZmljYXRpb24gZnJvbSB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBJZiBgc3RhcnRXaW5kb3dFdmVyeWAgaXMgbm90IHByb3ZpZGVkLCB0aGVuIG5ldyB3aW5kb3dzIGFyZVxuICogc3RhcnRlZCBpbW1lZGlhdGVseSBhdCB0aGUgc3RhcnQgb2YgdGhlIHNvdXJjZSBhbmQgd2hlbiBlYWNoIHdpbmRvdyBjb21wbGV0ZXNcbiAqIHdpdGggc2l6ZSBgd2luZG93U2l6ZWAuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+SWdub3JlIGV2ZXJ5IDNyZCBjbGljayBldmVudCwgc3RhcnRpbmcgZnJvbSB0aGUgZmlyc3Qgb25lPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3Mud2luZG93Q291bnQoMylcbiAqICAgLm1hcCh3aW4gPT4gd2luLnNraXAoMSkpIC8vIHNraXAgZmlyc3Qgb2YgZXZlcnkgMyBjbGlja3NcbiAqICAgLm1lcmdlQWxsKCk7IC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+SWdub3JlIGV2ZXJ5IDNyZCBjbGljayBldmVudCwgc3RhcnRpbmcgZnJvbSB0aGUgdGhpcmQgb25lPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3Mud2luZG93Q291bnQoMiwgMylcbiAqICAgLm1lcmdlQWxsKCk7IC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgd2luZG93fVxuICogQHNlZSB7QGxpbmsgd2luZG93VGltZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd1RvZ2dsZX1cbiAqIEBzZWUge0BsaW5rIHdpbmRvd1doZW59XG4gKiBAc2VlIHtAbGluayBidWZmZXJDb3VudH1cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2luZG93U2l6ZSBUaGUgbWF4aW11bSBudW1iZXIgb2YgdmFsdWVzIGVtaXR0ZWQgYnkgZWFjaFxuICogd2luZG93LlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydFdpbmRvd0V2ZXJ5XSBJbnRlcnZhbCBhdCB3aGljaCB0byBzdGFydCBhIG5ldyB3aW5kb3cuXG4gKiBGb3IgZXhhbXBsZSBpZiBgc3RhcnRXaW5kb3dFdmVyeWAgaXMgYDJgLCB0aGVuIGEgbmV3IHdpbmRvdyB3aWxsIGJlIHN0YXJ0ZWRcbiAqIG9uIGV2ZXJ5IG90aGVyIHZhbHVlIGZyb20gdGhlIHNvdXJjZS4gQSBuZXcgd2luZG93IGlzIHN0YXJ0ZWQgYXQgdGhlXG4gKiBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBieSBkZWZhdWx0LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxPYnNlcnZhYmxlPFQ+Pn0gQW4gT2JzZXJ2YWJsZSBvZiB3aW5kb3dzLCB3aGljaCBpbiB0dXJuXG4gKiBhcmUgT2JzZXJ2YWJsZSBvZiB2YWx1ZXMuXG4gKiBAbWV0aG9kIHdpbmRvd0NvdW50XG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB3aW5kb3dDb3VudCh3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0V2luZG93RXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydFdpbmRvd0V2ZXJ5ID0gMDsgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkpO1xufVxuZXhwb3J0cy53aW5kb3dDb3VudCA9IHdpbmRvd0NvdW50O1xudmFyIFdpbmRvd0NvdW50T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgICAgICB0aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuICAgIH1cbiAgICBXaW5kb3dDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFdpbmRvd0NvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1NpemUsIHRoaXMuc3RhcnRXaW5kb3dFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd0NvdW50T3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBXaW5kb3dDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhXaW5kb3dDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93Q291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuICAgICAgICB0aGlzLndpbmRvd3MgPSBbbmV3IFN1YmplY3RfMS5TdWJqZWN0KCldO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdmFyIGZpcnN0V2luZG93ID0gdGhpcy53aW5kb3dzWzBdO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoZmlyc3RXaW5kb3cpO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGZpcnN0V2luZG93KTtcbiAgICB9XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgc3RhcnRXaW5kb3dFdmVyeSA9ICh0aGlzLnN0YXJ0V2luZG93RXZlcnkgPiAwKSA/IHRoaXMuc3RhcnRXaW5kb3dFdmVyeSA6IHRoaXMud2luZG93U2l6ZTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdmFyIHdpbmRvd1NpemUgPSB0aGlzLndpbmRvd1NpemU7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB2YXIgbGVuID0gd2luZG93cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHdpbmRvd3NbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB0aGlzLmNvdW50IC0gd2luZG93U2l6ZSArIDE7XG4gICAgICAgIGlmIChjID49IDAgJiYgYyAlIHN0YXJ0V2luZG93RXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgJSBzdGFydFdpbmRvd0V2ZXJ5ID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzEgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgIHdpbmRvd3MucHVzaCh3aW5kb3dfMSk7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQod2luZG93XzEpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93Q291bnQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci93aW5kb3dDb3VudC5qc1xuICoqIG1vZHVsZSBpZCA9IDI3NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHdpbmRvd1RpbWVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3dpbmRvd1RpbWUnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS53aW5kb3dUaW1lID0gd2luZG93VGltZV8xLndpbmRvd1RpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUaW1lLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3dpbmRvd1RpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoJy4uL1N1YmplY3QnKTtcbnZhciBhc3luY18xID0gcmVxdWlyZSgnLi4vc2NoZWR1bGVyL2FzeW5jJyk7XG4vKipcbiAqIEJyYW5jaCBvdXQgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcyBhcyBhIG5lc3RlZCBPYnNlcnZhYmxlIHBlcmlvZGljYWxseVxuICogaW4gdGltZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBidWZmZXJUaW1lfSwgYnV0IGVtaXRzIGEgbmVzdGVkXG4gKiBPYnNlcnZhYmxlIGluc3RlYWQgb2YgYW4gYXJyYXkuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvd2luZG93VGltZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aW5kb3dzIG9mIGl0ZW1zIGl0IGNvbGxlY3RzIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIHN0YXJ0cyBhIG5ldyB3aW5kb3cgcGVyaW9kaWNhbGx5LCBhc1xuICogZGV0ZXJtaW5lZCBieSB0aGUgYHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWxgIGFyZ3VtZW50LiBJdCBlbWl0cyBlYWNoIHdpbmRvd1xuICogYWZ0ZXIgYSBmaXhlZCB0aW1lc3Bhbiwgc3BlY2lmaWVkIGJ5IHRoZSBgd2luZG93VGltZVNwYW5gIGFyZ3VtZW50LiBXaGVuIHRoZVxuICogc291cmNlIE9ic2VydmFibGUgY29tcGxldGVzIG9yIGVuY291bnRlcnMgYW4gZXJyb3IsIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZVxuICogZW1pdHMgdGhlIGN1cnJlbnQgd2luZG93IGFuZCBwcm9wYWdhdGVzIHRoZSBub3RpZmljYXRpb24gZnJvbSB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBJZiBgd2luZG93Q3JlYXRpb25JbnRlcnZhbGAgaXMgbm90IHByb3ZpZGVkLCB0aGUgb3V0cHV0XG4gKiBPYnNlcnZhYmxlIHN0YXJ0cyBhIG5ldyB3aW5kb3cgd2hlbiB0aGUgcHJldmlvdXMgd2luZG93IG9mIGR1cmF0aW9uXG4gKiBgd2luZG93VGltZVNwYW5gIGNvbXBsZXRlcy5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5JbiBldmVyeSB3aW5kb3cgb2YgMSBzZWNvbmQgZWFjaCwgZW1pdCBhdCBtb3N0IDIgY2xpY2sgZXZlbnRzPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3Mud2luZG93VGltZSgxMDAwKVxuICogICAubWFwKHdpbiA9PiB3aW4udGFrZSgyKSkgLy8gZWFjaCB3aW5kb3cgaGFzIGF0IG1vc3QgMiBlbWlzc2lvbnNcbiAqICAgLm1lcmdlQWxsKCk7IC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RXZlcnkgNSBzZWNvbmRzIHN0YXJ0IGEgd2luZG93IDEgc2Vjb25kIGxvbmcsIGFuZCBlbWl0IGF0IG1vc3QgMiBjbGljayBldmVudHMgcGVyIHdpbmRvdzwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcmVzdWx0ID0gY2xpY2tzLndpbmRvd1RpbWUoMTAwMCwgNTAwMClcbiAqICAgLm1hcCh3aW4gPT4gd2luLnRha2UoMikpIC8vIGVhY2ggd2luZG93IGhhcyBhdCBtb3N0IDIgZW1pc3Npb25zXG4gKiAgIC5tZXJnZUFsbCgpOyAvLyBmbGF0dGVuIHRoZSBPYnNlcnZhYmxlLW9mLU9ic2VydmFibGVzXG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIHdpbmRvd31cbiAqIEBzZWUge0BsaW5rIHdpbmRvd0NvdW50fVxuICogQHNlZSB7QGxpbmsgd2luZG93VG9nZ2xlfVxuICogQHNlZSB7QGxpbmsgd2luZG93V2hlbn1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRpbWV9XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHdpbmRvd1RpbWVTcGFuIFRoZSBhbW91bnQgb2YgdGltZSB0byBmaWxsIGVhY2ggd2luZG93LlxuICogQHBhcmFtIHtudW1iZXJ9IFt3aW5kb3dDcmVhdGlvbkludGVydmFsXSBUaGUgaW50ZXJ2YWwgYXQgd2hpY2ggdG8gc3RhcnQgbmV3XG4gKiB3aW5kb3dzLlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9YXN5bmNdIFRoZSBzY2hlZHVsZXIgb24gd2hpY2ggdG8gc2NoZWR1bGUgdGhlXG4gKiBpbnRlcnZhbHMgdGhhdCBkZXRlcm1pbmUgd2luZG93IGJvdW5kYXJpZXMuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPE9ic2VydmFibGU8VD4+fSBBbiBvYnNlcnZhYmxlIG9mIHdpbmRvd3MsIHdoaWNoIGluIHR1cm5cbiAqIGFyZSBPYnNlcnZhYmxlcy5cbiAqIEBtZXRob2Qgd2luZG93VGltZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gd2luZG93VGltZSh3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPT09IHZvaWQgMCkgeyB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gbnVsbDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMud2luZG93VGltZSA9IHdpbmRvd1RpbWU7XG52YXIgV2luZG93VGltZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dUaW1lT3BlcmF0b3Iod2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLndpbmRvd1RpbWVTcGFuID0gd2luZG93VGltZVNwYW47XG4gICAgICAgIHRoaXMud2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBXaW5kb3dUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2luZG93VGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy53aW5kb3dUaW1lU3BhbiwgdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RpbWVPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFdpbmRvd1RpbWVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93VGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93VGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMud2luZG93VGltZVNwYW4gPSB3aW5kb3dUaW1lU3BhbjtcbiAgICAgICAgdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsID0gd2luZG93Q3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMud2luZG93cyA9IFtdO1xuICAgICAgICBpZiAod2luZG93Q3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiB3aW5kb3dDcmVhdGlvbkludGVydmFsID49IDApIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IHRoaXMub3BlbldpbmRvdygpO1xuICAgICAgICAgICAgdmFyIGNsb3NlU3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIHdpbmRvdzogd2luZG93XzEsIGNvbnRleHQ6IG51bGwgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyB3aW5kb3dUaW1lU3Bhbjogd2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw6IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IHRoaXMsIHNjaGVkdWxlcjogc2NoZWR1bGVyIH07XG4gICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dDbG9zZSwgd2luZG93VGltZVNwYW4sIGNsb3NlU3RhdGUpKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0NyZWF0aW9uLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzIgPSB0aGlzLm9wZW5XaW5kb3coKTtcbiAgICAgICAgICAgIHZhciB0aW1lU3Bhbk9ubHlTdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgd2luZG93OiB3aW5kb3dfMiwgd2luZG93VGltZVNwYW46IHdpbmRvd1RpbWVTcGFuIH07XG4gICAgICAgICAgICB0aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hXaW5kb3dUaW1lU3Bhbk9ubHksIHdpbmRvd1RpbWVTcGFuLCB0aW1lU3Bhbk9ubHlTdGF0ZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgdmFyIGxlbiA9IHdpbmRvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzMgPSB3aW5kb3dzW2ldO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3dfMy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd18zLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3dfNCA9IHdpbmRvd3Muc2hpZnQoKTtcbiAgICAgICAgICAgIGlmICghd2luZG93XzQuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dfNC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIHRoaXMud2luZG93cy5wdXNoKHdpbmRvdyk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZCh3aW5kb3cpO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHdpbmRvdyk7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfTtcbiAgICBXaW5kb3dUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAod2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgd2luZG93cy5zcGxpY2Uod2luZG93cy5pbmRleE9mKHdpbmRvdyksIDEpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hXaW5kb3dUaW1lU3Bhbk9ubHkoc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHdpbmRvd1RpbWVTcGFuID0gc3RhdGUud2luZG93VGltZVNwYW4sIHdpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgICBpZiAod2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgIH1cbiAgICBzdGF0ZS53aW5kb3cgPSBzdWJzY3JpYmVyLm9wZW5XaW5kb3coKTtcbiAgICB0aGlzLnNjaGVkdWxlKHN0YXRlLCB3aW5kb3dUaW1lU3Bhbik7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFdpbmRvd0NyZWF0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHdpbmRvd1RpbWVTcGFuID0gc3RhdGUud2luZG93VGltZVNwYW4sIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBzY2hlZHVsZXIgPSBzdGF0ZS5zY2hlZHVsZXIsIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSBzdGF0ZS53aW5kb3dDcmVhdGlvbkludGVydmFsO1xuICAgIHZhciB3aW5kb3cgPSBzdWJzY3JpYmVyLm9wZW5XaW5kb3coKTtcbiAgICB2YXIgYWN0aW9uID0gdGhpcztcbiAgICB2YXIgY29udGV4dCA9IHsgYWN0aW9uOiBhY3Rpb24sIHN1YnNjcmlwdGlvbjogbnVsbCB9O1xuICAgIHZhciB0aW1lU3BhblN0YXRlID0geyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCB3aW5kb3c6IHdpbmRvdywgY29udGV4dDogY29udGV4dCB9O1xuICAgIGNvbnRleHQuc3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoV2luZG93Q2xvc2UsIHdpbmRvd1RpbWVTcGFuLCB0aW1lU3BhblN0YXRlKTtcbiAgICBhY3Rpb24uYWRkKGNvbnRleHQuc3Vic2NyaXB0aW9uKTtcbiAgICBhY3Rpb24uc2NoZWR1bGUoc3RhdGUsIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hXaW5kb3dDbG9zZShhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCB3aW5kb3cgPSBhcmcud2luZG93LCBjb250ZXh0ID0gYXJnLmNvbnRleHQ7XG4gICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5hY3Rpb24gJiYgY29udGV4dC5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgY29udGV4dC5hY3Rpb24ucmVtb3ZlKGNvbnRleHQuc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5jbG9zZVdpbmRvdyh3aW5kb3cpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93VGltZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3dpbmRvd1RpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB3aW5kb3dUb2dnbGVfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3dpbmRvd1RvZ2dsZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLndpbmRvd1RvZ2dsZSA9IHdpbmRvd1RvZ2dsZV8xLndpbmRvd1RvZ2dsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci93aW5kb3dUb2dnbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyNzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZSgnLi4vU3ViamVjdCcpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaXB0aW9uJyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogQnJhbmNoIG91dCB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIGFzIGEgbmVzdGVkIE9ic2VydmFibGUgc3RhcnRpbmcgZnJvbVxuICogYW4gZW1pc3Npb24gZnJvbSBgb3BlbmluZ3NgIGFuZCBlbmRpbmcgd2hlbiB0aGUgb3V0cHV0IG9mIGBjbG9zaW5nU2VsZWN0b3JgXG4gKiBlbWl0cy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+SXQncyBsaWtlIHtAbGluayBidWZmZXJUb2dnbGV9LCBidXQgZW1pdHMgYSBuZXN0ZWRcbiAqIE9ic2VydmFibGUgaW5zdGVhZCBvZiBhbiBhcnJheS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy93aW5kb3dUb2dnbGUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0cyB3aW5kb3dzIHRoYXQgY29udGFpbiB0aG9zZSBpdGVtc1xuICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYmV0d2VlbiB0aGUgdGltZSB3aGVuIHRoZSBgb3BlbmluZ3NgXG4gKiBPYnNlcnZhYmxlIGVtaXRzIGFuIGl0ZW0gYW5kIHdoZW4gdGhlIE9ic2VydmFibGUgcmV0dXJuZWQgYnlcbiAqIGBjbG9zaW5nU2VsZWN0b3JgIGVtaXRzIGFuIGl0ZW0uXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RXZlcnkgb3RoZXIgc2Vjb25kLCBlbWl0IHRoZSBjbGljayBldmVudHMgZnJvbSB0aGUgbmV4dCA1MDBtczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgb3BlbmluZ3MgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy53aW5kb3dUb2dnbGUob3BlbmluZ3MsIGkgPT5cbiAqICAgaSAlIDIgPyBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkgOiBSeC5PYnNlcnZhYmxlLmVtcHR5KClcbiAqICkubWVyZ2VBbGwoKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgd2luZG93fVxuICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG4gKiBAc2VlIHtAbGluayB3aW5kb3dUaW1lfVxuICogQHNlZSB7QGxpbmsgd2luZG93V2hlbn1cbiAqIEBzZWUge0BsaW5rIGJ1ZmZlclRvZ2dsZX1cbiAqXG4gKiBAcGFyYW0ge09ic2VydmFibGU8Tz59IG9wZW5pbmdzIEFuIG9ic2VydmFibGUgb2Ygbm90aWZpY2F0aW9ucyB0byBzdGFydCBuZXdcbiAqIHdpbmRvd3MuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBPKTogT2JzZXJ2YWJsZX0gY2xvc2luZ1NlbGVjdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlc1xuICogdGhlIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIGBvcGVuaW5nc2Agb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlLFxuICogd2hpY2gsIHdoZW4gaXQgZW1pdHMgKGVpdGhlciBgbmV4dGAgb3IgYGNvbXBsZXRlYCksIHNpZ25hbHMgdGhhdCB0aGVcbiAqIGFzc29jaWF0ZWQgd2luZG93IHNob3VsZCBjb21wbGV0ZS5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8T2JzZXJ2YWJsZTxUPj59IEFuIG9ic2VydmFibGUgb2Ygd2luZG93cywgd2hpY2ggaW4gdHVyblxuICogYXJlIE9ic2VydmFibGVzLlxuICogQG1ldGhvZCB3aW5kb3dUb2dnbGVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHdpbmRvd1RvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgV2luZG93VG9nZ2xlT3BlcmF0b3Iob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3RvcikpO1xufVxuZXhwb3J0cy53aW5kb3dUb2dnbGUgPSB3aW5kb3dUb2dnbGU7XG52YXIgV2luZG93VG9nZ2xlT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd1RvZ2dsZU9wZXJhdG9yKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgV2luZG93VG9nZ2xlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2luZG93VG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RvZ2dsZU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgV2luZG93VG9nZ2xlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93VG9nZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5vcGVuU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvcGVuaW5ncywgb3BlbmluZ3MpKTtcbiAgICB9XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHRzW2ldLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnRleHQud2luZG93LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29udGV4dC53aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29udGV4dC53aW5kb3cudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIGlmIChvdXRlclZhbHVlID09PSB0aGlzLm9wZW5pbmdzKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChjbG9zaW5nU2VsZWN0b3IpKGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNsb3NpbmdOb3RpZmllciA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0geyB3aW5kb3c6IHdpbmRvd18xLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiB9O1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllciwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHdpbmRvd18xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3codGhpcy5jb250ZXh0cy5pbmRleE9mKG91dGVyVmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyKSB7XG4gICAgICAgIGlmIChpbm5lciAhPT0gdGhpcy5vcGVuU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlV2luZG93KHRoaXMuY29udGV4dHMuaW5kZXhPZihpbm5lci5jb250ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlV2luZG93ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgY29udGV4dCA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgdmFyIHdpbmRvdyA9IGNvbnRleHQud2luZG93LCBzdWJzY3JpcHRpb24gPSBjb250ZXh0LnN1YnNjcmlwdGlvbjtcbiAgICAgICAgY29udGV4dHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93VG9nZ2xlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3Ivd2luZG93VG9nZ2xlLmpzXG4gKiogbW9kdWxlIGlkID0gMjc4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgd2luZG93V2hlbl8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivd2luZG93V2hlbicpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLndpbmRvd1doZW4gPSB3aW5kb3dXaGVuXzEud2luZG93V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1doZW4uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3Ivd2luZG93V2hlbi5qc1xuICoqIG1vZHVsZSBpZCA9IDI3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9TdWJqZWN0Jyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9lcnJvck9iamVjdCcpO1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbi8qKlxuICogQnJhbmNoIG91dCB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIGFzIGEgbmVzdGVkIE9ic2VydmFibGUgdXNpbmcgYVxuICogZmFjdG9yeSBmdW5jdGlvbiBvZiBjbG9zaW5nIE9ic2VydmFibGVzIHRvIGRldGVybWluZSB3aGVuIHRvIHN0YXJ0IGEgbmV3XG4gKiB3aW5kb3cuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgYnVmZmVyV2hlbn0sIGJ1dCBlbWl0cyBhIG5lc3RlZFxuICogT2JzZXJ2YWJsZSBpbnN0ZWFkIG9mIGFuIGFycmF5Ljwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3dpbmRvd1doZW4ucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0cyBjb25uZWN0ZWQsIG5vbi1vdmVybGFwcGluZyB3aW5kb3dzLlxuICogSXQgZW1pdHMgdGhlIGN1cnJlbnQgd2luZG93IGFuZCBvcGVucyBhIG5ldyBvbmUgd2hlbmV2ZXIgdGhlIE9ic2VydmFibGVcbiAqIHByb2R1Y2VkIGJ5IHRoZSBzcGVjaWZpZWQgYGNsb3NpbmdTZWxlY3RvcmAgZnVuY3Rpb24gZW1pdHMgYW4gaXRlbS4gVGhlIGZpcnN0XG4gKiB3aW5kb3cgaXMgb3BlbmVkIGltbWVkaWF0ZWx5IHdoZW4gc3Vic2NyaWJpbmcgdG8gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgb25seSB0aGUgZmlyc3QgdHdvIGNsaWNrcyBldmVudHMgaW4gZXZlcnkgd2luZG93IG9mIFsxLTVdIHJhbmRvbSBzZWNvbmRzPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3NcbiAqICAgLndpbmRvd1doZW4oKCkgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwICsgTWF0aC5yYW5kb20oKSAqIDQwMDApKVxuICogICAubWFwKHdpbiA9PiB3aW4udGFrZSgyKSkgLy8gZWFjaCB3aW5kb3cgaGFzIGF0IG1vc3QgMiBlbWlzc2lvbnNcbiAqICAgLm1lcmdlQWxsKCk7IC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgd2luZG93fVxuICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG4gKiBAc2VlIHtAbGluayB3aW5kb3dUaW1lfVxuICogQHNlZSB7QGxpbmsgd2luZG93VG9nZ2xlfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyV2hlbn1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IE9ic2VydmFibGV9IGNsb3NpbmdTZWxlY3RvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm9cbiAqIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgc2lnbmFscyAob24gZWl0aGVyIGBuZXh0YCBvclxuICogYGNvbXBsZXRlYCkgd2hlbiB0byBjbG9zZSB0aGUgcHJldmlvdXMgd2luZG93IGFuZCBzdGFydCBhIG5ldyBvbmUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPE9ic2VydmFibGU8VD4+fSBBbiBvYnNlcnZhYmxlIG9mIHdpbmRvd3MsIHdoaWNoIGluIHR1cm5cbiAqIGFyZSBPYnNlcnZhYmxlcy5cbiAqIEBtZXRob2Qgd2luZG93V2hlblxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gd2luZG93V2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBXaW5kb3dPcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpKTtcbn1cbmV4cG9ydHMud2luZG93V2hlbiA9IHdpbmRvd1doZW47XG52YXIgV2luZG93T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd09wZXJhdG9yKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgV2luZG93T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2luZG93U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgV2luZG93U3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFdpbmRvd1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5vcGVuV2luZG93KCk7XG4gICAgfVxuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuV2luZG93KGlubmVyU3ViKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5XaW5kb3coaW5uZXJTdWIpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy53aW5kb3cubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMud2luZG93LmVycm9yKGVycik7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24oKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlQ2xvc2luZ05vdGlmaWNhdGlvbigpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zaW5nTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NpbmdOb3RpZmljYXRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUub3BlbldpbmRvdyA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICBpZiAoaW5uZXJTdWIgPT09IHZvaWQgMCkgeyBpbm5lclN1YiA9IG51bGw7IH1cbiAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2V2luZG93ID0gdGhpcy53aW5kb3c7XG4gICAgICAgIGlmIChwcmV2V2luZG93KSB7XG4gICAgICAgICAgICBwcmV2V2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpbmRvdyA9IHRoaXMud2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh3aW5kb3cpO1xuICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaCh0aGlzLmNsb3NpbmdTZWxlY3RvcikoKTtcbiAgICAgICAgaWYgKGNsb3NpbmdOb3RpZmllciA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGVyciA9IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLmNsb3NpbmdOb3RpZmljYXRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdF8xLnN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuICAgICAgICAgICAgdGhpcy5hZGQod2luZG93KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1N1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93V2hlbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL3dpbmRvd1doZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAyODBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB3aXRoTGF0ZXN0RnJvbV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3Ivd2l0aExhdGVzdEZyb20nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS53aXRoTGF0ZXN0RnJvbSA9IHdpdGhMYXRlc3RGcm9tXzEud2l0aExhdGVzdEZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci93aXRoTGF0ZXN0RnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDI4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xudmFyIHN1YnNjcmliZVRvUmVzdWx0XzEgPSByZXF1aXJlKCcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0Jyk7XG4vKipcbiAqIENvbWJpbmVzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB3aXRoIG90aGVyIE9ic2VydmFibGVzIHRvIGNyZWF0ZSBhbiBPYnNlcnZhYmxlXG4gKiB3aG9zZSB2YWx1ZXMgYXJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgbGF0ZXN0IHZhbHVlcyBvZiBlYWNoLCBvbmx5IHdoZW4gdGhlXG4gKiBzb3VyY2UgZW1pdHMuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPldoZW5ldmVyIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLCBpdFxuICogY29tcHV0ZXMgYSBmb3JtdWxhIHVzaW5nIHRoYXQgdmFsdWUgcGx1cyB0aGUgbGF0ZXN0IHZhbHVlcyBmcm9tIG90aGVyIGlucHV0XG4gKiBPYnNlcnZhYmxlcywgdGhlbiBlbWl0cyB0aGUgb3V0cHV0IG9mIHRoYXQgZm9ybXVsYS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy93aXRoTGF0ZXN0RnJvbS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgd2l0aExhdGVzdEZyb21gIGNvbWJpbmVzIGVhY2ggdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUgKHRoZVxuICogaW5zdGFuY2UpIHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSB0aGUgb3RoZXIgaW5wdXQgT2JzZXJ2YWJsZXMgb25seSB3aGVuXG4gKiB0aGUgc291cmNlIGVtaXRzIGEgdmFsdWUsIG9wdGlvbmFsbHkgdXNpbmcgYSBgcHJvamVjdGAgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lXG4gKiB0aGUgdmFsdWUgdG8gYmUgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuIEFsbCBpbnB1dCBPYnNlcnZhYmxlcyBtdXN0XG4gKiBlbWl0IGF0IGxlYXN0IG9uZSB2YWx1ZSBiZWZvcmUgdGhlIG91dHB1dCBPYnNlcnZhYmxlIHdpbGwgZW1pdCBhIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk9uIGV2ZXJ5IGNsaWNrIGV2ZW50LCBlbWl0IGFuIGFycmF5IHdpdGggdGhlIGxhdGVzdCB0aW1lciBldmVudCBwbHVzIHRoZSBjbGljayBldmVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgdGltZXIgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy53aXRoTGF0ZXN0RnJvbSh0aW1lcik7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbWJpbmVMYXRlc3R9XG4gKlxuICogQHBhcmFtIHtPYnNlcnZhYmxlfSBvdGhlciBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIGNvbWJpbmUgd2l0aCB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBNb3JlIHRoYW4gb25lIGlucHV0IE9ic2VydmFibGVzIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9qZWN0XSBQcm9qZWN0aW9uIGZ1bmN0aW9uIGZvciBjb21iaW5pbmcgdmFsdWVzXG4gKiB0b2dldGhlci4gUmVjZWl2ZXMgYWxsIHZhbHVlcyBpbiBvcmRlciBvZiB0aGUgT2JzZXJ2YWJsZXMgcGFzc2VkLCB3aGVyZSB0aGVcbiAqIGZpcnN0IHBhcmFtZXRlciBpcyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiAoZS5nLlxuICogYGEud2l0aExhdGVzdEZyb20oYiwgYywgKGExLCBiMSwgYzEpID0+IGExICsgYjEgKyBjMSlgKS4gSWYgdGhpcyBpcyBub3RcbiAqIHBhc3NlZCwgYXJyYXlzIHdpbGwgYmUgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIHByb2plY3RlZCB2YWx1ZXMgZnJvbSB0aGUgbW9zdCByZWNlbnRcbiAqIHZhbHVlcyBmcm9tIGVhY2ggaW5wdXQgT2JzZXJ2YWJsZSwgb3IgYW4gYXJyYXkgb2YgdGhlIG1vc3QgcmVjZW50IHZhbHVlcyBmcm9tXG4gKiBlYWNoIGlucHV0IE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIHdpdGhMYXRlc3RGcm9tXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBwcm9qZWN0O1xuICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb2plY3QgPSBhcmdzLnBvcCgpO1xuICAgIH1cbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBhcmdzO1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpKTtcbn1cbmV4cG9ydHMud2l0aExhdGVzdEZyb20gPSB3aXRoTGF0ZXN0RnJvbTtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG52YXIgV2l0aExhdGVzdEZyb21PcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21PcGVyYXRvcihvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXM7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub2JzZXJ2YWJsZXMsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlcztcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy50b1Jlc3BvbmQgPSBbXTtcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdGhpcy50b1Jlc3BvbmQucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9IHRoaXMudG9SZXNwb25kO1xuICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvdW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub29wXG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRvUmVzcG9uZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW3ZhbHVlXS5jb25jYXQodGhpcy52YWx1ZXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVByb2plY3QoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByb2plY3QgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcl8xLk91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aExhdGVzdEZyb20uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci93aXRoTGF0ZXN0RnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDI4MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHppcF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvemlwJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuemlwID0gemlwXzEuemlwUHJvdG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvemlwLmpzXG4gKiogbW9kdWxlIGlkID0gMjgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgemlwQWxsXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci96aXBBbGwnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS56aXBBbGwgPSB6aXBBbGxfMS56aXBBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXBBbGwuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9hZGQvb3BlcmF0b3IvemlwQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMjg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciB6aXBfMSA9IHJlcXVpcmUoJy4vemlwJyk7XG4vKipcbiAqIEBwYXJhbSBwcm9qZWN0XG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fFdlYlNvY2tldFN1YmplY3Q8VD58T2JzZXJ2YWJsZTxUPn1cbiAqIEBtZXRob2QgemlwQWxsXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB6aXBBbGwocHJvamVjdCkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IHppcF8xLlppcE9wZXJhdG9yKHByb2plY3QpKTtcbn1cbmV4cG9ydHMuemlwQWxsID0gemlwQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwQWxsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvb3BlcmF0b3IvemlwQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMjg1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcbnZhciBPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLk9wZXJhdG9yID0gT3BlcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL09wZXJhdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gMjg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZXMsIFJvdXRlVHJlZSwgUk9VVEVSX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBBcHBTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXBwLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVmZXJlbmNlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3JlZmVyZW5jZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0YWZmU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0YWZmLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBOQk5vdGlmeUNvbXBvbmVudCB9IGZyb20gJy4vbmItbm90aWZ5JztcbmltcG9ydCB7IE5hdkNvbXBvbmVudCB9IGZyb20gJy4vbmF2JztcbmltcG9ydCB7IFByb2plY3RzQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9qZWN0cyc7XG5pbXBvcnQgeyBQcm9qZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9wcm9qZWN0JztcbmltcG9ydCB7IFRhc2tzQ29tcG9uZW50IH0gZnJvbSAnLi90YXNrcyc7XG5pbXBvcnQgeyBUYXNrQ29tcG9uZW50IH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IFVzZXJQcm9maWxlQ29tcG9uZW50IH0gZnJvbSAnLi91c2VyLXByb2ZpbGUnO1xuaW1wb3J0IHsgTG9naW5Db21wb25lbnQgfSBmcm9tICcuL2xvZ2luJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvdXNlcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncHJvamVjdC1hcHAnLFxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvYXBwLmh0bWwnKSxcbiAgICBkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVMsIE5hdkNvbXBvbmVudCwgTkJOb3RpZnlDb21wb25lbnRdXG59KVxuXG5AUm91dGVzKFtcbiAgICB7IHBhdGg6ICcvdGFza3MvOmZvcicsIGNvbXBvbmVudDogVGFza3NDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6ICcvdGFza3MnLCBjb21wb25lbnQ6IFRhc2tzQ29tcG9uZW50IH0sXG4gICAgeyBwYXRoOiAnL3Rhc2svOmlkJywgY29tcG9uZW50OiBUYXNrQ29tcG9uZW50IH0sXG4gICAgeyBwYXRoOiAnL3Byb2plY3RzLzppZCcsIGNvbXBvbmVudDogUHJvamVjdENvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogJy9wcm9qZWN0cycsIGNvbXBvbmVudDogUHJvamVjdHNDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6ICcvdXNlci1wcm9maWxlJywgY29tcG9uZW50OiBVc2VyUHJvZmlsZUNvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogJy9sb2dpbicsIGNvbXBvbmVudDogTG9naW5Db21wb25lbnQgfVxuXSlcblxuZXhwb3J0IGNsYXNzIEFwcCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgbG9nZ2VkVXNlcjogVXNlcjtcbiAgICBIRUFERVJfVElUTEU6IHN0cmluZyA9IFwiUHJvamVjdHNcIjtcbiAgICBpc05hdkNvbGxhcHNlZDogQm9vbGVhbjtcbiAgICBpc1NlYXJjaE9wZW46IEJvb2xlYW47XG4gICAgaXNNb2JpbGVEZXZpY2U6IEJvb2xlYW47XG5cbiAgICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQudGFyZ2V0J10pIHJlc2l6ZSh3aW5kb3cpIHsgdGhpcy5vblJlc2l6ZSh3aW5kb3cpOyB9O1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MucGhvbmUnKSBnZXQgZGV2aWNlKCkgeyByZXR1cm4gdGhpcy5pc01vYmlsZURldmljZTsgfTtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNpZGUtbmF2LXRvZ2dsZScpIGdldCB0b2dnbGVOYXZWaXNpYmxlKCkgeyByZXR1cm4gdGhpcy5pc05hdkNvbGxhcHNlZDsgfTtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNlYXJjaC1vcGVuJykgZ2V0IHRvZ2dsZVNlYXJjaCgpIHsgcmV0dXJuIHRoaXMuaXNTZWFyY2hPcGVuOyB9O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgYXBwU2VydmljZTogQXBwU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWZlcmVuY2VTZXJ2aWNlOiBSZWZlcmVuY2VTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHN0YWZmU2VydmljZTogU3RhZmZTZXJ2aWNlXG4gICAgKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmlzU2VhcmNoT3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzTmF2Q29sbGFwc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nZ2VkVXNlciA9IG5ldyBVc2VyKCk7XG4gICAgICAgIHRoaXMuaXNNb2JpbGVEZXZpY2UgPSB0aGlzLmlzTW9iaWxlKCk7XG5cbiAgICAgICAgdGhpcy5hcHBTZXJ2aWNlLmdldFRyYW5zbGF0aW9ucygpLnN1YnNjcmliZShcbiAgICAgICAgICAgIGNhcHRpb25zID0+IGNvbnNvbGUubG9nKGNhcHRpb25zKSxcbiAgICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0b2dnbGVOYXYoKSB7XG4gICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSAhdGhpcy5pc05hdkNvbGxhcHNlZDtcbiAgICB9XG5cbiAgICBoaWRlTmF2KGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1NlYXJjaE9wZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZWFyY2hUb2dnbGUoKSB7XG4gICAgICAgIHRoaXMuaXNTZWFyY2hPcGVuID0gIXRoaXMuaXNTZWFyY2hPcGVuO1xuICAgIH1cblxuICAgIGxvZ291dChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyB0aGlzLmxvZ2dlZFVzZXIgPSBudWxsO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdMb2dvdXQnO1xuICAgIH1cblxuICAgIGdvQmFjaygpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH1cblxuICAgIHByZXZlbnREZWZhdWx0KGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaXNNb2JpbGUoKSB7XG4gICAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgb25SZXNpemUod2luZG93KSB7XG4gICAgICAgIHRoaXMuaXNNb2JpbGVEZXZpY2UgPSB3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0IHx8IHRoaXMuaXNNb2JpbGUoKTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL2FwcC50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwXG4gICAgKSB7IH1cblxuICAgIGdldFRyYW5zbGF0aW9ucygpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IHsgaGVhZGVyczogbmV3IEhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG4gICAgICAgIGxldCB1cmwgPSAncD9pZD1jb21tb24tY2FwdGlvbnMnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKVxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkuY2FwdGlvbnMpO1xuICAgIH1cblxuICAgIGdldE5hdigpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IHsgaGVhZGVyczogbmV3IEhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG4gICAgICAgIGxldCB1cmwgPSAncD9pZD1vdXRsaW5lJztcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcik7XG4gICAgfVxuXG4gICAgZ2V0VXNlcnMoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSB7IGhlYWRlcnM6IG5ldyBIZWFkZXJzKHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSB9O1xuICAgICAgICBsZXQgdXJsID0gJ3A/aWQ9dXNlcnMnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKVxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkub2JqZWN0c1swXS5saXN0KVxuICAgICAgICAgICAgLm1hcCgocmVzcG9uc2U6IFVzZXJbXSkgPT4gcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZVVzZXJQcm9maWxlKHVzZXI6IFVzZXIpIHtcbiAgICAgICAgLy9cbiAgICB9XG5cbiAgICBsb2dvdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKCcvJyk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvYXBwLnNlcnZpY2UudHNcbiAqKi8iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcblxuaW1wb3J0IHsgVGFnIH0gZnJvbSAnLi4vbW9kZWxzL3RhZyc7XG5pbXBvcnQgeyBUYXNrVHlwZSB9IGZyb20gJy4uL21vZGVscy90YXNrLXR5cGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVmZXJlbmNlU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwXG4gICAgKSB7IH1cblxuICAgIGdldFRhZ3MoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSB7IGhlYWRlcnM6IG5ldyBIZWFkZXJzKHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSB9O1xuICAgICAgICBsZXQgdXJsID0gJy9SZWZlcmVuY2UvcD9pZD10YWdzJztcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcilcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdClcbiAgICAgICAgICAgIC5tYXAoKHJlc3BvbnNlOiBUYWdbXSkgPT4gcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGdldFRhc2tUeXBlcygpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IHsgaGVhZGVyczogbmV3IEhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG4gICAgICAgIGxldCB1cmwgPSAnL1JlZmVyZW5jZS9wP2lkPXRhc2t0eXBlcyc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBoZWFkZXIpXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdLmxpc3QpXG4gICAgICAgICAgICAubWFwKChyZXNwb25zZTogVGFza1R5cGVbXSkgPT4gcmVzcG9uc2UpO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NlcnZpY2VzL3JlZmVyZW5jZS5zZXJ2aWNlLnRzXG4gKiovIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwLCBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5cbmltcG9ydCB7IE9yZ2FuaXphdGlvbiB9IGZyb20gJy4uL21vZGVscy9vcmdhbml6YXRpb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RhZmZTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBcbiAgICApIHsgfVxuXG4gICAgZ2V0T3JnYW5pemF0aW9ucygpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IHsgaGVhZGVyczogbmV3IEhlYWRlcnMoeyAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pIH07XG4gICAgICAgIGxldCB1cmwgPSAnL1N0YWZmL3A/aWQ9Z2V0LW9yZ2FuaXphdGlvbnMnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgaGVhZGVyKVxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkub2JqZWN0c1swXS5saXN0KVxuICAgICAgICAgICAgLm1hcCgocmVzcG9uc2U6IE9yZ2FuaXphdGlvbltdKSA9PiByZXNwb25zZSk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvc3RhZmYuc2VydmljZS50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY2xhc3MgX05vdHkge1xuICAgIHR5cGUgPSAnJztcbiAgICBtZXNzYWdlID0gJyc7XG4gICAgdmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIHZpc2libGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcbiAgICB9XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmItbm90aWZ5JyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwibmItbm90aWZ5XCIgKm5nSWY9XCJub3RpZnlMaXN0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmItbm90aWZ5LWVudHJ5LXt7bm90aWZ5LnR5cGV9fVwiIHN0eWxlPVwiZGlzcGxheTpibG9jaztcIiAqbmdGb3I9XCJsZXQgbm90aWZ5IG9mIG5vdGlmeUxpc3RcIj57e25vdGlmeS5tZXNzYWdlfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBOQk5vdGlmeUNvbXBvbmVudCB7XG4gICAgbm90aWZ5TGlzdDogX05vdHlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIHRoaXMubm90aWZ5TGlzdC5wdXNoKG5ldyBfTm90eSgnaW5mbycsICdoZWxsbycsIHRydWUpKTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL25iLW5vdGlmeS50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBST1VURVJfRElSRUNUSVZFUyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IEFwcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcHAuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnW25hdl0nLFxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvbmF2Lmh0bWwnKSxcbiAgICBkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdXG59KVxuXG5leHBvcnQgY2xhc3MgTmF2Q29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgcHJpdmF0ZSBhcHBTZXJ2aWNlOiBBcHBTZXJ2aWNlXG4gICAgKSB7IH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvbmF2LnRzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjx1bD5cXG4gICAgPGxpPlxcbiAgICAgICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy90YXNrcycsICdpbmJveCddXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1pbmJveFxcXCI+PC9pPlxcbiAgICAgICAgICAgIDxzcGFuPnt7J2luYm94J319PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Rhc2tzJywgJ3RvZGF5J11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNhbGVuZGFyLW9cXFwiPjwvaT5cXG4gICAgICAgICAgICA8c3Bhbj57eyd0b2RheSd9fTwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy90YXNrcycsICd3ZWVrJ11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNhbGVuZGFyXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4+e3snd2Vlayd9fTwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy90YXNrcycsICdhbGwnXVxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtZGF0YWJhc2VcXFwiPjwvaT5cXG4gICAgICAgICAgICA8c3Bhbj57eydhbGwnfX08L3NwYW4+XFxuICAgICAgICA8L2E+XFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFza3MnLCAnY29tcGxldGVkJ11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNoZWNrLXNxdWFyZS1vXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4+e3snY29tcGxldGVkJ319PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Rhc2tzJywgJ215J11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpY2tldFxcXCI+PC9pPlxcbiAgICAgICAgICAgIDxzcGFuPnt7J215X3Rhc2tzJ319PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2xpPlxcbiAgICA8bGkgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvcHJvamVjdHMnXVxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtcHV6emxlLXBpZWNlXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4+e3sncHJvamVjdHMnfX08L3NwYW4+XFxuICAgICAgICA8L2E+XFxuICAgIDwvbGk+XFxuPC91bD5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvdGVtcGxhdGVzL25hdi5odG1sXG4gKiogbW9kdWxlIGlkID0gMjkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSAnLi4vbW9kZWxzL3Byb2plY3QnO1xuaW1wb3J0IHsgUHJvamVjdFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wcm9qZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZUZvcm1hdFBpcGUgfSBmcm9tICcuLi9waXBlcy9kYXRlLWZvcm1hdC5waXBlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbcHJvamVjdHNdJyxcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL3Byb2plY3RzLmh0bWwnKSxcbiAgICBwaXBlczogW0RhdGVQaXBlXVxufSlcblxuZXhwb3J0IGNsYXNzIFByb2plY3RzQ29tcG9uZW50IHtcbiAgICBwcm9qZWN0czogUHJvamVjdFtdO1xuICAgIHNlbGVjdGVkUHJvamVjdHM6IFByb2plY3RbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIHByb2plY3RTZXJ2aWNlOiBQcm9qZWN0U2VydmljZVxuICAgICkge1xuICAgICAgICBwcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0cygpLnN1YnNjcmliZShcbiAgICAgICAgICAgIHByb2plY3RzID0+IHRoaXMucHJvamVjdHMgPSBwcm9qZWN0cyxcbiAgICAgICAgICAgIGVycm9yUmVzcG9uc2UgPT4gdGhpcy5oYW5kbGVYaHJFcnJvcihlcnJvclJlc3BvbnNlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbXBvc2VSZWNvcmQoKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3Byb2plY3RzJywgJ25ldyddKTtcbiAgICB9XG5cbiAgICBkZWxldGVQcm9qZWN0KCkge1xuICAgICAgICB0aGlzLnByb2plY3RTZXJ2aWNlLmRlbGV0ZVByb2plY3QodGhpcy5zZWxlY3RlZFByb2plY3RzKS5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBoYW5kbGVYaHJFcnJvcihlcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChlcnJvclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvcHJvamVjdHMudHNcbiAqKi8iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcblxuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gJy4uL21vZGVscy9wcm9qZWN0JztcbmltcG9ydCB7IHNlcmlhbGl6ZU9iaiB9IGZyb20gJy4uL3V0aWxzL29iai11dGlscyc7XG5cbmNvbnN0IFZJRVdfVVJMID0gJ3A/aWQ9cHJvamVjdC12aWV3JztcbmNvbnN0IEZPUk1fVVJMID0gJ3A/aWQ9cHJvamVjdC1mb3JtJztcbmNvbnN0IEhFQURFUiA9IHtcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04JyxcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH0pXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvamVjdFNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFxuICAgICkgeyB9XG5cbiAgICBnZXRQcm9qZWN0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoVklFV19VUkwsIEhFQURFUilcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdClcbiAgICAgICAgICAgIC5tYXAoKHJlc3BvbnNlOiBQcm9qZWN0W10pID0+IHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBnZXRQcm9qZWN0QnlJZChwcm9qZWN0SWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChGT1JNX1VSTCArICcmZG9jaWQ9JyArIHByb2plY3RJZCwgSEVBREVSKVxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkub2JqZWN0c1sxXSlcbiAgICAgICAgICAgIC5tYXAoKHJlc3BvbnNlOiBQcm9qZWN0KSA9PiByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgc2F2ZVByb2plY3QocHJvamVjdDogUHJvamVjdCkge1xuICAgICAgICBsZXQgdXJsID0gRk9STV9VUkwgKyAocHJvamVjdC5pZCA/ICcmZG9jaWQ9JyArIHByb2plY3QuaWQgOiAnJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIHRoaXMuc2VyaWFsaXplUHJvamVjdChwcm9qZWN0KSwgSEVBREVSKTtcbiAgICB9XG5cbiAgICBkZWxldGVQcm9qZWN0KHByb2plY3RzOiBQcm9qZWN0W10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoVklFV19VUkwpO1xuICAgIH1cblxuICAgIC8vXG4gICAgc2VyaWFsaXplUHJvamVjdChwcm9qZWN0OiBQcm9qZWN0KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZU9iaih7XG4gICAgICAgICAgICBuYW1lOiBwcm9qZWN0Lm5hbWUsXG4gICAgICAgICAgICBzdGF0dXM6IHByb2plY3Quc3RhdHVzLFxuICAgICAgICAgICAgY3VzdG9tZXI6IHByb2plY3QuY3VzdG9tZXIgfHwgJycsXG4gICAgICAgICAgICBtYW5hZ2VyOiBwcm9qZWN0Lm1hbmFnZXIgfHwgMCxcbiAgICAgICAgICAgIHByb2dyYW1tZXI6IHByb2plY3QucHJvZ3JhbW1lciB8fCAwLFxuICAgICAgICAgICAgdGVzdGVyOiBwcm9qZWN0LnRlc3RlciB8fCAwLFxuICAgICAgICAgICAgb2JzZXJ2ZXJzOiBBcnJheS5pc0FycmF5KHByb2plY3Qub2JzZXJ2ZXJzKSA/IHByb2plY3Qub2JzZXJ2ZXJzLmpvaW4oJywnKSA6ICcnLFxuICAgICAgICAgICAgY29tbWVudDogcHJvamVjdC5jb21tZW50LFxuICAgICAgICAgICAgZmluaXNoX2RhdGU6IHByb2plY3QuZmluaXNoRGF0ZSA/IHByb2plY3QuZmluaXNoRGF0ZS50b1N0cmluZygpIDogJycsXG4gICAgICAgICAgICBhdHRhY2htZW50czogcHJvamVjdC5hdHRhY2htZW50cyA/IHByb2plY3QuYXR0YWNobWVudHMubWFwKGl0ID0+IGl0LmlkKS5qb2luKCcsJykgOiAnJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zZXJ2aWNlcy9wcm9qZWN0LnNlcnZpY2UudHNcbiAqKi8iLCJleHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplT2JqKG9iaikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIG9iaikge1xuICAgICAgICByZXN1bHQucHVzaChlbmNvZGVVUklDb21wb25lbnQocHJvcGVydHkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtwcm9wZXJ0eV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3V0aWxzL29iai11dGlscy50c1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgIHt7J3Byb2plY3RzJ319XFxuICAgIDwvaDE+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYWN0aW9uc1xcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY29tcG9zZVJlY29yZCgpXFxcIj5cXG4gICAgICAgICAgICB7eyduZXdfcHJvamVjdCd9fVxcbiAgICAgICAgPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYm9keVxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInZpZXcgdmlldy1wcm9qZWN0XFxcIj5cXG4gICAgICAgIDxoZWFkZXIgY2xhc3M9XFxcImVudHJpZXMtaGVhZFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZC13cmFwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJlbnRyeS1zZWxlY3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBkYXRhLXRvZ2dsZT1cXFwiZG9jaWRcXFwiIGNsYXNzPVxcXCJhbGxcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJ5LWNhcHRpb25zXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1wcm9qZWN0LW5hbWVcXFwiPnt7J25hbWUnfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9oZWFkZXI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyaWVzXFxcIj5cXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVxcXCIhcHJvamVjdHNcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydsb2FkaW5nJ319XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktd3JhcFxcXCIgKm5nRm9yPVxcXCJsZXQgcHJvamVjdCBvZiBwcm9qZWN0c1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1pZD1cXFwie3twcm9qZWN0LmlkfX1cXFwiIGNsYXNzPVxcXCJlbnRyeVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBuYW1lPVxcXCJkb2NpZFxcXCIgdmFsdWU9XFxcInt7cHJvamVjdC5pZH19XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJlbnRyeS1saW5rXFxcIiBbcm91dGVyTGlua109XFxcIlsnL3Byb2plY3RzJywgcHJvamVjdC5pZF1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJ5LWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1wcm9qZWN0LW5hbWVcXFwiPnt7cHJvamVjdC5uYW1lfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1wcm9qZWN0LWN1c3RvbWVyXFxcIj57e3Byb2plY3QuY3VzdG9tZXI/Lm5hbWV9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3QtY29tbWVudFxcXCI+e3twcm9qZWN0LmNvbW1lbnR9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7cHJvamVjdC5maW5pc2hEYXRlIHwgZGF0ZTonZGQuTU0ueSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL3RlbXBsYXRlcy9wcm9qZWN0cy5odG1sXG4gKiogbW9kdWxlIGlkID0gMjk3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIFJvdXRlU2VnbWVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycywgQ29udHJvbEdyb3VwLCBDb250cm9sLCBGT1JNX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBBcHBTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXBwLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvamVjdCwgUHJvamVjdFN0YXR1c1R5cGUgfSBmcm9tICcuLi9tb2RlbHMvcHJvamVjdCc7XG5pbXBvcnQgeyBQcm9qZWN0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Byb2plY3Quc2VydmljZSc7XG5pbXBvcnQgeyBTdGFmZlNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdGFmZi5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiB9IGZyb20gJy4uL21vZGVscy9vcmdhbml6YXRpb24nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL21vZGVscy91c2VyJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbcHJvamVjdF0nLFxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvcHJvamVjdC5odG1sJyksXG4gICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFU10sXG4gICAgcHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdXG59KVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdENvbXBvbmVudCB7XG4gICAgcHJvamVjdDogUHJvamVjdDtcbiAgICBmb3JtOiBDb250cm9sR3JvdXA7XG4gICAgdXNlcnM6IFVzZXJbXTtcbiAgICBjdXN0b21lcnM6IE9yZ2FuaXphdGlvbltdO1xuICAgIHN0YXR1c09wdGlvbnMgPSBQcm9qZWN0U3RhdHVzVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIHJvdXRlU2VnbWVudDogUm91dGVTZWdtZW50LFxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcbiAgICAgICAgcHJpdmF0ZSBhcHBTZXJ2aWNlOiBBcHBTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHByb2plY3RTZXJ2aWNlOiBQcm9qZWN0U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzdGFmZlNlcnZpY2U6IFN0YWZmU2VydmljZVxuICAgICkge1xuICAgICAgICB0aGlzLmZvcm0gPSBmb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICBuYW1lOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgc3RhdHVzOiBbJyddLFxuICAgICAgICAgICAgY3VzdG9tZXI6IFsnJ10sXG4gICAgICAgICAgICBtYW5hZ2VyOiBbJyddLFxuICAgICAgICAgICAgcHJvZ3JhbW1lcjogWycnXSxcbiAgICAgICAgICAgIHRlc3RlcjogWycnXSxcbiAgICAgICAgICAgIG9ic2VydmVyczogWycnXSxcbiAgICAgICAgICAgIGNvbW1lbnQ6IFsnJ10sXG4gICAgICAgICAgICBmaW5pc2hEYXRlOiBbJyddLFxuICAgICAgICAgICAgYXR0YWNobWVudHM6IFsnJ11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMucm91dGVTZWdtZW50LmdldFBhcmFtKCdpZCcpICE9PSAnbmV3Jykge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0QnlJZCh0aGlzLnJvdXRlU2VnbWVudC5nZXRQYXJhbSgnaWQnKSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIHByb2plY3QgPT4gdGhpcy5wcm9qZWN0ID0gcHJvamVjdCxcbiAgICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlID0+IHRoaXMuaGFuZGxlWGhyRXJyb3IoZXJyb3JSZXNwb25zZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3QgPSBuZXcgUHJvamVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhZmZTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbnMoKS5zdWJzY3JpYmUob3JncyA9PiB0aGlzLmN1c3RvbWVycyA9IG9yZ3MpO1xuICAgICAgICBhcHBTZXJ2aWNlLmdldFVzZXJzKCkuc3Vic2NyaWJlKHVzZXJzID0+IHRoaXMudXNlcnMgPSB1c2Vycyk7XG4gICAgfVxuXG4gICAgc2F2ZVByb2plY3QoKSB7XG4gICAgICAgIHRoaXMucHJvamVjdFNlcnZpY2Uuc2F2ZVByb2plY3QodGhpcy5wcm9qZWN0KS5zdWJzY3JpYmUocmVzcG9uc2UgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvcHJvamVjdHMnXSk7XG4gICAgfVxuXG4gICAgaGFuZGxlWGhyRXJyb3IoZXJyb3JSZXNwb25zZSkge1xuICAgICAgICBpZiAoZXJyb3JSZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvbG9naW4nXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Byb2plY3QudHNcbiAqKi8iLCJpbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi9hdHRhY2htZW50JztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiB9IGZyb20gJy4vb3JnYW5pemF0aW9uJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuXG5leHBvcnQgY29uc3QgUHJvamVjdFN0YXR1c1R5cGUgPSBbXG4gICAgJ0RSQUZUJyxcbiAgICAnUFJPQ0VTU0VEJyxcbiAgICAnRklOSVNIRUQnXG5dO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBhdXRob3I6IFVzZXI7XG4gICAgcmVnRGF0ZTogRGF0ZTtcbiAgICB1cmw6IHN0cmluZztcbiAgICB3YXNSZWFkOiBib29sZWFuO1xuXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN0YXR1czogc3RyaW5nO1xuICAgIGN1c3RvbWVyOiBzdHJpbmc7XG4gICAgbWFuYWdlcjogbnVtYmVyO1xuICAgIHByb2dyYW1tZXI6IG51bWJlcjtcbiAgICB0ZXN0ZXI6IG51bWJlcjtcbiAgICBvYnNlcnZlcnM6IG51bWJlcltdO1xuICAgIGNvbW1lbnQ6IHN0cmluZztcbiAgICBmaW5pc2hEYXRlOiBEYXRlO1xuICAgIGF0dGFjaG1lbnRzOiBBdHRhY2htZW50W107XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvcHJvamVjdC50c1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2ICpuZ0lmPVxcXCIhcHJvamVjdFxcXCI+XFxuICAgIHt7J2xvYWRpbmcnfX1cXG48L2Rpdj5cXG48Zm9ybSBjbGFzcz1cXFwiZm9ybVxcXCIgW25nRm9ybU1vZGVsXT1cXFwiZm9ybVxcXCIgKm5nSWY9XFxcInByb2plY3RcXFwiPlxcbiAgICA8aGVhZGVyIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYmFja1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICB7eydwcm9qZWN0J319XFxuICAgICAgICA8L2gxPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInNhdmVQcm9qZWN0KClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJ319XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydjbG9zZSd9fVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvaGVhZGVyPlxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J25hbWUnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMubmFtZS52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5uYW1lXFxcIiBuZ0NvbnRyb2w9XFxcIm5hbWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLm5hbWUudmFsaWQgfHwgZm9ybS5jb250cm9scy5uYW1lLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydjdXN0b21lcid9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy5jdXN0b21lci52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuY3VzdG9tZXJcXFwiIG5nQ29udHJvbD1cXFwiY3VzdG9tZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVxcXCJsZXQgYyBvZiBjdXN0b21lcnNcXFwiIFt2YWx1ZV09XFxcImMuaWRcXFwiPnt7Yy5uYW1lfX08L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5jdXN0b21lci52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLmN1c3RvbWVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydtYW5hZ2VyJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLm1hbmFnZXIudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjhcXFwiIFsobmdNb2RlbCldPVxcXCJwcm9qZWN0Lm1hbmFnZXJcXFwiIG5nQ29udHJvbD1cXFwibWFuYWdlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBtIG9mIHVzZXJzXFxcIiBbdmFsdWVdPVxcXCJtLmlkXFxcIj57e20ubG9naW59fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLm1hbmFnZXIudmFsaWQgfHwgZm9ybS5jb250cm9scy5tYW5hZ2VyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydwcm9ncmFtbWVyJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLnByb2dyYW1tZXIudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjhcXFwiIFsobmdNb2RlbCldPVxcXCJwcm9qZWN0LnByb2dyYW1tZXJcXFwiIG5nQ29udHJvbD1cXFwicHJvZ3JhbW1lclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBwIG9mIHVzZXJzXFxcIiBbdmFsdWVdPVxcXCJwLmlkXFxcIj57e3AubG9naW59fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnByb2dyYW1tZXIudmFsaWQgfHwgZm9ybS5jb250cm9scy5wcm9ncmFtbWVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eyd0ZXN0ZXInfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudGVzdGVyLnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC50ZXN0ZXJcXFwiIG5nQ29udHJvbD1cXFwidGVzdGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IHQgb2YgdXNlcnNcXFwiIFt2YWx1ZV09XFxcInQuaWRcXFwiPnt7dC5sb2dpbn19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMudGVzdGVyLnZhbGlkIHx8IGZvcm0uY29udHJvbHMudGVzdGVyLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydvYnNlcnZlcnMnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5vYnNlcnZlcnNcXFwiIG5nQ29udHJvbD1cXFwib2JzZXJ2ZXJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cXFwibGV0IG9icyBvZiB1c2Vyc1xcXCIgW3ZhbHVlXT1cXFwib2JzLmlkXFxcIj57e29icy5sb2dpbn19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3snc3RhdHVzJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3Quc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBzdCBvZiBzdGF0dXNPcHRpb25zXFxcIiBbdmFsdWVdPVxcXCJzdFxcXCI+e3tzdH19PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3snZmluaXNoRGF0ZSd9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImRhdGVcXFwiIGNsYXNzPVxcXCJzcGFuMlxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuZmluaXNoRGF0ZVxcXCIgbmdDb250cm9sPVxcXCJmaW5pc2hEYXRlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydjb21tZW50J319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmNvbW1lbnQudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInByb2plY3QuY29tbWVudFxcXCIgbmdDb250cm9sPVxcXCJjb21tZW50XFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5jb21tZW50LnZhbGlkIHx8IGZvcm0uY29udHJvbHMuY29tbWVudC5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJ319XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGxlZ2VuZCBjbGFzcz1cXFwibGVnZW5kXFxcIj5cXG4gICAgICAgICAgICAgICAge3snYXR0YWNobWVudHMnfX1cXG4gICAgICAgICAgICA8L2xlZ2VuZD5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXVwbG9hZFxcXCIgZGF0YS11cGxvYWQ9XFxcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtcGFwZXJjbGlwXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eydhdHRhY2hfZmlsZSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzXFxcIiBkYXRhLXVwbG9hZC1maWxlcz1cXFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzLWZpbGVcXFwiICpuZ0Zvcj1cXFwibGV0IGF0dCBvZiBwcm9qZWN0LmF0dGFjaG1lbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmlsZS1uYW1lXFxcIiBocmVmPVxcXCJ7e2F0dC51cmx9fVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7YXR0LnJlYWxGaWxlTmFtZX19XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1saW5rIGJ0bi1yZW1vdmUtZmlsZSBvbi1lZGl0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgPC9zZWN0aW9uPlxcbjwvZm9ybT5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvdGVtcGxhdGVzL3Byb2plY3QuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDMwMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgUm91dGVzLCBSb3V0ZVNlZ21lbnQsIFJvdXRlVHJlZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9tb2RlbHMvdGFzayc7XG5pbXBvcnQgeyBUYXNrU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Rhc2suc2VydmljZSc7XG5pbXBvcnQgeyBUYXNrQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy90YXNrJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbdGFza3NdJyxcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL3Rhc2tzLmh0bWwnKSxcbiAgICBwaXBlczogW0RhdGVQaXBlXVxufSlcblxuZXhwb3J0IGNsYXNzIFRhc2tzQ29tcG9uZW50IHtcbiAgICB0YXNrczogVGFza1tdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgcm91dGVTZWdtZW50OiBSb3V0ZVNlZ21lbnQsXG4gICAgICAgIHByaXZhdGUgdGFza1NlcnZpY2U6IFRhc2tTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIHRoaXMudGFza1NlcnZpY2UuZ2V0VGFza3ModGhpcy5yb3V0ZVNlZ21lbnQuZ2V0UGFyYW0oJ2ZvcicpKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICB0YXNrcyA9PiB0aGlzLnRhc2tzID0gdGFza3MsXG4gICAgICAgICAgICBlcnJvclJlc3BvbnNlID0+IHRoaXMuaGFuZGxlWGhyRXJyb3IoZXJyb3JSZXNwb25zZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjb21wb3NlUmVjb3JkKCkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy90YXNrJywgJ25ldyddKTtcbiAgICB9XG5cbiAgICBkZWxldGVUYXNrKHRhc2s6IFRhc2spIHtcbiAgICAgICAgdGhpcy50YXNrU2VydmljZS5kZWxldGVUYXNrKHRhc2spLnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIGhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGVycm9yUmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy90YXNrcy50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2snO1xuaW1wb3J0IHsgc2VyaWFsaXplT2JqIH0gZnJvbSAnLi4vdXRpbHMvb2JqLXV0aWxzJztcblxuY29uc3QgVklFV19VUkwgPSAncD9pZD10YXNrLXZpZXcnO1xuY29uc3QgRk9STV9VUkwgPSAncD9pZD10YXNrLWZvcm0nO1xuY29uc3QgSEVBREVSID0ge1xuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9dXRmLTgnLFxuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfSlcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUYXNrU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwXG4gICAgKSB7IH1cblxuICAgIGdldFRhc2tzKGF0OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoVklFV19VUkwgKyAoYXQgPyAnJmZvcj0nICsgYXQgOiAnJyksIEhFQURFUilcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0ubGlzdClcbiAgICAgICAgICAgIC5tYXAoKHJlc3BvbnNlOiBUYXNrW10pID0+IHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBnZXRUYXNrQnlJZCh0YXNrSWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChGT1JNX1VSTCArICcmZG9jaWQ9JyArIHRhc2tJZCwgSEVBREVSKVxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkub2JqZWN0c1sxXSlcbiAgICAgICAgICAgIC5tYXAoKHJlc3BvbnNlOiBUYXNrKSA9PiByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgc2F2ZVRhc2sodGFzazogVGFzaykge1xuICAgICAgICBsZXQgdXJsID0gRk9STV9VUkwgKyAodGFzay5pZCA/ICcmZG9jaWQ9JyArIHRhc2suaWQgOiAnJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIHRoaXMuc2VyaWFsaXplVGFzayh0YXNrKSwgSEVBREVSKTtcbiAgICB9XG5cbiAgICBkZWxldGVUYXNrKHRhc2s6IFRhc2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoVklFV19VUkwpO1xuICAgIH1cblxuICAgIC8vXG4gICAgc2VyaWFsaXplVGFzayh0YXNrOiBUYXNrKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZU9iaih7XG4gICAgICAgICAgICB0eXBlOiB0YXNrLnR5cGUuaWQsXG4gICAgICAgICAgICBzdGF0dXM6IHRhc2suc3RhdHVzLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHRhc2sucHJpb3JpdHksXG4gICAgICAgICAgICBib2R5OiB0YXNrLmJvZHksXG4gICAgICAgICAgICBhc3NpZ25lZTogdGFzay5hc3NpZ25lZSxcbiAgICAgICAgICAgIHN0YXJ0X2RhdGU6IHRhc2suc3RhcnREYXRlLFxuICAgICAgICAgICAgZHVlX2RhdGU6IHRhc2suZHVlRGF0ZSxcbiAgICAgICAgICAgIHRhZ3M6IEFycmF5LmlzQXJyYXkodGFzay50YWdzKSA/IHRhc2sudGFncy5tYXAoaXQgPT4gaXQuaWQpLmpvaW4oJywnKSA6IHRhc2sudGFncyxcbiAgICAgICAgICAgIGF0dGFjaG1lbnRzOiBBcnJheS5pc0FycmF5KHRhc2suYXR0YWNobWVudHMpID8gdGFzay5hdHRhY2htZW50cy5tYXAoaXQgPT4gaXQuaWQpLmpvaW4oJywnKSA6ICcnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NlcnZpY2VzL3Rhc2suc2VydmljZS50c1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXG4gICAgICAgIHt7J3Rhc2tzJ319XFxuICAgIDwvaDE+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYWN0aW9uc1xcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY29tcG9zZVJlY29yZCgpXFxcIj5cXG4gICAgICAgICAgICB7eyduZXdfdGFzayd9fVxcbiAgICAgICAgPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYm9keVxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInZpZXcgdmlldy10YXNrXFxcIj5cXG4gICAgICAgIDxoZWFkZXIgY2xhc3M9XFxcImVudHJpZXMtaGVhZFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZC13cmFwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJlbnRyeS1zZWxlY3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBkYXRhLXRvZ2dsZT1cXFwiZG9jaWRcXFwiIGNsYXNzPVxcXCJhbGxcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJ5LWNhcHRpb25zXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7J2JvZHknfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9oZWFkZXI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyaWVzXFxcIj5cXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVxcXCIhdGFza3NcXFwiPlxcbiAgICAgICAgICAgICAgICB7eydsb2FkaW5nJ319XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktd3JhcFxcXCIgKm5nRm9yPVxcXCJsZXQgdGFzayBvZiB0YXNrc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1pZD1cXFwie3t0YXNrLmlkfX1cXFwiIGNsYXNzPVxcXCJlbnRyeVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBuYW1lPVxcXCJkb2NpZFxcXCIgdmFsdWU9XFxcInt7dGFzay5pZH19XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJlbnRyeS1saW5rXFxcIiBbcm91dGVyTGlua109XFxcIlsnL3Rhc2snLCB0YXNrLmlkXVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YXNrLXN0YXR1c1xcXCI+e3t0YXNrLnN0YXR1c319PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhc2stcHJpb3JpdHlcXFwiPnt7dGFzay5wcmlvcml0eX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhc2stYm9keVxcXCI+e3t0YXNrLmJvZHl9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YXNrLWFzc2lnbmVlXFxcIj57e3Rhc2suYXNzaWduZWV9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1kYXRlXFxcIj57e3Rhc2suc3RhcnREYXRlIHwgZGF0ZTonZGQuTU0ueSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1kYXRlXFxcIj57e3Rhc2suZHVlRGF0ZSB8IGRhdGU6J2RkLk1NLnknfX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFnc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRhZ1xcXCIgKm5nRm9yPVxcXCJsZXQgdGFnIG9mIHRhZ3NcXFwiPnt7dGFnLm5hbWV9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC90ZW1wbGF0ZXMvdGFza3MuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDMwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZVNlZ21lbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIENvbnRyb2xHcm91cCwgQ29udHJvbCwgRk9STV9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQXBwU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FwcC5zZXJ2aWNlJztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9tb2RlbHMvdGFzayc7XG5pbXBvcnQgeyBUYXNrU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Rhc2suc2VydmljZSc7XG5pbXBvcnQgeyBSZWZlcmVuY2VTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcmVmZXJlbmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFnIH0gZnJvbSAnLi4vbW9kZWxzL3RhZyc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1t0YXNrXScsXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy90YXNrLmh0bWwnKSxcbiAgICBkaXJlY3RpdmVzOiBbRk9STV9ESVJFQ1RJVkVTXSxcbiAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlcl1cbn0pXG5cbmV4cG9ydCBjbGFzcyBUYXNrQ29tcG9uZW50IHtcbiAgICB0YXNrOiBUYXNrO1xuICAgIGZvcm06IENvbnRyb2xHcm91cDtcbiAgICB1c2VyczogVXNlcltdO1xuICAgIHRhZ3M6IFRhZ1tdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgcm91dGVTZWdtZW50OiBSb3V0ZVNlZ21lbnQsXG4gICAgICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLFxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdGFza1NlcnZpY2U6IFRhc2tTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlZmVyZW5jZVNlcnZpY2U6IFJlZmVyZW5jZVNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5mb3JtID0gZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgdHlwZTogWycnXSxcbiAgICAgICAgICAgIHN0YXR1czogWycnXSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBbJyddLFxuICAgICAgICAgICAgYm9keTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIGFzc2lnbmVlOiBbJyddLFxuICAgICAgICAgICAgc3RhcnREYXRlOiBbJyddLFxuICAgICAgICAgICAgZHVlRGF0ZTogWycnXSxcbiAgICAgICAgICAgIHRhZ3M6IFsnJ10sXG4gICAgICAgICAgICBhdHRhY2htZW50czogWycnXVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5yb3V0ZVNlZ21lbnQuZ2V0UGFyYW0oJ2lkJykgIT09ICduZXcnKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmdldFRhc2tCeUlkKHRoaXMucm91dGVTZWdtZW50LmdldFBhcmFtKCdpZCcpKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgdGFzayA9PiB0aGlzLnRhc2sgPSB0YXNrLFxuICAgICAgICAgICAgICAgIGVycm9yUmVzcG9uc2UgPT4gdGhpcy5oYW5kbGVYaHJFcnJvcihlcnJvclJlc3BvbnNlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGFzayA9IG5ldyBUYXNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcFNlcnZpY2UuZ2V0VXNlcnMoKS5zdWJzY3JpYmUodXNlcnMgPT4gdGhpcy51c2VycyA9IHVzZXJzKTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VTZXJ2aWNlLmdldFRhZ3MoKS5zdWJzY3JpYmUodGFncyA9PiB0aGlzLnRhZ3MgPSB0YWdzKTtcbiAgICB9XG5cbiAgICBzYXZlVGFzaygpIHtcbiAgICAgICAgdGhpcy50YXNrU2VydmljZS5zYXZlVGFzayh0aGlzLnRhc2spLnN1YnNjcmliZShyZXNwID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3Rhc2tzJ10pO1xuICAgIH1cblxuICAgIGhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGVycm9yUmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy90YXNrLnRzXG4gKiovIiwiaW1wb3J0IHsgQXR0YWNobWVudCB9IGZyb20gJy4vYXR0YWNobWVudCc7XG5pbXBvcnQgeyBUYWcgfSBmcm9tICcuL3RhZyc7XG5pbXBvcnQgeyBUYXNrVHlwZSB9IGZyb20gJy4vdGFzay10eXBlJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuXG5leHBvcnQgY29uc3QgVGFza1ByaW9yaXR5VHlwZSA9IFtcbiAgICAnSEVJR0hFU1QnLFxuICAgICdIRUlHSFQnLFxuICAgICdNRURJVU0nLFxuICAgICdOT1JNQUwnXG5dO1xuXG5leHBvcnQgY29uc3QgVGFza1N0YXR1c1R5cGUgPSBbXG4gICAgJ0RSQUZUJyxcbiAgICAnV0FJVElORycsXG4gICAgJ1BST0NFU1NFRCcsXG4gICAgJ0ZJTklTSEVEJ1xuXTtcblxuZXhwb3J0IGNsYXNzIFRhc2sge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgYXV0aG9yOiBVc2VyO1xuICAgIHJlZ0RhdGU6IERhdGU7XG4gICAgd2FzUmVhZDogYm9vbGVhbjtcblxuICAgIHBhcmVudDogVGFzaztcbiAgICBjaGlsZHJlbjogVGFza1tdO1xuXG4gICAgdHlwZTogVGFza1R5cGU7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgcHJpb3JpdHk6IHN0cmluZztcbiAgICBib2R5OiBzdHJpbmc7XG4gICAgYXNzaWduZWU6IG51bWJlcjtcbiAgICBzdGFydERhdGU6IERhdGU7XG4gICAgZHVlRGF0ZTogRGF0ZTtcbiAgICB0YWdzOiBUYWdbXTtcbiAgICBhdHRhY2htZW50czogQXR0YWNobWVudFtdO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbW9kZWxzL3Rhc2sudHNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiAqbmdJZj1cXFwiIXRhc2tcXFwiPlxcbiAgICB7eydsb2FkaW5nJ319XFxuPC9kaXY+XFxuPGZvcm0gY2xhc3M9XFxcImZvcm1cXFwiIFtuZ0Zvcm1Nb2RlbF09XFxcImZvcm1cXFwiICpuZ0lmPVxcXCJ0YXNrXFxcIj5cXG4gICAgPGhlYWRlciBjbGFzcz1cXFwiY29udGVudC1oZWFkZXJcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWJhY2tcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNoZXZyb24tbGVmdFxcXCI+PC9pPlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8aDEgY2xhc3M9XFxcImhlYWRlci10aXRsZVxcXCI+XFxuICAgICAgICAgICAge3sndGFzayd9fVxcbiAgICAgICAgPC9oMT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYWN0aW9uc1xcXCI+XFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIFtkaXNhYmxlZF09XFxcIiFmb3JtLnZhbGlkXFxcIiAoY2xpY2spPVxcXCJzYXZlVGFzaygpXFxcIj5cXG4gICAgICAgICAgICAgICAge3snc2F2ZV9jbG9zZSd9fVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0blxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICAgICAge3snY2xvc2UnfX1cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2hlYWRlcj5cXG4gICAgPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRlbnQtYm9keVxcXCI+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eyd0YXNrX3R5cGUnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudHlwZS52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInNwYW42XFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay50eXBlXFxcIiBuZ0NvbnRyb2w9XFxcInR5cGVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnR5cGUudmFsaWQgfHwgZm9ybS5jb250cm9scy50eXBlLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydzdGF0dXMnfX1cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcInN0YXR1c1xcXCIgdmFsdWU9XFxcIjQ1M1xcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5EUkFGVDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJzdGF0dXNcXFwiIHZhbHVlPVxcXCI0NTRcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnN0YXR1c1xcXCIgbmdDb250cm9sPVxcXCJzdGF0dXNcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+V0FJVElORzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJzdGF0dXNcXFwiIHZhbHVlPVxcXCI0NTVcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnN0YXR1c1xcXCIgbmdDb250cm9sPVxcXCJzdGF0dXNcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UFJPQ0VTU0VEPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcInN0YXR1c1xcXCIgdmFsdWU9XFxcIjQ1NlxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suc3RhdHVzXFxcIiBuZ0NvbnRyb2w9XFxcInN0YXR1c1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GSU5JU0hFRDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7J3ByaW9yaXR5J319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLnByaW9yaXR5LnZhbGlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XFxcInNwYW4zXFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5wcmlvcml0eVxcXCIgbmdDb250cm9sPVxcXCJwcmlvcml0eVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBtIG9mIHByaW9yaXRpZXNcXFwiIFt2YWx1ZV09XFxcIm0udmFsdWVcXFwiPnt7bS5uYW1lfX08L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5wcmlvcml0eS52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLnByaW9yaXR5LnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydib2R5J319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmJvZHkudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suYm9keVxcXCIgbmdDb250cm9sPVxcXCJib2R5XFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5ib2R5LnZhbGlkIHx8IGZvcm0uY29udHJvbHMuYm9keS5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJ319XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge3snYXNzaWduZWVfdXNlcid9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy5hc3NpZ25lZS52YWxpZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJzcGFuOFxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suYXNzaWduZWVcXFwiIG5nQ29udHJvbD1cXFwiYXNzaWduZWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVxcXCJsZXQgbSBvZiB1c2Vyc1xcXCIgW3ZhbHVlXT1cXFwibS5pZFxcXCI+e3ttLmxvZ2lufX08L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5hc3NpZ25lZS52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLmFzc2lnbmVlLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnfX1cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydzdGFydF9kYXRlJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgY2xhc3M9XFxcInNwYW4yXFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5zdGFydERhdGVcXFwiIG5nQ29udHJvbD1cXFwic3RhcnREYXRlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eydkdWVfZGF0ZSd9fVxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImRhdGVcXFwiIGNsYXNzPVxcXCJzcGFuMlxcXCIgWyhuZ01vZGVsKV09XFxcInRhc2suZHVlRGF0ZVxcXCIgbmdDb250cm9sPVxcXCJkdWVEYXRlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7eyd0YWdzJ319XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLnRhZ3MudmFsaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cXFwic3BhbjhcXFwiIG11bHRpcGxlIFsobmdNb2RlbCldPVxcXCJ0YXNrLnRhZ3NcXFwiIG5nQ29udHJvbD1cXFwidGFnc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBtIG9mIHRhZ3NcXFwiIFt2YWx1ZV09XFxcIm0uaWRcXFwiPnt7bS5uYW1lfX08L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy50YWdzLnZhbGlkIHx8IGZvcm0uY29udHJvbHMudGFncy5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJ319XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGxlZ2VuZCBjbGFzcz1cXFwibGVnZW5kXFxcIj5cXG4gICAgICAgICAgICAgICAge3snYXR0YWNobWVudHMnfX1cXG4gICAgICAgICAgICA8L2xlZ2VuZD5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXVwbG9hZFxcXCIgZGF0YS11cGxvYWQ9XFxcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtcGFwZXJjbGlwXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eydhdHRhY2hfZmlsZSd9fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzXFxcIiBkYXRhLXVwbG9hZC1maWxlcz1cXFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF0dGFjaG1lbnRzLWZpbGVcXFwiICpuZ0Zvcj1cXFwibGV0IGF0dCBvZiB0YXNrLmF0dGFjaG1lbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmlsZS1uYW1lXFxcIiBocmVmPVxcXCJ7e2F0dC51cmx9fVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7YXR0LnJlYWxGaWxlTmFtZX19XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1saW5rIGJ0bi1yZW1vdmUtZmlsZSBvbi1lZGl0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgPC9zZWN0aW9uPlxcbjwvZm9ybT5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvdGVtcGxhdGVzL3Rhc2suaHRtbFxuICoqIG1vZHVsZSBpZCA9IDMwNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIENvbnRyb2xHcm91cCwgQ29udHJvbCwgRk9STV9ESVJFQ1RJVkVTfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBUYWJzIH0gZnJvbSAnLi90YWJzL3RhYnMnO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi90YWJzL3RhYic7XG5cbmltcG9ydCB7IEFwcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcHAuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1t1c2VyLXByb2ZpbGVdJyxcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vdGVtcGxhdGVzL3VzZXItcHJvZmlsZS5odG1sJyksXG4gICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFUywgVGFicywgVGFiXSxcbiAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlcl1cbn0pXG5cbmV4cG9ydCBjbGFzcyBVc2VyUHJvZmlsZUNvbXBvbmVudCB7XG4gICAgdXNlcjogVXNlciA9IG5ldyBVc2VyKCk7XG4gICAgZm9ybTogQ29udHJvbEdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLFxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5mb3JtID0gZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgbG9naW46IFtdLFxuICAgICAgICAgICAgcHdkOiBbXSxcbiAgICAgICAgICAgIHB3ZF9jb25maXJtOiBbXSxcbiAgICAgICAgICAgIGVtYWlsOiBbXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVVc2VyUHJvZmlsZSgpIHtcbiAgICAgICAgdGhpcy5hcHBTZXJ2aWNlLnVwZGF0ZVVzZXJQcm9maWxlKHRoaXMudXNlcik7XG4gICAgfVxuXG4gICAgY2xvc2UoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvdXNlci1wcm9maWxlLnRzXG4gKiovIiwiaW1wb3J0IHsgY3JlYXRlUGxhdGZvcm0sIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0YWJzJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCI+XG4gICAgICAgIDxsaSAqbmdGb3I9XCJsZXQgdGFiIG9mIHRhYnNcIiAoY2xpY2spPVwic2VsZWN0VGFiKHRhYilcIiBbY2xhc3MuYWN0aXZlXT1cInRhYi5hY3RpdmVcIj5cbiAgICAgICAgICA8YSBocmVmPVwiI1wiIChjbGljayk9XCJwcmV2ZW50RGVmYXVsdCgkZXZlbnQpXCI+e3t0YWIudGl0bGV9fTwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgYFxufSlcblxuZXhwb3J0IGNsYXNzIFRhYnMgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIEBDb250ZW50Q2hpbGRyZW4oVGFiKSB0YWJzOiBRdWVyeUxpc3Q8VGFiPjtcblxuICAgIC8vIGNvbnRlbnRDaGlsZHJlbiBhcmUgc2V0XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICAvLyBnZXQgYWxsIGFjdGl2ZSB0YWJzXG4gICAgICAgIGxldCBhY3RpdmVUYWJzID0gdGhpcy50YWJzLmZpbHRlcih0YWIgPT4gdGFiLmFjdGl2ZSk7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gYWN0aXZlIHRhYiBzZXQsIGFjdGl2YXRlIHRoZSBmaXJzdFxuICAgICAgICBpZiAoYWN0aXZlVGFicy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFiKHRoaXMudGFicy5maXJzdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RUYWIodGFiOiBUYWIpIHtcbiAgICAgICAgLy8gZGVhY3RpdmF0ZSBhbGwgdGFic1xuICAgICAgICB0aGlzLnRhYnMuZm9yRWFjaCh0YWIgPT4gdGFiLmFjdGl2ZSA9IGZhbHNlKTtcblxuICAgICAgICAvLyBhY3RpdmF0ZSB0aGUgdGFiIHRoZSB1c2VyIGhhcyBjbGlja2VkIG9uLlxuICAgICAgICB0YWIuYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcmV2ZW50RGVmYXVsdChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvdGFicy90YWJzLnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RhYicsXG4gICAgc3R5bGVzOiBbYC5uYXYtdGFicyAucGFuZSB7IH1gXSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgPGRpdiBbaGlkZGVuXT1cIiFhY3RpdmVcIiBjbGFzcz1cInBhbmVcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9kaXY+XG4gICAgYFxufSlcblxuZXhwb3J0IGNsYXNzIFRhYiB7XG4gICAgQElucHV0KCd0YWJUaXRsZScpIHRpdGxlOiBzdHJpbmc7XG4gICAgQElucHV0KCkgYWN0aXZlID0gZmFsc2U7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3RhYnMvdGFiLnRzXG4gKiovIiwiZXhwb3J0IGNsYXNzIFVzZXIge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbG9naW46IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHVzZXJfbmFtZTogc3RyaW5nID0gJ0Bhbm9ueW1vdXMnO1xuICAgIHB3ZDogc3RyaW5nO1xuICAgIHB3ZF9jb25maXJtOiBzdHJpbmc7XG4gICAgb3JnYW5pemF0aW9uOiBzdHJpbmc7XG4gICAgZGVwYXJ0bWVudDogc3RyaW5nO1xuICAgIHBvc2l0aW9uOiBzdHJpbmc7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvdXNlci50c1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8Zm9ybSBjbGFzcz1cXFwiZm9ybSBmb3JtLXVzZXJwcm9maWxlXFxcIiBhdXRvY29tcGxldGU9XFxcIm9mZlxcXCIgW25nRm9ybU1vZGVsXT1cXFwiZm9ybVxcXCI+XFxuICAgIDxoZWFkZXIgY2xhc3M9XFxcImNvbnRlbnQtaGVhZGVyXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1iYWNrXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWxlZnRcXFwiPjwvaT5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGgxIGNsYXNzPVxcXCJoZWFkZXItdGl0bGVcXFwiPlxcbiAgICAgICAgICAgIHt7J2VtcGxveWVlJ319IHt7dXNlci5uYW1lfX1cXG4gICAgICAgIDwvaDE+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWFjdGlvbnNcXFwiPlxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBbZGlzYWJsZWRdPVxcXCIhZm9ybS52YWxpZFxcXCIgKGNsaWNrKT1cXFwidXBkYXRlVXNlclByb2ZpbGUoKVxcXCI+XFxuICAgICAgICAgICAgICAgIHt7J3NhdmVfY2xvc2UnfX1cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+XFxuICAgICAgICAgICAgICAgIHt7J2Nsb3NlJ319XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9oZWFkZXI+XFxuICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJjb250ZW50LWJvZHlcXFwiPlxcbiAgICAgICAgPHRhYnM+XFxuICAgICAgICAgICAgPHRhYiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIHRhYlRpdGxlPVxcXCJ7eydwcm9wZXJ0aWVzJ319XFxcIj5cXG4gICAgICAgICAgICAgICAgPCEtLTxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXQgZmllbGRzZXQtdXNlci1hdmF0YXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXCJ1c2VyLWF2YXRhclxcXCIgc3JjPVxcXCJpbWcvYXZhdGFyLnBuZ1xcXCIvPlxcbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0Pi0tPlxcbiAgICAgICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0IGZpZWxkc2V0LXVzZXItZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyd1c2VyX25hbWUnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1wbGFjZWhvbGRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3VzZXIubmFtZX19XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2xvZ2luX25hbWUnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwic3BhbjNcXFwiIFsobmdNb2RlbCldPVxcXCJ1c2VyLmxvZ2luXFxcIiBuZ0NvbnRyb2w9XFxcImxvZ2luXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sncGFzc3dvcmQnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgY2xhc3M9XFxcInNwYW4zXFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5wd2RcXFwiIG5nQ29udHJvbD1cXFwicHdkXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sncGFzc3dvcmRfY29uZmlybSd9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBjbGFzcz1cXFwic3BhbjNcXFwiIFsobmdNb2RlbCldPVxcXCJ1c2VyLnB3ZF9jb25maXJtXFxcIiBuZ0NvbnRyb2w9XFxcInB3ZF9jb25maXJtXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3snZW1haWwnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgY2xhc3M9XFxcInNwYW4zXFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5lbWFpbFxcXCIgbmdDb250cm9sPVxcXCJlbWFpbFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J29yZ19uYW1lJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLm9yZ2FuaXphdGlvbn19XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2RlcGFydG1lbnQnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1wbGFjZWhvbGRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3VzZXIuZGVwYXJ0bWVudH19XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3Bvc2l0aW9uJ319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLnBvc2l0aW9ufX1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sncm9sZXMnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXIgbGlzdC1zdHlsZS1ub25lXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PVxcXCJmaWVsZHMvcm9sZXMvZW50cnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9XFxcIi5cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICAgICAgPC90YWI+XFxuICAgICAgICAgICAgPHRhYiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIHRhYlRpdGxlPVxcXCJ7eydpbnRlcmZhY2UnfX1cXFwiPlxcbiAgICAgICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydsaW1pdF92aWV3J319XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XFxcInBhZ2VzaXplXFxcIiBjbGFzcz1cXFwibmF0aXZlIHNwYW4yXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIjEwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9XFxcIi8vcGFnZXNpemUgPSAnMTAnXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT1cXFwic2VsZWN0ZWRcXFwiIHNlbGVjdD1cXFwiJ3NlbGVjdGVkJ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCIyMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCIvL3BhZ2VzaXplID0gJzIwJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiMzBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD1cXFwiLy9wYWdlc2l6ZSA9ICczMCdcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPVxcXCJzZWxlY3RlZFxcXCIgc2VsZWN0PVxcXCInc2VsZWN0ZWQnXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMwXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIjUwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9XFxcIi8vcGFnZXNpemUgPSAnNTAnXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT1cXFwic2VsZWN0ZWRcXFwiIHNlbGVjdD1cXFwiJ3NlbGVjdGVkJ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1MFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3snaW50ZXJmYWNlX2xhbmcnfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT1cXFwiY3VycmVudGxhbmdcXFwiIHNlbGVjdD1cXFwiL3JlcXVlc3QvQGxhbmdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cXFwibGFuZ1xcXCIgY2xhc3M9XFxcIm5hdGl2ZSBzcGFuMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD1cXFwiLy9xdWVyeVtAZW50aXR5ID0gJ2xhbmd1YWdlJ10vZW50cnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcInt2aWV3Y29udGVudC9sYW5nL0BpZH1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9XFxcInZpZXdjb250ZW50L2xhbmcvQGlkID0gJGN1cnJlbnRsYW5nXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD1cXFwidmlld2NvbnRlbnQvbGFuZ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiIGRhdGEtdG9nZ2xlLXRoZW1lPVxcXCJ0aGVtZTFcXFwiIGNsYXNzPVxcXCJpbnB1dC1wbGFjZWhvbGRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydjaGFuZ2Vfc2tpbid9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgICAgICA8L3RhYj5cXG4gICAgICAgIDwvdGFicz5cXG4gICAgPC9zZWN0aW9uPlxcbjwvZm9ybT5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvdGVtcGxhdGVzL3VzZXItcHJvZmlsZS5odG1sXG4gKiogbW9kdWxlIGlkID0gMzExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbbG9naW5dJyxcbiAgICB0ZW1wbGF0ZTogJ2xvZ2luJ1xufSlcblxuZXhwb3J0IGNsYXNzIExvZ2luQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnTG9nb3V0JztcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL2xvZ2luLnRzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1ub3RpZnk+PC9uYi1ub3RpZnk+XFxuPGRpdiBjbGFzcz1cXFwibGF5b3V0XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1vdmVybGF5XFxcIiAobW91c2Vkb3duKT1cXFwiaGlkZU5hdigkZXZlbnQpXFxcIiAodG91Y2hzdGFydCk9XFxcImhpZGVOYXYoJGV2ZW50KVxcXCI+PC9kaXY+XFxuICAgIDxoZWFkZXIgY2xhc3M9XFxcImhlYWRlciBuYXZiYXIgbmF2YmFyLWZpeGVkLXRvcFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hdmJhci1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tc2lkZS1uYXYtdG9nZ2xlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcInRvZ2dsZU5hdigpXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwiYnJhbmQtbG9nb1xcXCIgYWx0PVxcXCJsb2dvXFxcIiBzcmM9XFxcImltZy9sb2dvLnBuZ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJyYW5kLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHt7SEVBREVSX1RJVExFfX1cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxuYXYgY2xhc3M9XFxcIm5hdmJhci1uYXYgbmF2YmFyLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2YmFyLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZHJvcGRvd25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJkcm9wZG93bi10b2dnbGVcXFwiIGRhdGEtdG9nZ2xlPVxcXCJkcm9wZG93blxcXCIgKGNsaWNrKT1cXFwicHJldmVudERlZmF1bHQoJGV2ZW50KVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS11c2VyXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSByaWdodFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJ1c2VyLXByb2ZpbGVcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWycvdXNlci1wcm9maWxlJ11cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7bG9nZ2VkVXNlci51c2VyX25hbWV9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJsb2dvdXRcXFwiIGhyZWY9XFxcIiNsb2dvdXRcXFwiIChjbGljayk9XFxcImxvZ291dCgkZXZlbnQpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvdXRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XFxcIm5hdmJhci1mb3JtIG5hdmJhci1zZWFyY2hcXFwiIG5hbWU9XFxcImZ0LXNlYXJjaFxcXCIgKHN1Ym1pdCk9XFxcImZ0U2VhcmNoKClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImhpZGRlblxcXCIgbmFtZT1cXFwiaWRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwic2VhcmNoXFxcIiBjbGFzcz1cXFwicVxcXCIgbmFtZT1cXFwia2V5d29yZFxcXCIgdmFsdWU9XFxcInt7c2VhcmNoX2tleXdvcmR9fVxcXCIgcGxhY2Vob2xkZXI9XFxcInt7J3NlYXJjaCd9fVxcXCIgcmVxdWlyZWQgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIChmb2N1cyk9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAoYmx1cik9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZm9ybT5cXG4gICAgICAgICAgICA8L25hdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2hlYWRlcj5cXG4gICAgPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxuICAgICAgICA8YXNpZGUgbmF2IGNsYXNzPVxcXCJhc2lkZSBzaWRlLW5hdlxcXCI+PC9hc2lkZT5cXG4gICAgICAgIDxtYWluIGNsYXNzPVxcXCJjb250ZW50XFxcIj5cXG4gICAgICAgICAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XFxuICAgICAgICA8L21haW4+XFxuICAgIDwvc2VjdGlvbj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvdGVtcGxhdGVzL2FwcC5odG1sXG4gKiogbW9kdWxlIGlkID0gMzEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9
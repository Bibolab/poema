webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_browser_dynamic_1 = __webpack_require__(1);
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var common_1 = __webpack_require__(2);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var app_component_1 = __webpack_require__(377);
	var app_routes_1 = __webpack_require__(463);
	var app_service_1 = __webpack_require__(438);
	var services_1 = __webpack_require__(437);
	var store_1 = __webpack_require__(594);
	platform_browser_dynamic_1.bootstrap(app_component_1.AppComponent, [
	    http_1.HTTP_PROVIDERS,
	    app_routes_1.APP_ROUTER_PROVIDERS,
	    core_1.provide(common_1.LocationStrategy, { useClass: common_1.HashLocationStrategy }),
	    ng2_translate_1.TranslateService,
	    ng2_translate_1.TRANSLATE_PROVIDERS,
	    core_1.provide(ng2_translate_1.TranslateLoader, {
	        useFactory: function (appService) { return new CustomTranslateLoader(appService); },
	        deps: [app_service_1.AppService]
	    }),
	    notification_1.NotificationService,
	    services_1.APP_SERVICES,
	    store_1.APP_STORE
	]).catch(function (err) { return console.error(err); });
	var CustomTranslateLoader = (function () {
	    function CustomTranslateLoader(appService) {
	        this.appService = appService;
	    }
	    CustomTranslateLoader.prototype.getTranslation = function (lang) {
	        return this.appService.getTranslations();
	    };
	    return CustomTranslateLoader;
	}());


/***/ },

/***/ 373:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(374));
	__export(__webpack_require__(376));
	__export(__webpack_require__(375));


/***/ },

/***/ 374:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var notification_1 = __webpack_require__(375);
	var NotificationService = (function () {
	    function NotificationService() {
	        this.emitter = new core_1.EventEmitter();
	    }
	    NotificationService.prototype.getEmitter = function () {
	        return this.emitter;
	    };
	    NotificationService.prototype.info = function (message) {
	        return this.add({ type: 'info', message: message });
	    };
	    NotificationService.prototype.success = function (message) {
	        return this.add({ type: 'success', message: message });
	    };
	    NotificationService.prototype.error = function (message) {
	        return this.add({ type: 'error', message: message });
	    };
	    NotificationService.prototype.process = function (message) {
	        return this.add({ type: 'process', message: message });
	    };
	    NotificationService.prototype.add = function (options) {
	        var noty = new notification_1.Notification(options.type, options.message);
	        this.emitter.emit({ command: 'add', notify: noty });
	        return noty;
	    };
	    NotificationService.prototype.removeAll = function () {
	        this.emitter.emit({ command: 'cleanAll' });
	    };
	    NotificationService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NotificationService);
	    return NotificationService;
	}());
	exports.NotificationService = NotificationService;


/***/ },

/***/ 375:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(5);
	var Notification = (function () {
	    function Notification(type, message) {
	        this.emitter = new core_1.EventEmitter();
	        this.display = false;
	        this.type = type;
	        this.message = message;
	    }
	    Notification.prototype.getEmitter = function () {
	        return this.emitter;
	    };
	    Notification.prototype.show = function () {
	        this.display = true;
	        return this;
	    };
	    Notification.prototype.hide = function () {
	        this.display = false;
	        return this;
	    };
	    Notification.prototype.set = function (options) {
	        for (var key in options) {
	            if (key === 'message') {
	                this.message = options[key];
	            }
	            else if (key === 'type') {
	                this.type = options[key];
	            }
	        }
	        return this;
	    };
	    Notification.prototype.dismiss = function () {
	        if (this.delay === 'click') {
	            this.emitter.emit({ dismiss: true, notify: this, promise: this.promise });
	        }
	    };
	    Notification.prototype.remove = function (delay) {
	        var _this = this;
	        this.delay = delay;
	        if (delay === 'click') {
	        }
	        else if (delay > 0) {
	            setTimeout(function () {
	                _this.emitter.emit({ dismiss: true, notify: _this, promise: _this.promise });
	            }, delay);
	        }
	        else {
	            this.emitter.emit({ dismiss: true, notify: this, promise: this.promise });
	        }
	        return this.promise;
	    };
	    return Notification;
	}());
	exports.Notification = Notification;


/***/ },

/***/ 376:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var notification_service_1 = __webpack_require__(374);
	var NotificationComponent = (function () {
	    function NotificationComponent(notifyService) {
	        this.notifyService = notifyService;
	        this.notifications = [];
	    }
	    Object.defineProperty(NotificationComponent.prototype, "hidden", {
	        get: function () { return this.notifications.length == 0; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    NotificationComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.listener = this.notifyService.getEmitter().subscribe(function (item) {
	            switch (item.command) {
	                case 'cleanAll':
	                    _this.notifications = [];
	                    break;
	                case 'add':
	                    _this.addNotify(item.notify);
	                    break;
	                default:
	                    break;
	            }
	        });
	    };
	    NotificationComponent.prototype.ngOnDestroy = function () {
	        if (this.listener) {
	            this.notifications.map(function (it) { return it.getEmitter().unsubscribe(); });
	            this.listener.unsubscribe();
	        }
	    };
	    NotificationComponent.prototype.addNotify = function (notify) {
	        var _this = this;
	        this.notifications.push(notify);
	        notify.getEmitter().subscribe(function (item) { return _this.notifyEmitter(item); });
	    };
	    NotificationComponent.prototype.notifyEmitter = function (data) {
	        if (data.dismiss) {
	            var index = this.notifications.indexOf(data.notify);
	            this.notifications.splice(index, 1);
	            data.notify.getEmitter().unsubscribe();
	        }
	    };
	    __decorate([
	        core_1.HostBinding('class.nb-notify'), 
	        __metadata('design:type', Object)
	    ], NotificationComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostBinding('class.hidden'), 
	        __metadata('design:type', Object)
	    ], NotificationComponent.prototype, "hidden", null);
	    NotificationComponent = __decorate([
	        core_1.Component({
	            selector: 'notification',
	            template: "\n        <div class=\"nb-notify-entry-{{notify.type}}\"\n                [class.dismiss-click]=\"notify.delay == 'click'\"\n                [style.display]=\"notify.display ? 'block': 'none'\"\n                (click)=\"notify.dismiss()\"\n                *ngFor=\"let notify of notifications\">\n            {{notify.message}}\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [notification_service_1.NotificationService])
	    ], NotificationComponent);
	    return NotificationComponent;
	}());
	exports.NotificationComponent = NotificationComponent;


/***/ },

/***/ 377:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var services_1 = __webpack_require__(437);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(456);
	var nav_1 = __webpack_require__(459);
	var user_1 = __webpack_require__(442);
	var AppComponent = (function () {
	    function AppComponent(store, appService, referenceService, translate) {
	        this.store = store;
	        this.appService = appService;
	        this.referenceService = referenceService;
	        this.translate = translate;
	        this.isReady = false;
	        this.HEADER_TITLE = 'Projects';
	    }
	    AppComponent.prototype.resize = function (window) { this.onResize(window); };
	    ;
	    Object.defineProperty(AppComponent.prototype, "device", {
	        get: function () { return this.isMobileDevice; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(AppComponent.prototype, "toggleNavVisible", {
	        get: function () { return this.isNavCollapsed; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(AppComponent.prototype, "toggleSearch", {
	        get: function () { return this.isSearchOpen; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    AppComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.sub = this.store.select('reference');
	        this.referenceService.loadReference();
	        this.isSearchOpen = false;
	        this.isNavCollapsed = false;
	        this.loggedUser = new user_1.User();
	        this.isMobileDevice = this.isMobile();
	        var userLang = navigator.language.split('-')[0];
	        userLang = /(ru|en)/gi.test(userLang) ? userLang : 'en';
	        this.translate.setDefaultLang('en');
	        this.translate.use(userLang);
	        this.translate.get('brand').subscribe(function (value) { return _this.HEADER_TITLE = value; });
	        this.appService.getUserProfile().subscribe(function (resp) {
	            _this.loggedUser = resp.employee;
	            _this.language = resp.language;
	            _this.isReady = true;
	            _this.appService.isLogged = true;
	        });
	    };
	    AppComponent.prototype.ngOnDestroy = function () {
	        this.sub && this.sub.unsubscribe();
	    };
	    AppComponent.prototype.toggleNav = function () {
	        this.isNavCollapsed = !this.isNavCollapsed;
	    };
	    AppComponent.prototype.hideNav = function (event) {
	        event.preventDefault();
	        this.isNavCollapsed = false;
	        this.isSearchOpen = false;
	    };
	    AppComponent.prototype.searchToggle = function () {
	        this.isSearchOpen = !this.isSearchOpen;
	    };
	    AppComponent.prototype.logout = function (event) {
	        event.preventDefault();
	        window.location.href = '/Logout';
	    };
	    AppComponent.prototype.goBack = function () {
	        window.history.back();
	    };
	    AppComponent.prototype.preventDefault = function (event) {
	        event.preventDefault();
	    };
	    AppComponent.prototype.isMobile = function () {
	        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	    };
	    AppComponent.prototype.onResize = function (window) {
	        this.isMobileDevice = window.innerWidth <= 1024 || this.isMobile();
	    };
	    __decorate([
	        core_1.HostListener('window:resize', ['$event.target']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], AppComponent.prototype, "resize", null);
	    __decorate([
	        core_1.HostBinding('class.phone'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "device", null);
	    __decorate([
	        core_1.HostBinding('class.side-nav-toggle'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "toggleNavVisible", null);
	    __decorate([
	        core_1.HostBinding('class.search-open'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "toggleSearch", null);
	    AppComponent = __decorate([
	        core_1.Component({
	            selector: 'app',
	            template: __webpack_require__(462),
	            directives: [router_1.ROUTER_DIRECTIVES, nav_1.NavComponent, notification_1.NotificationComponent, dropdown_1.DROPDOWN_DIRECTIVES],
	            providers: [notification_1.NotificationService],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, services_1.AppService, services_1.ReferenceService, ng2_translate_1.TranslateService])
	    ], AppComponent);
	    return AppComponent;
	}());
	exports.AppComponent = AppComponent;


/***/ },

/***/ 378:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var router_link_1 = __webpack_require__(379);
	var router_link_active_1 = __webpack_require__(417);
	var router_outlet_1 = __webpack_require__(418);
	var router_1 = __webpack_require__(380);
	exports.NavigationCancel = router_1.NavigationCancel;
	exports.NavigationEnd = router_1.NavigationEnd;
	exports.NavigationError = router_1.NavigationError;
	exports.NavigationStart = router_1.NavigationStart;
	exports.Router = router_1.Router;
	exports.RoutesRecognized = router_1.RoutesRecognized;
	var router_outlet_map_1 = __webpack_require__(416);
	exports.RouterOutletMap = router_outlet_map_1.RouterOutletMap;
	var router_providers_1 = __webpack_require__(419);
	exports.provideRouter = router_providers_1.provideRouter;
	var router_state_1 = __webpack_require__(407);
	exports.ActivatedRoute = router_state_1.ActivatedRoute;
	exports.ActivatedRouteSnapshot = router_state_1.ActivatedRouteSnapshot;
	exports.RouterState = router_state_1.RouterState;
	exports.RouterStateSnapshot = router_state_1.RouterStateSnapshot;
	var shared_1 = __webpack_require__(400);
	exports.PRIMARY_OUTLET = shared_1.PRIMARY_OUTLET;
	var url_serializer_1 = __webpack_require__(402);
	exports.DefaultUrlSerializer = url_serializer_1.DefaultUrlSerializer;
	exports.UrlSerializer = url_serializer_1.UrlSerializer;
	var url_tree_1 = __webpack_require__(401);
	exports.UrlPathWithParams = url_tree_1.UrlPathWithParams;
	exports.UrlTree = url_tree_1.UrlTree;
	exports.ROUTER_DIRECTIVES = [router_outlet_1.RouterOutlet, router_link_1.RouterLink, router_link_active_1.RouterLinkActive];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUF5QiwwQkFBMEIsQ0FBQyxDQUFBO0FBQ3BELG1DQUErQixpQ0FBaUMsQ0FBQyxDQUFBO0FBQ2pFLDhCQUEyQiw0QkFBNEIsQ0FBQyxDQUFBO0FBS3hELHVCQUFpSCxVQUFVLENBQUM7QUFBN0cscURBQWdCO0FBQUUsK0NBQWE7QUFBRSxtREFBZTtBQUFFLG1EQUFlO0FBQUUsaUNBQU07QUFBRSxxREFBa0M7QUFDNUgsa0NBQThCLHFCQUFxQixDQUFDO0FBQTVDLDhEQUE0QztBQUNwRCxpQ0FBNEIsb0JBQW9CLENBQUM7QUFBekMseURBQXlDO0FBQ2pELDZCQUF1RixnQkFBZ0IsQ0FBQztBQUFoRyx1REFBYztBQUFFLHVFQUFzQjtBQUFFLGlEQUFXO0FBQUUsaUVBQTJDO0FBQ3hHLHVCQUFxQyxVQUFVLENBQUM7QUFBeEMsaURBQXdDO0FBQ2hELCtCQUFrRCxrQkFBa0IsQ0FBQztBQUE3RCxxRUFBb0I7QUFBRSx1REFBdUM7QUFDckUseUJBQXlDLFlBQVksQ0FBQztBQUE5Qyx5REFBaUI7QUFBRSxxQ0FBMkI7QUFFekMseUJBQWlCLEdBQUcsQ0FBQyw0QkFBWSxFQUFFLHdCQUFVLEVBQUUscUNBQWdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um91dGVyTGlua30gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9saW5rJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9saW5rX2FjdGl2ZSc7XG5pbXBvcnQge1JvdXRlck91dGxldH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQnO1xuXG5leHBvcnQge0V4dHJhT3B0aW9uc30gZnJvbSAnLi9jb21tb25fcm91dGVyX3Byb3ZpZGVycyc7XG5leHBvcnQge1JvdXRlLCBSb3V0ZXJDb25maWd9IGZyb20gJy4vY29uZmlnJztcbmV4cG9ydCB7Q2FuQWN0aXZhdGUsIENhbkRlYWN0aXZhdGV9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5leHBvcnQge0V2ZW50LCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uRXJyb3IsIE5hdmlnYXRpb25TdGFydCwgUm91dGVyLCBSb3V0ZXNSZWNvZ25pemVkfSBmcm9tICcuL3JvdXRlcic7XG5leHBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi9yb3V0ZXJfb3V0bGV0X21hcCc7XG5leHBvcnQge3Byb3ZpZGVSb3V0ZXJ9IGZyb20gJy4vcm91dGVyX3Byb3ZpZGVycyc7XG5leHBvcnQge0FjdGl2YXRlZFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xuZXhwb3J0IHtQUklNQVJZX09VVExFVCwgUGFyYW1zfSBmcm9tICcuL3NoYXJlZCc7XG5leHBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZXJpYWxpemVyfSBmcm9tICcuL3VybF9zZXJpYWxpemVyJztcbmV4cG9ydCB7VXJsUGF0aFdpdGhQYXJhbXMsIFVybFRyZWV9IGZyb20gJy4vdXJsX3RyZWUnO1xuXG5leHBvcnQgY29uc3QgUk9VVEVSX0RJUkVDVElWRVMgPSBbUm91dGVyT3V0bGV0LCBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rQWN0aXZlXTsiXX0=

/***/ },

/***/ 379:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var common_1 = __webpack_require__(2);
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var router_state_1 = __webpack_require__(407);
	var RouterLink = (function () {
	    function RouterLink(router, route, locationStrategy) {
	        this.router = router;
	        this.route = route;
	        this.locationStrategy = locationStrategy;
	        this.commands = [];
	    }
	    Object.defineProperty(RouterLink.prototype, "routerLink", {
	        set: function (data) {
	            if (Array.isArray(data)) {
	                this.commands = data;
	            }
	            else {
	                this.commands = [data];
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLink.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
	    RouterLink.prototype.onClick = function (button, ctrlKey, metaKey) {
	        if (button !== 0 || ctrlKey || metaKey) {
	            return true;
	        }
	        if (typeof this.target === 'string' && this.target != '_self') {
	            return true;
	        }
	        this.router.navigateByUrl(this.urlTree);
	        return false;
	    };
	    RouterLink.prototype.updateTargetUrlAndHref = function () {
	        this.urlTree = this.router.createUrlTree(this.commands, { relativeTo: this.route, queryParams: this.queryParams, fragment: this.fragment });
	        if (this.urlTree) {
	            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "target", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RouterLink.prototype, "queryParams", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "fragment", void 0);
	    __decorate([
	        core_1.HostBinding(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "href", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RouterLink.prototype, "routerLink", null);
	    __decorate([
	        core_1.HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Number, Boolean, Boolean]), 
	        __metadata('design:returntype', Boolean)
	    ], RouterLink.prototype, "onClick", null);
	    RouterLink = __decorate([
	        core_1.Directive({ selector: '[routerLink]' }), 
	        __metadata('design:paramtypes', [router_1.Router, router_state_1.ActivatedRoute, common_1.LocationStrategy])
	    ], RouterLink);
	    return RouterLink;
	}());
	exports.RouterLink = RouterLink;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX2xpbmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGlyZWN0aXZlcy9yb3V0ZXJfbGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsdUJBQStCLGlCQUFpQixDQUFDLENBQUE7QUFDakQscUJBQXFFLGVBQWUsQ0FBQyxDQUFBO0FBRXJGLHVCQUFxQixXQUFXLENBQUMsQ0FBQTtBQUNqQyw2QkFBNkIsaUJBQWlCLENBQUMsQ0FBQTtBQStCL0M7SUFjRSxvQkFDWSxNQUFjLEVBQVUsS0FBcUIsRUFDN0MsZ0JBQWtDO1FBRGxDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUM3QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBZHRDLGFBQVEsR0FBVSxFQUFFLENBQUM7SUFjb0IsQ0FBQztJQUdsRCxzQkFBSSxrQ0FBVTthQUFkLFVBQWUsSUFBa0I7WUFDL0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQVEsSUFBSSxDQUFDO1lBQzVCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQztRQUNILENBQUM7OztPQUFBO0lBRUQsZ0NBQVcsR0FBWCxVQUFZLE9BQVcsSUFBUyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHaEUsNEJBQU8sR0FBUCxVQUFRLE1BQWMsRUFBRSxPQUFnQixFQUFFLE9BQWdCO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLDJDQUFzQixHQUE5QjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQ3BDLElBQUksQ0FBQyxRQUFRLEVBQ2IsRUFBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7UUFDdEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0YsQ0FBQztJQUNILENBQUM7SUFqREQ7UUFBQyxZQUFLLEVBQUU7OzhDQUFBO0lBRVI7UUFBQyxZQUFLLEVBQUU7O21EQUFBO0lBQ1I7UUFBQyxZQUFLLEVBQUU7O2dEQUFBO0lBR1I7UUFBQyxrQkFBVyxFQUFFOzs0Q0FBQTtJQVdkO1FBQUMsWUFBSyxFQUFFOzs7Z0RBQUE7SUFXUjtRQUFDLG1CQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7Ozs7NkNBQUE7SUE5Qi9FO1FBQUMsZ0JBQVMsQ0FBQyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUMsQ0FBQzs7a0JBQUE7SUFvRHRDLGlCQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQztBQW5EWSxrQkFBVSxhQW1EdEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb25TdHJhdGVneX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25DaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSb3V0ZXJ9IGZyb20gJy4uL3JvdXRlcic7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICcuLi9yb3V0ZXJfc3RhdGUnO1xuaW1wb3J0IHtVcmxUcmVlfSBmcm9tICcuLi91cmxfdHJlZSc7XG5cblxuXG4vKipcbiAqIFRoZSBSb3V0ZXJMaW5rIGRpcmVjdGl2ZSBsZXRzIHlvdSBsaW5rIHRvIHNwZWNpZmljIHBhcnRzIG9mIHlvdXIgYXBwLlxuICpcbiAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgcm91dGUgY29uZmlndXJhdGlvbjpcblxuICogYGBgXG4gKiBbeyBwYXRoOiAnL3VzZXInLCBjb21wb25lbnQ6IFVzZXJDbXAgfV1cbiAqIGBgYFxuICpcbiAqIFdoZW4gbGlua2luZyB0byB0aGlzIGBVc2VyYCByb3V0ZSwgeW91IGNhbiB3cml0ZTpcbiAqXG4gKiBgYGBcbiAqIDxhIFtyb3V0ZXJMaW5rXT1cIlsnL3VzZXInXVwiPmxpbmsgdG8gdXNlciBjb21wb25lbnQ8L2E+XG4gKiBgYGBcbiAqXG4gKiBSb3V0ZXJMaW5rIGV4cGVjdHMgdGhlIHZhbHVlIHRvIGJlIGFuIGFycmF5IG9mIHBhdGggc2VnbWVudHMsIGZvbGxvd2VkIGJ5IHRoZSBwYXJhbXNcbiAqIGZvciB0aGF0IGxldmVsIG9mIHJvdXRpbmcuIEZvciBpbnN0YW5jZSBgWycvdGVhbScsIHt0ZWFtSWQ6IDF9LCAndXNlcicsIHt1c2VySWQ6IDJ9XWBcbiAqIG1lYW5zIHRoYXQgd2Ugd2FudCB0byBnZW5lcmF0ZSBhIGxpbmsgdG8gYC90ZWFtO3RlYW1JZD0xL3VzZXI7dXNlcklkPTJgLlxuICpcbiAqIFRoZSBmaXJzdCBzZWdtZW50IG5hbWUgY2FuIGJlIHByZXBlbmRlZCB3aXRoIGAvYCwgYC4vYCwgb3IgYC4uL2AuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgL2AsIHRoZSByb3V0ZXIgd2lsbCBsb29rIHVwIHRoZSByb3V0ZSBmcm9tIHRoZSByb290IG9mIHRoZSBhcHAuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgLi9gLCBvciBkb2Vzbid0IGJlZ2luIHdpdGggYSBzbGFzaCwgdGhlIHJvdXRlciB3aWxsXG4gKiBpbnN0ZWFkIGxvb2sgaW4gdGhlIGN1cnJlbnQgY29tcG9uZW50J3MgY2hpbGRyZW4gZm9yIHRoZSByb3V0ZS5cbiAqIEFuZCBpZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgLi4vYCwgdGhlIHJvdXRlciB3aWxsIGdvIHVwIG9uZSBsZXZlbC5cbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbcm91dGVyTGlua10nfSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJMaW5rIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdGFyZ2V0OiBzdHJpbmc7XG4gIHByaXZhdGUgY29tbWFuZHM6IGFueVtdID0gW107XG4gIEBJbnB1dCgpIHF1ZXJ5UGFyYW1zOiB7W2s6IHN0cmluZ106IGFueX07XG4gIEBJbnB1dCgpIGZyYWdtZW50OiBzdHJpbmc7XG5cbiAgLy8gdGhlIHVybCBkaXNwbGF5ZWQgb24gdGhlIGFuY2hvciBlbGVtZW50LlxuICBASG9zdEJpbmRpbmcoKSBocmVmOiBzdHJpbmc7XG5cbiAgdXJsVHJlZTogVXJsVHJlZTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgcHJpdmF0ZSBsb2NhdGlvblN0cmF0ZWd5OiBMb2NhdGlvblN0cmF0ZWd5KSB7fVxuXG4gIEBJbnB1dCgpXG4gIHNldCByb3V0ZXJMaW5rKGRhdGE6IGFueVtdfHN0cmluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICB0aGlzLmNvbW1hbmRzID0gPGFueT5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbW1hbmRzID0gW2RhdGFdO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHt9KTogYW55IHsgdGhpcy51cGRhdGVUYXJnZXRVcmxBbmRIcmVmKCk7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LmJ1dHRvbicsICckZXZlbnQuY3RybEtleScsICckZXZlbnQubWV0YUtleSddKVxuICBvbkNsaWNrKGJ1dHRvbjogbnVtYmVyLCBjdHJsS2V5OiBib29sZWFuLCBtZXRhS2V5OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKGJ1dHRvbiAhPT0gMCB8fCBjdHJsS2V5IHx8IG1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy50YXJnZXQgPT09ICdzdHJpbmcnICYmIHRoaXMudGFyZ2V0ICE9ICdfc2VsZicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodGhpcy51cmxUcmVlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVRhcmdldFVybEFuZEhyZWYoKTogdm9pZCB7XG4gICAgdGhpcy51cmxUcmVlID0gdGhpcy5yb3V0ZXIuY3JlYXRlVXJsVHJlZShcbiAgICAgICAgdGhpcy5jb21tYW5kcyxcbiAgICAgICAge3JlbGF0aXZlVG86IHRoaXMucm91dGUsIHF1ZXJ5UGFyYW1zOiB0aGlzLnF1ZXJ5UGFyYW1zLCBmcmFnbWVudDogdGhpcy5mcmFnbWVudH0pO1xuICAgIGlmICh0aGlzLnVybFRyZWUpIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5wcmVwYXJlRXh0ZXJuYWxVcmwodGhpcy5yb3V0ZXIuc2VyaWFsaXplVXJsKHRoaXMudXJsVHJlZSkpO1xuICAgIH1cbiAgfVxufVxuIl19

/***/ },

/***/ 380:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(360);
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(385);
	__webpack_require__(387);
	__webpack_require__(389);
	__webpack_require__(391);
	__webpack_require__(392);
	var core_1 = __webpack_require__(5);
	var Observable_1 = __webpack_require__(38);
	var Subject_1 = __webpack_require__(37);
	var of_1 = __webpack_require__(351);
	var apply_redirects_1 = __webpack_require__(399);
	var config_1 = __webpack_require__(404);
	var create_router_state_1 = __webpack_require__(405);
	var create_url_tree_1 = __webpack_require__(409);
	var recognize_1 = __webpack_require__(410);
	var resolve_1 = __webpack_require__(411);
	var router_outlet_map_1 = __webpack_require__(416);
	var router_state_1 = __webpack_require__(407);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var NavigationStart = (function () {
	    function NavigationStart(id, url) {
	        this.id = id;
	        this.url = url;
	    }
	    NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
	    return NavigationStart;
	}());
	exports.NavigationStart = NavigationStart;
	var NavigationEnd = (function () {
	    function NavigationEnd(id, url, urlAfterRedirects) {
	        this.id = id;
	        this.url = url;
	        this.urlAfterRedirects = urlAfterRedirects;
	    }
	    NavigationEnd.prototype.toString = function () {
	        return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
	    };
	    return NavigationEnd;
	}());
	exports.NavigationEnd = NavigationEnd;
	var NavigationCancel = (function () {
	    function NavigationCancel(id, url) {
	        this.id = id;
	        this.url = url;
	    }
	    NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
	    return NavigationCancel;
	}());
	exports.NavigationCancel = NavigationCancel;
	var NavigationError = (function () {
	    function NavigationError(id, url, error) {
	        this.id = id;
	        this.url = url;
	        this.error = error;
	    }
	    NavigationError.prototype.toString = function () {
	        return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
	    };
	    return NavigationError;
	}());
	exports.NavigationError = NavigationError;
	var RoutesRecognized = (function () {
	    function RoutesRecognized(id, url, urlAfterRedirects, state) {
	        this.id = id;
	        this.url = url;
	        this.urlAfterRedirects = urlAfterRedirects;
	        this.state = state;
	    }
	    RoutesRecognized.prototype.toString = function () {
	        return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
	    };
	    return RoutesRecognized;
	}());
	exports.RoutesRecognized = RoutesRecognized;
	var Router = (function () {
	    function Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, config) {
	        this.rootComponentType = rootComponentType;
	        this.resolver = resolver;
	        this.urlSerializer = urlSerializer;
	        this.outletMap = outletMap;
	        this.location = location;
	        this.injector = injector;
	        this.navigationId = 0;
	        this.resetConfig(config);
	        this.routerEvents = new Subject_1.Subject();
	        this.currentUrlTree = url_tree_1.createEmptyUrlTree();
	        this.currentRouterState = router_state_1.createEmptyState(this.currentUrlTree, this.rootComponentType);
	    }
	    Router.prototype.initialNavigation = function () {
	        this.setUpLocationChangeListener();
	        this.navigateByUrl(this.location.path());
	    };
	    Object.defineProperty(Router.prototype, "routerState", {
	        get: function () { return this.currentRouterState; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Router.prototype, "url", {
	        get: function () { return this.serializeUrl(this.currentUrlTree); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Router.prototype, "events", {
	        get: function () { return this.routerEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Router.prototype.resetConfig = function (config) {
	        config_1.validateConfig(config);
	        this.config = config;
	    };
	    Router.prototype.dispose = function () { this.locationSubscription.unsubscribe(); };
	    Router.prototype.createUrlTree = function (commands, _a) {
	        var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment;
	        var a = relativeTo ? relativeTo : this.routerState.root;
	        return create_url_tree_1.createUrlTree(a, this.currentUrlTree, commands, queryParams, fragment);
	    };
	    Router.prototype.navigateByUrl = function (url) {
	        if (url instanceof url_tree_1.UrlTree) {
	            return this.scheduleNavigation(url, false);
	        }
	        else {
	            var urlTree = this.urlSerializer.parse(url);
	            return this.scheduleNavigation(urlTree, false);
	        }
	    };
	    Router.prototype.navigate = function (commands, extras) {
	        if (extras === void 0) { extras = {}; }
	        return this.scheduleNavigation(this.createUrlTree(commands, extras), false);
	    };
	    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
	    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
	    Router.prototype.scheduleNavigation = function (url, preventPushState) {
	        var _this = this;
	        var id = ++this.navigationId;
	        this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
	        return Promise.resolve().then(function (_) { return _this.runNavigate(url, preventPushState, id); });
	    };
	    Router.prototype.setUpLocationChangeListener = function () {
	        var _this = this;
	        this.locationSubscription = this.location.subscribe(function (change) {
	            return _this.scheduleNavigation(_this.urlSerializer.parse(change['url']), change['pop']);
	        });
	    };
	    Router.prototype.runNavigate = function (url, preventPushState, id) {
	        var _this = this;
	        if (id !== this.navigationId) {
	            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
	            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url)));
	            return Promise.resolve(false);
	        }
	        return new Promise(function (resolvePromise, rejectPromise) {
	            var updatedUrl;
	            var state;
	            apply_redirects_1.applyRedirects(url, _this.config)
	                .mergeMap(function (u) {
	                updatedUrl = u;
	                return recognize_1.recognize(_this.rootComponentType, _this.config, updatedUrl, _this.serializeUrl(updatedUrl));
	            })
	                .mergeMap(function (newRouterStateSnapshot) {
	                _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(updatedUrl), newRouterStateSnapshot));
	                return resolve_1.resolve(_this.resolver, newRouterStateSnapshot);
	            })
	                .map(function (routerStateSnapshot) {
	                return create_router_state_1.createRouterState(routerStateSnapshot, _this.currentRouterState);
	            })
	                .map(function (newState) {
	                state = newState;
	            })
	                .mergeMap(function (_) {
	                return new GuardChecks(state.snapshot, _this.currentRouterState.snapshot, _this.injector)
	                    .check(_this.outletMap);
	            })
	                .forEach(function (shouldActivate) {
	                if (!shouldActivate || id !== _this.navigationId) {
	                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url)));
	                    return Promise.resolve(false);
	                }
	                new ActivateRoutes(state, _this.currentRouterState).activate(_this.outletMap);
	                _this.currentUrlTree = updatedUrl;
	                _this.currentRouterState = state;
	                if (!preventPushState) {
	                    var path = _this.urlSerializer.serialize(updatedUrl);
	                    if (_this.location.isCurrentPathEqualTo(path)) {
	                        _this.location.replaceState(path);
	                    }
	                    else {
	                        _this.location.go(path);
	                    }
	                }
	                return Promise.resolve(true);
	            })
	                .then(function () {
	                _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(updatedUrl)));
	                resolvePromise(true);
	            }, function (e) {
	                _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
	                rejectPromise(e);
	            });
	        });
	    };
	    return Router;
	}());
	exports.Router = Router;
	var CanActivate = (function () {
	    function CanActivate(route) {
	        this.route = route;
	    }
	    return CanActivate;
	}());
	var CanDeactivate = (function () {
	    function CanDeactivate(component, route) {
	        this.component = component;
	        this.route = route;
	    }
	    return CanDeactivate;
	}());
	var GuardChecks = (function () {
	    function GuardChecks(future, curr, injector) {
	        this.future = future;
	        this.curr = curr;
	        this.injector = injector;
	        this.checks = [];
	    }
	    GuardChecks.prototype.check = function (parentOutletMap) {
	        var _this = this;
	        var futureRoot = this.future._root;
	        var currRoot = this.curr ? this.curr._root : null;
	        this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap);
	        if (this.checks.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(this.checks)
	            .map(function (s) {
	            if (s instanceof CanActivate) {
	                return _this.runCanActivate(s.route);
	            }
	            else if (s instanceof CanDeactivate) {
	                return _this.runCanDeactivate(s.component, s.route);
	            }
	            else {
	                throw new Error('Cannot be reached');
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    GuardChecks.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap) {
	        var _this = this;
	        var prevChildren = nodeChildrenAsMap(currNode);
	        futureNode.children.forEach(function (c) {
	            _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap);
	            delete prevChildren[c.value.outlet];
	        });
	        collection_1.forEach(prevChildren, function (v, k) { return _this.deactivateOutletAndItChildren(v, outletMap._outlets[k]); });
	    };
	    GuardChecks.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap) {
	        var future = futureNode.value;
	        var curr = currNode ? currNode.value : null;
	        var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
	        if (curr && future._routeConfig === curr._routeConfig) {
	            if (!collection_1.shallowEqual(future.params, curr.params)) {
	                this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(future));
	            }
	            this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null);
	        }
	        else {
	            this.deactivateOutletAndItChildren(curr, outlet);
	            this.checks.push(new CanActivate(future));
	            this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null);
	        }
	    };
	    GuardChecks.prototype.deactivateOutletAndItChildren = function (route, outlet) {
	        var _this = this;
	        if (outlet && outlet.isActivated) {
	            collection_1.forEach(outlet.outletMap._outlets, function (v) {
	                if (v.isActivated) {
	                    _this.deactivateOutletAndItChildren(v.activatedRoute.snapshot, v);
	                }
	            });
	            this.checks.push(new CanDeactivate(outlet.component, route));
	        }
	    };
	    GuardChecks.prototype.runCanActivate = function (future) {
	        var _this = this;
	        var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
	        if (!canActivate || canActivate.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(canActivate)
	            .map(function (c) {
	            var guard = _this.injector.get(c);
	            if (guard.canActivate) {
	                return wrapIntoObservable(guard.canActivate(future, _this.future));
	            }
	            else {
	                return wrapIntoObservable(guard(future, _this.future));
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    GuardChecks.prototype.runCanDeactivate = function (component, curr) {
	        var _this = this;
	        var canDeactivate = curr._routeConfig ? curr._routeConfig.canDeactivate : null;
	        if (!canDeactivate || canDeactivate.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(canDeactivate)
	            .map(function (c) {
	            var guard = _this.injector.get(c);
	            if (guard.canDeactivate) {
	                return wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
	            }
	            else {
	                return wrapIntoObservable(guard(component, curr, _this.curr));
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    return GuardChecks;
	}());
	function wrapIntoObservable(value) {
	    if (value instanceof Observable_1.Observable) {
	        return value;
	    }
	    else {
	        return of_1.of(value);
	    }
	}
	var ActivateRoutes = (function () {
	    function ActivateRoutes(futureState, currState) {
	        this.futureState = futureState;
	        this.currState = currState;
	    }
	    ActivateRoutes.prototype.activate = function (parentOutletMap) {
	        var futureRoot = this.futureState._root;
	        var currRoot = this.currState ? this.currState._root : null;
	        pushQueryParamsAndFragment(this.futureState);
	        this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
	    };
	    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
	        var _this = this;
	        var prevChildren = nodeChildrenAsMap(currNode);
	        futureNode.children.forEach(function (c) {
	            _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
	            delete prevChildren[c.value.outlet];
	        });
	        collection_1.forEach(prevChildren, function (v, k) { return _this.deactivateOutletAndItChildren(outletMap._outlets[k]); });
	    };
	    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
	        var future = futureNode.value;
	        var curr = currNode ? currNode.value : null;
	        var outlet = getOutlet(parentOutletMap, futureNode.value);
	        if (future === curr) {
	            router_state_1.advanceActivatedRoute(future);
	            this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
	        }
	        else {
	            this.deactivateOutletAndItChildren(outlet);
	            var outletMap = new router_outlet_map_1.RouterOutletMap();
	            this.activateNewRoutes(outletMap, future, outlet);
	            this.activateChildRoutes(futureNode, null, outletMap);
	        }
	    };
	    ActivateRoutes.prototype.activateNewRoutes = function (outletMap, future, outlet) {
	        var resolved = core_1.ReflectiveInjector.resolve([
	            { provide: router_state_1.ActivatedRoute, useValue: future },
	            { provide: router_outlet_map_1.RouterOutletMap, useValue: outletMap }
	        ]);
	        router_state_1.advanceActivatedRoute(future);
	        outlet.activate(future._futureSnapshot._resolvedComponentFactory, future, resolved, outletMap);
	    };
	    ActivateRoutes.prototype.deactivateOutletAndItChildren = function (outlet) {
	        var _this = this;
	        if (outlet && outlet.isActivated) {
	            collection_1.forEach(outlet.outletMap._outlets, function (v) { return _this.deactivateOutletAndItChildren(v); });
	            outlet.deactivate();
	        }
	    };
	    return ActivateRoutes;
	}());
	function pushQueryParamsAndFragment(state) {
	    if (!collection_1.shallowEqual(state.snapshot.queryParams, state.queryParams.value)) {
	        state.queryParams.next(state.snapshot.queryParams);
	    }
	    if (state.snapshot.fragment !== state.fragment.value) {
	        state.fragment.next(state.snapshot.fragment);
	    }
	}
	function nodeChildrenAsMap(node) {
	    return node ? node.children.reduce(function (m, c) {
	        m[c.value.outlet] = c;
	        return m;
	    }, {}) : {};
	}
	function getOutlet(outletMap, route) {
	    var outlet = outletMap._outlets[route.outlet];
	    if (!outlet) {
	        var componentName = route.component.name;
	        if (route.outlet === shared_1.PRIMARY_OUTLET) {
	            throw new Error("Cannot find primary outlet to load '" + componentName + "'");
	        }
	        else {
	            throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
	        }
	    }
	    return outlet;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 399:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var of_1 = __webpack_require__(351);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var NoMatch = (function () {
	    function NoMatch(segment) {
	        if (segment === void 0) { segment = null; }
	        this.segment = segment;
	    }
	    return NoMatch;
	}());
	var GlobalRedirect = (function () {
	    function GlobalRedirect(paths) {
	        this.paths = paths;
	    }
	    return GlobalRedirect;
	}());
	function applyRedirects(urlTree, config) {
	    try {
	        return createUrlTree(urlTree, expandSegment(config, urlTree.root, shared_1.PRIMARY_OUTLET));
	    }
	    catch (e) {
	        if (e instanceof GlobalRedirect) {
	            return createUrlTree(urlTree, new url_tree_1.UrlSegment([], (_a = {}, _a[shared_1.PRIMARY_OUTLET] = new url_tree_1.UrlSegment(e.paths, {}), _a)));
	        }
	        else if (e instanceof NoMatch) {
	            return new Observable_1.Observable(function (obs) {
	                return obs.error(new Error("Cannot match any routes: '" + e.segment + "'"));
	            });
	        }
	        else {
	            return new Observable_1.Observable(function (obs) { return obs.error(e); });
	        }
	    }
	    var _a;
	}
	exports.applyRedirects = applyRedirects;
	function createUrlTree(urlTree, root) {
	    return of_1.of(new url_tree_1.UrlTree(root, urlTree.queryParams, urlTree.fragment));
	}
	function expandSegment(routes, segment, outlet) {
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return new url_tree_1.UrlSegment([], expandSegmentChildren(routes, segment));
	    }
	    else {
	        return expandPathsWithParams(segment, routes, segment.pathsWithParams, outlet, true);
	    }
	}
	function expandSegmentChildren(routes, segment) {
	    return url_tree_1.mapChildren(segment, function (child, childOutlet) { return expandSegment(routes, child, childOutlet); });
	}
	function expandPathsWithParams(segment, routes, paths, outlet, allowRedirects) {
	    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
	        var r = routes_1[_i];
	        try {
	            return expandPathsWithParamsAgainstRoute(segment, routes, r, paths, outlet, allowRedirects);
	        }
	        catch (e) {
	            if (!(e instanceof NoMatch))
	                throw e;
	        }
	    }
	    throw new NoMatch(segment);
	}
	function expandPathsWithParamsAgainstRoute(segment, routes, route, paths, outlet, allowRedirects) {
	    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== outlet)
	        throw new NoMatch();
	    if (route.redirectTo && !allowRedirects)
	        throw new NoMatch();
	    if (route.redirectTo) {
	        return expandPathsWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet);
	    }
	    else {
	        return matchPathsWithParamsAgainstRoute(segment, route, paths);
	    }
	}
	function expandPathsWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet) {
	    if (route.path === '**') {
	        return expandWildCardWithParamsAgainstRouteUsingRedirect(route);
	    }
	    else {
	        return expandRegularPathWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet);
	    }
	}
	function expandWildCardWithParamsAgainstRouteUsingRedirect(route) {
	    var newPaths = applyRedirectCommands([], route.redirectTo, {});
	    if (route.redirectTo.startsWith('/')) {
	        throw new GlobalRedirect(newPaths);
	    }
	    else {
	        return new url_tree_1.UrlSegment(newPaths, {});
	    }
	}
	function expandRegularPathWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet) {
	    var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
	    var newPaths = applyRedirectCommands(consumedPaths, route.redirectTo, positionalParamSegments);
	    if (route.redirectTo.startsWith('/')) {
	        throw new GlobalRedirect(newPaths);
	    }
	    else {
	        return expandPathsWithParams(segment, routes, newPaths.concat(paths.slice(lastChild)), outlet, false);
	    }
	}
	function matchPathsWithParamsAgainstRoute(segment, route, paths) {
	    if (route.path === '**') {
	        return new url_tree_1.UrlSegment(paths, {});
	    }
	    else {
	        var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, lastChild = _a.lastChild;
	        var childConfig = route.children ? route.children : [];
	        var slicedPath = paths.slice(lastChild);
	        if (childConfig.length === 0 && slicedPath.length === 0) {
	            return new url_tree_1.UrlSegment(consumedPaths, {});
	        }
	        else if (slicedPath.length === 0 && Object.keys(segment.children).length > 0) {
	            var children = expandSegmentChildren(childConfig, segment);
	            return new url_tree_1.UrlSegment(consumedPaths, children);
	        }
	        else {
	            var cs = expandPathsWithParams(segment, childConfig, slicedPath, shared_1.PRIMARY_OUTLET, true);
	            return new url_tree_1.UrlSegment(consumedPaths.concat(cs.pathsWithParams), cs.children);
	        }
	    }
	}
	function match(segment, route, paths) {
	    if (route.path === '') {
	        if (route.terminal && (Object.keys(segment.children).length > 0 || paths.length > 0)) {
	            throw new NoMatch();
	        }
	        else {
	            return { consumedPaths: [], lastChild: 0, positionalParamSegments: {} };
	        }
	    }
	    var path = route.path;
	    var parts = path.split('/');
	    var positionalParamSegments = {};
	    var consumedPaths = [];
	    var currentIndex = 0;
	    for (var i = 0; i < parts.length; ++i) {
	        if (currentIndex >= paths.length)
	            throw new NoMatch();
	        var current = paths[currentIndex];
	        var p = parts[i];
	        var isPosParam = p.startsWith(':');
	        if (!isPosParam && p !== current.path)
	            throw new NoMatch();
	        if (isPosParam) {
	            positionalParamSegments[p.substring(1)] = current;
	        }
	        consumedPaths.push(current);
	        currentIndex++;
	    }
	    if (route.terminal && (Object.keys(segment.children).length > 0 || currentIndex < paths.length)) {
	        throw new NoMatch();
	    }
	    return { consumedPaths: consumedPaths, lastChild: currentIndex, positionalParamSegments: positionalParamSegments };
	}
	function applyRedirectCommands(paths, redirectTo, posParams) {
	    if (redirectTo.startsWith('/')) {
	        var parts = redirectTo.substring(1).split('/');
	        return createPaths(redirectTo, parts, paths, posParams);
	    }
	    else {
	        var parts = redirectTo.split('/');
	        return createPaths(redirectTo, parts, paths, posParams);
	    }
	}
	function createPaths(redirectTo, parts, segments, posParams) {
	    return parts.map(function (p) { return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) :
	        findOrCreatePath(p, segments); });
	}
	function findPosParam(part, posParams, redirectTo) {
	    var paramName = part.substring(1);
	    var pos = posParams[paramName];
	    if (!pos)
	        throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
	    return pos;
	}
	function findOrCreatePath(part, paths) {
	    var matchingIndex = paths.findIndex(function (s) { return s.path === part; });
	    if (matchingIndex > -1) {
	        var r = paths[matchingIndex];
	        paths.splice(matchingIndex);
	        return r;
	    }
	    else {
	        return new url_tree_1.UrlPathWithParams(part, {});
	    }
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 400:
/***/ function(module, exports) {

	"use strict";
	exports.PRIMARY_OUTLET = 'PRIMARY_OUTLET';
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NoYXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSWEsc0JBQWMsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTmFtZSBvZiB0aGUgcHJpbWFyeSBvdXRsZXQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgUFJJTUFSWV9PVVRMRVQgPSAnUFJJTUFSWV9PVVRMRVQnO1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBwYXJhbWV0ZXJzLlxuICovXG5leHBvcnQgdHlwZSBQYXJhbXMgPSB7XG4gIFtrZXk6IHN0cmluZ106IGFueVxufTtcbiJdfQ==

/***/ },

/***/ 401:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_serializer_1 = __webpack_require__(402);
	var collection_1 = __webpack_require__(403);
	function createEmptyUrlTree() {
	    return new UrlTree(new UrlSegment([], {}), {}, null);
	}
	exports.createEmptyUrlTree = createEmptyUrlTree;
	function containsTree(container, containee, exact) {
	    if (exact) {
	        return equalSegments(container.root, containee.root);
	    }
	    else {
	        return containsSegment(container.root, containee.root);
	    }
	}
	exports.containsTree = containsTree;
	function equalSegments(container, containee) {
	    if (!equalPath(container.pathsWithParams, containee.pathsWithParams))
	        return false;
	    if (Object.keys(container.children).length !== Object.keys(containee.children).length)
	        return false;
	    for (var c in containee.children) {
	        if (!container.children[c])
	            return false;
	        if (!equalSegments(container.children[c], containee.children[c]))
	            return false;
	    }
	    return true;
	}
	function containsSegment(container, containee) {
	    return containsSegmentHelper(container, containee, containee.pathsWithParams);
	}
	function containsSegmentHelper(container, containee, containeePaths) {
	    if (container.pathsWithParams.length > containeePaths.length) {
	        var current = container.pathsWithParams.slice(0, containeePaths.length);
	        if (!equalPath(current, containeePaths))
	            return false;
	        if (Object.keys(containee.children).length > 0)
	            return false;
	        return true;
	    }
	    else if (container.pathsWithParams.length === containeePaths.length) {
	        if (!equalPath(container.pathsWithParams, containeePaths))
	            return false;
	        for (var c in containee.children) {
	            if (!container.children[c])
	                return false;
	            if (!containsSegment(container.children[c], containee.children[c]))
	                return false;
	        }
	        return true;
	    }
	    else {
	        var current = containeePaths.slice(0, container.pathsWithParams.length);
	        var next = containeePaths.slice(container.pathsWithParams.length);
	        if (!equalPath(container.pathsWithParams, current))
	            return false;
	        return containsSegmentHelper(container.children[shared_1.PRIMARY_OUTLET], containee, next);
	    }
	}
	var UrlTree = (function () {
	    function UrlTree(root, queryParams, fragment) {
	        this.root = root;
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	    }
	    UrlTree.prototype.toString = function () { return new url_serializer_1.DefaultUrlSerializer().serialize(this); };
	    return UrlTree;
	}());
	exports.UrlTree = UrlTree;
	var UrlSegment = (function () {
	    function UrlSegment(pathsWithParams, children) {
	        var _this = this;
	        this.pathsWithParams = pathsWithParams;
	        this.children = children;
	        this.parent = null;
	        collection_1.forEach(children, function (v, k) { return v.parent = _this; });
	    }
	    UrlSegment.prototype.toString = function () { return url_serializer_1.serializePaths(this); };
	    return UrlSegment;
	}());
	exports.UrlSegment = UrlSegment;
	var UrlPathWithParams = (function () {
	    function UrlPathWithParams(path, parameters) {
	        this.path = path;
	        this.parameters = parameters;
	    }
	    UrlPathWithParams.prototype.toString = function () { return url_serializer_1.serializePath(this); };
	    return UrlPathWithParams;
	}());
	exports.UrlPathWithParams = UrlPathWithParams;
	function equalPathsWithParams(a, b) {
	    if (a.length !== b.length)
	        return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i].path !== b[i].path)
	            return false;
	        if (!collection_1.shallowEqual(a[i].parameters, b[i].parameters))
	            return false;
	    }
	    return true;
	}
	exports.equalPathsWithParams = equalPathsWithParams;
	function equalPath(a, b) {
	    if (a.length !== b.length)
	        return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i].path !== b[i].path)
	            return false;
	    }
	    return true;
	}
	exports.equalPath = equalPath;
	function mapChildren(segment, fn) {
	    var newChildren = {};
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet === shared_1.PRIMARY_OUTLET) {
	            newChildren[childOutlet] = fn(child, childOutlet);
	        }
	    });
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet !== shared_1.PRIMARY_OUTLET) {
	            newChildren[childOutlet] = fn(child, childOutlet);
	        }
	    });
	    return newChildren;
	}
	exports.mapChildren = mapChildren;
	function mapChildrenIntoArray(segment, fn) {
	    var res = [];
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet === shared_1.PRIMARY_OUTLET) {
	            res = res.concat(fn(child, childOutlet));
	        }
	    });
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet !== shared_1.PRIMARY_OUTLET) {
	            res = res.concat(fn(child, childOutlet));
	        }
	    });
	    return res;
	}
	exports.mapChildrenIntoArray = mapChildrenIntoArray;
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 402:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var UrlSerializer = (function () {
	    function UrlSerializer() {
	    }
	    return UrlSerializer;
	}());
	exports.UrlSerializer = UrlSerializer;
	var DefaultUrlSerializer = (function () {
	    function DefaultUrlSerializer() {
	    }
	    DefaultUrlSerializer.prototype.parse = function (url) {
	        var p = new UrlParser(url);
	        return new url_tree_1.UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
	    };
	    DefaultUrlSerializer.prototype.serialize = function (tree) {
	        var segment = "/" + serializeSegment(tree.root, true);
	        var query = serializeQueryParams(tree.queryParams);
	        var fragment = tree.fragment !== null ? "#" + tree.fragment : '';
	        return "" + segment + query + fragment;
	    };
	    return DefaultUrlSerializer;
	}());
	exports.DefaultUrlSerializer = DefaultUrlSerializer;
	function serializePaths(segment) {
	    return segment.pathsWithParams.map(function (p) { return serializePath(p); }).join('/');
	}
	exports.serializePaths = serializePaths;
	function serializeSegment(segment, root) {
	    if (segment.children[shared_1.PRIMARY_OUTLET] && root) {
	        var primary = serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false);
	        var children_1 = [];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                children_1.push(k + ":" + serializeSegment(v, false));
	            }
	        });
	        if (children_1.length > 0) {
	            return primary + "(" + children_1.join('//') + ")";
	        }
	        else {
	            return "" + primary;
	        }
	    }
	    else if (segment.children[shared_1.PRIMARY_OUTLET] && !root) {
	        var children_2 = [serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false)];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                children_2.push(k + ":" + serializeSegment(v, false));
	            }
	        });
	        return serializePaths(segment) + "/(" + children_2.join('//') + ")";
	    }
	    else {
	        return serializePaths(segment);
	    }
	}
	function serializeChildren(segment) {
	    if (segment.children[shared_1.PRIMARY_OUTLET]) {
	        var primary = serializePaths(segment.children[shared_1.PRIMARY_OUTLET]);
	        var secondary_1 = [];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                secondary_1.push(k + ":" + serializePaths(v) + serializeChildren(v));
	            }
	        });
	        var secondaryStr = secondary_1.length > 0 ? "(" + secondary_1.join('//') + ")" : '';
	        var primaryChildren = serializeChildren(segment.children[shared_1.PRIMARY_OUTLET]);
	        var primaryChildrenStr = primaryChildren ? "/" + primaryChildren : '';
	        return "" + primary + secondaryStr + primaryChildrenStr;
	    }
	    else {
	        return '';
	    }
	}
	function serializePath(path) {
	    return "" + path.path + serializeParams(path.parameters);
	}
	exports.serializePath = serializePath;
	function serializeParams(params) {
	    return pairs(params).map(function (p) { return (";" + p.first + "=" + p.second); }).join('');
	}
	function serializeQueryParams(params) {
	    var strs = pairs(params).map(function (p) { return (p.first + "=" + p.second); });
	    return strs.length > 0 ? "?" + strs.join("&") : '';
	}
	var Pair = (function () {
	    function Pair(first, second) {
	        this.first = first;
	        this.second = second;
	    }
	    return Pair;
	}());
	function pairs(obj) {
	    var res = [];
	    for (var prop in obj) {
	        if (obj.hasOwnProperty(prop)) {
	            res.push(new Pair(prop, obj[prop]));
	        }
	    }
	    return res;
	}
	var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
	function matchPathWithParams(str) {
	    SEGMENT_RE.lastIndex = 0;
	    var match = SEGMENT_RE.exec(str);
	    return match ? match[0] : '';
	}
	var QUERY_PARAM_RE = /^[^=\?&#]+/;
	function matchQueryParams(str) {
	    QUERY_PARAM_RE.lastIndex = 0;
	    var match = SEGMENT_RE.exec(str);
	    return match ? match[0] : '';
	}
	var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
	function matchUrlQueryParamValue(str) {
	    QUERY_PARAM_VALUE_RE.lastIndex = 0;
	    var match = QUERY_PARAM_VALUE_RE.exec(str);
	    return match ? match[0] : '';
	}
	var UrlParser = (function () {
	    function UrlParser(remaining) {
	        this.remaining = remaining;
	    }
	    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
	    UrlParser.prototype.capture = function (str) {
	        if (!this.remaining.startsWith(str)) {
	            throw new Error("Expected \"" + str + "\".");
	        }
	        this.remaining = this.remaining.substring(str.length);
	    };
	    UrlParser.prototype.parseRootSegment = function () {
	        if (this.remaining === '' || this.remaining === '/') {
	            return new url_tree_1.UrlSegment([], {});
	        }
	        else {
	            return new url_tree_1.UrlSegment([], this.parseSegmentChildren());
	        }
	    };
	    UrlParser.prototype.parseSegmentChildren = function () {
	        if (this.remaining.length == 0) {
	            return {};
	        }
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var paths = [this.parsePathWithParams()];
	        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
	            this.capture('/');
	            paths.push(this.parsePathWithParams());
	        }
	        var children = {};
	        if (this.peekStartsWith('/(')) {
	            this.capture('/');
	            children = this.parseParens(true);
	        }
	        var res = {};
	        if (this.peekStartsWith('(')) {
	            res = this.parseParens(false);
	        }
	        res[shared_1.PRIMARY_OUTLET] = new url_tree_1.UrlSegment(paths, children);
	        return res;
	    };
	    UrlParser.prototype.parsePathWithParams = function () {
	        var path = matchPathWithParams(this.remaining);
	        this.capture(path);
	        var matrixParams = {};
	        if (this.peekStartsWith(';')) {
	            matrixParams = this.parseMatrixParams();
	        }
	        return new url_tree_1.UrlPathWithParams(path, matrixParams);
	    };
	    UrlParser.prototype.parseQueryParams = function () {
	        var params = {};
	        if (this.peekStartsWith('?')) {
	            this.capture('?');
	            this.parseQueryParam(params);
	            while (this.remaining.length > 0 && this.peekStartsWith('&')) {
	                this.capture('&');
	                this.parseQueryParam(params);
	            }
	        }
	        return params;
	    };
	    UrlParser.prototype.parseFragment = function () {
	        if (this.peekStartsWith('#')) {
	            return this.remaining.substring(1);
	        }
	        else {
	            return null;
	        }
	    };
	    UrlParser.prototype.parseMatrixParams = function () {
	        var params = {};
	        while (this.remaining.length > 0 && this.peekStartsWith(';')) {
	            this.capture(';');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseParam = function (params) {
	        var key = matchPathWithParams(this.remaining);
	        if (!key) {
	            return;
	        }
	        this.capture(key);
	        var value = 'true';
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchPathWithParams(this.remaining);
	            if (valueMatch) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseQueryParam = function (params) {
	        var key = matchQueryParams(this.remaining);
	        if (!key) {
	            return;
	        }
	        this.capture(key);
	        var value = 'true';
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchUrlQueryParamValue(this.remaining);
	            if (valueMatch) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseParens = function (allowPrimary) {
	        var segments = {};
	        this.capture('(');
	        while (!this.peekStartsWith(')') && this.remaining.length > 0) {
	            var path = matchPathWithParams(this.remaining);
	            var outletName = void 0;
	            if (path.indexOf(':') > -1) {
	                outletName = path.substr(0, path.indexOf(':'));
	                this.capture(outletName);
	                this.capture(':');
	            }
	            else if (allowPrimary) {
	                outletName = shared_1.PRIMARY_OUTLET;
	            }
	            var children = this.parseSegmentChildren();
	            segments[outletName] = Object.keys(children).length === 1 ? children[shared_1.PRIMARY_OUTLET] :
	                new url_tree_1.UrlSegment([], children);
	            if (this.peekStartsWith('//')) {
	                this.capture('//');
	            }
	        }
	        this.capture(')');
	        return segments;
	    };
	    return UrlParser;
	}());
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXJsX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUE2QixVQUFVLENBQUMsQ0FBQTtBQUN4Qyx5QkFBcUQsWUFBWSxDQUFDLENBQUE7QUFDbEUsMkJBQXNCLG9CQUFvQixDQUFDLENBQUE7QUFPM0M7SUFBQTtJQVVBLENBQUM7SUFBRCxvQkFBQztBQUFELENBQUMsQUFWRCxJQVVDO0FBVnFCLHFCQUFhLGdCQVVsQyxDQUFBO0FBS0Q7SUFBQTtJQVlBLENBQUM7SUFYQyxvQ0FBSyxHQUFMLFVBQU0sR0FBVztRQUNmLElBQU0sQ0FBQyxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLGtCQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELHdDQUFTLEdBQVQsVUFBVSxJQUFhO1FBQ3JCLElBQU0sT0FBTyxHQUFHLE1BQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUcsQ0FBQztRQUN4RCxJQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDckQsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLEdBQUcsTUFBSSxJQUFJLENBQUMsUUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNuRSxNQUFNLENBQUMsS0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLFFBQVUsQ0FBQztJQUN6QyxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBWkQsSUFZQztBQVpZLDRCQUFvQix1QkFZaEMsQ0FBQTtBQUVELHdCQUErQixPQUFtQjtJQUNoRCxNQUFNLENBQUMsT0FB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QyxBQTNKRCxJQTJKQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UFJJTUFSWV9PVVRMRVR9IGZyb20gJy4vc2hhcmVkJztcbmltcG9ydCB7VXJsUGF0aFdpdGhQYXJhbXMsIFVybFNlZ21lbnQsIFVybFRyZWV9IGZyb20gJy4vdXJsX3RyZWUnO1xuaW1wb3J0IHtmb3JFYWNofSBmcm9tICcuL3V0aWxzL2NvbGxlY3Rpb24nO1xuXG5cblxuLyoqXG4gKiBEZWZpbmVzIGEgd2F5IHRvIHNlcmlhbGl6ZS9kZXNlcmlhbGl6ZSBhIHVybCB0cmVlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVXJsU2VyaWFsaXplciB7XG4gIC8qKlxuICAgKiBQYXJzZSBhIHVybCBpbnRvIGEge0BMaW5rIFVybFRyZWV9XG4gICAqL1xuICBhYnN0cmFjdCBwYXJzZSh1cmw6IHN0cmluZyk6IFVybFRyZWU7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEge0BMaW5rIFVybFRyZWV9IGludG8gYSB1cmxcbiAgICovXG4gIGFic3RyYWN0IHNlcmlhbGl6ZSh0cmVlOiBVcmxUcmVlKTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc2VyaWFsaXphdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRVcmxTZXJpYWxpemVyIGltcGxlbWVudHMgVXJsU2VyaWFsaXplciB7XG4gIHBhcnNlKHVybDogc3RyaW5nKTogVXJsVHJlZSB7XG4gICAgY29uc3QgcCA9IG5ldyBVcmxQYXJzZXIodXJsKTtcbiAgICByZXR1cm4gbmV3IFVybFRyZWUocC5wYXJzZVJvb3RTZWdtZW50KCksIHAucGFyc2VRdWVyeVBhcmFtcygpLCBwLnBhcnNlRnJhZ21lbnQoKSk7XG4gIH1cblxuICBzZXJpYWxpemUodHJlZTogVXJsVHJlZSk6IHN0cmluZyB7XG4gICAgY29uc3Qgc2VnbWVudCA9IGAvJHtzZXJpYWxpemVTZWdtZW50KHRyZWUucm9vdCwgdHJ1ZSl9YDtcbiAgICBjb25zdCBxdWVyeSA9IHNlcmlhbGl6ZVF1ZXJ5UGFyYW1zKHRyZWUucXVlcnlQYXJhbXMpO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdHJlZS5mcmFnbWVudCAhPT0gbnVsbCA/IGAjJHt0cmVlLmZyYWdtZW50fWAgOiAnJztcbiAgICByZXR1cm4gYCR7c2VnbWVudH0ke3F1ZXJ5fSR7ZnJhZ21lbnR9YDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUGF0aHMoc2VnbWVudDogVXJsU2VnbWVudCk6IHN0cmluZyB7XG4gIHJldHVybiBzZWdtZW50LnBhdGhzV2l0aFBhcmFtcy5tYXAocCA9PiBzZXJpYWxpemVQYXRoKHApKS5qb2luKCcvJyk7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVNlZ21lbnQoc2VnbWVudDogVXJsU2VnbWVudCwgcm9vdDogYm9vbGVhbik6IHN0cmluZyB7XG4gIGlmIChzZWdtZW50LmNoaWxkcmVuW1BSSU1BUllfT1VUTEVUXSAmJiByb290KSB7XG4gICAgY29uc3QgcHJpbWFyeSA9IHNlcmlhbGl6ZVNlZ21lbnQoc2VnbWVudC5jaGlsZHJlbltQUklNQVJZX09VVExFVF0sIGZhbHNlKTtcbiAgICBjb25zdCBjaGlsZHJlbjogc3RyaW5nW10gPSBbXTtcbiAgICBmb3JFYWNoKHNlZ21lbnQuY2hpbGRyZW4sICh2OiBVcmxTZWdtZW50LCBrOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChrICE9PSBQUklNQVJZX09VVExFVCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGAke2t9OiR7c2VyaWFsaXplU2VnbWVudCh2LCBmYWxzZSl9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBgJHtwcmltYXJ5fSgke2NoaWxkcmVuLmpvaW4oJy8vJyl9KWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtwcmltYXJ5fWA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNlZ21lbnQuY2hpbGRyZW5bUFJJTUFSWV9PVVRMRVRdICYmICFyb290KSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBbc2VyaWFsaXplU2VnbWVudChzZWdtZW50LmNoaWxkcmVuW1BSSU1BUllfT1VUTEVUXSwgZmFsc2UpXTtcbiAgICBmb3JFYWNoKHNlZ21lbnQuY2hpbGRyZW4sICh2OiBVcmxTZWdtZW50LCBrOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChrICE9PSBQUklNQVJZX09VVExFVCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGAke2t9OiR7c2VyaWFsaXplU2VnbWVudCh2LCBmYWxzZSl9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGAke3NlcmlhbGl6ZVBhdGhzKHNlZ21lbnQpfS8oJHtjaGlsZHJlbi5qb2luKCcvLycpfSlgO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZXJpYWxpemVQYXRocyhzZWdtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVDaGlsZHJlbihzZWdtZW50OiBVcmxTZWdtZW50KSB7XG4gIGlmIChzZWdtZW50LmNoaWxkcmVuW1BSSU1BUllfT1VUTEVUXSkge1xuICAgIGNvbnN0IHByaW1hcnkgPSBzZXJpYWxpemVQYXRocyhzZWdtZW50LmNoaWxkcmVuW1BSSU1BUllfT1VUTEVUXSk7XG5cbiAgICBjb25zdCBzZWNvbmRhcnk6IHN0cmluZ1tdID0gW107XG4gICAgZm9yRWFjaChzZWdtZW50LmNoaWxkcmVuLCAodjogVXJsU2VnbWVudCwgazogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoayAhPT0gUFJJTUFSWV9PVVRMRVQpIHtcbiAgICAgICAgc2Vjb25kYXJ5LnB1c2goYCR7a306JHtzZXJpYWxpemVQYXRocyh2KX0ke3NlcmlhbGl6ZUNoaWxkcmVuKHYpfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNlY29uZGFyeVN0ciA9IHNlY29uZGFyeS5sZW5ndGggPiAwID8gYCgke3NlY29uZGFyeS5qb2luKCcvLycpfSlgIDogJyc7XG4gICAgY29uc3QgcHJpbWFyeUNoaWxkcmVuID0gc2VyaWFsaXplQ2hpbGRyZW4oc2VnbWVudC5jaGlsZHJlbltQUklNQVJZX09VVExFVF0pO1xuICAgIGNvbnN0IHByaW1hcnlDaGlsZHJlblN0cjogc3RyaW5nID0gcHJpbWFyeUNoaWxkcmVuID8gYC8ke3ByaW1hcnlDaGlsZHJlbn1gIDogJyc7XG4gICAgcmV0dXJuIGAke3ByaW1hcnl9JHtzZWNvbmRhcnlTdHJ9JHtwcmltYXJ5Q2hpbGRyZW5TdHJ9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVBhdGgocGF0aDogVXJsUGF0aFdpdGhQYXJhbXMpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7cGF0aC5wYXRofSR7c2VyaWFsaXplUGFyYW1zKHBhdGgucGFyYW1ldGVycyl9YDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplUGFyYW1zKHBhcmFtczoge1trZXk6IHN0cmluZ106IHN0cmluZ30pOiBzdHJpbmcge1xuICByZXR1cm4gcGFpcnMocGFyYW1zKS5tYXAocCA9PiBgOyR7cC5maXJzdH09JHtwLnNlY29uZH1gKS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplUXVlcnlQYXJhbXMocGFyYW1zOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSk6IHN0cmluZyB7XG4gIGNvbnN0IHN0cnMgPSBwYWlycyhwYXJhbXMpLm1hcChwID0+IGAke3AuZmlyc3R9PSR7cC5zZWNvbmR9YCk7XG4gIHJldHVybiBzdHJzLmxlbmd0aCA+IDAgPyBgPyR7c3Rycy5qb2luKFwiJlwiKX1gIDogJyc7XG59XG5cbmNsYXNzIFBhaXI8QSwgQj4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZmlyc3Q6IEEsIHB1YmxpYyBzZWNvbmQ6IEIpIHt9XG59XG5mdW5jdGlvbiBwYWlyczxUPihvYmo6IHtba2V5OiBzdHJpbmddOiBUfSk6IFBhaXI8c3RyaW5nLCBUPltdIHtcbiAgY29uc3QgcmVzOiBQYWlyPHN0cmluZywgVD5bXSA9IFtdO1xuICBmb3IgKGxldCBwcm9wIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgIHJlcy5wdXNoKG5ldyBQYWlyPHN0cmluZywgVD4ocHJvcCwgb2JqW3Byb3BdKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmNvbnN0IFNFR01FTlRfUkUgPSAvXlteXFwvXFwoXFwpXFw/Oz0mI10rLztcbmZ1bmN0aW9uIG1hdGNoUGF0aFdpdGhQYXJhbXMoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBTRUdNRU5UX1JFLmxhc3RJbmRleCA9IDA7XG4gIGNvbnN0IG1hdGNoID0gU0VHTUVOVF9SRS5leGVjKHN0cik7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG59XG5cbmNvbnN0IFFVRVJZX1BBUkFNX1JFID0gL15bXj1cXD8mI10rLztcbmZ1bmN0aW9uIG1hdGNoUXVlcnlQYXJhbXMoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBRVUVSWV9QQVJBTV9SRS5sYXN0SW5kZXggPSAwO1xuICBjb25zdCBtYXRjaCA9IFNFR01FTlRfUkUuZXhlYyhzdHIpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xufVxuXG5jb25zdCBRVUVSWV9QQVJBTV9WQUxVRV9SRSA9IC9eW15cXD8mI10rLztcbmZ1bmN0aW9uIG1hdGNoVXJsUXVlcnlQYXJhbVZhbHVlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgUVVFUllfUEFSQU1fVkFMVUVfUkUubGFzdEluZGV4ID0gMDtcbiAgY29uc3QgbWF0Y2ggPSBRVUVSWV9QQVJBTV9WQUxVRV9SRS5leGVjKHN0cik7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG59XG5cbmNsYXNzIFVybFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVtYWluaW5nOiBzdHJpbmcpIHt9XG5cbiAgcGVla1N0YXJ0c1dpdGgoc3RyOiBzdHJpbmcpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMucmVtYWluaW5nLnN0YXJ0c1dpdGgoc3RyKTsgfVxuXG4gIGNhcHR1cmUoc3RyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMucmVtYWluaW5nLnN0YXJ0c1dpdGgoc3RyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBcIiR7c3RyfVwiLmApO1xuICAgIH1cbiAgICB0aGlzLnJlbWFpbmluZyA9IHRoaXMucmVtYWluaW5nLnN1YnN0cmluZyhzdHIubGVuZ3RoKTtcbiAgfVxuXG4gIHBhcnNlUm9vdFNlZ21lbnQoKTogVXJsU2VnbWVudCB7XG4gICAgaWYgKHRoaXMucmVtYWluaW5nID09PSAnJyB8fCB0aGlzLnJlbWFpbmluZyA9PT0gJy8nKSB7XG4gICAgICByZXR1cm4gbmV3IFVybFNlZ21lbnQoW10sIHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBVcmxTZWdtZW50KFtdLCB0aGlzLnBhcnNlU2VnbWVudENoaWxkcmVuKCkpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlU2VnbWVudENoaWxkcmVuKCk6IHtba2V5OiBzdHJpbmddOiBVcmxTZWdtZW50fSB7XG4gICAgaWYgKHRoaXMucmVtYWluaW5nLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgdGhpcy5jYXB0dXJlKCcvJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aHMgPSBbdGhpcy5wYXJzZVBhdGhXaXRoUGFyYW1zKCldO1xuXG4gICAgd2hpbGUgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8nKSAmJiAhdGhpcy5wZWVrU3RhcnRzV2l0aCgnLy8nKSAmJiAhdGhpcy5wZWVrU3RhcnRzV2l0aCgnLygnKSkge1xuICAgICAgdGhpcy5jYXB0dXJlKCcvJyk7XG4gICAgICBwYXRocy5wdXNoKHRoaXMucGFyc2VQYXRoV2l0aFBhcmFtcygpKTtcbiAgICB9XG5cbiAgICBsZXQgY2hpbGRyZW46IHtba2V5OiBzdHJpbmddOiBVcmxTZWdtZW50fSA9IHt9O1xuICAgIGlmICh0aGlzLnBlZWtTdGFydHNXaXRoKCcvKCcpKSB7XG4gICAgICB0aGlzLmNhcHR1cmUoJy8nKTtcbiAgICAgIGNoaWxkcmVuID0gdGhpcy5wYXJzZVBhcmVucyh0cnVlKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzOiB7W2tleTogc3RyaW5nXTogVXJsU2VnbWVudH0gPSB7fTtcbiAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnKCcpKSB7XG4gICAgICByZXMgPSB0aGlzLnBhcnNlUGFyZW5zKGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXNbUFJJTUFSWV9PVVRMRVRdID0gbmV3IFVybFNlZ21lbnQocGF0aHMsIGNoaWxkcmVuKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcGFyc2VQYXRoV2l0aFBhcmFtcygpOiBVcmxQYXRoV2l0aFBhcmFtcyB7XG4gICAgbGV0IHBhdGggPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICB0aGlzLmNhcHR1cmUocGF0aCk7XG4gICAgbGV0IG1hdHJpeFBhcmFtczoge1trZXk6IHN0cmluZ106IGFueX0gPSB7fTtcbiAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnOycpKSB7XG4gICAgICBtYXRyaXhQYXJhbXMgPSB0aGlzLnBhcnNlTWF0cml4UGFyYW1zKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVXJsUGF0aFdpdGhQYXJhbXMocGF0aCwgbWF0cml4UGFyYW1zKTtcbiAgfVxuXG4gIHBhcnNlUXVlcnlQYXJhbXMoKToge1trZXk6IHN0cmluZ106IGFueX0ge1xuICAgIGNvbnN0IHBhcmFtczoge1trZXk6IHN0cmluZ106IGFueX0gPSB7fTtcbiAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnPycpKSB7XG4gICAgICB0aGlzLmNhcHR1cmUoJz8nKTtcbiAgICAgIHRoaXMucGFyc2VRdWVyeVBhcmFtKHBhcmFtcyk7XG4gICAgICB3aGlsZSAodGhpcy5yZW1haW5pbmcubGVuZ3RoID4gMCAmJiB0aGlzLnBlZWtTdGFydHNXaXRoKCcmJykpIHtcbiAgICAgICAgdGhpcy5jYXB0dXJlKCcmJyk7XG4gICAgICAgIHRoaXMucGFyc2VRdWVyeVBhcmFtKHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBwYXJzZUZyYWdtZW50KCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtYWluaW5nLnN1YnN0cmluZygxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VNYXRyaXhQYXJhbXMoKToge1trZXk6IHN0cmluZ106IGFueX0ge1xuICAgIGNvbnN0IHBhcmFtczoge1trZXk6IHN0cmluZ106IGFueX0gPSB7fTtcbiAgICB3aGlsZSAodGhpcy5yZW1haW5pbmcubGVuZ3RoID4gMCAmJiB0aGlzLnBlZWtTdGFydHNXaXRoKCc7JykpIHtcbiAgICAgIHRoaXMuY2FwdHVyZSgnOycpO1xuICAgICAgdGhpcy5wYXJzZVBhcmFtKHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBwYXJzZVBhcmFtKHBhcmFtczoge1trZXk6IHN0cmluZ106IGFueX0pOiB2b2lkIHtcbiAgICBjb25zdCBrZXkgPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICBpZiAoIWtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNhcHR1cmUoa2V5KTtcbiAgICBsZXQgdmFsdWU6IGFueSA9ICd0cnVlJztcbiAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnPScpKSB7XG4gICAgICB0aGlzLmNhcHR1cmUoJz0nKTtcbiAgICAgIGNvbnN0IHZhbHVlTWF0Y2ggPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICAgIGlmICh2YWx1ZU1hdGNoKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWVNYXRjaDtcbiAgICAgICAgdGhpcy5jYXB0dXJlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcGFyc2VRdWVyeVBhcmFtKHBhcmFtczoge1trZXk6IHN0cmluZ106IGFueX0pOiB2b2lkIHtcbiAgICBjb25zdCBrZXkgPSBtYXRjaFF1ZXJ5UGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICBpZiAoIWtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNhcHR1cmUoa2V5KTtcbiAgICBsZXQgdmFsdWU6IGFueSA9ICd0cnVlJztcbiAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnPScpKSB7XG4gICAgICB0aGlzLmNhcHR1cmUoJz0nKTtcbiAgICAgIHZhciB2YWx1ZU1hdGNoID0gbWF0Y2hVcmxRdWVyeVBhcmFtVmFsdWUodGhpcy5yZW1haW5pbmcpO1xuICAgICAgaWYgKHZhbHVlTWF0Y2gpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZU1hdGNoO1xuICAgICAgICB0aGlzLmNhcHR1cmUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcGFyc2VQYXJlbnMoYWxsb3dQcmltYXJ5OiBib29sZWFuKToge1trZXk6IHN0cmluZ106IFVybFNlZ21lbnR9IHtcbiAgICBjb25zdCBzZWdtZW50czoge1trZXk6IHN0cmluZ106IFVybFNlZ21lbnR9ID0ge307XG4gICAgdGhpcy5jYXB0dXJlKCcoJyk7XG5cbiAgICB3aGlsZSAoIXRoaXMucGVla1N0YXJ0c1dpdGgoJyknKSAmJiB0aGlzLnJlbWFpbmluZy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcGF0aCA9IG1hdGNoUGF0aFdpdGhQYXJhbXModGhpcy5yZW1haW5pbmcpO1xuICAgICAgbGV0IG91dGxldE5hbWU6IHN0cmluZztcbiAgICAgIGlmIChwYXRoLmluZGV4T2YoJzonKSA+IC0xKSB7XG4gICAgICAgIG91dGxldE5hbWUgPSBwYXRoLnN1YnN0cigwLCBwYXRoLmluZGV4T2YoJzonKSk7XG4gICAgICAgIHRoaXMuY2FwdHVyZShvdXRsZXROYW1lKTtcbiAgICAgICAgdGhpcy5jYXB0dXJlKCc6Jyk7XG4gICAgICB9IGVsc2UgaWYgKGFsbG93UHJpbWFyeSkge1xuICAgICAgICBvdXRsZXROYW1lID0gUFJJTUFSWV9PVVRMRVQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5wYXJzZVNlZ21lbnRDaGlsZHJlbigpO1xuICAgICAgc2VnbWVudHNbb3V0bGV0TmFtZV0gPSBPYmplY3Qua2V5cyhjaGlsZHJlbikubGVuZ3RoID09PSAxID8gY2hpbGRyZW5bUFJJTUFSWV9PVVRMRVRdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVcmxTZWdtZW50KFtdLCBjaGlsZHJlbik7XG5cbiAgICAgIGlmICh0aGlzLnBlZWtTdGFydHNXaXRoKCcvLycpKSB7XG4gICAgICAgIHRoaXMuY2FwdHVyZSgnLy8nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jYXB0dXJlKCcpJyk7XG5cbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH1cbn1cbiJdfQ==

/***/ },

/***/ 403:
/***/ function(module, exports) {

	"use strict";
	function shallowEqual(a, b) {
	    var k1 = Object.keys(a);
	    var k2 = Object.keys(b);
	    if (k1.length != k2.length) {
	        return false;
	    }
	    var key;
	    for (var i = 0; i < k1.length; i++) {
	        key = k1[i];
	        if (a[key] !== b[key]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.shallowEqual = shallowEqual;
	function flatten(a) {
	    var target = [];
	    for (var i = 0; i < a.length; ++i) {
	        for (var j = 0; j < a[i].length; ++j) {
	            target.push(a[i][j]);
	        }
	    }
	    return target;
	}
	exports.flatten = flatten;
	function first(a) {
	    return a.length > 0 ? a[0] : null;
	}
	exports.first = first;
	function last(a) {
	    return a.length > 0 ? a[a.length - 1] : null;
	}
	exports.last = last;
	function and(bools) {
	    return bools.reduce(function (a, b) { return a && b; }, true);
	}
	exports.and = and;
	function merge(m1, m2) {
	    var m = {};
	    for (var attr in m1) {
	        if (m1.hasOwnProperty(attr)) {
	            m[attr] = m1[attr];
	        }
	    }
	    for (var attr in m2) {
	        if (m2.hasOwnProperty(attr)) {
	            m[attr] = m2[attr];
	        }
	    }
	    return m;
	}
	exports.merge = merge;
	function forEach(map, callback) {
	    for (var prop in map) {
	        if (map.hasOwnProperty(prop)) {
	            callback(map[prop], prop);
	        }
	    }
	}
	exports.forEach = forEach;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQkFBNkIsQ0FBcUIsRUFBRSxDQUFxQjtJQUN2RSxJQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELElBQUksR0FBVyxDQUFDO0lBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ25DLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWRlLG9CQUFZLGVBYzNCLENBQUE7QUFFRCxpQkFBMkIsQ0FBUTtJQUNqQyxJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7SUFDdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVJlLGVBQU8sVUFRdEIsQ0FBQTtBQUVELGVBQXlCLENBQU07SUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEMsQ0FBQztBQUZlLGFBQUssUUFFcEIsQ0FBQTtBQUVELGNBQXdCLENBQU07SUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUMvQyxDQUFDO0FBRmUsWUFBSSxPQUVuQixDQUFBO0FBRUQsYUFBb0IsS0FBZ0I7SUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxJQUFJLENBQUMsRUFBTixDQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUZlLFdBQUcsTUFFbEIsQ0FBQTtBQUVELGVBQXlCLEVBQXNCLEVBQUUsRUFBc0I7SUFDckUsSUFBSSxDQUFDLEdBQXVCLEVBQUUsQ0FBQztJQUUvQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQWhCZSxhQUFLLFFBZ0JwQixDQUFBO0FBRUQsaUJBQ0ksR0FBdUIsRUFBRSxRQUFxQztJQUNoRSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBUGUsZUFBTyxVQU90QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChhOiB7W3g6IHN0cmluZ106IGFueX0sIGI6IHtbeDogc3RyaW5nXTogYW55fSk6IGJvb2xlYW4ge1xuICBjb25zdCBrMSA9IE9iamVjdC5rZXlzKGEpO1xuICBjb25zdCBrMiA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoazEubGVuZ3RoICE9IGsyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQga2V5OiBzdHJpbmc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgazEubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrMVtpXTtcbiAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KGE6IFRbXVtdKTogVFtdIHtcbiAgY29uc3QgdGFyZ2V0OiBUW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBhW2ldLmxlbmd0aDsgKytqKSB7XG4gICAgICB0YXJnZXQucHVzaChhW2ldW2pdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0PFQ+KGE6IFRbXSk6IFQge1xuICByZXR1cm4gYS5sZW5ndGggPiAwID8gYVswXSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXN0PFQ+KGE6IFRbXSk6IFQge1xuICByZXR1cm4gYS5sZW5ndGggPiAwID8gYVthLmxlbmd0aCAtIDFdIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZChib29sczogYm9vbGVhbltdKTogYm9vbGVhbiB7XG4gIHJldHVybiBib29scy5yZWR1Y2UoKGEsIGIpID0+IGEgJiYgYiwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZTxWPihtMToge1trZXk6IHN0cmluZ106IFZ9LCBtMjoge1trZXk6IHN0cmluZ106IFZ9KToge1trZXk6IHN0cmluZ106IFZ9IHtcbiAgdmFyIG06IHtba2V5OiBzdHJpbmddOiBWfSA9IHt9O1xuXG4gIGZvciAodmFyIGF0dHIgaW4gbTEpIHtcbiAgICBpZiAobTEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIG1bYXR0cl0gPSBtMVthdHRyXTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBhdHRyIGluIG0yKSB7XG4gICAgaWYgKG0yLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICBtW2F0dHJdID0gbTJbYXR0cl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoPEssIFY+KFxuICAgIG1hcDoge1trZXk6IHN0cmluZ106IFZ9LCBjYWxsYmFjazogLyooViwgSykgPT4gdm9pZCovIEZ1bmN0aW9uKTogdm9pZCB7XG4gIGZvciAodmFyIHByb3AgaW4gbWFwKSB7XG4gICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgY2FsbGJhY2sobWFwW3Byb3BdLCBwcm9wKTtcbiAgICB9XG4gIH1cbn0iXX0=

/***/ },

/***/ 404:
/***/ function(module, exports) {

	"use strict";
	function validateConfig(config) {
	    config.forEach(validateNode);
	}
	exports.validateConfig = validateConfig;
	function validateNode(route) {
	    if (!!route.redirectTo && !!route.children) {
	        throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
	    }
	    if (!!route.redirectTo && !!route.component) {
	        throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
	    }
	    if (route.path === undefined) {
	        throw new Error("Invalid route configuration: routes must have path specified");
	    }
	    if (route.path.startsWith('/')) {
	        throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBZUEsd0JBQStCLE1BQW9CO0lBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUZlLHNCQUFjLGlCQUU3QixDQUFBO0FBRUQsc0JBQXNCLEtBQVk7SUFDaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQ1gscUNBQW1DLEtBQUssQ0FBQyxJQUFJLHVEQUFvRCxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksS0FBSyxDQUNYLHFDQUFtQyxLQUFLLENBQUMsSUFBSSx3REFBcUQsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBeUMsS0FBSyxDQUFDLElBQUksc0NBQW1DLENBQUMsQ0FBQztJQUMxRyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFJvdXRlckNvbmZpZyA9IFJvdXRlW107XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGUge1xuICBwYXRoPzogc3RyaW5nO1xuICB0ZXJtaW5hbD86IGJvb2xlYW47XG4gIGNvbXBvbmVudD86IFR5cGV8c3RyaW5nO1xuICBvdXRsZXQ/OiBzdHJpbmc7XG4gIGNhbkFjdGl2YXRlPzogYW55W107XG4gIGNhbkRlYWN0aXZhdGU/OiBhbnlbXTtcbiAgcmVkaXJlY3RUbz86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSb3V0ZVtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb25maWcoY29uZmlnOiBSb3V0ZXJDb25maWcpOiB2b2lkIHtcbiAgY29uZmlnLmZvckVhY2godmFsaWRhdGVOb2RlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOb2RlKHJvdXRlOiBSb3V0ZSk6IHZvaWQge1xuICBpZiAoISFyb3V0ZS5yZWRpcmVjdFRvICYmICEhcm91dGUuY2hpbGRyZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJyR7cm91dGUucGF0aH0nOiByZWRpcmVjdFRvIGFuZCBjaGlsZHJlbiBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcmApO1xuICB9XG4gIGlmICghIXJvdXRlLnJlZGlyZWN0VG8gJiYgISFyb3V0ZS5jb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJyR7cm91dGUucGF0aH0nOiByZWRpcmVjdFRvIGFuZCBjb21wb25lbnQgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXJgKTtcbiAgfVxuICBpZiAocm91dGUucGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJvdXRlIGNvbmZpZ3VyYXRpb246IHJvdXRlcyBtdXN0IGhhdmUgcGF0aCBzcGVjaWZpZWRgKTtcbiAgfVxuICBpZiAocm91dGUucGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcm91dGUgY29uZmlndXJhdGlvbiBvZiByb3V0ZSAnJHtyb3V0ZS5wYXRofSc6IHBhdGggY2Fubm90IHN0YXJ0IHdpdGggYSBzbGFzaGApO1xuICB9XG59Il19

/***/ },

/***/ 405:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BehaviorSubject_1 = __webpack_require__(406);
	var router_state_1 = __webpack_require__(407);
	var tree_1 = __webpack_require__(408);
	function createRouterState(curr, prevState) {
	    var root = createNode(curr._root, prevState ? prevState._root : undefined);
	    var queryParams = prevState ? prevState.queryParams : new BehaviorSubject_1.BehaviorSubject(curr.queryParams);
	    var fragment = prevState ? prevState.fragment : new BehaviorSubject_1.BehaviorSubject(curr.fragment);
	    return new router_state_1.RouterState(root, queryParams, fragment, curr);
	}
	exports.createRouterState = createRouterState;
	function createNode(curr, prevState) {
	    if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
	        var value = prevState.value;
	        value._futureSnapshot = curr.value;
	        var children = createOrReuseChildren(curr, prevState);
	        return new tree_1.TreeNode(value, children);
	    }
	    else {
	        var value = createActivatedRoute(curr.value);
	        var children = curr.children.map(function (c) { return createNode(c); });
	        return new tree_1.TreeNode(value, children);
	    }
	}
	function createOrReuseChildren(curr, prevState) {
	    return curr.children.map(function (child) {
	        var index = prevState.children.findIndex(function (p) { return equalRouteSnapshots(p.value.snapshot, child.value); });
	        if (index >= 0) {
	            return createNode(child, prevState.children[index]);
	        }
	        else {
	            return createNode(child);
	        }
	    });
	}
	function createActivatedRoute(c) {
	    return new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(c.url), new BehaviorSubject_1.BehaviorSubject(c.params), c.outlet, c.component, c);
	}
	function equalRouteSnapshots(a, b) {
	    return a._routeConfig === b._routeConfig;
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3JvdXRlcl9zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVfcm91dGVyX3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnQ0FBOEIsc0JBQXNCLENBQUMsQ0FBQTtBQUVyRCw2QkFBdUYsZ0JBQWdCLENBQUMsQ0FBQTtBQUN4RyxxQkFBdUIsY0FBYyxDQUFDLENBQUE7QUFFdEMsMkJBQWtDLElBQXlCLEVBQUUsU0FBc0I7SUFDakYsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDN0UsSUFBTSxXQUFXLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxpQ0FBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RixJQUFNLFFBQVEsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLGlDQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JGLE1BQU0sQ0FBQyxJQUFJLDBCQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUxlLHlCQUFpQixvQkFLaEMsQ0FBQTtBQUVELG9CQUFvQixJQUFzQyxFQUFFLFNBQW9DO0lBRTlGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNFLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUIsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRW5DLElBQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsSUFBSSxlQUFRLENBQWlCLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV2RCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLElBQUksZUFBUSxDQUFpQixLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkQsQ0FBQztBQUNILENBQUM7QUFFRCwrQkFDSSxJQUFzQyxFQUFFLFNBQW1DO0lBQzdFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUs7UUFDNUIsSUFBTSxLQUFLLEdBQ1AsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQWxELENBQWtELENBQUMsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCw4QkFBOEIsQ0FBeUI7SUFDckQsTUFBTSxDQUFDLElBQUksNkJBQWMsQ0FDckIsSUFBSSxpQ0FBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLGlDQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsNkJBQTZCLENBQXlCLEVBQUUsQ0FBeUI7SUFDL0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMvQmVoYXZpb3JTdWJqZWN0JztcblxuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGUsIFJvdXRlclN0YXRlU25hcHNob3R9IGZyb20gJy4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7VHJlZU5vZGV9IGZyb20gJy4vdXRpbHMvdHJlZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJTdGF0ZShjdXJyOiBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBwcmV2U3RhdGU6IFJvdXRlclN0YXRlKTogUm91dGVyU3RhdGUge1xuICBjb25zdCByb290ID0gY3JlYXRlTm9kZShjdXJyLl9yb290LCBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuX3Jvb3QgOiB1bmRlZmluZWQpO1xuICBjb25zdCBxdWVyeVBhcmFtcyA9IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5xdWVyeVBhcmFtcyA6IG5ldyBCZWhhdmlvclN1YmplY3QoY3Vyci5xdWVyeVBhcmFtcyk7XG4gIGNvbnN0IGZyYWdtZW50ID0gcHJldlN0YXRlID8gcHJldlN0YXRlLmZyYWdtZW50IDogbmV3IEJlaGF2aW9yU3ViamVjdChjdXJyLmZyYWdtZW50KTtcbiAgcmV0dXJuIG5ldyBSb3V0ZXJTdGF0ZShyb290LCBxdWVyeVBhcmFtcywgZnJhZ21lbnQsIGN1cnIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlKGN1cnI6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+LCBwcmV2U3RhdGU/OiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZT4pOlxuICAgIFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlPiB7XG4gIGlmIChwcmV2U3RhdGUgJiYgZXF1YWxSb3V0ZVNuYXBzaG90cyhwcmV2U3RhdGUudmFsdWUuc25hcHNob3QsIGN1cnIudmFsdWUpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBwcmV2U3RhdGUudmFsdWU7XG4gICAgdmFsdWUuX2Z1dHVyZVNuYXBzaG90ID0gY3Vyci52YWx1ZTtcblxuICAgIGNvbnN0IGNoaWxkcmVuID0gY3JlYXRlT3JSZXVzZUNoaWxkcmVuKGN1cnIsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIG5ldyBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZT4odmFsdWUsIGNoaWxkcmVuKTtcblxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZhbHVlID0gY3JlYXRlQWN0aXZhdGVkUm91dGUoY3Vyci52YWx1ZSk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBjdXJyLmNoaWxkcmVuLm1hcChjID0+IGNyZWF0ZU5vZGUoYykpO1xuICAgIHJldHVybiBuZXcgVHJlZU5vZGU8QWN0aXZhdGVkUm91dGU+KHZhbHVlLCBjaGlsZHJlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlT3JSZXVzZUNoaWxkcmVuKFxuICAgIGN1cnI6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+LCBwcmV2U3RhdGU6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlPikge1xuICByZXR1cm4gY3Vyci5jaGlsZHJlbi5tYXAoY2hpbGQgPT4ge1xuICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgcHJldlN0YXRlLmNoaWxkcmVuLmZpbmRJbmRleChwID0+IGVxdWFsUm91dGVTbmFwc2hvdHMocC52YWx1ZS5zbmFwc2hvdCwgY2hpbGQudmFsdWUpKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU5vZGUoY2hpbGQsIHByZXZTdGF0ZS5jaGlsZHJlbltpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlTm9kZShjaGlsZCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aXZhdGVkUm91dGUoYzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICByZXR1cm4gbmV3IEFjdGl2YXRlZFJvdXRlKFxuICAgICAgbmV3IEJlaGF2aW9yU3ViamVjdChjLnVybCksIG5ldyBCZWhhdmlvclN1YmplY3QoYy5wYXJhbXMpLCBjLm91dGxldCwgYy5jb21wb25lbnQsIGMpO1xufVxuXG5mdW5jdGlvbiBlcXVhbFJvdXRlU25hcHNob3RzKGE6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIGI6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIGEuX3JvdXRlQ29uZmlnID09PSBiLl9yb3V0ZUNvbmZpZztcbn0iXX0=

/***/ },

/***/ 407:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BehaviorSubject_1 = __webpack_require__(406);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var tree_1 = __webpack_require__(408);
	var RouterState = (function (_super) {
	    __extends(RouterState, _super);
	    function RouterState(root, queryParams, fragment, snapshot) {
	        _super.call(this, root);
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	        this.snapshot = snapshot;
	    }
	    RouterState.prototype.toString = function () { return this.snapshot.toString(); };
	    return RouterState;
	}(tree_1.Tree));
	exports.RouterState = RouterState;
	function createEmptyState(urlTree, rootComponent) {
	    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
	    var emptyUrl = new BehaviorSubject_1.BehaviorSubject([new url_tree_1.UrlPathWithParams('', {})]);
	    var emptyParams = new BehaviorSubject_1.BehaviorSubject({});
	    var emptyQueryParams = new BehaviorSubject_1.BehaviorSubject({});
	    var fragment = new BehaviorSubject_1.BehaviorSubject('');
	    var activated = new ActivatedRoute(emptyUrl, emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, snapshot.root);
	    activated.snapshot = snapshot.root;
	    return new RouterState(new tree_1.TreeNode(activated, []), emptyQueryParams, fragment, snapshot);
	}
	exports.createEmptyState = createEmptyState;
	function createEmptyStateSnapshot(urlTree, rootComponent) {
	    var emptyParams = {};
	    var emptyQueryParams = {};
	    var fragment = '';
	    var activated = new ActivatedRouteSnapshot([], emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1);
	    return new RouterStateSnapshot('', new tree_1.TreeNode(activated, []), emptyQueryParams, fragment);
	}
	var ActivatedRoute = (function () {
	    function ActivatedRoute(url, params, outlet, component, futureSnapshot) {
	        this.url = url;
	        this.params = params;
	        this.outlet = outlet;
	        this.component = component;
	        this._futureSnapshot = futureSnapshot;
	    }
	    ActivatedRoute.prototype.toString = function () {
	        return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
	    };
	    return ActivatedRoute;
	}());
	exports.ActivatedRoute = ActivatedRoute;
	var ActivatedRouteSnapshot = (function () {
	    function ActivatedRouteSnapshot(url, params, outlet, component, routeConfig, urlSegment, lastPathIndex) {
	        this.url = url;
	        this.params = params;
	        this.outlet = outlet;
	        this.component = component;
	        this._routeConfig = routeConfig;
	        this._urlSegment = urlSegment;
	        this._lastPathIndex = lastPathIndex;
	    }
	    ActivatedRouteSnapshot.prototype.toString = function () {
	        var url = this.url.map(function (s) { return s.toString(); }).join('/');
	        var matched = this._routeConfig ? this._routeConfig.path : '';
	        return "Route(url:'" + url + "', path:'" + matched + "')";
	    };
	    return ActivatedRouteSnapshot;
	}());
	exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
	var RouterStateSnapshot = (function (_super) {
	    __extends(RouterStateSnapshot, _super);
	    function RouterStateSnapshot(url, root, queryParams, fragment) {
	        _super.call(this, root);
	        this.url = url;
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	    }
	    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
	    return RouterStateSnapshot;
	}(tree_1.Tree));
	exports.RouterStateSnapshot = RouterStateSnapshot;
	function serializeNode(node) {
	    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
	    return "" + node.value + c;
	}
	function advanceActivatedRoute(route) {
	    if (route.snapshot && !collection_1.shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
	        route.snapshot = route._futureSnapshot;
	        route.url.next(route.snapshot.url);
	        route.params.next(route.snapshot.params);
	    }
	    else {
	        route.snapshot = route._futureSnapshot;
	    }
	}
	exports.advanceActivatedRoute = advanceActivatedRoute;
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 408:
/***/ function(module, exports) {

	"use strict";
	var Tree = (function () {
	    function Tree(root) {
	        this._root = root;
	    }
	    Object.defineProperty(Tree.prototype, "root", {
	        get: function () { return this._root.value; },
	        enumerable: true,
	        configurable: true
	    });
	    Tree.prototype.parent = function (t) {
	        var p = this.pathFromRoot(t);
	        return p.length > 1 ? p[p.length - 2] : null;
	    };
	    Tree.prototype.children = function (t) {
	        var n = findNode(t, this._root);
	        return n ? n.children.map(function (t) { return t.value; }) : [];
	    };
	    Tree.prototype.firstChild = function (t) {
	        var n = findNode(t, this._root);
	        return n && n.children.length > 0 ? n.children[0].value : null;
	    };
	    Tree.prototype.siblings = function (t) {
	        var p = findPath(t, this._root, []);
	        if (p.length < 2)
	            return [];
	        var c = p[p.length - 2].children.map(function (c) { return c.value; });
	        return c.filter(function (cc) { return cc !== t; });
	    };
	    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };
	    Tree.prototype.contains = function (tree) { return contains(this._root, tree._root); };
	    return Tree;
	}());
	exports.Tree = Tree;
	function findNode(expected, c) {
	    if (expected === c.value)
	        return c;
	    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	        var cc = _a[_i];
	        var r = findNode(expected, cc);
	        if (r)
	            return r;
	    }
	    return null;
	}
	function findPath(expected, c, collected) {
	    collected.push(c);
	    if (expected === c.value)
	        return collected;
	    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	        var cc = _a[_i];
	        var cloned = collected.slice(0);
	        var r = findPath(expected, cc, cloned);
	        if (r)
	            return r;
	    }
	    return [];
	}
	function contains(tree, subtree) {
	    if (tree.value !== subtree.value)
	        return false;
	    var _loop_1 = function(subtreeNode) {
	        var s = tree.children.filter(function (child) { return child.value === subtreeNode.value; });
	        if (s.length === 0)
	            return { value: false };
	        if (!contains(s[0], subtreeNode))
	            return { value: false };
	    };
	    for (var _i = 0, _a = subtree.children; _i < _a.length; _i++) {
	        var subtreeNode = _a[_i];
	        var state_1 = _loop_1(subtreeNode);
	        if (typeof state_1 === "object") return state_1.value;
	    }
	    return true;
	}
	var TreeNode = (function () {
	    function TreeNode(value, children) {
	        this.value = value;
	        this.children = children;
	    }
	    TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
	    return TreeNode;
	}());
	exports.TreeNode = TreeNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtJQUlFLGNBQVksSUFBaUI7UUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUFDLENBQUM7SUFFckQsc0JBQUksc0JBQUk7YUFBUixjQUFnQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUUxQyxxQkFBTSxHQUFOLFVBQU8sQ0FBSTtRQUNULElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUJBQVEsR0FBUixVQUFTLENBQUk7UUFDWCxJQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEtBQUssRUFBUCxDQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0MsQ0FBQztJQUVELHlCQUFVLEdBQVYsVUFBVyxDQUFJO1FBQ2IsSUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pFLENBQUM7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SyxFQUFqQyxDQUFpQyxDQUFDLENBQUM7UUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFBQyxnQkFBTyxLQUFLLEdBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQUMsZ0JBQU8sS0FBSyxHQUFDOztJQUhqRCxHQUFHLENBQUMsQ0FBb0IsVUFBZ0IsRUFBaEIsS0FBQSxPQUFPLENBQUMsUUFBUSxFQUFoQixjQUFnQixFQUFoQixJQUFnQixDQUFDO1FBQXBDLElBQUksV0FBVyxTQUFBOzs7S0FJbkI7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVEO0lBQ0Usa0JBQW1CLEtBQVEsRUFBUyxRQUF1QjtRQUF4QyxVQUFLLEdBQUwsS0FBSyxDQUFHO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBZTtJQUFHLENBQUM7SUFFL0QsMkJBQVEsR0FBUixjQUFxQixNQUFNLENBQUMsY0FBWSxJQUFJLENBQUMsS0FBSyxNQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFELGVBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQztBQUpZLGdCQUFRLFdBSXBCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVHJlZTxUPiB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3Jvb3Q6IFRyZWVOb2RlPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKHJvb3Q6IFRyZWVOb2RlPFQ+KSB7IHRoaXMuX3Jvb3QgPSByb290OyB9XG5cbiAgZ2V0IHJvb3QoKTogVCB7IHJldHVybiB0aGlzLl9yb290LnZhbHVlOyB9XG5cbiAgcGFyZW50KHQ6IFQpOiBUIHtcbiAgICBjb25zdCBwID0gdGhpcy5wYXRoRnJvbVJvb3QodCk7XG4gICAgcmV0dXJuIHAubGVuZ3RoID4gMSA/IHBbcC5sZW5ndGggLSAyXSA6IG51bGw7XG4gIH1cblxuICBjaGlsZHJlbih0OiBUKTogVFtdIHtcbiAgICBjb25zdCBuID0gZmluZE5vZGUodCwgdGhpcy5fcm9vdCk7XG4gICAgcmV0dXJuIG4gPyBuLmNoaWxkcmVuLm1hcCh0ID0+IHQudmFsdWUpIDogW107XG4gIH1cblxuICBmaXJzdENoaWxkKHQ6IFQpOiBUIHtcbiAgICBjb25zdCBuID0gZmluZE5vZGUodCwgdGhpcy5fcm9vdCk7XG4gICAgcmV0dXJuIG4gJiYgbi5jaGlsZHJlbi5sZW5ndGggPiAwID8gbi5jaGlsZHJlblswXS52YWx1ZSA6IG51bGw7XG4gIH1cblxuICBzaWJsaW5ncyh0OiBUKTogVFtdIHtcbiAgICBjb25zdCBwID0gZmluZFBhdGgodCwgdGhpcy5fcm9vdCwgW10pO1xuICAgIGlmIChwLmxlbmd0aCA8IDIpIHJldHVybiBbXTtcblxuICAgIGNvbnN0IGMgPSBwW3AubGVuZ3RoIC0gMl0uY2hpbGRyZW4ubWFwKGMgPT4gYy52YWx1ZSk7XG4gICAgcmV0dXJuIGMuZmlsdGVyKGNjID0+IGNjICE9PSB0KTtcbiAgfVxuXG4gIHBhdGhGcm9tUm9vdCh0OiBUKTogVFtdIHsgcmV0dXJuIGZpbmRQYXRoKHQsIHRoaXMuX3Jvb3QsIFtdKS5tYXAocyA9PiBzLnZhbHVlKTsgfVxuXG4gIGNvbnRhaW5zKHRyZWU6IFRyZWU8VD4pOiBib29sZWFuIHsgcmV0dXJuIGNvbnRhaW5zKHRoaXMuX3Jvb3QsIHRyZWUuX3Jvb3QpOyB9XG59XG5cbmZ1bmN0aW9uIGZpbmROb2RlPFQ+KGV4cGVjdGVkOiBULCBjOiBUcmVlTm9kZTxUPik6IFRyZWVOb2RlPFQ+IHtcbiAgaWYgKGV4cGVjdGVkID09PSBjLnZhbHVlKSByZXR1cm4gYztcbiAgZm9yIChsZXQgY2Mgb2YgYy5jaGlsZHJlbikge1xuICAgIGNvbnN0IHIgPSBmaW5kTm9kZShleHBlY3RlZCwgY2MpO1xuICAgIGlmIChyKSByZXR1cm4gcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZFBhdGg8VD4oZXhwZWN0ZWQ6IFQsIGM6IFRyZWVOb2RlPFQ+LCBjb2xsZWN0ZWQ6IFRyZWVOb2RlPFQ+W10pOiBUcmVlTm9kZTxUPltdIHtcbiAgY29sbGVjdGVkLnB1c2goYyk7XG4gIGlmIChleHBlY3RlZCA9PT0gYy52YWx1ZSkgcmV0dXJuIGNvbGxlY3RlZDtcblxuICBmb3IgKGxldCBjYyBvZiBjLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY29sbGVjdGVkLnNsaWNlKDApO1xuICAgIGNvbnN0IHIgPSBmaW5kUGF0aChleHBlY3RlZCwgY2MsIGNsb25lZCk7XG4gICAgaWYgKHIpIHJldHVybiByO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBjb250YWluczxUPih0cmVlOiBUcmVlTm9kZTxUPiwgc3VidHJlZTogVHJlZU5vZGU8VD4pOiBib29sZWFuIHtcbiAgaWYgKHRyZWUudmFsdWUgIT09IHN1YnRyZWUudmFsdWUpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGxldCBzdWJ0cmVlTm9kZSBvZiBzdWJ0cmVlLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgcyA9IHRyZWUuY2hpbGRyZW4uZmlsdGVyKGNoaWxkID0+IGNoaWxkLnZhbHVlID09PSBzdWJ0cmVlTm9kZS52YWx1ZSk7XG4gICAgaWYgKHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFjb250YWlucyhzWzBdLCBzdWJ0cmVlTm9kZSkpIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY2xhc3MgVHJlZU5vZGU8VD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IFQsIHB1YmxpYyBjaGlsZHJlbjogVHJlZU5vZGU8VD5bXSkge31cblxuICB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gYFRyZWVOb2RlKCR7dGhpcy52YWx1ZX0pYDsgfVxufSJdfQ==

/***/ },

/***/ 409:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	function createUrlTree(route, urlTree, commands, queryParams, fragment) {
	    if (commands.length === 0) {
	        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
	    }
	    var normalizedCommands = normalizeCommands(commands);
	    if (navigateToRoot(normalizedCommands)) {
	        return tree(urlTree.root, new url_tree_1.UrlSegment([], {}), urlTree, queryParams, fragment);
	    }
	    var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
	    var segment = startingPosition.processChildren ?
	        updateSegmentChildren(startingPosition.segment, startingPosition.index, normalizedCommands.commands) :
	        updateSegment(startingPosition.segment, startingPosition.index, normalizedCommands.commands);
	    return tree(startingPosition.segment, segment, urlTree, queryParams, fragment);
	}
	exports.createUrlTree = createUrlTree;
	function tree(oldSegment, newSegment, urlTree, queryParams, fragment) {
	    var q = queryParams ? stringify(queryParams) : urlTree.queryParams;
	    var f = fragment ? fragment : urlTree.fragment;
	    if (urlTree.root === oldSegment) {
	        return new url_tree_1.UrlTree(newSegment, q, f);
	    }
	    else {
	        return new url_tree_1.UrlTree(replaceSegment(urlTree.root, oldSegment, newSegment), q, f);
	    }
	}
	function replaceSegment(current, oldSegment, newSegment) {
	    var children = {};
	    collection_1.forEach(current.children, function (c, outletName) {
	        if (c === oldSegment) {
	            children[outletName] = newSegment;
	        }
	        else {
	            children[outletName] = replaceSegment(c, oldSegment, newSegment);
	        }
	    });
	    return new url_tree_1.UrlSegment(current.pathsWithParams, children);
	}
	function navigateToRoot(normalizedChange) {
	    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&
	        normalizedChange.commands[0] == '/';
	}
	var NormalizedNavigationCommands = (function () {
	    function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
	        this.isAbsolute = isAbsolute;
	        this.numberOfDoubleDots = numberOfDoubleDots;
	        this.commands = commands;
	    }
	    return NormalizedNavigationCommands;
	}());
	function normalizeCommands(commands) {
	    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
	        return new NormalizedNavigationCommands(true, 0, commands);
	    }
	    var numberOfDoubleDots = 0;
	    var isAbsolute = false;
	    var res = [];
	    for (var i = 0; i < commands.length; ++i) {
	        var c = commands[i];
	        if (!(typeof c === 'string')) {
	            res.push(c);
	            continue;
	        }
	        var parts = c.split('/');
	        for (var j = 0; j < parts.length; ++j) {
	            var cc = parts[j];
	            if (i == 0) {
	                if (j == 0 && cc == '.') {
	                }
	                else if (j == 0 && cc == '') {
	                    isAbsolute = true;
	                }
	                else if (cc == '..') {
	                    numberOfDoubleDots++;
	                }
	                else if (cc != '') {
	                    res.push(cc);
	                }
	            }
	            else {
	                if (cc != '') {
	                    res.push(cc);
	                }
	            }
	        }
	    }
	    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
	}
	var Position = (function () {
	    function Position(segment, processChildren, index) {
	        this.segment = segment;
	        this.processChildren = processChildren;
	        this.index = index;
	    }
	    return Position;
	}());
	function findStartingPosition(normalizedChange, urlTree, route) {
	    if (normalizedChange.isAbsolute) {
	        return new Position(urlTree.root, true, 0);
	    }
	    else if (route.snapshot._lastPathIndex === -1) {
	        return new Position(route.snapshot._urlSegment, true, 0);
	    }
	    else if (route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots >= 0) {
	        return new Position(route.snapshot._urlSegment, false, route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots);
	    }
	    else {
	        throw new Error('Invalid number of \'../\'');
	    }
	}
	function getPath(command) {
	    if (!(typeof command === 'string'))
	        return command.toString();
	    var parts = command.toString().split(':');
	    return parts.length > 1 ? parts[1] : command;
	}
	function getOutlet(commands) {
	    if (!(typeof commands[0] === 'string'))
	        return shared_1.PRIMARY_OUTLET;
	    var parts = commands[0].toString().split(':');
	    return parts.length > 1 ? parts[0] : shared_1.PRIMARY_OUTLET;
	}
	function updateSegment(segment, startIndex, commands) {
	    if (!segment) {
	        segment = new url_tree_1.UrlSegment([], {});
	    }
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return updateSegmentChildren(segment, startIndex, commands);
	    }
	    var m = prefixedWith(segment, startIndex, commands);
	    var slicedCommands = commands.slice(m.lastIndex);
	    if (m.match && slicedCommands.length === 0) {
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, {});
	    }
	    else if (m.match && Object.keys(segment.children).length === 0) {
	        return createNewSegment(segment, startIndex, commands);
	    }
	    else if (m.match) {
	        return updateSegmentChildren(segment, 0, slicedCommands);
	    }
	    else {
	        return createNewSegment(segment, startIndex, commands);
	    }
	}
	function updateSegmentChildren(segment, startIndex, commands) {
	    if (commands.length === 0) {
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, {});
	    }
	    else {
	        var outlet_1 = getOutlet(commands);
	        var children_1 = {};
	        children_1[outlet_1] = updateSegment(segment.children[outlet_1], startIndex, commands);
	        collection_1.forEach(segment.children, function (child, childOutlet) {
	            if (childOutlet !== outlet_1) {
	                children_1[childOutlet] = child;
	            }
	        });
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, children_1);
	    }
	}
	function prefixedWith(segment, startIndex, commands) {
	    var currentCommandIndex = 0;
	    var currentPathIndex = startIndex;
	    var noMatch = { match: false, lastIndex: 0 };
	    while (currentPathIndex < segment.pathsWithParams.length) {
	        if (currentCommandIndex >= commands.length)
	            return noMatch;
	        var path = segment.pathsWithParams[currentPathIndex];
	        var curr = getPath(commands[currentCommandIndex]);
	        var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
	        if (curr && next && (typeof next === 'object')) {
	            if (!compare(curr, next, path))
	                return noMatch;
	            currentCommandIndex += 2;
	        }
	        else {
	            if (!compare(curr, {}, path))
	                return noMatch;
	            currentCommandIndex++;
	        }
	        currentPathIndex++;
	    }
	    return { match: true, lastIndex: currentCommandIndex };
	}
	function createNewSegment(segment, startIndex, commands) {
	    var paths = segment.pathsWithParams.slice(0, startIndex);
	    var i = 0;
	    while (i < commands.length) {
	        if (i === 0 && (typeof commands[0] === 'object')) {
	            var p = segment.pathsWithParams[startIndex];
	            paths.push(new url_tree_1.UrlPathWithParams(p.path, commands[0]));
	            i++;
	            continue;
	        }
	        var curr = getPath(commands[i]);
	        var next = (i < commands.length - 1) ? commands[i + 1] : null;
	        if (curr && next && (typeof next === 'object')) {
	            paths.push(new url_tree_1.UrlPathWithParams(curr, stringify(next)));
	            i += 2;
	        }
	        else {
	            paths.push(new url_tree_1.UrlPathWithParams(curr, {}));
	            i++;
	        }
	    }
	    return new url_tree_1.UrlSegment(paths, {});
	}
	function stringify(params) {
	    var res = {};
	    collection_1.forEach(params, function (v, k) { return res[k] = "" + v; });
	    return res;
	}
	function compare(path, params, pathWithParams) {
	    return path == pathWithParams.path && collection_1.shallowEqual(params, pathWithParams.parameters);
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 410:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var of_1 = __webpack_require__(351);
	var router_state_1 = __webpack_require__(407);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var tree_1 = __webpack_require__(408);
	var NoMatch = (function () {
	    function NoMatch(segment) {
	        if (segment === void 0) { segment = null; }
	        this.segment = segment;
	    }
	    return NoMatch;
	}());
	function recognize(rootComponentType, config, urlTree, url) {
	    try {
	        var children = processSegment(config, urlTree.root, shared_1.PRIMARY_OUTLET);
	        var root = new router_state_1.ActivatedRouteSnapshot([], {}, shared_1.PRIMARY_OUTLET, rootComponentType, null, urlTree.root, -1);
	        var rootNode = new tree_1.TreeNode(root, children);
	        return of_1.of(new router_state_1.RouterStateSnapshot(url, rootNode, urlTree.queryParams, urlTree.fragment));
	    }
	    catch (e) {
	        if (e instanceof NoMatch) {
	            return new Observable_1.Observable(function (obs) {
	                return obs.error(new Error("Cannot match any routes: '" + e.segment + "'"));
	            });
	        }
	        else {
	            return new Observable_1.Observable(function (obs) { return obs.error(e); });
	        }
	    }
	}
	exports.recognize = recognize;
	function processSegment(config, segment, outlet) {
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return processSegmentChildren(config, segment);
	    }
	    else {
	        return [processPathsWithParams(config, segment, 0, segment.pathsWithParams, outlet)];
	    }
	}
	function processSegmentChildren(config, segment) {
	    var children = url_tree_1.mapChildrenIntoArray(segment, function (child, childOutlet) { return processSegment(config, child, childOutlet); });
	    checkOutletNameUniqueness(children);
	    sortActivatedRouteSnapshots(children);
	    return children;
	}
	function sortActivatedRouteSnapshots(nodes) {
	    nodes.sort(function (a, b) {
	        if (a.value.outlet === shared_1.PRIMARY_OUTLET)
	            return -1;
	        if (b.value.outlet === shared_1.PRIMARY_OUTLET)
	            return 1;
	        return a.value.outlet.localeCompare(b.value.outlet);
	    });
	}
	function processPathsWithParams(config, segment, pathIndex, paths, outlet) {
	    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
	        var r = config_1[_i];
	        try {
	            return processPathsWithParamsAgainstRoute(r, segment, pathIndex, paths, outlet);
	        }
	        catch (e) {
	            if (!(e instanceof NoMatch))
	                throw e;
	        }
	    }
	    throw new NoMatch(segment);
	}
	function processPathsWithParamsAgainstRoute(route, segment, pathIndex, paths, outlet) {
	    if (route.redirectTo)
	        throw new NoMatch();
	    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== outlet)
	        throw new NoMatch();
	    if (route.path === '**') {
	        var params = paths.length > 0 ? collection_1.last(paths).parameters : {};
	        var snapshot_1 = new router_state_1.ActivatedRouteSnapshot(paths, params, outlet, route.component, route, segment, -1);
	        return new tree_1.TreeNode(snapshot_1, []);
	    }
	    var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, parameters = _a.parameters, lastChild = _a.lastChild;
	    var snapshot = new router_state_1.ActivatedRouteSnapshot(consumedPaths, parameters, outlet, route.component, route, segment, pathIndex + lastChild - 1);
	    var slicedPath = paths.slice(lastChild);
	    var childConfig = route.children ? route.children : [];
	    if (childConfig.length === 0 && slicedPath.length === 0) {
	        return new tree_1.TreeNode(snapshot, []);
	    }
	    else if (slicedPath.length === 0 && Object.keys(segment.children).length > 0) {
	        var children = processSegmentChildren(childConfig, segment);
	        return new tree_1.TreeNode(snapshot, children);
	    }
	    else {
	        var child = processPathsWithParams(childConfig, segment, pathIndex + lastChild, slicedPath, shared_1.PRIMARY_OUTLET);
	        return new tree_1.TreeNode(snapshot, [child]);
	    }
	}
	function match(segment, route, paths) {
	    if (route.path === '') {
	        if (route.terminal && (Object.keys(segment.children).length > 0 || paths.length > 0)) {
	            throw new NoMatch();
	        }
	        else {
	            return { consumedPaths: [], lastChild: 0, parameters: {} };
	        }
	    }
	    var path = route.path;
	    var parts = path.split('/');
	    var posParameters = {};
	    var consumedPaths = [];
	    var currentIndex = 0;
	    for (var i = 0; i < parts.length; ++i) {
	        if (currentIndex >= paths.length)
	            throw new NoMatch();
	        var current = paths[currentIndex];
	        var p = parts[i];
	        var isPosParam = p.startsWith(':');
	        if (!isPosParam && p !== current.path)
	            throw new NoMatch();
	        if (isPosParam) {
	            posParameters[p.substring(1)] = current.path;
	        }
	        consumedPaths.push(current);
	        currentIndex++;
	    }
	    if (route.terminal && (Object.keys(segment.children).length > 0 || currentIndex < paths.length)) {
	        throw new NoMatch();
	    }
	    var parameters = collection_1.merge(posParameters, consumedPaths[consumedPaths.length - 1].parameters);
	    return { consumedPaths: consumedPaths, lastChild: currentIndex, parameters: parameters };
	}
	function checkOutletNameUniqueness(nodes) {
	    var names = {};
	    nodes.forEach(function (n) {
	        var routeWithSameOutletName = names[n.value.outlet];
	        if (routeWithSameOutletName) {
	            var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
	            var c = n.value.url.map(function (s) { return s.toString(); }).join('/');
	            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
	        }
	        names[n.value.outlet] = n.value;
	    });
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb2duaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlY29nbml6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsMkJBQXlCLGlCQUFpQixDQUFDLENBQUE7QUFFM0MsbUJBQWtCLG9CQUFvQixDQUFDLENBQUE7QUFHdkMsNkJBQTBELGdCQUFnQixDQUFDLENBQUE7QUFDM0UsdUJBQTZCLFVBQVUsQ0FBQyxDQUFBO0FBQ3hDLHlCQUEyRSxZQUFZLENBQUMsQ0FBQTtBQUN4RiwyQkFBMEIsb0JBQW9CLENBQUMsQ0FBQTtBQUMvQyxxQkFBdUIsY0FBYyxDQUFDLENBQUE7QUFFdEM7SUFDRSxpQkFBbUIsT0FBMEI7UUFBakMsdUJBQWlDLEdBQWpDLGNBQWlDO1FBQTFCLFlBQU8sR0FBUCxPQUFPLENBQW1CO0lBQUcsQ0FBQztJQUNuRCxjQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFFRCxtQkFDSSxpQkFBdUIsRUFBRSxNQUFvQixFQUFFLE9BQWdCLEVBQy9ELEdBQVc7SUFDYixJQUFJLENBQUM7UUFDSCxJQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1FBQ3RFLElBQU0sSUFBSSxHQUFHLElBQUkscUNBQXNCLENBQ25DLEVBQUUsRUFBRSxFQUFFLEVBQUUsdUJBQWMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQU0sUUFBUSxHQUFHLElBQUksZUFBUSxDQUF5QixJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEUsTUFBTSxDQUFDLE9BQUUsQ0FBRSxJQUFJLGtDQUFtQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM1RixDQUFFO0lBQUEsS0FBSyxD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QUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQVosQ0FBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMscURBQW1ELENBQUMsZUFBVSxDQUFDLE9BQUksQ0FBQyxDQUFDO1FBQ3ZGLENBQUM7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQge09ic2VydmVyfSBmcm9tICdyeGpzL09ic2VydmVyJztcbmltcG9ydCB7b2YgfSBmcm9tICdyeGpzL29ic2VydmFibGUvb2YnO1xuXG5pbXBvcnQge1JvdXRlLCBSb3V0ZXJDb25maWd9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xuaW1wb3J0IHtQUklNQVJZX09VVExFVH0gZnJvbSAnLi9zaGFyZWQnO1xuaW1wb3J0IHtVcmxQYXRoV2l0aFBhcmFtcywgVXJsU2VnbWVudCwgVXJsVHJlZSwgbWFwQ2hpbGRyZW5JbnRvQXJyYXl9IGZyb20gJy4vdXJsX3RyZWUnO1xuaW1wb3J0IHtsYXN0LCBtZXJnZX0gZnJvbSAnLi91dGlscy9jb2xsZWN0aW9uJztcbmltcG9ydCB7VHJlZU5vZGV9IGZyb20gJy4vdXRpbHMvdHJlZSc7XG5cbmNsYXNzIE5vTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2VnbWVudDogVXJsU2VnbWVudCA9IG51bGwpIHt9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvZ25pemUoXG4gICAgcm9vdENvbXBvbmVudFR5cGU6IFR5cGUsIGNvbmZpZzogUm91dGVyQ29uZmlnLCB1cmxUcmVlOiBVcmxUcmVlLFxuICAgIHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBwcm9jZXNzU2VnbWVudChjb25maWcsIHVybFRyZWUucm9vdCwgUFJJTUFSWV9PVVRMRVQpO1xuICAgIGNvbnN0IHJvb3QgPSBuZXcgQWN0aXZhdGVkUm91dGVTbmFwc2hvdChcbiAgICAgICAgW10sIHt9LCBQUklNQVJZX09VVExFVCwgcm9vdENvbXBvbmVudFR5cGUsIG51bGwsIHVybFRyZWUucm9vdCwgLTEpO1xuICAgIGNvbnN0IHJvb3ROb2RlID0gbmV3IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+KHJvb3QsIGNoaWxkcmVuKTtcbiAgICByZXR1cm4gb2YgKG5ldyBSb3V0ZXJTdGF0ZVNuYXBzaG90KHVybCwgcm9vdE5vZGUsIHVybFRyZWUucXVlcnlQYXJhbXMsIHVybFRyZWUuZnJhZ21lbnQpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgTm9NYXRjaCkge1xuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFJvdXRlclN0YXRlU25hcHNob3Q+KFxuICAgICAgICAgIChvYnM6IE9ic2VydmVyPFJvdXRlclN0YXRlU25hcHNob3Q+KSA9PlxuICAgICAgICAgICAgICBvYnMuZXJyb3IobmV3IEVycm9yKGBDYW5ub3QgbWF0Y2ggYW55IHJvdXRlczogJyR7ZS5zZWdtZW50fSdgKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8Um91dGVyU3RhdGVTbmFwc2hvdD4oXG4gICAgICAgICAgKG9iczogT2JzZXJ2ZXI8Um91dGVyU3RhdGVTbmFwc2hvdD4pID0+IG9icy5lcnJvcihlKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTZWdtZW50KFxuICAgIGNvbmZpZzogUm91dGVbXSwgc2VnbWVudDogVXJsU2VnbWVudCwgb3V0bGV0OiBzdHJpbmcpOiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PltdIHtcbiAgaWYgKHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyhzZWdtZW50LmNoaWxkcmVuKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHByb2Nlc3NTZWdtZW50Q2hpbGRyZW4oY29uZmlnLCBzZWdtZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW3Byb2Nlc3NQYXRoc1dpdGhQYXJhbXMoY29uZmlnLCBzZWdtZW50LCAwLCBzZWdtZW50LnBhdGhzV2l0aFBhcmFtcywgb3V0bGV0KV07XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnRDaGlsZHJlbihcbiAgICBjb25maWc6IFJvdXRlW10sIHNlZ21lbnQ6IFVybFNlZ21lbnQpOiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PltdIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBtYXBDaGlsZHJlbkludG9BcnJheShcbiAgICAgIHNlZ21lbnQsIChjaGlsZCwgY2hpbGRPdXRsZXQpID0+IHByb2Nlc3NTZWdtZW50KGNvbmZpZywgY2hpbGQsIGNoaWxkT3V0bGV0KSk7XG4gIGNoZWNrT3V0bGV0TmFtZVVuaXF1ZW5lc3MoY2hpbGRyZW4pO1xuICBzb3J0QWN0aXZhdGVkUm91dGVTbmFwc2hvdHMoY2hpbGRyZW4pO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIHNvcnRBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90cyhub2RlczogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD5bXSk6IHZvaWQge1xuICBub2Rlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgaWYgKGEudmFsdWUub3V0bGV0ID09PSBQUklNQVJZX09VVExFVCkgcmV0dXJuIC0xO1xuICAgIGlmIChiLnZhbHVlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQpIHJldHVybiAxO1xuICAgIHJldHVybiBhLnZhbHVlLm91dGxldC5sb2NhbGVDb21wYXJlKGIudmFsdWUub3V0bGV0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQYXRoc1dpdGhQYXJhbXMoXG4gICAgY29uZmlnOiBSb3V0ZVtdLCBzZWdtZW50OiBVcmxTZWdtZW50LCBwYXRoSW5kZXg6IG51bWJlciwgcGF0aHM6IFVybFBhdGhXaXRoUGFyYW1zW10sXG4gICAgb3V0bGV0OiBzdHJpbmcpOiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PiB7XG4gIGZvciAobGV0IHIgb2YgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBwcm9jZXNzUGF0aHNXaXRoUGFyYW1zQWdhaW5zdFJvdXRlKHIsIHNlZ21lbnQsIHBhdGhJbmRleCwgcGF0aHMsIG91dGxldCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIE5vTWF0Y2gpKSB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgTm9NYXRjaChzZWdtZW50KTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1BhdGhzV2l0aFBhcmFtc0FnYWluc3RSb3V0ZShcbiAgICByb3V0ZTogUm91dGUsIHNlZ21lbnQ6IFVybFNlZ21lbnQsIHBhdGhJbmRleDogbnVtYmVyLCBwYXRoczogVXJsUGF0aFdpdGhQYXJhbXNbXSxcbiAgICBvdXRsZXQ6IHN0cmluZyk6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+IHtcbiAgaWYgKHJvdXRlLnJlZGlyZWN0VG8pIHRocm93IG5ldyBOb01hdGNoKCk7XG4gIGlmICgocm91dGUub3V0bGV0ID8gcm91dGUub3V0bGV0IDogUFJJTUFSWV9PVVRMRVQpICE9PSBvdXRsZXQpIHRocm93IG5ldyBOb01hdGNoKCk7XG5cbiAgaWYgKHJvdXRlLnBhdGggPT09ICcqKicpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBwYXRocy5sZW5ndGggPiAwID8gbGFzdChwYXRocykucGFyYW1ldGVycyA6IHt9O1xuICAgIGNvbnN0IHNuYXBzaG90ID1cbiAgICAgICAgbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QocGF0aHMsIHBhcmFtcywgb3V0bGV0LCByb3V0ZS5jb21wb25lbnQsIHJvdXRlLCBzZWdtZW50LCAtMSk7XG4gICAgcmV0dXJuIG5ldyBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PihzbmFwc2hvdCwgW10pO1xuICB9XG5cbiAgY29uc3Qge2NvbnN1bWVkUGF0aHMsIHBhcmFtZXRlcnMsIGxhc3RDaGlsZH0gPSBtYXRjaChzZWdtZW50LCByb3V0ZSwgcGF0aHMpO1xuXG4gIGNvbnN0IHNuYXBzaG90ID0gbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QoXG4gICAgICBjb25zdW1lZFBhdGhzLCBwYXJhbWV0ZXJzLCBvdXRsZXQsIHJvdXRlLmNvbXBvbmVudCwgcm91dGUsIHNlZ21lbnQsXG4gICAgICBwYXRoSW5kZXggKyBsYXN0Q2hpbGQgLSAxKTtcbiAgY29uc3Qgc2xpY2VkUGF0aCA9IHBhdGhzLnNsaWNlKGxhc3RDaGlsZCk7XG4gIGNvbnN0IGNoaWxkQ29uZmlnID0gcm91dGUuY2hpbGRyZW4gPyByb3V0ZS5jaGlsZHJlbiA6IFtdO1xuXG4gIGlmIChjaGlsZENvbmZpZy5sZW5ndGggPT09IDAgJiYgc2xpY2VkUGF0aC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+KHNuYXBzaG90LCBbXSk7XG5cbiAgICAvLyBUT0RPOiBjaGVjayB0aGF0IHRoZSByaWdodCBzZWdtZW50IGlzIHByZXNlbnRcbiAgfSBlbHNlIGlmIChzbGljZWRQYXRoLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyhzZWdtZW50LmNoaWxkcmVuKS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBwcm9jZXNzU2VnbWVudENoaWxkcmVuKGNoaWxkQ29uZmlnLCBzZWdtZW50KTtcbiAgICByZXR1cm4gbmV3IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+KHNuYXBzaG90LCBjaGlsZHJlbik7XG5cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjaGlsZCA9IHByb2Nlc3NQYXRoc1dpdGhQYXJhbXMoXG4gICAgICAgIGNoaWxkQ29uZmlnLCBzZWdtZW50LCBwYXRoSW5kZXggKyBsYXN0Q2hpbGQsIHNsaWNlZFBhdGgsIFBSSU1BUllfT1VUTEVUKTtcbiAgICByZXR1cm4gbmV3IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+KHNuYXBzaG90LCBbY2hpbGRdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRjaChzZWdtZW50OiBVcmxTZWdtZW50LCByb3V0ZTogUm91dGUsIHBhdGhzOiBVcmxQYXRoV2l0aFBhcmFtc1tdKSB7XG4gIGlmIChyb3V0ZS5wYXRoID09PSAnJykge1xuICAgIGlmIChyb3V0ZS50ZXJtaW5hbCAmJiAoT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID4gMCB8fCBwYXRocy5sZW5ndGggPiAwKSkge1xuICAgICAgdGhyb3cgbmV3IE5vTWF0Y2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtjb25zdW1lZFBhdGhzOiBbXSwgbGFzdENoaWxkOiAwLCBwYXJhbWV0ZXJzOiB7fX07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xuICBjb25zdCBwb3NQYXJhbWV0ZXJzOiB7W2tleTogc3RyaW5nXTogYW55fSA9IHt9O1xuICBjb25zdCBjb25zdW1lZFBhdGhzOiBVcmxQYXRoV2l0aFBhcmFtc1tdID0gW107XG5cbiAgbGV0IGN1cnJlbnRJbmRleCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChjdXJyZW50SW5kZXggPj0gcGF0aHMubGVuZ3RoKSB0aHJvdyBuZXcgTm9NYXRjaCgpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSBwYXRoc1tjdXJyZW50SW5kZXhdO1xuXG4gICAgY29uc3QgcCA9IHBhcnRzW2ldO1xuICAgIGNvbnN0IGlzUG9zUGFyYW0gPSBwLnN0YXJ0c1dpdGgoJzonKTtcblxuICAgIGlmICghaXNQb3NQYXJhbSAmJiBwICE9PSBjdXJyZW50LnBhdGgpIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgaWYgKGlzUG9zUGFyYW0pIHtcbiAgICAgIHBvc1BhcmFtZXRlcnNbcC5zdWJzdHJpbmcoMSldID0gY3VycmVudC5wYXRoO1xuICAgIH1cbiAgICBjb25zdW1lZFBhdGhzLnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudEluZGV4Kys7XG4gIH1cblxuICBpZiAocm91dGUudGVybWluYWwgJiYgKE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDAgfHwgY3VycmVudEluZGV4IDwgcGF0aHMubGVuZ3RoKSkge1xuICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gIH1cblxuICBjb25zdCBwYXJhbWV0ZXJzID0gbWVyZ2UocG9zUGFyYW1ldGVycywgY29uc3VtZWRQYXRoc1tjb25zdW1lZFBhdGhzLmxlbmd0aCAtIDFdLnBhcmFtZXRlcnMpO1xuICByZXR1cm4ge2NvbnN1bWVkUGF0aHMsIGxhc3RDaGlsZDogY3VycmVudEluZGV4LCBwYXJhbWV0ZXJzfTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPdXRsZXROYW1lVW5pcXVlbmVzcyhub2RlczogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD5bXSk6IHZvaWQge1xuICBjb25zdCBuYW1lczoge1trOiBzdHJpbmddOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90fSA9IHt9O1xuICBub2Rlcy5mb3JFYWNoKG4gPT4ge1xuICAgIGxldCByb3V0ZVdpdGhTYW1lT3V0bGV0TmFtZSA9IG5hbWVzW24udmFsdWUub3V0bGV0XTtcbiAgICBpZiAocm91dGVXaXRoU2FtZU91dGxldE5hbWUpIHtcbiAgICAgIGNvbnN0IHAgPSByb3V0ZVdpdGhTYW1lT3V0bGV0TmFtZS51cmwubWFwKHMgPT4gcy50b1N0cmluZygpKS5qb2luKCcvJyk7XG4gICAgICBjb25zdCBjID0gbi52YWx1ZS51cmwubWFwKHMgPT4gcy50b1N0cmluZygpKS5qb2luKCcvJyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFR3byBzZWdtZW50cyBjYW5ub3QgaGF2ZSB0aGUgc2FtZSBvdXRsZXQgbmFtZTogJyR7cH0nIGFuZCAnJHtjfScuYCk7XG4gICAgfVxuICAgIG5hbWVzW24udmFsdWUub3V0bGV0XSA9IG4udmFsdWU7XG4gIH0pO1xufSJdfQ==

/***/ },

/***/ 411:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(360);
	__webpack_require__(412);
	var forkJoin_1 = __webpack_require__(413);
	var fromPromise_1 = __webpack_require__(415);
	function resolve(resolver, state) {
	    return resolveNode(resolver, state._root).map(function (_) { return state; });
	}
	exports.resolve = resolve;
	function resolveNode(resolver, node) {
	    if (node.children.length === 0) {
	        return fromPromise_1.fromPromise(resolver.resolveComponent(node.value.component).then(function (factory) {
	            node.value._resolvedComponentFactory = factory;
	            return node.value;
	        }));
	    }
	    else {
	        var c = node.children.map(function (c) { return resolveNode(resolver, c).toPromise(); });
	        return forkJoin_1.forkJoin(c).map(function (_) { return resolver.resolveComponent(node.value.component).then(function (factory) {
	            node.value._resolvedComponentFactory = factory;
	            return node.value;
	        }); });
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFPLHVCQUF1QixDQUFDLENBQUE7QUFDL0IsUUFBTyw2QkFBNkIsQ0FBQyxDQUFBO0FBSXJDLHlCQUF1QiwwQkFBMEIsQ0FBQyxDQUFBO0FBQ2xELDRCQUEwQiw2QkFBNkIsQ0FBQyxDQUFBO0FBS3hELGlCQUNJLFFBQTJCLEVBQUUsS0FBMEI7SUFDekQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBSGUsZUFBTyxVQUd0QixDQUFBO0FBRUQscUJBQ0ksUUFBMkIsRUFBRSxJQUFzQztJQUNyRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyx5QkFBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsR0FBRyxPQUFPLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FDbEIsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsZ0JBQWdCLENBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ3BFLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCLEdBQUcsT0FBTyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxFQUhHLENBR0gsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3RvUHJvbWlzZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50UmVzb2x2ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHtmb3JrSm9pbn0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2ZvcmtKb2luJztcbmltcG9ydCB7ZnJvbVByb21pc2V9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZSc7XG5cbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xuaW1wb3J0IHtUcmVlTm9kZX0gZnJvbSAnLi91dGlscy90cmVlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoXG4gICAgcmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Um91dGVyU3RhdGVTbmFwc2hvdD4ge1xuICByZXR1cm4gcmVzb2x2ZU5vZGUocmVzb2x2ZXIsIHN0YXRlLl9yb290KS5tYXAoXyA9PiBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOb2RlKFxuICAgIHJlc29sdmVyOiBDb21wb25lbnRSZXNvbHZlciwgbm9kZTogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnJvbVByb21pc2UocmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudCg8YW55Pm5vZGUudmFsdWUuY29tcG9uZW50KS50aGVuKGZhY3RvcnkgPT4ge1xuICAgICAgbm9kZS52YWx1ZS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH0pKTtcblxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGMgPSBub2RlLmNoaWxkcmVuLm1hcChjID0+IHJlc29sdmVOb2RlKHJlc29sdmVyLCBjKS50b1Byb21pc2UoKSk7XG4gICAgcmV0dXJuIGZvcmtKb2luKGMpLm1hcChcbiAgICAgICAgXyA9PiByZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50KDxhbnk+bm9kZS52YWx1ZS5jb21wb25lbnQpLnRoZW4oZmFjdG9yeSA9PiB7XG4gICAgICAgICAgbm9kZS52YWx1ZS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICAgICAgfSkpO1xuICB9XG59Il19

/***/ },

/***/ 416:
/***/ function(module, exports) {

	"use strict";
	var RouterOutletMap = (function () {
	    function RouterOutletMap() {
	        this._outlets = {};
	    }
	    RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
	    return RouterOutletMap;
	}());
	exports.RouterOutletMap = RouterOutletMap;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX291dGxldF9tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcm91dGVyX291dGxldF9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBO0lBQUE7UUFFRSxhQUFRLEdBQW1DLEVBQUUsQ0FBQztJQUVoRCxDQUFDO0lBREMsd0NBQWMsR0FBZCxVQUFlLElBQVksRUFBRSxNQUFvQixJQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RixzQkFBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBSlksdUJBQWUsa0JBSTNCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvdXRlck91dGxldH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyT3V0bGV0TWFwIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb3V0bGV0czoge1tuYW1lOiBzdHJpbmddOiBSb3V0ZXJPdXRsZXR9ID0ge307XG4gIHJlZ2lzdGVyT3V0bGV0KG5hbWU6IHN0cmluZywgb3V0bGV0OiBSb3V0ZXJPdXRsZXQpOiB2b2lkIHsgdGhpcy5fb3V0bGV0c1tuYW1lXSA9IG91dGxldDsgfVxufVxuIl19

/***/ },

/***/ 417:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var url_tree_1 = __webpack_require__(401);
	var router_link_1 = __webpack_require__(379);
	var RouterLinkActive = (function () {
	    function RouterLinkActive(router, element, renderer) {
	        var _this = this;
	        this.router = router;
	        this.element = element;
	        this.renderer = renderer;
	        this.classes = [];
	        this.routerLinkActiveOptions = { exact: true };
	        this.subscription = router.events.subscribe(function (s) {
	            if (s instanceof router_1.NavigationEnd) {
	                _this.update();
	            }
	        });
	    }
	    RouterLinkActive.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.links.changes.subscribe(function (s) { return _this.update(); });
	        this.update();
	    };
	    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
	        set: function (data) {
	            if (Array.isArray(data)) {
	                this.classes = data;
	            }
	            else {
	                this.classes = data.split(' ');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
	    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
	    RouterLinkActive.prototype.update = function () {
	        var _this = this;
	        if (!this.links || this.links.length === 0)
	            return;
	        var currentUrlTree = this.router.parseUrl(this.router.url);
	        var isActive = this.links.reduce(function (res, link) {
	            return res || url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.routerLinkActiveOptions.exact);
	        }, false);
	        this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, isActive); });
	    };
	    __decorate([
	        core_1.ContentChildren(router_link_1.RouterLink), 
	        __metadata('design:type', core_1.QueryList)
	    ], RouterLinkActive.prototype, "links", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RouterLinkActive.prototype, "routerLinkActiveOptions", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RouterLinkActive.prototype, "routerLinkActive", null);
	    RouterLinkActive = __decorate([
	        core_1.Directive({ selector: '[routerLinkActive]' }), 
	        __metadata('design:paramtypes', [router_1.Router, core_1.ElementRef, core_1.Renderer])
	    ], RouterLinkActive);
	    return RouterLinkActive;
	}());
	exports.RouterLinkActive = RouterLinkActive;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX2xpbmtfYWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RpcmVjdGl2ZXMvcm91dGVyX2xpbmtfYWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxQkFBeUgsZUFBZSxDQUFDLENBQUE7QUFHekksdUJBQW9DLFdBQVcsQ0FBQyxDQUFBO0FBQ2hELHlCQUEyQixhQUFhLENBQUMsQ0FBQTtBQUV6Qyw0QkFBeUIsZUFBZSxDQUFDLENBQUE7QUFPekM7SUFVRSwwQkFBb0IsTUFBYyxFQUFVLE9BQW1CLEVBQVUsUUFBa0I7UUFWN0YsaUJBK0NDO1FBckNxQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFSbkYsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUdkLDRCQUF1QixHQUE0QixFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztRQU1oRixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUEsQ0FBQztZQUMzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksc0JBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNkNBQWtCLEdBQWxCO1FBQUEsaUJBR0M7UUFGQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxFQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFHRCxzQkFBSSw4Q0FBZ0I7YUFBcEIsVUFBcUIsSUFBcUI7WUFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQVEsSUFBSSxDQUFDO1lBQzNCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNILENBQUM7OztPQUFBO0lBRUQsc0NBQVcsR0FBWCxVQUFZLE9BQVcsSUFBUyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELHNDQUFXLEdBQVgsY0FBcUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFL0MsaUNBQU0sR0FBZDtRQUFBLGlCQVdDO1FBVkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUVuRCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUM5QixVQUFDLEdBQUcsRUFBRSxJQUFJO1lBQ04sT0FBQSxHQUFHLElBQUksdUJBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDO1FBQXJGLENBQXFGLEVBQ3pGLEtBQUssQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ2hCLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUF0RSxDQUFzRSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQTdDRDtRQUFDLHNCQUFlLENBQUMsd0JBQVUsQ0FBQzs7bURBQUE7SUFJNUI7UUFBQyxZQUFLLEVBQUU7O3FFQUFBO0lBa0JSO1FBQUMsWUFBSyxFQUFFOzs7NERBQUE7SUF4QlY7UUFBQyxnQkFBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLG9CQUFvQixFQUFDLENBQUM7O3dCQUFBO0lBZ0Q1Qyx1QkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0M7QUEvQ1ksd0JBQWdCLG1CQStDNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBSZW5kZXJlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5pbXBvcnQge05hdmlnYXRpb25FbmQsIFJvdXRlcn0gZnJvbSAnLi4vcm91dGVyJztcbmltcG9ydCB7Y29udGFpbnNUcmVlfSBmcm9tICcuLi91cmxfdHJlZSc7XG5cbmltcG9ydCB7Um91dGVyTGlua30gZnJvbSAnLi9yb3V0ZXJfbGluayc7XG5cbmludGVyZmFjZSBSb3V0ZXJMaW5rQWN0aXZlT3B0aW9ucyB7XG4gIGV4YWN0OiBib29sZWFuO1xufVxuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rQWN0aXZlXSd9KVxuZXhwb3J0IGNsYXNzIFJvdXRlckxpbmtBY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBDb250ZW50Q2hpbGRyZW4oUm91dGVyTGluaykgcHJpdmF0ZSBsaW5rczogUXVlcnlMaXN0PFJvdXRlckxpbms+O1xuICBwcml2YXRlIGNsYXNzZXM6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQElucHV0KCkgcHJpdmF0ZSByb3V0ZXJMaW5rQWN0aXZlT3B0aW9uczogUm91dGVyTGlua0FjdGl2ZU9wdGlvbnMgPSB7ZXhhY3Q6IHRydWV9O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHMgPT4ge1xuICAgICAgaWYgKHMgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5saW5rcy5jaGFuZ2VzLnN1YnNjcmliZShzID0+IHRoaXMudXBkYXRlKCkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgcm91dGVyTGlua0FjdGl2ZShkYXRhOiBzdHJpbmdbXXxzdHJpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5jbGFzc2VzID0gPGFueT5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsYXNzZXMgPSBkYXRhLnNwbGl0KCcgJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczoge30pOiBhbnkgeyB0aGlzLnVwZGF0ZSgpOyB9XG4gIG5nT25EZXN0cm95KCk6IGFueSB7IHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH1cblxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubGlua3MgfHwgdGhpcy5saW5rcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IGN1cnJlbnRVcmxUcmVlID0gdGhpcy5yb3V0ZXIucGFyc2VVcmwodGhpcy5yb3V0ZXIudXJsKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMubGlua3MucmVkdWNlKFxuICAgICAgICAocmVzLCBsaW5rKSA9PlxuICAgICAgICAgICAgcmVzIHx8IGNvbnRhaW5zVHJlZShjdXJyZW50VXJsVHJlZSwgbGluay51cmxUcmVlLCB0aGlzLnJvdXRlckxpbmtBY3RpdmVPcHRpb25zLmV4YWN0KSxcbiAgICAgICAgZmFsc2UpO1xuXG4gICAgdGhpcy5jbGFzc2VzLmZvckVhY2goXG4gICAgICAgIGMgPT4gdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50Q2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGMsIGlzQWN0aXZlKSk7XG4gIH1cbn1cbiJdfQ==

/***/ },

/***/ 418:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(5);
	var router_outlet_map_1 = __webpack_require__(416);
	var shared_1 = __webpack_require__(400);
	var RouterOutlet = (function () {
	    function RouterOutlet(parentOutletMap, location, name) {
	        this.location = location;
	        parentOutletMap.registerOutlet(name ? name : shared_1.PRIMARY_OUTLET, this);
	    }
	    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
	        get: function () { return !!this.activated; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterOutlet.prototype, "component", {
	        get: function () {
	            if (!this.activated)
	                throw new Error('Outlet is not activated');
	            return this.activated.instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
	        get: function () {
	            if (!this.activated)
	                throw new Error('Outlet is not activated');
	            return this._activatedRoute;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterOutlet.prototype.deactivate = function () {
	        if (this.activated) {
	            this.activated.destroy();
	            this.activated = null;
	        }
	    };
	    RouterOutlet.prototype.activate = function (factory, activatedRoute, providers, outletMap) {
	        this.outletMap = outletMap;
	        this._activatedRoute = activatedRoute;
	        var inj = core_1.ReflectiveInjector.fromResolvedProviders(providers, this.location.parentInjector);
	        this.activated = this.location.createComponent(factory, this.location.length, inj, []);
	    };
	    RouterOutlet = __decorate([
	        core_1.Directive({ selector: 'router-outlet' }),
	        __param(2, core_1.Attribute('name')), 
	        __metadata('design:paramtypes', [router_outlet_map_1.RouterOutletMap, core_1.ViewContainerRef, String])
	    ], RouterOutlet);
	    return RouterOutlet;
	}());
	exports.RouterOutlet = RouterOutlet;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX291dGxldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHFCQUFxSSxlQUFlLENBQUMsQ0FBQTtBQUNySixrQ0FBOEIsc0JBQXNCLENBQUMsQ0FBQTtBQUVyRCx1QkFBNkIsV0FBVyxDQUFDLENBQUE7QUFHekM7SUFRRSxzQkFDSSxlQUFnQyxFQUFVLFFBQTBCLEVBQ2pELElBQVk7UUFEVyxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUV0RSxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsdUJBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsc0JBQUkscUNBQVc7YUFBZixjQUE2QixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUN2RCxzQkFBSSxtQ0FBUzthQUFiO1lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFDRCxzQkFBSSx3Q0FBYzthQUFsQjtZQUNFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCxpQ0FBVSxHQUFWO1FBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUVELCtCQUFRLEdBQVIsVUFDSSxPQUE4QixFQUFFLGNBQThCLEVBQzlELFNBQXVDLEVBQUUsU0FBMEI7UUFDckUsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBTSxHQUFHLEdBQUcseUJBQWtCLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUF2Q0g7UUFBQyxnQkFBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLGVBQWUsRUFBQyxDQUFDO21CQVdoQyxnQkFBUyxDQUFDLE1BQU0sQ0FBQzs7b0JBWGU7SUF3Q3ZDLG1CQUFDO0FBQUQsQ0FBQyxBQXZDRCxJQXVDQztBQXZDWSxvQkFBWSxlQXVDeEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXR0cmlidXRlLCBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgUmVmbGVjdGl2ZUluamVjdG9yLCBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlciwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi4vcm91dGVyX291dGxldF9tYXAnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSAnLi4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7UFJJTUFSWV9PVVRMRVR9IGZyb20gJy4uL3NoYXJlZCc7XG5cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAncm91dGVyLW91dGxldCd9KVxuZXhwb3J0IGNsYXNzIFJvdXRlck91dGxldCB7XG4gIHByaXZhdGUgYWN0aXZhdGVkOiBDb21wb25lbnRSZWY8YW55PjtcbiAgcHJpdmF0ZSBfYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlO1xuICBwdWJsaWMgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXA7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwYXJlbnRPdXRsZXRNYXA6IFJvdXRlck91dGxldE1hcCwgcHJpdmF0ZSBsb2NhdGlvbjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgIEBBdHRyaWJ1dGUoJ25hbWUnKSBuYW1lOiBzdHJpbmcpIHtcbiAgICBwYXJlbnRPdXRsZXRNYXAucmVnaXN0ZXJPdXRsZXQobmFtZSA/IG5hbWUgOiBQUklNQVJZX09VVExFVCwgdGhpcyk7XG4gIH1cblxuICBnZXQgaXNBY3RpdmF0ZWQoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuYWN0aXZhdGVkOyB9XG4gIGdldCBjb21wb25lbnQoKTogT2JqZWN0IHtcbiAgICBpZiAoIXRoaXMuYWN0aXZhdGVkKSB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVkLmluc3RhbmNlO1xuICB9XG4gIGdldCBhY3RpdmF0ZWRSb3V0ZSgpOiBBY3RpdmF0ZWRSb3V0ZSB7XG4gICAgaWYgKCF0aGlzLmFjdGl2YXRlZCkgdGhyb3cgbmV3IEVycm9yKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmF0ZWRSb3V0ZTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZhdGVkKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlZC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmFjdGl2YXRlZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGUoXG4gICAgICBmYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4sIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgIHByb3ZpZGVyczogUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJbXSwgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXApOiB2b2lkIHtcbiAgICB0aGlzLm91dGxldE1hcCA9IG91dGxldE1hcDtcbiAgICB0aGlzLl9hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xuICAgIGNvbnN0IGluaiA9IFJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocHJvdmlkZXJzLCB0aGlzLmxvY2F0aW9uLnBhcmVudEluamVjdG9yKTtcbiAgICB0aGlzLmFjdGl2YXRlZCA9IHRoaXMubG9jYXRpb24uY3JlYXRlQ29tcG9uZW50KGZhY3RvcnksIHRoaXMubG9jYXRpb24ubGVuZ3RoLCBpbmosIFtdKTtcbiAgfVxufVxuIl19

/***/ },

/***/ 419:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(2);
	var platform_browser_1 = __webpack_require__(257);
	var common = __webpack_require__(420);
	function provideRouter(config, opts) {
	    if (opts === void 0) { opts = {}; }
	    return [
	        { provide: common_1.PlatformLocation, useClass: platform_browser_1.BrowserPlatformLocation }
	    ].concat(common.provideRouter(config, opts));
	}
	exports.provideRouter = provideRouter;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXJfcHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBK0IsaUJBQWlCLENBQUMsQ0FBQTtBQUNqRCxpQ0FBc0MsMkJBQTJCLENBQUMsQ0FBQTtBQUVsRSxJQUFZLE1BQU0sV0FBTSwyQkFBMkIsQ0FBQyxDQUFBO0FBc0JwRCx1QkFBOEIsTUFBb0IsRUFBRSxJQUE4QjtJQUE5QixvQkFBOEIsR0FBOUIsU0FBOEI7SUFDaEYsTUFBTSxDQUFDO1FBQ0wsRUFBQyxPQUFPLEVBQUUseUJBQWdCLEVBQUUsUUFBUSxFQUFFLDBDQUF1QixFQUFDO2FBQzNELE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUN0QyxDQUFDO0FBQ0osQ0FBQztBQUxlLHFCQUFhLGdCQUs1QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbGF0Zm9ybUxvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuL2NvbW1vbl9yb3V0ZXJfcHJvdmlkZXJzJztcbmltcG9ydCB7Um91dGVyQ29uZmlnfSBmcm9tICcuL2NvbmZpZyc7XG5cblxuLyoqXG4gKiBBIGxpc3Qgb2Yge0BsaW5rIFByb3ZpZGVyfXMuIFRvIHVzZSB0aGUgcm91dGVyLCB5b3UgbXVzdCBhZGQgdGhpcyB0byB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdfSlcbiAqIGNsYXNzIEFwcENtcCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGNvbnN0IHJvdXRlciA9IFtcbiAqICAge3BhdGg6ICcvaG9tZScsIGNvbXBvbmVudDogSG9tZX1cbiAqIF07XG4gKlxuICogYm9vdHN0cmFwKEFwcENtcCwgW3Byb3ZpZGVSb3V0ZXIocm91dGVyKV0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUm91dGVyKGNvbmZpZzogUm91dGVyQ29uZmlnLCBvcHRzOiBjb21tb24uRXh0cmFPcHRpb25zID0ge30pOiBhbnlbXSB7XG4gIHJldHVybiBbXG4gICAge3Byb3ZpZGU6IFBsYXRmb3JtTG9jYXRpb24sIHVzZUNsYXNzOiBCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbn0sXG4gICAgLi4uY29tbW9uLnByb3ZpZGVSb3V0ZXIoY29uZmlnLCBvcHRzKVxuICBdO1xufVxuIl19

/***/ },

/***/ 420:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(2);
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var router_outlet_map_1 = __webpack_require__(416);
	var router_state_1 = __webpack_require__(407);
	var url_serializer_1 = __webpack_require__(402);
	exports.ROUTER_CONFIG = new core_1.OpaqueToken('ROUTER_CONFIG');
	exports.ROUTER_OPTIONS = new core_1.OpaqueToken('ROUTER_OPTIONS');
	function setupRouter(ref, resolver, urlSerializer, outletMap, location, injector, config, opts) {
	    if (ref.componentTypes.length == 0) {
	        throw new Error('Bootstrap at least one component before injecting Router.');
	    }
	    var componentType = ref.componentTypes[0];
	    var r = new router_1.Router(componentType, resolver, urlSerializer, outletMap, location, injector, config);
	    ref.registerDisposeListener(function () { return r.dispose(); });
	    if (opts.enableTracing) {
	        r.events.subscribe(function (e) {
	            console.group("Router Event: " + e.constructor.name);
	            console.log(e.toString());
	            console.log(e);
	            console.groupEnd();
	        });
	    }
	    return r;
	}
	exports.setupRouter = setupRouter;
	function setupRouterInitializer(injector) {
	    setTimeout(function () {
	        var appRef = injector.get(core_1.ApplicationRef);
	        if (appRef.componentTypes.length == 0) {
	            appRef.registerBootstrapListener(function () { injector.get(router_1.Router).initialNavigation(); });
	        }
	        else {
	            injector.get(router_1.Router).initialNavigation();
	        }
	    }, 0);
	    return function () { return null; };
	}
	exports.setupRouterInitializer = setupRouterInitializer;
	function provideRouter(_config, _opts) {
	    return [
	        { provide: exports.ROUTER_CONFIG, useValue: _config }, { provide: exports.ROUTER_OPTIONS, useValue: _opts },
	        common_1.Location, { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy },
	        { provide: url_serializer_1.UrlSerializer, useClass: url_serializer_1.DefaultUrlSerializer },
	        {
	            provide: router_1.Router,
	            useFactory: setupRouter,
	            deps: [
	                core_1.ApplicationRef, core_1.ComponentResolver, url_serializer_1.UrlSerializer, router_outlet_map_1.RouterOutletMap, common_1.Location, core_1.Injector,
	                exports.ROUTER_CONFIG, exports.ROUTER_OPTIONS
	            ]
	        },
	        router_outlet_map_1.RouterOutletMap,
	        { provide: router_state_1.ActivatedRoute, useFactory: function (r) { return r.routerState.root; }, deps: [router_1.Router] },
	        { provide: core_1.APP_INITIALIZER, multi: true, useFactory: setupRouterInitializer, deps: [core_1.Injector] }
	    ];
	}
	exports.provideRouter = provideRouter;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX3JvdXRlcl9wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uX3JvdXRlcl9wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUErRCxpQkFBaUIsQ0FBQyxDQUFBO0FBQ2pGLHFCQUF3RixlQUFlLENBQUMsQ0FBQTtBQUd4Ryx1QkFBcUIsVUFBVSxDQUFDLENBQUE7QUFDaEMsa0NBQThCLHFCQUFxQixDQUFDLENBQUE7QUFDcEQsNkJBQTZCLGdCQUFnQixDQUFDLENBQUE7QUFDOUMsK0JBQWtELGtCQUFrQixDQUFDLENBQUE7QUFFeEQscUJBQWEsR0FBRyxJQUFJLGtCQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsc0JBQWMsR0FBRyxJQUFJLGtCQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUloRSxxQkFDSSxHQUFtQixFQUFFLFFBQTJCLEVBQUUsYUFBNEIsRUFDOUUsU0FBMEIsRUFBRSxRQUFrQixFQUFFLFFBQWtCLEVBQUUsTUFBb0IsRUFDeEYsSUFBa0I7SUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUNELElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsSUFBTSxDQUFDLEdBQ0gsSUFBSSxlQUFNLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUYsR0FBRyxDQUFDLHVCQUF1QixDQUFDLGNBQU0sT0FBQSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7SUFFL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQXVCLENBQUMsQ0FBQyxXQUFZLENBQUMsSUFBTSxDQUFDLENBQUM7WUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBdEJlLG1CQUFXLGNBc0IxQixDQUFBO0FBRUQsZ0NBQXVDLFFBQWtCO0lBSXZELFVBQVUsQ0FBQztRQUNULElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQWMsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLGNBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEYsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzNDLENBQUM7SUFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDTixNQUFNLENBQUMsY0FBVyxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7QUFDekIsQ0FBQztBQWJlLDhCQUFzQix5QkFhckMsQ0FBQTtBQW9CRCx1QkFBOEIsT0FBcUIsRUFBRSxLQUFtQjtJQUN0RSxNQUFNLENBQUM7UUFDTCxFQUFDLE9BQU8sRUFBRSxxQkFBYSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxzQkFBYyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUM7UUFDdkYsaUJBQVEsRUFBRSxFQUFDLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxRQUFRLEVBQUUsNkJBQW9CLEVBQUM7UUFDckUsRUFBQyxPQUFPLEVBQUUsOEJBQWEsRUFBRSxRQUFRLEVBQUUscUNBQW9CLEVBQUM7UUFFeEQ7WUFDRSxPQUFPLEVBQUUsZUFBTTtZQUNmLFVBQVUsRUFBRSxXQUFXO1lBQ3ZCLElBQUksRUFBRTtnQkFDSixxQkFBYyxFQUFFLHdCQUFpQixFQUFFLDhCQUFhLEVBQUUsbUNBQWUsRUFBRSxpQkFBUSxFQUFFLGVBQVE7Z0JBQ3JGLHFCQUFhLEVBQUUsc0JBQWM7YUFDOUI7U0FDRjtRQUVELG1DQUFlO1FBQ2YsRUFBQyxPQUFPLEVBQUUsNkJBQWMsRUFBRSxVQUFVLEVBQUUsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksRUFBbEIsQ0FBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFNLENBQUMsRUFBQztRQUd4RixFQUFDLE9BQU8sRUFBRSxzQkFBZSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLGVBQVEsQ0FBQyxFQUFDO0tBQzlGLENBQUM7QUFDSixDQUFDO0FBckJlLHFCQUFhLGdCQXFCNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb24sIExvY2F0aW9uU3RyYXRlZ3ksIFBhdGhMb2NhdGlvblN0cmF0ZWd5fSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZXNvbHZlciwgSW5qZWN0b3IsIE9wYXF1ZVRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSb3V0ZXJDb25maWd9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL3JvdXRlcic7XG5pbXBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi9yb3V0ZXJfb3V0bGV0X21hcCc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICcuL3JvdXRlcl9zdGF0ZSc7XG5pbXBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZXJpYWxpemVyfSBmcm9tICcuL3VybF9zZXJpYWxpemVyJztcblxuZXhwb3J0IGNvbnN0IFJPVVRFUl9DT05GSUcgPSBuZXcgT3BhcXVlVG9rZW4oJ1JPVVRFUl9DT05GSUcnKTtcbmV4cG9ydCBjb25zdCBST1VURVJfT1BUSU9OUyA9IG5ldyBPcGFxdWVUb2tlbignUk9VVEVSX09QVElPTlMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBFeHRyYU9wdGlvbnMgeyBlbmFibGVUcmFjaW5nPzogYm9vbGVhbjsgfVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBSb3V0ZXIoXG4gICAgcmVmOiBBcHBsaWNhdGlvblJlZiwgcmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLCB1cmxTZXJpYWxpemVyOiBVcmxTZXJpYWxpemVyLFxuICAgIG91dGxldE1hcDogUm91dGVyT3V0bGV0TWFwLCBsb2NhdGlvbjogTG9jYXRpb24sIGluamVjdG9yOiBJbmplY3RvciwgY29uZmlnOiBSb3V0ZXJDb25maWcsXG4gICAgb3B0czogRXh0cmFPcHRpb25zKSB7XG4gIGlmIChyZWYuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLicpO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudFR5cGUgPSByZWYuY29tcG9uZW50VHlwZXNbMF07XG4gIGNvbnN0IHIgPVxuICAgICAgbmV3IFJvdXRlcihjb21wb25lbnRUeXBlLCByZXNvbHZlciwgdXJsU2VyaWFsaXplciwgb3V0bGV0TWFwLCBsb2NhdGlvbiwgaW5qZWN0b3IsIGNvbmZpZyk7XG4gIHJlZi5yZWdpc3RlckRpc3Bvc2VMaXN0ZW5lcigoKSA9PiByLmRpc3Bvc2UoKSk7XG5cbiAgaWYgKG9wdHMuZW5hYmxlVHJhY2luZykge1xuICAgIHIuZXZlbnRzLnN1YnNjcmliZShlID0+IHtcbiAgICAgIGNvbnNvbGUuZ3JvdXAoYFJvdXRlciBFdmVudDogJHsoPGFueT5lLmNvbnN0cnVjdG9yKS5uYW1lfWApO1xuICAgICAgY29uc29sZS5sb2coZS50b1N0cmluZygpKTtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJvdXRlckluaXRpYWxpemVyKGluamVjdG9yOiBJbmplY3Rvcikge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy85MTAxXG4gIC8vIERlbGF5IHRoZSByb3V0ZXIgaW5zdGFudGlhdGlvbiB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IChBcHBsaWNhdGlvblJlZiAtPlxuICAvLyBBUFBfSU5JVElBTElaRVIgLT4gUm91dGVyKVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBjb25zdCBhcHBSZWYgPSBpbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xuICAgIGlmIChhcHBSZWYuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICAgIGFwcFJlZi5yZWdpc3RlckJvb3RzdHJhcExpc3RlbmVyKCgpID0+IHsgaW5qZWN0b3IuZ2V0KFJvdXRlcikuaW5pdGlhbE5hdmlnYXRpb24oKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluamVjdG9yLmdldChSb3V0ZXIpLmluaXRpYWxOYXZpZ2F0aW9uKCk7XG4gICAgfVxuICB9LCAwKTtcbiAgcmV0dXJuICgpOiBhbnkgPT4gbnVsbDtcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2Yge0BsaW5rIFByb3ZpZGVyfXMuIFRvIHVzZSB0aGUgcm91dGVyLCB5b3UgbXVzdCBhZGQgdGhpcyB0byB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdfSlcbiAqIGNsYXNzIEFwcENtcCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGNvbnN0IHJvdXRlciA9IFtcbiAqICAge3BhdGg6ICcvaG9tZScsIGNvbXBvbmVudDogSG9tZX1cbiAqIF07XG4gKlxuICogYm9vdHN0cmFwKEFwcENtcCwgW3Byb3ZpZGVSb3V0ZXIocm91dGVyKV0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUm91dGVyKF9jb25maWc6IFJvdXRlckNvbmZpZywgX29wdHM6IEV4dHJhT3B0aW9ucyk6IGFueVtdIHtcbiAgcmV0dXJuIFtcbiAgICB7cHJvdmlkZTogUk9VVEVSX0NPTkZJRywgdXNlVmFsdWU6IF9jb25maWd9LCB7cHJvdmlkZTogUk9VVEVSX09QVElPTlMsIHVzZVZhbHVlOiBfb3B0c30sXG4gICAgTG9jYXRpb24sIHtwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VDbGFzczogUGF0aExvY2F0aW9uU3RyYXRlZ3l9LFxuICAgIHtwcm92aWRlOiBVcmxTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFVybFNlcmlhbGl6ZXJ9LFxuXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVyLFxuICAgICAgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXIsXG4gICAgICBkZXBzOiBbXG4gICAgICAgIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZXNvbHZlciwgVXJsU2VyaWFsaXplciwgUm91dGVyT3V0bGV0TWFwLCBMb2NhdGlvbiwgSW5qZWN0b3IsXG4gICAgICAgIFJPVVRFUl9DT05GSUcsIFJPVVRFUl9PUFRJT05TXG4gICAgICBdXG4gICAgfSxcblxuICAgIFJvdXRlck91dGxldE1hcCxcbiAgICB7cHJvdmlkZTogQWN0aXZhdGVkUm91dGUsIHVzZUZhY3Rvcnk6IChyOiBSb3V0ZXIpID0+IHIucm91dGVyU3RhdGUucm9vdCwgZGVwczogW1JvdXRlcl19LFxuXG4gICAgLy8gVHJpZ2dlciBpbml0aWFsIG5hdmlnYXRpb25cbiAgICB7cHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLCBtdWx0aTogdHJ1ZSwgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXJJbml0aWFsaXplciwgZGVwczogW0luamVjdG9yXX1cbiAgXTtcbn1cbiJdfQ==

/***/ },

/***/ 437:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var app_service_1 = __webpack_require__(438);
	exports.AppService = app_service_1.AppService;
	var project_service_1 = __webpack_require__(440);
	exports.ProjectService = project_service_1.ProjectService;
	var task_service_1 = __webpack_require__(451);
	exports.TaskService = task_service_1.TaskService;
	var reference_service_1 = __webpack_require__(452);
	exports.ReferenceService = reference_service_1.ReferenceService;
	var staff_service_1 = __webpack_require__(454);
	exports.StaffService = staff_service_1.StaffService;
	var comment_service_1 = __webpack_require__(455);
	exports.CommentService = comment_service_1.CommentService;
	exports.APP_SERVICES = [
	    app_service_1.AppService,
	    project_service_1.ProjectService,
	    task_service_1.TaskService,
	    reference_service_1.ReferenceService,
	    staff_service_1.StaffService,
	    comment_service_1.CommentService
	];


/***/ },

/***/ 438:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var AppService = (function () {
	    function AppService(http) {
	        this.http = http;
	        this.isLogged = false;
	    }
	    AppService.prototype.getUserProfile = function () {
	        var headers = { headers: HEADERS };
	        var url = 'p?id=userprofile';
	        return this.http.get(url, headers).map(function (response) {
	            return utils_1.parseResponseObjects(response.json().objects);
	        });
	    };
	    AppService.prototype.getTranslations = function () {
	        var _this = this;
	        if (this.translations) {
	            return Observable_1.Observable.of(this.translations);
	        }
	        var headers = { headers: HEADERS };
	        var url = 'p?id=common-captions';
	        return this.http.get(url, headers).map(function (response) {
	            _this.translations = response.json().captions;
	            return _this.translations;
	        });
	    };
	    AppService.prototype.getNav = function () {
	        var headers = { headers: HEADERS };
	        var url = 'p?id=outline';
	        return this.http.get(url, headers).map(function (response) { return response.json().objects[0]; });
	    };
	    AppService.prototype.getUsers = function () {
	        var headers = { headers: HEADERS };
	        var url = 'p?id=users';
	        return this.http.get(url, headers)
	            .map(function (response) { return response.json().objects[0].list; });
	    };
	    AppService.prototype.updateUserProfile = function (user) {
	    };
	    AppService.prototype.logout = function () {
	        return this.http.delete('/');
	    };
	    AppService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], AppService);
	    return AppService;
	}());
	exports.AppService = AppService;


/***/ },

/***/ 439:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var http_1 = __webpack_require__(326);
	function createURLSearchParams(_params) {
	    var params = new http_1.URLSearchParams();
	    for (var p in _params) {
	        params.set(encodeURIComponent(p), encodeURIComponent(_params[p]));
	    }
	    return params;
	}
	exports.createURLSearchParams = createURLSearchParams;
	function serializeObj(obj) {
	    var result = [];
	    for (var property in obj) {
	        result.push(encodeURIComponent(property) + '=' + encodeURIComponent(obj[property]));
	    }
	    return result.join('&');
	}
	exports.serializeObj = serializeObj;
	function parseResponseObjects(objects) {
	    var result = [];
	    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {
	        var obj = objects_1[_i];
	        if (obj.kind) {
	            result[obj.kind] = obj;
	        }
	        else if (obj.list && obj.meta && obj.type) {
	            result[obj.type] = obj;
	        }
	        else {
	            result.push(obj);
	        }
	    }
	    return result;
	}
	exports.parseResponseObjects = parseResponseObjects;


/***/ },

/***/ 440:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var models_1 = __webpack_require__(441);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var ProjectService = (function () {
	    function ProjectService(store, http, translate) {
	        this.store = store;
	        this.http = http;
	        this.translate = translate;
	    }
	    ProjectService.prototype.getProjectStatusTypes = function () {
	        return this.translate.get(['draft', 'processed', 'finished']).map(function (t) { return [
	            { value: 'DRAFT', text: t.draft, default: true },
	            { value: 'PROCESSED', text: t.processed },
	            { value: 'FINISHED', text: t.finished }
	        ]; });
	    };
	    ProjectService.prototype.fetchProjects = function (queryParams) {
	        if (queryParams === void 0) { queryParams = {}; }
	        return this.http.get('p?id=project-view', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                projects: data.list,
	                meta: data.meta,
	                loading: true
	            };
	        });
	    };
	    ProjectService.prototype.fetchProjectById = function (projectId) {
	        if (projectId === 'new') {
	            return Observable_1.Observable.of(new models_1.Project());
	        }
	        return this.http.get('p?id=project-form&projectId=' + projectId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; });
	    };
	    ProjectService.prototype.saveProject = function (project) {
	        var _this = this;
	        var url = 'p?id=project-form&projectId=' + project.id;
	        return this.http.post(url, utils_1.serializeObj(project), { headers: HEADERS })
	            .map(function (response) { return _this.transformPostResponse(response); })
	            .catch(function (error) { return Observable_1.Observable.throw(_this.transformPostResponse(error)); });
	    };
	    ProjectService.prototype.deleteProject = function (projects) {
	        return this.http.delete('p?id=project-view&ids=' + projects.map(function (it) { return it.id; }).join(','));
	    };
	    ProjectService.prototype.transformPostResponse = function (response) {
	        var json = response.json();
	        return Object.assign(json, {
	            ok: json.type === 'DOCUMENT_SAVED',
	            message: json.captions ? json.captions.type : json.message
	        });
	    };
	    ProjectService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [store_1.Store, http_1.Http, ng2_translate_1.TranslateService])
	    ], ProjectService);
	    return ProjectService;
	}());
	exports.ProjectService = ProjectService;


/***/ },

/***/ 441:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var user_1 = __webpack_require__(442);
	exports.User = user_1.User;
	var organization_1 = __webpack_require__(443);
	exports.Organization = organization_1.Organization;
	var attachment_1 = __webpack_require__(444);
	exports.Attachment = attachment_1.Attachment;
	var project_1 = __webpack_require__(445);
	exports.Project = project_1.Project;
	var task_1 = __webpack_require__(446);
	exports.Task = task_1.Task;
	var tag_1 = __webpack_require__(447);
	exports.Tag = tag_1.Tag;
	var task_type_1 = __webpack_require__(448);
	exports.TaskType = task_type_1.TaskType;
	var comment_1 = __webpack_require__(449);
	exports.Comment = comment_1.Comment;
	var request_1 = __webpack_require__(450);
	exports.Request = request_1.Request;


/***/ },

/***/ 442:
/***/ function(module, exports) {

	"use strict";
	var User = (function () {
	    function User() {
	        this.id = '';
	        this.userName = '@anonymous';
	    }
	    return User;
	}());
	exports.User = User;


/***/ },

/***/ 443:
/***/ function(module, exports) {

	"use strict";
	var Organization = (function () {
	    function Organization() {
	        this.id = '';
	    }
	    return Organization;
	}());
	exports.Organization = Organization;


/***/ },

/***/ 444:
/***/ function(module, exports) {

	"use strict";
	var Attachment = (function () {
	    function Attachment() {
	        this.id = '';
	    }
	    return Attachment;
	}());
	exports.Attachment = Attachment;


/***/ },

/***/ 445:
/***/ function(module, exports) {

	"use strict";
	var Project = (function () {
	    function Project() {
	        this.id = '';
	        this.fsid = '';
	        this.status = 'DRAFT';
	    }
	    return Project;
	}());
	exports.Project = Project;


/***/ },

/***/ 446:
/***/ function(module, exports) {

	"use strict";
	var Task = (function () {
	    function Task() {
	        this.id = '';
	        this.fsid = '';
	        this.status = 'DRAFT';
	        this.priority = 'NORMAL';
	    }
	    return Task;
	}());
	exports.Task = Task;


/***/ },

/***/ 447:
/***/ function(module, exports) {

	"use strict";
	var Tag = (function () {
	    function Tag() {
	        this.id = '';
	    }
	    return Tag;
	}());
	exports.Tag = Tag;


/***/ },

/***/ 448:
/***/ function(module, exports) {

	"use strict";
	var TaskType = (function () {
	    function TaskType() {
	        this.id = '';
	    }
	    return TaskType;
	}());
	exports.TaskType = TaskType;


/***/ },

/***/ 449:
/***/ function(module, exports) {

	"use strict";
	var Comment = (function () {
	    function Comment() {
	        this.id = '';
	    }
	    return Comment;
	}());
	exports.Comment = Comment;


/***/ },

/***/ 450:
/***/ function(module, exports) {

	"use strict";
	var Request = (function () {
	    function Request() {
	        this.id = '';
	    }
	    return Request;
	}());
	exports.Request = Request;


/***/ },

/***/ 451:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var ng2_translate_1 = __webpack_require__(347);
	var reference_service_1 = __webpack_require__(452);
	var models_1 = __webpack_require__(441);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var TaskService = (function () {
	    function TaskService(http, translate, referenceService) {
	        this.http = http;
	        this.translate = translate;
	        this.referenceService = referenceService;
	    }
	    TaskService.prototype.getTaskPriorityType = function () {
	        return this.translate.get(['urgent', 'high', 'medium', 'normal']).map(function (t) { return [
	            { value: 'URGENT', text: t.urgent },
	            { value: 'HIGH', text: t.high },
	            { value: 'MEDIUM', text: t.medium },
	            { value: 'NORMAL', text: t.normal, default: true }
	        ]; });
	    };
	    TaskService.prototype.getTaskStatusType = function () {
	        return this.translate.get(['draft', 'waiting', 'processed', 'finished']).map(function (t) { return [
	            { value: 'DRAFT', text: t.draft, default: true },
	            { value: 'WAITING', text: t.waiting },
	            { value: 'PROCESSED', text: t.processed },
	            { value: 'FINISHED', text: t.finished }
	        ]; });
	    };
	    TaskService.prototype.fetchTasks = function (queryParams) {
	        if (queryParams === void 0) { queryParams = {}; }
	        return this.http.get('p?id=task-view', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                tasks: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    TaskService.prototype.fetchTaskById = function (taskId) {
	        if (taskId === 'new') {
	            return Observable_1.Observable.of(new models_1.Task());
	        }
	        return this.http.get('p?id=task-form&taskId=' + taskId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[1]; });
	    };
	    TaskService.prototype.saveTask = function (task) {
	        var _this = this;
	        var url = 'p?id=task-form' + (task.id ? '&taskId=' + task.id : '');
	        return this.http.post(url, utils_1.serializeObj(task), { headers: HEADERS })
	            .map(function (response) { return _this.transformPostResponse(response); })
	            .catch(function (error) { return Observable_1.Observable.throw(_this.transformPostResponse(error)); });
	    };
	    TaskService.prototype.deleteTask = function (task) {
	        return this.http.delete('p?id=task-view&ids=' + task.id);
	    };
	    TaskService.prototype.transformPostResponse = function (response) {
	        var json = response.json();
	        return Object.assign(json, {
	            ok: json.type === 'DOCUMENT_SAVED',
	            message: json.captions ? json.captions.type : json.message
	        });
	    };
	    TaskService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http, ng2_translate_1.TranslateService, reference_service_1.ReferenceService])
	    ], TaskService);
	    return TaskService;
	}());
	exports.TaskService = TaskService;


/***/ },

/***/ 452:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var store_1 = __webpack_require__(421);
	var reference_reducer_1 = __webpack_require__(453);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var ReferenceService = (function () {
	    function ReferenceService(http, store) {
	        this.http = http;
	        this.store = store;
	    }
	    ReferenceService.prototype.loadReference = function () {
	        var _this = this;
	        this.fetchTags().subscribe(function (data) {
	            _this.store.dispatch({ type: reference_reducer_1.FETCH_TAGS, payload: data });
	        });
	        this.fetchTaskTypes().subscribe(function (data) {
	            _this.store.dispatch({ type: reference_reducer_1.FETCH_TASK_TYPES, payload: data });
	        });
	    };
	    ReferenceService.prototype.fetchTags = function () {
	        return this.http.get('/Reference/p?id=tags', { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                tags: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    ReferenceService.prototype.fetchTaskTypes = function () {
	        return this.http.get('/Reference/p?id=tasktypes', { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                taskTypes: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    ReferenceService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http, store_1.Store])
	    ], ReferenceService);
	    return ReferenceService;
	}());
	exports.ReferenceService = ReferenceService;


/***/ },

/***/ 453:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_TAGS = 'FETCH_TAGS';
	exports.FETCH_TASK_TYPES = 'FETCH_TASK_TYPES';
	;
	var initialState = {
	    tags: [],
	    taskTypes: []
	};
	exports.referenceReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_TAGS:
	            return Object.assign({}, state, {
	                tags: payload.tags
	            });
	        case exports.FETCH_TASK_TYPES:
	            return Object.assign({}, state, {
	                taskTypes: payload.taskTypes
	            });
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 454:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var StaffService = (function () {
	    function StaffService(http) {
	        this.http = http;
	    }
	    StaffService.prototype.getOrganizations = function (queryParams) {
	        return this.http.get('/Staff/p?id=get-organizations', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                organizations: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    StaffService.prototype.getOrganizationById = function (id) {
	        return this.getOrganizations({ ids: id });
	    };
	    StaffService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], StaffService);
	    return StaffService;
	}());
	exports.StaffService = StaffService;


/***/ },

/***/ 455:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var CommentService = (function () {
	    function CommentService(http) {
	        this.http = http;
	    }
	    CommentService.prototype.fetchTaskComments = function (taskId, page) {
	        if (page === void 0) { page = 0; }
	        return this.http.get('p?id=comments&taskId=' + taskId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[1]; });
	    };
	    CommentService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], CommentService);
	    return CommentService;
	}());
	exports.CommentService = CommentService;


/***/ },

/***/ 456:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dropdown_component_1 = __webpack_require__(457);
	var dropdown_toggle_component_1 = __webpack_require__(458);
	exports.DROPDOWN_DIRECTIVES = [dropdown_component_1.DropdownComponent, dropdown_toggle_component_1.DropdownToggleComponent];


/***/ },

/***/ 457:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var dropdown_toggle_component_1 = __webpack_require__(458);
	var DropdownComponent = (function () {
	    function DropdownComponent(renderer) {
	        var _this = this;
	        this.renderer = renderer;
	        this.open = false;
	        this.mouseEvent = false;
	        this.selfClick = false;
	        this.delay = 500;
	        this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
	            if (!_this.selfClick) {
	                _this.open = false;
	            }
	            else {
	                _this.selfClick = false;
	            }
	        });
	        this.documentKeyupListener = this.renderer.listenGlobal('body', 'keyup', function (event) {
	            if (event.code === 'Escape') {
	                _this.open = false;
	            }
	        });
	    }
	    Object.defineProperty(DropdownComponent.prototype, "isOpen", {
	        get: function () { return this.open; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    DropdownComponent.prototype.onMouseEnter = function ($event) {
	        var _this = this;
	        if (this.mouseEvent) {
	            clearTimeout(this.time);
	            this.time = setTimeout(function () { return _this.open = true; }, this.delay);
	        }
	    };
	    DropdownComponent.prototype.onMouseLeave = function ($event) {
	        var _this = this;
	        if (this.mouseEvent) {
	            clearTimeout(this.time);
	            this.time = setTimeout(function () { return _this.open = false; }, this.delay);
	        }
	    };
	    DropdownComponent.prototype.onClick = function ($event) {
	        this.selfClick = true;
	    };
	    DropdownComponent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.toggleComponent.forEach(function (it) { return it.toggle.subscribe(function (event) {
	            _this.toggleDropdown(event);
	        }); });
	    };
	    DropdownComponent.prototype.ngOnDestroy = function () {
	        this.documentClickListener();
	    };
	    DropdownComponent.prototype.toggleDropdown = function (event) {
	        this.open = !this.open;
	        event.preventDefault();
	    };
	    __decorate([
	        core_1.HostBinding('class.dropdown'), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostBinding('class.open'), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "isOpen", null);
	    __decorate([
	        core_1.HostListener('mouseenter', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onMouseEnter", null);
	    __decorate([
	        core_1.HostListener('mouseleave', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onMouseLeave", null);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onClick", null);
	    __decorate([
	        core_1.ContentChildren(dropdown_toggle_component_1.DropdownToggleComponent), 
	        __metadata('design:type', core_1.QueryList)
	    ], DropdownComponent.prototype, "toggleComponent", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "open", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "mouseEvent", void 0);
	    DropdownComponent = __decorate([
	        core_1.Component({
	            selector: '[dropdown]',
	            template: "<ng-content></ng-content>"
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer])
	    ], DropdownComponent);
	    return DropdownComponent;
	}());
	exports.DropdownComponent = DropdownComponent;


/***/ },

/***/ 458:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var DropdownToggleComponent = (function () {
	    function DropdownToggleComponent() {
	        this.toggle = new core_1.EventEmitter();
	    }
	    DropdownToggleComponent.prototype.onClick = function ($event) {
	        this.toggle.emit($event);
	    };
	    __decorate([
	        core_1.HostBinding('class.dropdown-toggle'), 
	        __metadata('design:type', Object)
	    ], DropdownToggleComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownToggleComponent.prototype, "onClick", null);
	    DropdownToggleComponent = __decorate([
	        core_1.Component({
	            selector: '[dropdown-toggle]',
	            template: "<ng-content></ng-content>"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], DropdownToggleComponent);
	    return DropdownToggleComponent;
	}());
	exports.DropdownToggleComponent = DropdownToggleComponent;


/***/ },

/***/ 459:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var projects_reducer_1 = __webpack_require__(460);
	var project_service_1 = __webpack_require__(440);
	var NavComponent = (function () {
	    function NavComponent(store, projectService) {
	        this.store = store;
	        this.projectService = projectService;
	    }
	    NavComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('projects').subscribe(function (data) {
	            if (data) {
	                _this.projects = data.projects;
	            }
	        });
	        this.projectService.fetchProjects({ nav: 1 }).subscribe(function (data) {
	            _this.store.dispatch({ type: projects_reducer_1.FETCH_NAV_PROJECTS, payload: data });
	        });
	    };
	    NavComponent.prototype.ngOnDestroy = function () {
	        this.storeSub && this.storeSub.unsubscribe();
	    };
	    NavComponent = __decorate([
	        core_1.Component({
	            selector: '[nav]',
	            template: __webpack_require__(461),
	            directives: [router_1.ROUTER_DIRECTIVES],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, project_service_1.ProjectService])
	    ], NavComponent);
	    return NavComponent;
	}());
	exports.NavComponent = NavComponent;


/***/ },

/***/ 460:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_NAV_PROJECTS = 'FETCH_NAV_PROJECTS';
	exports.FETCH_PROJECTS = 'FETCH_PROJECTS';
	exports.FETCH_PROJECT = 'FETCH_PROJECT';
	exports.ADD_PROJECT = 'ADD_PROJECT';
	exports.UPDATE_PROJECT = 'UPDATE_PROJECT';
	exports.DELETE_PROJECT = 'DELETE_PROJECT';
	;
	var initialState = {
	    meta: {},
	    projects: [],
	    project: undefined,
	    loading: false
	};
	exports.projectsReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_NAV_PROJECTS:
	            return payload;
	        case exports.FETCH_PROJECTS:
	            return payload;
	        case exports.FETCH_PROJECT:
	            return payload;
	        case exports.ADD_PROJECT:
	            return payload;
	        case exports.UPDATE_PROJECT:
	            return payload;
	        case exports.DELETE_PROJECT:
	            return payload;
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 461:
/***/ function(module, exports) {

	module.exports = "<ul>\r\n    <li>\r\n        <a [routerLink]=\"['tasks', 'my']\" class=\"nav-link\">\r\n            <i class=\"fa fa-pencil\"></i>\r\n            <span>{{'my_tasks' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li>\r\n        <a [routerLink]=\"['tasks', 'inbox']\" class=\"nav-link\">\r\n            <i class=\"fa fa-inbox\"></i>\r\n            <span>{{'tasks_assigned_to_me' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li>\r\n        <a [routerLink]=\"['/']\" class=\"nav-link\">\r\n            <i class=\"fa fa-calendar\"></i>\r\n            <span>{{'dashboard' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li class=\"divider\"></li>\r\n    <li>\r\n        <a [routerLink]=\"['projects']\" class=\"nav-link\">\r\n            <i class=\"fa fa-puzzle-piece\"></i>\r\n            <span>{{'projects' | translate}}</span>\r\n        </a>\r\n        <ul>\r\n            <li *ngFor=\"let project of projects\">\r\n                <a [routerLink]=\"['project', project.id, 'tasks']\" class=\"nav-link\">\r\n                    <i class=\"fa fa-file-text-o\"></i>\r\n                    <span>{{project.name}}</span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n"

/***/ },

/***/ 462:
/***/ function(module, exports) {

	module.exports = "<notification></notification>\r\n<div class=\"layout\" [class.hidden]=\"!isReady\">\r\n    <div class=\"content-overlay\" (mousedown)=\"hideNav($event)\" (touchstart)=\"hideNav($event)\"></div>\r\n    <header class=\"header navbar navbar-fixed-top\">\r\n        <div class=\"container\">\r\n            <div class=\"navbar-header\">\r\n                <button class=\"btn-side-nav-toggle\" type=\"button\" (click)=\"toggleNav()\"></button>\r\n                <img class=\"brand-logo\" alt=\"logo\" src=\"img/logo.png\" />\r\n                <span class=\"brand-title\">\r\n                    {{HEADER_TITLE}}\r\n                </span>\r\n            </div>\r\n            <nav class=\"navbar-nav navbar-right\">\r\n                <ul class=\"nav nav-inline navbar-right\">\r\n                    <li dropdown class=\"dropdown\">\r\n                        <a dropdown-toggle href=\"#\" class=\"dropdown-toggle\" (click)=\"preventDefault($event)\">\r\n                            <i class=\"fa fa-user\"></i>\r\n                        </a>\r\n                        <ul class=\"dropdown-menu right\">\r\n                            <li>\r\n                                <a class=\"user-profile\" [routerLink]=\"['user-profile']\">\r\n                                    {{loggedUser.name}}\r\n                                </a>\r\n                            </li>\r\n                            <li class=\"divider\"></li>\r\n                            <li>\r\n                                <a class=\"logout\" href=\"#logout\" (click)=\"logout($event)\">\r\n                                    {{'logout' | translate}}\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <form class=\"navbar-form navbar-search\" name=\"ft-search\" (submit)=\"ftSearch()\">\r\n                    <input type=\"hidden\" name=\"id\" value=\"search\" />\r\n                    <input type=\"search\" class=\"q\" name=\"keyword\" value=\"{{search_keyword}}\" placeholder=\"{{'search' | translate}}\" required autocomplete=\"off\" (focus)=\"searchToggle()\" (blur)=\"searchToggle()\" />\r\n                    <button type=\"reset\">\r\n                        <i class=\"fa fa-times\"></i>\r\n                    </button>\r\n                    <input type=\"submit\" value=\"search\" />\r\n                </form>\r\n            </nav>\r\n        </div>\r\n    </header>\r\n    <section class=\"container\">\r\n        <nav nav class=\"aside side-nav\"></nav>\r\n        <main class=\"content\">\r\n            <router-outlet></router-outlet>\r\n        </main>\r\n    </section>\r\n</div>\r\n"

/***/ },

/***/ 463:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var router_1 = __webpack_require__(378);
	var auth_guard_1 = __webpack_require__(464);
	var dashboard_1 = __webpack_require__(465);
	var projects_1 = __webpack_require__(466);
	var project_1 = __webpack_require__(577);
	var tasks_1 = __webpack_require__(581);
	var task_1 = __webpack_require__(586);
	var user_profile_1 = __webpack_require__(588);
	var login_1 = __webpack_require__(593);
	var routes = [
	    { path: '', component: dashboard_1.DashboardComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'dashboard', component: dashboard_1.DashboardComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'projects/:projectId', component: project_1.ProjectComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'projects', component: projects_1.ProjectsComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'project/:projectId/tasks', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'tasks/:for/:id', component: task_1.TaskComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'tasks/:for', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'tasks', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'task/:taskId', component: task_1.TaskComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'user-profile', component: user_profile_1.UserProfileComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'login', component: login_1.LoginComponent },
	    { path: '**', component: dashboard_1.DashboardComponent }
	];
	exports.APP_ROUTER_PROVIDERS = [
	    router_1.provideRouter(routes),
	    auth_guard_1.AuthGuard
	];


/***/ },

/***/ 464:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var services_1 = __webpack_require__(437);
	var AuthGuard = (function () {
	    function AuthGuard(appService, router) {
	        this.appService = appService;
	        this.router = router;
	    }
	    AuthGuard.prototype.canActivate = function (next, state) {
	        if (this.appService.isLogged) {
	            return true;
	        }
	        this.router.navigate(['/login']);
	        return false;
	    };
	    AuthGuard = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [services_1.AppService, router_1.Router])
	    ], AuthGuard);
	    return AuthGuard;
	}());
	exports.AuthGuard = AuthGuard;


/***/ },

/***/ 465:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var DashboardComponent = (function () {
	    function DashboardComponent(router) {
	        this.router = router;
	    }
	    DashboardComponent = __decorate([
	        core_1.Component({
	            selector: '[dashboard]',
	            template: 'dashboard'
	        }), 
	        __metadata('design:paramtypes', [router_1.Router])
	    ], DashboardComponent);
	    return DashboardComponent;
	}());
	exports.DashboardComponent = DashboardComponent;


/***/ },

/***/ 466:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var pipes_1 = __webpack_require__(467);
	var pagination_1 = __webpack_require__(572);
	var project_service_1 = __webpack_require__(440);
	var project_row_1 = __webpack_require__(574);
	var projects_reducer_1 = __webpack_require__(460);
	var ProjectsComponent = (function () {
	    function ProjectsComponent(store, router, projectService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.projectService = projectService;
	        this.notifyService = notifyService;
	        this.title = 'projects';
	        this.params = {};
	        this.meta = {};
	        this.requestProcess = true;
	    }
	    ProjectsComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('projects').subscribe(function (data) {
	            if (data) {
	                _this.projects = data.projects;
	                _this.meta = data.meta;
	                _this.requestProcess = false;
	            }
	        });
	        this.loadData();
	    };
	    ProjectsComponent.prototype.ngOnDestroy = function () {
	        this.storeSub && this.storeSub.unsubscribe();
	    };
	    ProjectsComponent.prototype.loadData = function (params) {
	        var _this = this;
	        this.projectService.fetchProjects(params).subscribe(function (data) {
	            _this.store.dispatch({ type: projects_reducer_1.FETCH_PROJECTS, payload: data });
	        });
	    };
	    ProjectsComponent.prototype.goToPage = function (params) {
	        this.loadData({
	            page: params.page
	        });
	    };
	    ProjectsComponent.prototype.newProject = function () {
	        this.router.navigate(['/projects', 'new']);
	    };
	    ProjectsComponent.prototype.deleteProject = function () {
	    };
	    ProjectsComponent = __decorate([
	        core_1.Component({
	            selector: 'project-list',
	            template: __webpack_require__(576),
	            directives: [
	                router_1.ROUTER_DIRECTIVES,
	                pagination_1.PaginationComponent,
	                project_row_1.ProjectRowComponent
	            ],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, project_service_1.ProjectService, notification_1.NotificationService])
	    ], ProjectsComponent);
	    return ProjectsComponent;
	}());
	exports.ProjectsComponent = ProjectsComponent;


/***/ },

/***/ 467:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var date_format_pipe_1 = __webpack_require__(468);
	exports.DateFormatPipe = date_format_pipe_1.DateFormatPipe;
	var text_transform_pipe_1 = __webpack_require__(571);
	exports.TextTransformPipe = text_transform_pipe_1.TextTransformPipe;


/***/ },

/***/ 468:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var moment = __webpack_require__(469);
	var DateFormatPipe = (function () {
	    function DateFormatPipe() {
	    }
	    DateFormatPipe.prototype.transform = function (date, format) {
	        console.log(date);
	        if (!date) {
	            return '';
	        }
	        if (!format) {
	            format = 'DD.MM.YYYY';
	        }
	        var md = moment(date);
	        if (md.isValid()) {
	            return md.format(format);
	        }
	        return '';
	    };
	    DateFormatPipe = __decorate([
	        core_1.Pipe({ name: 'dateFmt' }), 
	        __metadata('design:paramtypes', [])
	    ], DateFormatPipe);
	    return DateFormatPipe;
	}());
	exports.DateFormatPipe = DateFormatPipe;


/***/ },

/***/ 571:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var TextTransformPipe = (function () {
	    function TextTransformPipe() {
	    }
	    TextTransformPipe.prototype.transform = function (text, transform) {
	        switch (transform) {
	            case 'L':
	                return text.toLowerCase();
	            case 'U':
	                return text.toUpperCase();
	            default:
	                return text;
	        }
	    };
	    TextTransformPipe = __decorate([
	        core_1.Pipe({ name: 'text' }), 
	        __metadata('design:paramtypes', [])
	    ], TextTransformPipe);
	    return TextTransformPipe;
	}());
	exports.TextTransformPipe = TextTransformPipe;


/***/ },

/***/ 572:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(573));


/***/ },

/***/ 573:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var PaginationComponent = (function () {
	    function PaginationComponent() {
	        this.maxPageControl = 5;
	        this.totalPages = -1;
	        this.onPageChange = new core_1.EventEmitter();
	        this.initialized = 0;
	        this.currentPage = 0;
	        this.startPage = 0;
	        this.stopPage = 0;
	        this.pages = [];
	    }
	    Object.defineProperty(PaginationComponent.prototype, "hostHidden", {
	        get: function () { return this.totalPages < 2; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(PaginationComponent.prototype, "page", {
	        set: function (value) {
	            this.currentPage = +value;
	            if (this.initialized < 2) {
	                ++this.initialized;
	                this.pagination();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PaginationComponent.prototype.toPage = function (event, page) {
	        event.preventDefault();
	        this.currentPage = +page;
	        this.onPageChange.emit({ page: page });
	        this.pagination();
	    };
	    PaginationComponent.prototype.pagination = function () {
	        this.pages = [];
	        if (this.totalPages <= 1) {
	            return;
	        }
	        this.maxPageControl = +this.maxPageControl;
	        this.totalPages = +this.totalPages;
	        this.currentPage = +this.currentPage;
	        var perPage = Math.floor(this.maxPageControl / 2);
	        this.startPage = (this.currentPage - perPage);
	        this.stopPage = (this.currentPage + perPage);
	        if (this.startPage <= perPage) {
	            this.startPage = 1;
	        }
	        else if (this.currentPage == this.totalPages) {
	            this.startPage = this.totalPages - this.maxPageControl;
	        }
	        if (this.stopPage > (this.totalPages - perPage)) {
	            this.stopPage = this.totalPages;
	        }
	        else if (this.currentPage == 1) {
	            this.stopPage = this.maxPageControl + 1;
	        }
	        if ((this.maxPageControl + perPage) >= this.totalPages) {
	            this.startPage = 1;
	            this.stopPage = this.totalPages;
	        }
	        for (var p = this.startPage; p <= this.stopPage; p++) {
	            this.pages.push(p);
	        }
	    };
	    __decorate([
	        core_1.HostBinding('hidden'), 
	        __metadata('design:type', Object)
	    ], PaginationComponent.prototype, "hostHidden", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PaginationComponent.prototype, "maxPageControl", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PaginationComponent.prototype, "totalPages", void 0);
	    __decorate([
	        core_1.Input('page'), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], PaginationComponent.prototype, "page", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], PaginationComponent.prototype, "onPageChange", void 0);
	    PaginationComponent = __decorate([
	        core_1.Component({
	            selector: 'pagination',
	            template: "\n        <div class=\"pagination\" *ngIf=\"totalPages > 1\">\n            <a href=\"#\" *ngIf=\"startPage > 1\" (click)=\"toPage($event, 1)\">1</a>\n            <span *ngIf=\"startPage > 1\">...</span>\n            <a [class.page-active]=\"p == currentPage\" href=\"#\" *ngFor=\"let p of pages\" (click)=\"toPage($event, p)\">{{p}}</a>\n            <span *ngIf=\"stopPage < totalPages\">...</span>\n            <a *ngIf=\"stopPage < totalPages\" href=\"#\" (click)=\"toPage($event, totalPages)\">{{totalPages}}</a>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], PaginationComponent);
	    return PaginationComponent;
	}());
	exports.PaginationComponent = PaginationComponent;


/***/ },

/***/ 574:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var ng2_translate_1 = __webpack_require__(347);
	var pipes_1 = __webpack_require__(467);
	var project_1 = __webpack_require__(445);
	var ProjectRowComponent = (function () {
	    function ProjectRowComponent() {
	        this.selected = false;
	    }
	    ProjectRowComponent.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', project_1.Project)
	    ], ProjectRowComponent.prototype, "project", void 0);
	    ProjectRowComponent = __decorate([
	        core_1.Component({
	            selector: 'project-row',
	            template: __webpack_require__(575),
	            directives: [router_1.ROUTER_DIRECTIVES],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ProjectRowComponent);
	    return ProjectRowComponent;
	}());
	exports.ProjectRowComponent = ProjectRowComponent;


/***/ },

/***/ 575:
/***/ function(module, exports) {

	module.exports = "<div class=\"entry-wrap\" [class.active]=\"selected\">\r\n    <div class=\"entry\">\r\n        <label class=\"entry-select\">\r\n            <input type=\"checkbox\" name=\"project-id\" value=\"{{project.id}}\" (change)=\"toggleSelected()\" [checked]=\"selected\" />\r\n        </label>\r\n        <a class=\"entry-link\" [routerLink]=\"['./', project.id]\">\r\n            <div class=\"entry-fields\">\r\n                <span class=\"vw-project-name\">{{project.name}}</span>\r\n                <span class=\"vw-project-status\">{{project.status | text:'L' | translate}}</span>\r\n                <span class=\"vw-icon\">\r\n                    <i class=\"fa fa-file\" *ngIf=\"project.hasAttachments\"></i>\r\n                </span>\r\n                <span class=\"vw-project-customer\">{{project.customer?.name}}</span>\r\n                <span class=\"vw-user-manager\">{{project.manager?.userName}}</span>\r\n                <span class=\"vw-user-programmer\">{{project.programmer?.userName}}</span>\r\n                <span class=\"vw-user-tester\">{{project.tester?.userName}}</span>\r\n                <span class=\"vw-project-comment\">{{project.comment}}</span>\r\n                <span class=\"vw-date\">{{project.finishDate | dateFmt}}</span>\r\n            </div>\r\n        </a>\r\n    </div>\r\n</div>\r\n"

/***/ },

/***/ 576:
/***/ function(module, exports) {

	module.exports = "<div class=\"content-header\">\r\n    <h1 class=\"header-title\">\r\n        {{title | translate}}\r\n    </h1>\r\n    <div class=\"content-actions\">\r\n        <button class=\"btn\" type=\"button\" (click)=\"newProject()\">\r\n            {{'new_project' | translate}}\r\n        </button>\r\n        <pagination class=\"pull-right\" totalPages=\"{{meta.totalPages}}\" page=\"{{meta.page}}\" (onPageChange)=\"goToPage($event)\"></pagination>\r\n    </div>\r\n</div>\r\n<div class=\"content-body\">\r\n    <div class=\"view view-project\" [class.load]=\"requestProcess\">\r\n        <header class=\"entries-head\">\r\n            <div class=\"head-wrap\">\r\n                <label class=\"entry-select\">\r\n                    <input type=\"checkbox\" class=\"all\" />\r\n                </label>\r\n                <div class=\"entry-captions\">\r\n                    <span>{{'name' | translate}}</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"entries\">\r\n            <project-row [project]=\"project\" *ngFor=\"let project of projects\"></project-row>\r\n        </div>\r\n    </div>\r\n</div>\r\n<router-outlet></router-outlet>\r\n"

/***/ },

/***/ 577:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(456);
	var switch_button_1 = __webpack_require__(578);
	var pipes_1 = __webpack_require__(467);
	var services_1 = __webpack_require__(437);
	var ProjectComponent = (function () {
	    function ProjectComponent(store, router, route, formBuilder, translate, appService, projectService, staffService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.route = route;
	        this.formBuilder = formBuilder;
	        this.translate = translate;
	        this.appService = appService;
	        this.projectService = projectService;
	        this.staffService = staffService;
	        this.notifyService = notifyService;
	        this.isReady = false;
	    }
	    ProjectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.form = this.formBuilder.group({
	            name: ['', common_1.Validators.required],
	            status: [''],
	            customerUserId: [''],
	            managerUserId: [''],
	            programmerUserId: [''],
	            testerUserId: [''],
	            observerUserIds: [''],
	            comment: [''],
	            finishDate: [''],
	            attachments: ['']
	        });
	        this.sub = this.route.params.subscribe(function (params) {
	            _this.projectService.fetchProjectById(params['projectId']).subscribe(function (project) {
	                console.log(project);
	                _this.project = project;
	                _this.isReady = true;
	            }, function (error) { return _this.handleXhrError(error); });
	        });
	    };
	    ProjectComponent.prototype.saveProject = function () {
	        var _this = this;
	        var noty = this.notifyService.process(this.translate.instant('wait_while_document_save')).show();
	        this.projectService.saveProject(this.project).subscribe(function (response) {
	            console.log(response);
	            noty.set({ type: 'success', message: response.message }).remove(1500);
	            _this.close();
	            return response;
	        }, function (error) {
	            console.log(error);
	            noty.set({ type: 'error', message: error.message }).remove(1500);
	            _this.errorSaveProject(error);
	            return error;
	        }, function () { return noty.remove(1500); });
	    };
	    ProjectComponent.prototype.errorSaveProject = function (errorResponse) {
	        console.log(errorResponse);
	    };
	    ProjectComponent.prototype.close = function () {
	        this.router.navigate(['/projects']);
	    };
	    ProjectComponent.prototype.handleXhrError = function (errorResponse) {
	        console.log(errorResponse);
	        if (errorResponse.status === 401) {
	            this.router.navigate(['/login']);
	        }
	    };
	    ProjectComponent.prototype.setStatus = function (value) {
	        this.project.status = value;
	    };
	    ProjectComponent.prototype.closeDropdown = function () {
	        document.body.click();
	    };
	    ProjectComponent.prototype.onScrollSelectList = function ($el, listId) {
	        if ($el.scrollHeight <= $el.scrollTop + $el.offsetHeight) {
	            if (listId === 'customer') {
	                this.searchCustomer({
	                    page: 2
	                });
	            }
	        }
	    };
	    ProjectComponent.prototype.searchCustomer = function (e) {
	        var _this = this;
	        var param = {};
	        if (e.target) {
	            param.keyword = e.target.value;
	        }
	        else {
	            param = e;
	        }
	        this.staffService.getOrganizations(param).subscribe(function (data) {
	            if (param.keyword) {
	                _this.customers = data.organizations;
	            }
	            else {
	                _this.customers = _this.customers.concat(data.organizations);
	            }
	        });
	    };
	    ProjectComponent.prototype.selectCustomer = function (customer) {
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectManager = function (user) {
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectProgrammer = function (user) {
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectTester = function (user) {
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectObserver = function (observer) {
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.removeObserver = function (observer, $event) {
	        $event.stopPropagation();
	        this.closeDropdown();
	    };
	    ProjectComponent = __decorate([
	        core_1.Component({
	            selector: 'project',
	            styles: ["project { display: block; }"],
	            template: __webpack_require__(580),
	            directives: [
	                router_1.ROUTER_DIRECTIVES,
	                common_1.FORM_DIRECTIVES,
	                dropdown_1.DROPDOWN_DIRECTIVES,
	                switch_button_1.SwitchButtonComponent
	            ],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, router_1.ActivatedRoute, common_1.FormBuilder, ng2_translate_1.TranslateService, services_1.AppService, services_1.ProjectService, services_1.StaffService, notification_1.NotificationService])
	    ], ProjectComponent);
	    return ProjectComponent;
	}());
	exports.ProjectComponent = ProjectComponent;


/***/ },

/***/ 578:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(579));


/***/ },

/***/ 579:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var SwitchButtonComponent = (function () {
	    function SwitchButtonComponent() {
	        this.name = 'swb' + Math.random();
	        this.multi = false;
	        this.disabled = false;
	        this.checkDefault = true;
	    }
	    SwitchButtonComponent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        [].concat(this.items).forEach(function (it) {
	            if (_this.checkDefault && it.value == _this.model[_this.value]) {
	                _this.checkDefault = false;
	            }
	        });
	    };
	    SwitchButtonComponent.prototype.select = function (value, event) {
	        this.model[this.value] = value;
	    };
	    SwitchButtonComponent.prototype.isSelected = function (item) {
	        return item.value == this.model[this.value] || (this.checkDefault && item.default);
	    };
	    __decorate([
	        core_1.HostBinding('class.switch-button'), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "model", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "value", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "items", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "name", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "multi", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "disabled", void 0);
	    SwitchButtonComponent = __decorate([
	        core_1.Component({
	            selector: 'switch-button',
	            template: "\n        <label class=\"input\"\n                [class.active]=\"isSelected(item)\"\n                [class.disabled]=\"disabled || item.disabled\"\n                *ngFor=\"let item of items\">\n            <input type=\"{{multi ? 'checkbox' : 'radio'}}\"\n                name=\"{{name}}\"\n                value=\"{{item.value}}\"\n                [checked]=\"isSelected(item)\"\n                [disabled]=\"disabled || item.disabled\"\n                (change)=\"select(item.value, $event)\" />\n            <i class=\"fa fa-{{item.icon}}\" *ngIf=\"item.icon\"></i>\n            <span>{{item.text}}</span>\n        </label>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], SwitchButtonComponent);
	    return SwitchButtonComponent;
	}());
	exports.SwitchButtonComponent = SwitchButtonComponent;


/***/ },

/***/ 580:
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"!isReady\">\r\n    {{'loading' | translate}}\r\n</div>\r\n<form class=\"form\" [ngFormModel]=\"form\" *ngIf=\"isReady\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{(project.id ? 'project' : 'new_project') | translate}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"saveProject()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <fieldset class=\"fieldset\">\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'name' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.name.valid\">\r\n                    <input class=\"span8\" [(ngModel)]=\"project.name\" ngControl=\"name\" />\r\n                    <div [hidden]=\"form.controls.name.valid || form.controls.name.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'customer' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.customerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <div *ngIf=\"project.customer\">\r\n                                    <span>{{project.customer.name}}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <div class=\"select-search\">\r\n                                    <input name=\"keyword\" placeholder=\"{{'search' | translate}}\" (keyup)=\"searchCustomer($event)\" />\r\n                                </div>\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'customer')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"project.customer?.id == m.id\" *ngFor=\"let m of customers\" (click)=\"selectCustomer(m)\">\r\n                                        {{m.name}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.customerUserId.valid || form.controls.customerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'manager' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.managerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span *ngIf=\"project.manager\">{{project.manager.userName || project.manager.login}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'manager')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"project.manager?.id == m.id\" *ngFor=\"let m of users\" (click)=\"selectManager(m)\">\r\n                                        {{m.name || m.login}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.managerUserId.valid || form.controls.managerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'programmer' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.programmerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span *ngIf=\"project.programmer\">{{project.programmer.userName || project.programmer.login}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'programmer')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"project.programmer?.id == m.id\" *ngFor=\"let m of users\" (click)=\"selectProgrammer(m)\">\r\n                                        {{m.name || m.login}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.programmerUserId.valid || form.controls.programmerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'tester' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.testerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span *ngIf=\"project.tester\">{{project.tester.userName || project.tester.login}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'tester')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"project.tester?.id == m.id\" *ngFor=\"let m of users\" (click)=\"selectTester(m)\">\r\n                                        {{m.name || m.login}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.testerUserId.valid || form.controls.testerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'observers' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span class=\"tag\" *ngFor=\"let m of project.observers\" (click)=\"removeObserver(m, $event)\">{{m.userName || m.login}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'observers')\">\r\n                                    <li class=\"select-option\" *ngFor=\"let m of users\" (click)=\"selectObserver(m)\">\r\n                                        {{m.userName || m.login}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'status' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <switch-button [model]=\"project\" value=\"status\" [items]=\"projectStatusTypes\"></switch-button>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'finish_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"project.finishDate\" ngControl=\"finishDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'comment' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.comment.valid\">\r\n                    <textarea class=\"span8\" [(ngModel)]=\"project.comment\" ngControl=\"comment\"></textarea>\r\n                    <div [hidden]=\"form.controls.comment.valid || form.controls.comment.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n        <fieldset class=\"fieldset\">\r\n            <legend class=\"legend\">\r\n                {{'attachments' | translate}}\r\n            </legend>\r\n            <div class=\"form-group\">\r\n                <button type=\"button\" class=\"btn btn-upload\" data-upload=\"\">\r\n                    <i class=\"fa fa-paperclip\"></i>\r\n                    <span>{{'attach_file' | translate}}</span>\r\n                </button>\r\n                <div class=\"attachments\" data-upload-files=\"\">\r\n                    <div class=\"attachments-file\" *ngFor=\"let att of project.attachments\">\r\n                        <a class=\"file-name\" href=\"{{att.url}}\">\r\n                            {{att.realFileName}}\r\n                        </a>\r\n                        <span class=\"btn btn-sm btn-link btn-remove-file on-edit\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 581:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var pipes_1 = __webpack_require__(467);
	var pagination_1 = __webpack_require__(572);
	var task_service_1 = __webpack_require__(451);
	var task_row_1 = __webpack_require__(582);
	var tasks_reducer_1 = __webpack_require__(584);
	var TasksComponent = (function () {
	    function TasksComponent(store, router, route, taskService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.route = route;
	        this.taskService = taskService;
	        this.notifyService = notifyService;
	        this.params = {};
	        this.meta = {};
	        this.requestProcess = true;
	    }
	    TasksComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('tasks').subscribe(function (data) {
	            if (data) {
	                _this.tasks = data.tasks;
	                _this.meta = data.meta;
	                _this.requestProcess = false;
	            }
	        });
	        this.paramsSub = this.route.params.subscribe(function (params) {
	            var taskFor = params['for'];
	            var projectId = params['projectId'];
	            switch (taskFor) {
	                case 'inbox':
	                    _this.title = 'tasks_assigned_to_me';
	                    break;
	                case 'my':
	                    _this.title = 'my_tasks';
	                    break;
	                default:
	                    _this.title = 'tasks';
	                    break;
	            }
	            _this.params = params;
	            _this.loadData(_this.params);
	        });
	    };
	    TasksComponent.prototype.ngOnDestroy = function () {
	        this.storeSub.unsubscribe();
	        this.paramsSub.unsubscribe();
	    };
	    TasksComponent.prototype.loadData = function (params) {
	        var _this = this;
	        this.requestProcess = true;
	        this.taskService.fetchTasks(params).subscribe(function (data) {
	            _this.store.dispatch({ type: tasks_reducer_1.FETCH_TASKS, payload: data });
	        });
	    };
	    TasksComponent.prototype.goToPage = function (params) {
	        this.loadData({
	            page: params.page
	        });
	    };
	    TasksComponent.prototype.newTask = function () {
	        this.router.navigate(['/task', 'new']);
	    };
	    TasksComponent.prototype.deleteTask = function (task) {
	        this.taskService.deleteTask(task).subscribe();
	    };
	    TasksComponent = __decorate([
	        core_1.Component({
	            selector: 'tasks',
	            template: __webpack_require__(585),
	            directives: [router_1.ROUTER_DIRECTIVES, pagination_1.PaginationComponent, task_row_1.TaskRowComponent],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, router_1.ActivatedRoute, task_service_1.TaskService, notification_1.NotificationService])
	    ], TasksComponent);
	    return TasksComponent;
	}());
	exports.TasksComponent = TasksComponent;


/***/ },

/***/ 582:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var ng2_translate_1 = __webpack_require__(347);
	var pipes_1 = __webpack_require__(467);
	var task_1 = __webpack_require__(446);
	var TaskRowComponent = (function () {
	    function TaskRowComponent() {
	        this.selected = false;
	    }
	    TaskRowComponent.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', task_1.Task)
	    ], TaskRowComponent.prototype, "task", void 0);
	    TaskRowComponent = __decorate([
	        core_1.Component({
	            selector: 'task-row',
	            template: __webpack_require__(583),
	            directives: [router_1.ROUTER_DIRECTIVES],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], TaskRowComponent);
	    return TaskRowComponent;
	}());
	exports.TaskRowComponent = TaskRowComponent;


/***/ },

/***/ 583:
/***/ function(module, exports) {

	module.exports = "<div class=\"entry-wrap\" [class.active]=\"selected\">\r\n    <div class=\"entry\">\r\n        <label class=\"entry-select\">\r\n            <input type=\"checkbox\" name=\"task-id\" value=\"{{task.id}}\" (change)=\"toggleSelected()\" [checked]=\"selected\" />\r\n        </label>\r\n        <a class=\"entry-link\" [routerLink]=\"['/task', task.id]\">\r\n            <div class=\"entry-fields\">\r\n                <span class=\"vw-task-body\">{{task.body}}</span>\r\n                <span class=\"vw-task-status\">{{task.status | text:'L' | translate}}</span>\r\n                <span class=\"vw-task-priority\">{{task.priority | text:'L' | translate}}</span>\r\n                <span class=\"vw-task-assignee\">{{task.assignee?.userName}}</span>\r\n                <span class=\"vw-date\">{{task.startDate | dateFmt}}</span>\r\n                <span class=\"vw-date\">{{task.dueDate | dateFmt}}</span>\r\n                <span class=\"vw-tags\">\r\n                    <span class=\"tag\" *ngFor=\"let tag of task.tags\">{{tag.name}}</span>\r\n                </span>\r\n            </div>\r\n        </a>\r\n    </div>\r\n</div>\r\n"

/***/ },

/***/ 584:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_TASKS = 'FETCH_TASKS';
	exports.FETCH_TASK = 'FETCH_TASK';
	exports.ADD_TASK = 'ADD_TASK';
	exports.UPDATE_TASK = 'UPDATE_TASK';
	exports.DELETE_TASK = 'DELETE_TASK';
	;
	var initialState = {
	    meta: {},
	    tasks: [],
	    loading: false
	};
	exports.tasksReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_TASKS:
	            return payload;
	        case exports.FETCH_TASK:
	            return payload;
	        case exports.ADD_TASK:
	            return payload;
	        case exports.UPDATE_TASK:
	            return payload;
	        case exports.DELETE_TASK:
	            return payload;
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 585:
/***/ function(module, exports) {

	module.exports = "<div class=\"content-header\">\r\n    <h1 class=\"header-title\">\r\n        {{title | translate}}\r\n    </h1>\r\n    <div class=\"content-actions\">\r\n        <button class=\"btn\" type=\"button\" (click)=\"newTask()\">\r\n            {{'new_task' | translate}}\r\n        </button>\r\n        <pagination class=\"pull-right\" totalPages=\"{{meta.totalPages}}\" page=\"{{meta.page}}\" (onPageChange)=\"goToPage($event)\"></pagination>\r\n    </div>\r\n</div>\r\n<div class=\"content-body\">\r\n    <div class=\"view view-task\" [class.load]=\"requestProcess\">\r\n        <header class=\"entries-head\">\r\n            <div class=\"head-wrap\">\r\n                <label class=\"entry-select\">\r\n                    <input type=\"checkbox\" class=\"all\" />\r\n                </label>\r\n                <div class=\"entry-captions\">\r\n                    <span>{{'body' | translate}}</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"entries\">\r\n            <task-row [task]=\"task\" *ngFor=\"let task of tasks\"></task-row>\r\n        </div>\r\n    </div>\r\n</div>\r\n<router-outlet></router-outlet>\r\n"

/***/ },

/***/ 586:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var Observable_1 = __webpack_require__(38);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(456);
	var switch_button_1 = __webpack_require__(578);
	var pipes_1 = __webpack_require__(467);
	var services_1 = __webpack_require__(437);
	var TaskComponent = (function () {
	    function TaskComponent(router, route, formBuilder, translate, appService, projectService, taskService, referenceService, notifyService) {
	        this.router = router;
	        this.route = route;
	        this.formBuilder = formBuilder;
	        this.translate = translate;
	        this.appService = appService;
	        this.projectService = projectService;
	        this.taskService = taskService;
	        this.referenceService = referenceService;
	        this.notifyService = notifyService;
	        this.isReady = false;
	        this.form = formBuilder.group({
	            projectId: [''],
	            taskTypeId: [''],
	            status: [''],
	            priority: [''],
	            body: ['', common_1.Validators.required],
	            assigneeUserId: [''],
	            startDate: [''],
	            dueDate: [''],
	            tagIds: [''],
	            attachments: ['']
	        });
	    }
	    TaskComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.sub = this.route.params.subscribe(function (params) {
	            _this.taskService.fetchTaskById(params['taskId']).subscribe(function (task) {
	                _this.task = task;
	                _this.loadData();
	            }, function (errorResponse) { return _this.handleXhrError(errorResponse); });
	        });
	    };
	    TaskComponent.prototype.loadData = function () {
	        var _this = this;
	        Observable_1.Observable.forkJoin(this.appService.getUsers(), this.taskService.getTaskStatusType(), this.taskService.getTaskPriorityType()).subscribe(function (data) {
	            _this.users = data[0];
	            _this.projects = data[1].tags;
	            _this.tags = data[2].tags;
	            _this.taskTypes = data[3].taskTypes;
	            _this.taskStatusTypes = data[4];
	            _this.taskPriorityTypes = data[5];
	            console.log(_this);
	        }, function (error) {
	            _this.handleXhrError(error);
	        }, function () { return _this.isReady = true; });
	    };
	    TaskComponent.prototype.saveTask = function () {
	        var _this = this;
	        var noty = this.notifyService.process(this.translate.get('wait_while_document_save')).show();
	        this.taskService.saveTask(this.task).subscribe(function (response) {
	            noty.set({ type: 'success', message: response.message }).remove(1500);
	            _this.close();
	        }, function (error) {
	            noty.set({ type: 'error', message: error.message }).remove(1500);
	            _this.errorSaveTask(error);
	        });
	    };
	    TaskComponent.prototype.errorSaveTask = function (errorResponse) {
	        console.log(errorResponse);
	    };
	    TaskComponent.prototype.close = function () {
	        this.router.navigate(['/tasks']);
	    };
	    TaskComponent.prototype.handleXhrError = function (errorResponse) {
	        if (errorResponse.status === 401) {
	            this.router.navigate(['/login']);
	        }
	    };
	    TaskComponent.prototype.setStatus = function (value) {
	        this.task.status = value;
	    };
	    TaskComponent.prototype.setPriority = function (value) {
	        this.task.priority = value;
	    };
	    TaskComponent.prototype.closeDropdown = function () {
	        document.body.click();
	    };
	    TaskComponent.prototype.onScrollSelectList = function ($el, listId) {
	        if ($el.scrollHeight <= $el.scrollTop + $el.offsetHeight) {
	            if (listId === 'project') {
	                this.searchProject({
	                    page: 2
	                });
	            }
	        }
	    };
	    TaskComponent.prototype.searchProject = function (e) {
	        var param = {};
	        if (e.target) {
	            param = { name: e.target.value };
	        }
	        else {
	            param = e;
	        }
	    };
	    TaskComponent.prototype.selectProject = function (project) {
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.selectTaskType = function (taskType) {
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.selectAssigneeUser = function (assigneeUser) {
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.selectTag = function (tag) {
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.removeTag = function (tag, $event) {
	        $event.stopPropagation();
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.ngOnDestroy = function () {
	        this.users = [];
	        this.tags = [];
	        this.projects = [];
	        this.taskTypes = [];
	        this.taskPriorityTypes = [];
	        this.taskStatusTypes = [];
	    };
	    TaskComponent = __decorate([
	        core_1.Component({
	            selector: 'task',
	            template: __webpack_require__(587),
	            directives: [router_1.ROUTER_DIRECTIVES, common_1.FORM_DIRECTIVES, switch_button_1.SwitchButtonComponent, dropdown_1.DROPDOWN_DIRECTIVES],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [router_1.Router, router_1.ActivatedRoute, common_1.FormBuilder, ng2_translate_1.TranslateService, services_1.AppService, services_1.ProjectService, services_1.TaskService, services_1.ReferenceService, notification_1.NotificationService])
	    ], TaskComponent);
	    return TaskComponent;
	}());
	exports.TaskComponent = TaskComponent;


/***/ },

/***/ 587:
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"!isReady\">\r\n    {{'loading' | translate}}\r\n</div>\r\n<form class=\"form\" [ngFormModel]=\"form\" *ngIf=\"isReady\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{(task.id ? 'task' : 'new_task') | translate}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"saveTask()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <fieldset class=\"fieldset\">\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'project' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.projectId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <div *ngIf=\"task.project\">\r\n                                    <span>{{task.project.name}}</span>\r\n                                    <div class=\"text-muted pull-right\">{{task.project.status | text:'L' | translate}}</div>\r\n                                    <span class=\"text-muted\">{{task.project.comment}}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <div class=\"select-search\">\r\n                                    <input placeholder=\"{{'search' | translate}}\" (keyup)=\"searchProject($event)\" />\r\n                                </div>\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'project')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"task.project?.id == m.id\" *ngFor=\"let m of projects\" (click)=\"selectProject(m)\">\r\n                                        {{m.name}}\r\n                                        <div class=\"text-muted pull-right\">{{m.status | text:'L' | translate}}</div>\r\n                                        <span class=\"text-muted\" *ngIf=\"m.comment\">{{m.comment}}</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div [hidden]=\"form.controls.projectId.valid || form.controls.projectId.pristine\" class=\"error-message\">\r\n                    {{'required' | translate}}\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'task_type' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.taskTypeId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span *ngIf=\"task.taskType\">{{task.taskType.name}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'taskType')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"task.taskType?.id == m.id\" *ngFor=\"let m of taskTypes\" (click)=\"selectTaskType(m)\">\r\n                                        {{m.name}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.taskTypeId.valid || form.controls.taskTypeId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'status' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <switch-button [model]=\"task\" value=\"status\" [items]=\"taskStatusTypes\"></switch-button>\r\n                    <div [hidden]=\"form.controls.status.valid || form.controls.status.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'priority' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.priority.valid\">\r\n                    <switch-button [model]=\"task\" value=\"priority\" [items]=\"taskPriorityTypes\"></switch-button>\r\n                    <div [hidden]=\"form.controls.priority.valid || form.controls.priority.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'body' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.body.valid\">\r\n                    <textarea class=\"span8\" [(ngModel)]=\"task.body\" ngControl=\"body\"></textarea>\r\n                    <div [hidden]=\"form.controls.body.valid || form.controls.body.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'assignee_user' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.assigneeUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span *ngIf=\"task.assignee\">{{task.assignee.userName || task.assignee.login}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'assigneeUser')\">\r\n                                    <li class=\"select-option\" [class.selected]=\"task.assignee?.id == m.id\" *ngFor=\"let m of users\" (click)=\"selectAssigneeUser(m)\">\r\n                                        {{m.name || m.login}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.assigneeUserId.valid || form.controls.assigneeUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'start_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"task.startDate\" ngControl=\"startDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'due_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"task.dueDate\" ngControl=\"dueDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'tags' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.tagIds.valid\">\r\n                    <div class=\"span8\">\r\n                        <div dropdown class=\"select\">\r\n                            <div dropdown-toggle class=\"select-selection input\">\r\n                                <span class=\"tag\" *ngFor=\"let m of task.tags\" (click)=\"removeTag(m, $event)\">{{m.name}}</span>\r\n                            </div>\r\n                            <div class=\"dropdown-menu select-dropdown\">\r\n                                <ul class=\"select-list scroll-shadow\" (scroll)=\"onScrollSelectList($event.target, 'tags')\">\r\n                                    <li class=\"select-option\" *ngFor=\"let m of tags\" (click)=\"selectTag(m)\">\r\n                                        {{m.name}}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.tagIds.valid || form.controls.tagIds.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n        <fieldset class=\"fieldset\">\r\n            <legend class=\"legend\">\r\n                {{'attachments' | translate}}\r\n            </legend>\r\n            <div class=\"form-group\">\r\n                <button type=\"button\" class=\"btn btn-upload\" data-upload=\"\">\r\n                    <i class=\"fa fa-paperclip\"></i>\r\n                    <span>{{'attach_file' | translate}}</span>\r\n                </button>\r\n                <div class=\"attachments\" data-upload-files=\"\">\r\n                    <div class=\"attachments-file\" *ngFor=\"let att of task.attachments\">\r\n                        <a class=\"file-name\" href=\"{{att.url}}\">\r\n                            {{att.realFileName}}\r\n                        </a>\r\n                        <span class=\"btn btn-sm btn-link btn-remove-file on-edit\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 588:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var ng2_translate_1 = __webpack_require__(347);
	var tabs_1 = __webpack_require__(589);
	var app_service_1 = __webpack_require__(438);
	var user_1 = __webpack_require__(442);
	var UserProfileComponent = (function () {
	    function UserProfileComponent(router, formBuilder, appService) {
	        this.router = router;
	        this.formBuilder = formBuilder;
	        this.appService = appService;
	        this.user = new user_1.User();
	        this.changePassword = false;
	        this.form = formBuilder.group({
	            login: [],
	            pwd: [],
	            pwd_confirm: [],
	            email: []
	        });
	    }
	    UserProfileComponent.prototype.toggleChangePassword = function () {
	        this.changePassword = !this.changePassword;
	    };
	    UserProfileComponent.prototype.updateUserProfile = function () {
	        this.appService.updateUserProfile(this.user);
	    };
	    UserProfileComponent.prototype.close = function (event) {
	        event.preventDefault();
	        window.history.back();
	    };
	    UserProfileComponent = __decorate([
	        core_1.Component({
	            selector: '[user-profile]',
	            template: __webpack_require__(592),
	            directives: [common_1.FORM_DIRECTIVES, tabs_1.TAB_DIRECTIVES],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [router_1.Router, common_1.FormBuilder, app_service_1.AppService])
	    ], UserProfileComponent);
	    return UserProfileComponent;
	}());
	exports.UserProfileComponent = UserProfileComponent;


/***/ },

/***/ 589:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var tabs_1 = __webpack_require__(590);
	var tab_1 = __webpack_require__(591);
	exports.TAB_DIRECTIVES = [tabs_1.Tabs, tab_1.Tab];


/***/ },

/***/ 590:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var tab_1 = __webpack_require__(591);
	var Tabs = (function () {
	    function Tabs() {
	    }
	    Tabs.prototype.ngAfterContentInit = function () {
	        var activeTabs = this.tabs.filter(function (tab) { return tab.active; });
	        if (activeTabs.length === 0) {
	            this.selectTab(this.tabs.first);
	        }
	    };
	    Tabs.prototype.selectTab = function (tab) {
	        this.tabs.forEach(function (tab) { return tab.active = false; });
	        tab.active = true;
	    };
	    Tabs.prototype.preventDefault = function (event) {
	        event.preventDefault();
	    };
	    __decorate([
	        core_1.ContentChildren(tab_1.Tab), 
	        __metadata('design:type', core_1.QueryList)
	    ], Tabs.prototype, "tabs", void 0);
	    Tabs = __decorate([
	        core_1.Component({
	            selector: 'tabs',
	            template: "\n      <ul class=\"nav nav-tabs\">\n        <li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\" [class.active]=\"tab.active\">\n          <a href=\"#\" (click)=\"preventDefault($event)\">{{tab.title}}</a>\n        </li>\n      </ul>\n      <ng-content></ng-content>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Tabs);
	    return Tabs;
	}());
	exports.Tabs = Tabs;


/***/ },

/***/ 591:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var Tab = (function () {
	    function Tab() {
	        this.active = false;
	    }
	    __decorate([
	        core_1.Input('tabTitle'), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tab.prototype, "active", void 0);
	    Tab = __decorate([
	        core_1.Component({
	            selector: 'tab',
	            template: "\n      <div [hidden]=\"!active\" class=\"pane\">\n        <ng-content></ng-content>\n      </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Tab);
	    return Tab;
	}());
	exports.Tab = Tab;


/***/ },

/***/ 592:
/***/ function(module, exports) {

	module.exports = "<form class=\"form form-userprofile\" autocomplete=\"off\" [ngFormModel]=\"form\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{'employee' | translate}} {{user.name}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"updateUserProfile()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <tabs>\r\n            <tab class=\"tab-pane\" tabTitle=\"{{'properties' | translate}}\">\r\n                <!--<fieldset class=\"fieldset fieldset-user-avatar\">\r\n                            <img class=\"user-avatar\" src=\"img/avatar.png\"/>\r\n                </fieldset>-->\r\n                <fieldset class=\"fieldset fieldset-user-fields\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'user_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.name}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'login_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"text\" class=\"span4\" [(ngModel)]=\"user.login\" ngControl=\"login\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"!changePassword\">\r\n                        <div class=\"control-label\"></div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"btn btn-xs\" (click)=\"toggleChangePassword()\">{{'change_password' | translate}}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"changePassword\">\r\n                        <div class=\"control-label\">\r\n                            {{'password' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"password\" class=\"span4\" [(ngModel)]=\"user.pwd\" ngControl=\"pwd\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"changePassword\">\r\n                        <div class=\"control-label\">\r\n                            {{'password_confirm' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"password\" class=\"span4\" [(ngModel)]=\"user.pwd_confirm\" ngControl=\"pwd_confirm\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'email' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"email\" class=\"span4\" [(ngModel)]=\"user.email\" ngControl=\"email\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'org_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.organization}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'department' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.department}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'position' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.position}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'roles' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <ul class=\"input-placeholder list-style-none\">\r\n                                <xsl:for-each select=\"fields/roles/entry\">\r\n                                    <li>\r\n                                        <xsl:value-of select=\".\" />\r\n                                    </li>\r\n                                </xsl:for-each>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </tab>\r\n            <tab class=\"tab-pane\" tabTitle=\"{{'interface' | translate}}\">\r\n                <fieldset class=\"fieldset\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'limit_view' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <select name=\"pagesize\" class=\"native span2\">\r\n                                <option value=\"10\">\r\n                                    <xsl:if test=\"//pagesize = '10'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    10\r\n                                </option>\r\n                                <option value=\"20\">\r\n                                    <xsl:if test=\"//pagesize = '20'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    20\r\n                                </option>\r\n                                <option value=\"30\">\r\n                                    <xsl:if test=\"//pagesize = '30'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    30\r\n                                </option>\r\n                                <option value=\"50\">\r\n                                    <xsl:if test=\"//pagesize = '50'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    50\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'interface_lang' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <xsl:variable name=\"currentlang\" select=\"/request/@lang\" />\r\n                            <select name=\"lang\" class=\"native span2\">\r\n                                <xsl:for-each select=\"//query[@entity = 'language']/entry\">\r\n                                    <option value=\"{viewcontent/lang/@id}\">\r\n                                        <xsl:if test=\"viewcontent/lang/@id = $currentlang\">\r\n                                            <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                        </xsl:if>\r\n                                        <xsl:value-of select=\"viewcontent/lang\" />\r\n                                    </option>\r\n                                </xsl:for-each>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\"></div>\r\n                        <div class=\"controls\">\r\n                            <a href=\"javascript:void(0)\" data-toggle-theme=\"theme1\" class=\"input-placeholder\">\r\n                                {{'change_skin' | translate}}\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </tab>\r\n        </tabs>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 593:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var LoginComponent = (function () {
	    function LoginComponent() {
	        window.location.href = 'Logout';
	    }
	    LoginComponent = __decorate([
	        core_1.Component({
	            selector: '[login]',
	            template: ''
	        }), 
	        __metadata('design:paramtypes', [])
	    ], LoginComponent);
	    return LoginComponent;
	}());
	exports.LoginComponent = LoginComponent;


/***/ },

/***/ 594:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(595));


/***/ },

/***/ 595:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var store_1 = __webpack_require__(421);
	var compose_1 = __webpack_require__(596);
	var projects_reducer_1 = __webpack_require__(460);
	var tasks_reducer_1 = __webpack_require__(584);
	var staff_reducer_1 = __webpack_require__(597);
	var reference_reducer_1 = __webpack_require__(453);
	;
	exports.APP_STORE = store_1.provideStore(compose_1.compose(store_1.combineReducers)({
	    projects: projects_reducer_1.projectsReducer,
	    tasks: tasks_reducer_1.tasksReducer,
	    staff: staff_reducer_1.staffReducer,
	    reference: reference_reducer_1.referenceReducer
	}));


/***/ },

/***/ 596:
/***/ function(module, exports) {

	"use strict";
	exports.compose = function () {
	    var functions = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        functions[_i - 0] = arguments[_i];
	    }
	    return function (arg) {
	        if (functions.length === 0) {
	            return arg;
	        }
	        var last = functions[functions.length - 1];
	        var rest = functions.slice(0, -1);
	        return rest.reduceRight(function (composed, fn) { return fn(composed); }, last(arg));
	    };
	};
	//# sourceMappingURL=compose.js.map

/***/ },

/***/ 597:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_ORGANIZATIONS = 'FETCH_ORGANIZATIONS';
	;
	var initialState = {
	    organizations: []
	};
	exports.staffReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_ORGANIZATIONS:
	            return Object.assign({}, state, {
	                organizations: payload.organizations
	            });
	        default:
	            return state;
	    }
	};


/***/ }

});
//# sourceMappingURL=data:application/json;base64,
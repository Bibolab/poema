webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_browser_dynamic_1 = __webpack_require__(1);
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var common_1 = __webpack_require__(2);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var app_component_1 = __webpack_require__(377);
	var app_routes_1 = __webpack_require__(464);
	var app_service_1 = __webpack_require__(438);
	var services_1 = __webpack_require__(437);
	var store_1 = __webpack_require__(602);
	platform_browser_dynamic_1.bootstrap(app_component_1.AppComponent, [
	    http_1.HTTP_PROVIDERS,
	    app_routes_1.APP_ROUTER_PROVIDERS,
	    core_1.provide(common_1.LocationStrategy, { useClass: common_1.HashLocationStrategy }),
	    ng2_translate_1.TranslateService,
	    ng2_translate_1.TRANSLATE_PROVIDERS,
	    core_1.provide(ng2_translate_1.TranslateLoader, {
	        useFactory: function (appService) { return new CustomTranslateLoader(appService); },
	        deps: [app_service_1.AppService]
	    }),
	    notification_1.NotificationService,
	    services_1.APP_SERVICES,
	    store_1.APP_STORE
	]).catch(function (err) { return console.error(err); });
	var CustomTranslateLoader = (function () {
	    function CustomTranslateLoader(appService) {
	        this.appService = appService;
	    }
	    CustomTranslateLoader.prototype.getTranslation = function (lang) {
	        return this.appService.getTranslations();
	    };
	    return CustomTranslateLoader;
	}());


/***/ },

/***/ 373:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(374));
	__export(__webpack_require__(376));
	__export(__webpack_require__(375));


/***/ },

/***/ 374:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var notification_1 = __webpack_require__(375);
	var NotificationService = (function () {
	    function NotificationService() {
	        this.emitter = new core_1.EventEmitter();
	    }
	    NotificationService.prototype.getEmitter = function () {
	        return this.emitter;
	    };
	    NotificationService.prototype.info = function (message) {
	        return this.add({ type: 'info', message: message });
	    };
	    NotificationService.prototype.success = function (message) {
	        return this.add({ type: 'success', message: message });
	    };
	    NotificationService.prototype.error = function (message) {
	        return this.add({ type: 'error', message: message });
	    };
	    NotificationService.prototype.process = function (message) {
	        return this.add({ type: 'process', message: message });
	    };
	    NotificationService.prototype.add = function (options) {
	        var noty = new notification_1.Notification(options.type, options.message);
	        this.emitter.emit({ command: 'add', notify: noty });
	        return noty;
	    };
	    NotificationService.prototype.removeAll = function () {
	        this.emitter.emit({ command: 'cleanAll' });
	    };
	    NotificationService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NotificationService);
	    return NotificationService;
	}());
	exports.NotificationService = NotificationService;


/***/ },

/***/ 375:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(5);
	var Notification = (function () {
	    function Notification(type, message) {
	        this.emitter = new core_1.EventEmitter();
	        this.display = false;
	        this.type = type;
	        this.message = message;
	    }
	    Notification.prototype.getEmitter = function () {
	        return this.emitter;
	    };
	    Notification.prototype.show = function () {
	        this.display = true;
	        return this;
	    };
	    Notification.prototype.hide = function () {
	        this.display = false;
	        return this;
	    };
	    Notification.prototype.set = function (options) {
	        for (var key in options) {
	            if (key === 'message') {
	                this.message = options[key];
	            }
	            else if (key === 'type') {
	                this.type = options[key];
	            }
	        }
	        return this;
	    };
	    Notification.prototype.dismiss = function () {
	        if (this.delay === 'click') {
	            this.emitter.emit({ dismiss: true, notify: this, promise: this.promise });
	        }
	    };
	    Notification.prototype.remove = function (delay) {
	        var _this = this;
	        this.delay = delay;
	        if (delay === 'click') {
	        }
	        else if (delay > 0) {
	            setTimeout(function () {
	                _this.emitter.emit({ dismiss: true, notify: _this, promise: _this.promise });
	            }, delay);
	        }
	        else {
	            this.emitter.emit({ dismiss: true, notify: this, promise: this.promise });
	        }
	        return this.promise;
	    };
	    return Notification;
	}());
	exports.Notification = Notification;


/***/ },

/***/ 376:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var notification_service_1 = __webpack_require__(374);
	var NotificationComponent = (function () {
	    function NotificationComponent(notifyService) {
	        this.notifyService = notifyService;
	        this.notifications = [];
	    }
	    Object.defineProperty(NotificationComponent.prototype, "hidden", {
	        get: function () { return this.notifications.length == 0; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    NotificationComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.listener = this.notifyService.getEmitter().subscribe(function (item) {
	            switch (item.command) {
	                case 'cleanAll':
	                    _this.notifications = [];
	                    break;
	                case 'add':
	                    _this.addNotify(item.notify);
	                    break;
	                default:
	                    break;
	            }
	        });
	    };
	    NotificationComponent.prototype.ngOnDestroy = function () {
	        if (this.listener) {
	            this.notifications.map(function (it) { return it.getEmitter().unsubscribe(); });
	            this.listener.unsubscribe();
	        }
	    };
	    NotificationComponent.prototype.addNotify = function (notify) {
	        var _this = this;
	        this.notifications.push(notify);
	        notify.getEmitter().subscribe(function (item) { return _this.notifyEmitter(item); });
	    };
	    NotificationComponent.prototype.notifyEmitter = function (data) {
	        if (data.dismiss) {
	            var index = this.notifications.indexOf(data.notify);
	            this.notifications.splice(index, 1);
	            data.notify.getEmitter().unsubscribe();
	        }
	    };
	    __decorate([
	        core_1.HostBinding('class.nb-notify'), 
	        __metadata('design:type', Object)
	    ], NotificationComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostBinding('class.hidden'), 
	        __metadata('design:type', Object)
	    ], NotificationComponent.prototype, "hidden", null);
	    NotificationComponent = __decorate([
	        core_1.Component({
	            selector: 'notification',
	            template: "\n        <div class=\"nb-notify-entry-{{notify.type}}\"\n                [class.dismiss-click]=\"notify.delay == 'click'\"\n                [style.display]=\"notify.display ? 'block': 'none'\"\n                (click)=\"notify.dismiss()\"\n                *ngFor=\"let notify of notifications\">\n            {{notify.message}}\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [notification_service_1.NotificationService])
	    ], NotificationComponent);
	    return NotificationComponent;
	}());
	exports.NotificationComponent = NotificationComponent;


/***/ },

/***/ 377:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var services_1 = __webpack_require__(437);
	var staff_reducer_1 = __webpack_require__(456);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(457);
	var nav_1 = __webpack_require__(460);
	var user_1 = __webpack_require__(442);
	var AppComponent = (function () {
	    function AppComponent(store, appService, referenceService, staffService, translate) {
	        this.store = store;
	        this.appService = appService;
	        this.referenceService = referenceService;
	        this.staffService = staffService;
	        this.translate = translate;
	        this.isReady = false;
	        this.HEADER_TITLE = 'Projects';
	    }
	    AppComponent.prototype.resize = function (window) { this.onResize(window); };
	    ;
	    Object.defineProperty(AppComponent.prototype, "device", {
	        get: function () { return this.isMobileDevice; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(AppComponent.prototype, "toggleNavVisible", {
	        get: function () { return this.isNavCollapsed; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(AppComponent.prototype, "toggleSearch", {
	        get: function () { return this.isSearchOpen; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    AppComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.sub = this.store.select('reference');
	        this.referenceService.loadReference();
	        this.staffService.getOrganizations().subscribe(function (data) {
	            _this.store.dispatch({ type: staff_reducer_1.FETCH_ORGANIZATIONS, payload: data });
	        });
	        this.staffService.getUsers().subscribe(function (data) {
	            _this.store.dispatch({ type: staff_reducer_1.FETCH_USERS, payload: data });
	        });
	        this.isSearchOpen = false;
	        this.isNavCollapsed = false;
	        this.loggedUser = new user_1.User();
	        this.isMobileDevice = this.isMobile();
	        var userLang = navigator.language.split('-')[0];
	        userLang = /(ru|en)/gi.test(userLang) ? userLang : 'en';
	        this.translate.setDefaultLang('en');
	        this.translate.use(userLang);
	        this.translate.get('brand').subscribe(function (value) { return _this.HEADER_TITLE = value; });
	        this.appService.getUserProfile().subscribe(function (resp) {
	            _this.loggedUser = resp.employee;
	            _this.language = resp.language;
	            _this.isReady = true;
	            _this.appService.isLogged = true;
	        });
	    };
	    AppComponent.prototype.ngOnDestroy = function () {
	        this.sub && this.sub.unsubscribe();
	    };
	    AppComponent.prototype.toggleNav = function () {
	        this.isNavCollapsed = !this.isNavCollapsed;
	    };
	    AppComponent.prototype.hideNav = function (event) {
	        event.preventDefault();
	        this.isNavCollapsed = false;
	        this.isSearchOpen = false;
	    };
	    AppComponent.prototype.searchToggle = function () {
	        this.isSearchOpen = !this.isSearchOpen;
	    };
	    AppComponent.prototype.logout = function (event) {
	        event.preventDefault();
	        window.location.href = 'Logout';
	    };
	    AppComponent.prototype.goBack = function () {
	        window.history.back();
	    };
	    AppComponent.prototype.preventDefault = function (event) {
	        event.preventDefault();
	    };
	    AppComponent.prototype.isMobile = function () {
	        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	    };
	    AppComponent.prototype.onResize = function (window) {
	        this.isMobileDevice = window.innerWidth <= 1024 || this.isMobile();
	    };
	    __decorate([
	        core_1.HostListener('window:resize', ['$event.target']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], AppComponent.prototype, "resize", null);
	    __decorate([
	        core_1.HostBinding('class.phone'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "device", null);
	    __decorate([
	        core_1.HostBinding('class.side-nav-toggle'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "toggleNavVisible", null);
	    __decorate([
	        core_1.HostBinding('class.search-open'), 
	        __metadata('design:type', Object)
	    ], AppComponent.prototype, "toggleSearch", null);
	    AppComponent = __decorate([
	        core_1.Component({
	            selector: 'app',
	            template: __webpack_require__(463),
	            directives: [router_1.ROUTER_DIRECTIVES, nav_1.NavComponent, notification_1.NotificationComponent, dropdown_1.DROPDOWN_DIRECTIVES],
	            providers: [notification_1.NotificationService],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, services_1.AppService, services_1.ReferenceService, services_1.StaffService, ng2_translate_1.TranslateService])
	    ], AppComponent);
	    return AppComponent;
	}());
	exports.AppComponent = AppComponent;


/***/ },

/***/ 378:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var router_link_1 = __webpack_require__(379);
	var router_link_active_1 = __webpack_require__(417);
	var router_outlet_1 = __webpack_require__(418);
	var router_1 = __webpack_require__(380);
	exports.NavigationCancel = router_1.NavigationCancel;
	exports.NavigationEnd = router_1.NavigationEnd;
	exports.NavigationError = router_1.NavigationError;
	exports.NavigationStart = router_1.NavigationStart;
	exports.Router = router_1.Router;
	exports.RoutesRecognized = router_1.RoutesRecognized;
	var router_outlet_map_1 = __webpack_require__(416);
	exports.RouterOutletMap = router_outlet_map_1.RouterOutletMap;
	var router_providers_1 = __webpack_require__(419);
	exports.provideRouter = router_providers_1.provideRouter;
	var router_state_1 = __webpack_require__(407);
	exports.ActivatedRoute = router_state_1.ActivatedRoute;
	exports.ActivatedRouteSnapshot = router_state_1.ActivatedRouteSnapshot;
	exports.RouterState = router_state_1.RouterState;
	exports.RouterStateSnapshot = router_state_1.RouterStateSnapshot;
	var shared_1 = __webpack_require__(400);
	exports.PRIMARY_OUTLET = shared_1.PRIMARY_OUTLET;
	var url_serializer_1 = __webpack_require__(402);
	exports.DefaultUrlSerializer = url_serializer_1.DefaultUrlSerializer;
	exports.UrlSerializer = url_serializer_1.UrlSerializer;
	var url_tree_1 = __webpack_require__(401);
	exports.UrlPathWithParams = url_tree_1.UrlPathWithParams;
	exports.UrlTree = url_tree_1.UrlTree;
	exports.ROUTER_DIRECTIVES = [router_outlet_1.RouterOutlet, router_link_1.RouterLink, router_link_active_1.RouterLinkActive];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUF5QiwwQkFBMEIsQ0FBQyxDQUFBO0FBQ3BELG1DQUErQixpQ0FBaUMsQ0FBQyxDQUFBO0FBQ2pFLDhCQUEyQiw0QkFBNEIsQ0FBQyxDQUFBO0FBS3hELHVCQUFpSCxVQUFVLENBQUM7QUFBN0cscURBQWdCO0FBQUUsK0NBQWE7QUFBRSxtREFBZTtBQUFFLG1EQUFlO0FBQUUsaUNBQU07QUFBRSxxREFBa0M7QUFDNUgsa0NBQThCLHFCQUFxQixDQUFDO0FBQTVDLDhEQUE0QztBQUNwRCxpQ0FBNEIsb0JBQW9CLENBQUM7QUFBekMseURBQXlDO0FBQ2pELDZCQUF1RixnQkFBZ0IsQ0FBQztBQUFoRyx1REFBYztBQUFFLHVFQUFzQjtBQUFFLGlEQUFXO0FBQUUsaUVBQTJDO0FBQ3hHLHVCQUFxQyxVQUFVLENBQUM7QUFBeEMsaURBQXdDO0FBQ2hELCtCQUFrRCxrQkFBa0IsQ0FBQztBQUE3RCxxRUFBb0I7QUFBRSx1REFBdUM7QUFDckUseUJBQXlDLFlBQVksQ0FBQztBQUE5Qyx5REFBaUI7QUFBRSxxQ0FBMkI7QUFFekMseUJBQWlCLEdBQUcsQ0FBQyw0QkFBWSxFQUFFLHdCQUFVLEVBQUUscUNBQWdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um91dGVyTGlua30gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9saW5rJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9saW5rX2FjdGl2ZSc7XG5pbXBvcnQge1JvdXRlck91dGxldH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQnO1xuXG5leHBvcnQge0V4dHJhT3B0aW9uc30gZnJvbSAnLi9jb21tb25fcm91dGVyX3Byb3ZpZGVycyc7XG5leHBvcnQge1JvdXRlLCBSb3V0ZXJDb25maWd9IGZyb20gJy4vY29uZmlnJztcbmV4cG9ydCB7Q2FuQWN0aXZhdGUsIENhbkRlYWN0aXZhdGV9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5leHBvcnQge0V2ZW50LCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uRXJyb3IsIE5hdmlnYXRpb25TdGFydCwgUm91dGVyLCBSb3V0ZXNSZWNvZ25pemVkfSBmcm9tICcuL3JvdXRlcic7XG5leHBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi9yb3V0ZXJfb3V0bGV0X21hcCc7XG5leHBvcnQge3Byb3ZpZGVSb3V0ZXJ9IGZyb20gJy4vcm91dGVyX3Byb3ZpZGVycyc7XG5leHBvcnQge0FjdGl2YXRlZFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xuZXhwb3J0IHtQUklNQVJZX09VVExFVCwgUGFyYW1zfSBmcm9tICcuL3NoYXJlZCc7XG5leHBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZXJpYWxpemVyfSBmcm9tICcuL3VybF9zZXJpYWxpemVyJztcbmV4cG9ydCB7VXJsUGF0aFdpdGhQYXJhbXMsIFVybFRyZWV9IGZyb20gJy4vdXJsX3RyZWUnO1xuXG5leHBvcnQgY29uc3QgUk9VVEVSX0RJUkVDVElWRVMgPSBbUm91dGVyT3V0bGV0LCBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rQWN0aXZlXTsiXX0=

/***/ },

/***/ 379:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var common_1 = __webpack_require__(2);
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var router_state_1 = __webpack_require__(407);
	var RouterLink = (function () {
	    function RouterLink(router, route, locationStrategy) {
	        this.router = router;
	        this.route = route;
	        this.locationStrategy = locationStrategy;
	        this.commands = [];
	    }
	    Object.defineProperty(RouterLink.prototype, "routerLink", {
	        set: function (data) {
	            if (Array.isArray(data)) {
	                this.commands = data;
	            }
	            else {
	                this.commands = [data];
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLink.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
	    RouterLink.prototype.onClick = function (button, ctrlKey, metaKey) {
	        if (button !== 0 || ctrlKey || metaKey) {
	            return true;
	        }
	        if (typeof this.target === 'string' && this.target != '_self') {
	            return true;
	        }
	        this.router.navigateByUrl(this.urlTree);
	        return false;
	    };
	    RouterLink.prototype.updateTargetUrlAndHref = function () {
	        this.urlTree = this.router.createUrlTree(this.commands, { relativeTo: this.route, queryParams: this.queryParams, fragment: this.fragment });
	        if (this.urlTree) {
	            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "target", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RouterLink.prototype, "queryParams", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "fragment", void 0);
	    __decorate([
	        core_1.HostBinding(), 
	        __metadata('design:type', String)
	    ], RouterLink.prototype, "href", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RouterLink.prototype, "routerLink", null);
	    __decorate([
	        core_1.HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Number, Boolean, Boolean]), 
	        __metadata('design:returntype', Boolean)
	    ], RouterLink.prototype, "onClick", null);
	    RouterLink = __decorate([
	        core_1.Directive({ selector: '[routerLink]' }), 
	        __metadata('design:paramtypes', [router_1.Router, router_state_1.ActivatedRoute, common_1.LocationStrategy])
	    ], RouterLink);
	    return RouterLink;
	}());
	exports.RouterLink = RouterLink;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX2xpbmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGlyZWN0aXZlcy9yb3V0ZXJfbGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsdUJBQStCLGlCQUFpQixDQUFDLENBQUE7QUFDakQscUJBQXFFLGVBQWUsQ0FBQyxDQUFBO0FBRXJGLHVCQUFxQixXQUFXLENBQUMsQ0FBQTtBQUNqQyw2QkFBNkIsaUJBQWlCLENBQUMsQ0FBQTtBQStCL0M7SUFjRSxvQkFDWSxNQUFjLEVBQVUsS0FBcUIsRUFDN0MsZ0JBQWtDO1FBRGxDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUM3QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBZHRDLGFBQVEsR0FBVSxFQUFFLENBQUM7SUFjb0IsQ0FBQztJQUdsRCxzQkFBSSxrQ0FBVTthQUFkLFVBQWUsSUFBa0I7WUFDL0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQVEsSUFBSSxDQUFDO1lBQzVCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQztRQUNILENBQUM7OztPQUFBO0lBRUQsZ0NBQVcsR0FBWCxVQUFZLE9BQVcsSUFBUyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHaEUsNEJBQU8sR0FBUCxVQUFRLE1BQWMsRUFBRSxPQUFnQixFQUFFLE9BQWdCO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLDJDQUFzQixHQUE5QjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQ3BDLElBQUksQ0FBQyxRQUFRLEVBQ2IsRUFBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7UUFDdEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0YsQ0FBQztJQUNILENBQUM7SUFqREQ7UUFBQyxZQUFLLEVBQUU7OzhDQUFBO0lBRVI7UUFBQyxZQUFLLEVBQUU7O21EQUFBO0lBQ1I7UUFBQyxZQUFLLEVBQUU7O2dEQUFBO0lBR1I7UUFBQyxrQkFBVyxFQUFFOzs0Q0FBQTtJQVdkO1FBQUMsWUFBSyxFQUFFOzs7Z0RBQUE7SUFXUjtRQUFDLG1CQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7Ozs7NkNBQUE7SUE5Qi9FO1FBQUMsZ0JBQVMsQ0FBQyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUMsQ0FBQzs7a0JBQUE7SUFvRHRDLGlCQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQztBQW5EWSxrQkFBVSxhQW1EdEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb25TdHJhdGVneX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25DaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSb3V0ZXJ9IGZyb20gJy4uL3JvdXRlcic7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICcuLi9yb3V0ZXJfc3RhdGUnO1xuaW1wb3J0IHtVcmxUcmVlfSBmcm9tICcuLi91cmxfdHJlZSc7XG5cblxuXG4vKipcbiAqIFRoZSBSb3V0ZXJMaW5rIGRpcmVjdGl2ZSBsZXRzIHlvdSBsaW5rIHRvIHNwZWNpZmljIHBhcnRzIG9mIHlvdXIgYXBwLlxuICpcbiAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgcm91dGUgY29uZmlndXJhdGlvbjpcblxuICogYGBgXG4gKiBbeyBwYXRoOiAnL3VzZXInLCBjb21wb25lbnQ6IFVzZXJDbXAgfV1cbiAqIGBgYFxuICpcbiAqIFdoZW4gbGlua2luZyB0byB0aGlzIGBVc2VyYCByb3V0ZSwgeW91IGNhbiB3cml0ZTpcbiAqXG4gKiBgYGBcbiAqIDxhIFtyb3V0ZXJMaW5rXT1cIlsnL3VzZXInXVwiPmxpbmsgdG8gdXNlciBjb21wb25lbnQ8L2E+XG4gKiBgYGBcbiAqXG4gKiBSb3V0ZXJMaW5rIGV4cGVjdHMgdGhlIHZhbHVlIHRvIGJlIGFuIGFycmF5IG9mIHBhdGggc2VnbWVudHMsIGZvbGxvd2VkIGJ5IHRoZSBwYXJhbXNcbiAqIGZvciB0aGF0IGxldmVsIG9mIHJvdXRpbmcuIEZvciBpbnN0YW5jZSBgWycvdGVhbScsIHt0ZWFtSWQ6IDF9LCAndXNlcicsIHt1c2VySWQ6IDJ9XWBcbiAqIG1lYW5zIHRoYXQgd2Ugd2FudCB0byBnZW5lcmF0ZSBhIGxpbmsgdG8gYC90ZWFtO3RlYW1JZD0xL3VzZXI7dXNlcklkPTJgLlxuICpcbiAqIFRoZSBmaXJzdCBzZWdtZW50IG5hbWUgY2FuIGJlIHByZXBlbmRlZCB3aXRoIGAvYCwgYC4vYCwgb3IgYC4uL2AuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgL2AsIHRoZSByb3V0ZXIgd2lsbCBsb29rIHVwIHRoZSByb3V0ZSBmcm9tIHRoZSByb290IG9mIHRoZSBhcHAuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgLi9gLCBvciBkb2Vzbid0IGJlZ2luIHdpdGggYSBzbGFzaCwgdGhlIHJvdXRlciB3aWxsXG4gKiBpbnN0ZWFkIGxvb2sgaW4gdGhlIGN1cnJlbnQgY29tcG9uZW50J3MgY2hpbGRyZW4gZm9yIHRoZSByb3V0ZS5cbiAqIEFuZCBpZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgLi4vYCwgdGhlIHJvdXRlciB3aWxsIGdvIHVwIG9uZSBsZXZlbC5cbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbcm91dGVyTGlua10nfSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJMaW5rIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdGFyZ2V0OiBzdHJpbmc7XG4gIHByaXZhdGUgY29tbWFuZHM6IGFueVtdID0gW107XG4gIEBJbnB1dCgpIHF1ZXJ5UGFyYW1zOiB7W2s6IHN0cmluZ106IGFueX07XG4gIEBJbnB1dCgpIGZyYWdtZW50OiBzdHJpbmc7XG5cbiAgLy8gdGhlIHVybCBkaXNwbGF5ZWQgb24gdGhlIGFuY2hvciBlbGVtZW50LlxuICBASG9zdEJpbmRpbmcoKSBocmVmOiBzdHJpbmc7XG5cbiAgdXJsVHJlZTogVXJsVHJlZTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgcHJpdmF0ZSBsb2NhdGlvblN0cmF0ZWd5OiBMb2NhdGlvblN0cmF0ZWd5KSB7fVxuXG4gIEBJbnB1dCgpXG4gIHNldCByb3V0ZXJMaW5rKGRhdGE6IGFueVtdfHN0cmluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICB0aGlzLmNvbW1hbmRzID0gPGFueT5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbW1hbmRzID0gW2RhdGFdO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHt9KTogYW55IHsgdGhpcy51cGRhdGVUYXJnZXRVcmxBbmRIcmVmKCk7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LmJ1dHRvbicsICckZXZlbnQuY3RybEtleScsICckZXZlbnQubWV0YUtleSddKVxuICBvbkNsaWNrKGJ1dHRvbjogbnVtYmVyLCBjdHJsS2V5OiBib29sZWFuLCBtZXRhS2V5OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKGJ1dHRvbiAhPT0gMCB8fCBjdHJsS2V5IHx8IG1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy50YXJnZXQgPT09ICdzdHJpbmcnICYmIHRoaXMudGFyZ2V0ICE9ICdfc2VsZicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodGhpcy51cmxUcmVlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVRhcmdldFVybEFuZEhyZWYoKTogdm9pZCB7XG4gICAgdGhpcy51cmxUcmVlID0gdGhpcy5yb3V0ZXIuY3JlYXRlVXJsVHJlZShcbiAgICAgICAgdGhpcy5jb21tYW5kcyxcbiAgICAgICAge3JlbGF0aXZlVG86IHRoaXMucm91dGUsIHF1ZXJ5UGFyYW1zOiB0aGlzLnF1ZXJ5UGFyYW1zLCBmcmFnbWVudDogdGhpcy5mcmFnbWVudH0pO1xuICAgIGlmICh0aGlzLnVybFRyZWUpIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5wcmVwYXJlRXh0ZXJuYWxVcmwodGhpcy5yb3V0ZXIuc2VyaWFsaXplVXJsKHRoaXMudXJsVHJlZSkpO1xuICAgIH1cbiAgfVxufVxuIl19

/***/ },

/***/ 380:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(360);
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(385);
	__webpack_require__(387);
	__webpack_require__(389);
	__webpack_require__(391);
	__webpack_require__(392);
	var core_1 = __webpack_require__(5);
	var Observable_1 = __webpack_require__(38);
	var Subject_1 = __webpack_require__(37);
	var of_1 = __webpack_require__(351);
	var apply_redirects_1 = __webpack_require__(399);
	var config_1 = __webpack_require__(404);
	var create_router_state_1 = __webpack_require__(405);
	var create_url_tree_1 = __webpack_require__(409);
	var recognize_1 = __webpack_require__(410);
	var resolve_1 = __webpack_require__(411);
	var router_outlet_map_1 = __webpack_require__(416);
	var router_state_1 = __webpack_require__(407);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var NavigationStart = (function () {
	    function NavigationStart(id, url) {
	        this.id = id;
	        this.url = url;
	    }
	    NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
	    return NavigationStart;
	}());
	exports.NavigationStart = NavigationStart;
	var NavigationEnd = (function () {
	    function NavigationEnd(id, url, urlAfterRedirects) {
	        this.id = id;
	        this.url = url;
	        this.urlAfterRedirects = urlAfterRedirects;
	    }
	    NavigationEnd.prototype.toString = function () {
	        return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
	    };
	    return NavigationEnd;
	}());
	exports.NavigationEnd = NavigationEnd;
	var NavigationCancel = (function () {
	    function NavigationCancel(id, url) {
	        this.id = id;
	        this.url = url;
	    }
	    NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
	    return NavigationCancel;
	}());
	exports.NavigationCancel = NavigationCancel;
	var NavigationError = (function () {
	    function NavigationError(id, url, error) {
	        this.id = id;
	        this.url = url;
	        this.error = error;
	    }
	    NavigationError.prototype.toString = function () {
	        return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
	    };
	    return NavigationError;
	}());
	exports.NavigationError = NavigationError;
	var RoutesRecognized = (function () {
	    function RoutesRecognized(id, url, urlAfterRedirects, state) {
	        this.id = id;
	        this.url = url;
	        this.urlAfterRedirects = urlAfterRedirects;
	        this.state = state;
	    }
	    RoutesRecognized.prototype.toString = function () {
	        return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
	    };
	    return RoutesRecognized;
	}());
	exports.RoutesRecognized = RoutesRecognized;
	var Router = (function () {
	    function Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, config) {
	        this.rootComponentType = rootComponentType;
	        this.resolver = resolver;
	        this.urlSerializer = urlSerializer;
	        this.outletMap = outletMap;
	        this.location = location;
	        this.injector = injector;
	        this.navigationId = 0;
	        this.resetConfig(config);
	        this.routerEvents = new Subject_1.Subject();
	        this.currentUrlTree = url_tree_1.createEmptyUrlTree();
	        this.currentRouterState = router_state_1.createEmptyState(this.currentUrlTree, this.rootComponentType);
	    }
	    Router.prototype.initialNavigation = function () {
	        this.setUpLocationChangeListener();
	        this.navigateByUrl(this.location.path());
	    };
	    Object.defineProperty(Router.prototype, "routerState", {
	        get: function () { return this.currentRouterState; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Router.prototype, "url", {
	        get: function () { return this.serializeUrl(this.currentUrlTree); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Router.prototype, "events", {
	        get: function () { return this.routerEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Router.prototype.resetConfig = function (config) {
	        config_1.validateConfig(config);
	        this.config = config;
	    };
	    Router.prototype.dispose = function () { this.locationSubscription.unsubscribe(); };
	    Router.prototype.createUrlTree = function (commands, _a) {
	        var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment;
	        var a = relativeTo ? relativeTo : this.routerState.root;
	        return create_url_tree_1.createUrlTree(a, this.currentUrlTree, commands, queryParams, fragment);
	    };
	    Router.prototype.navigateByUrl = function (url) {
	        if (url instanceof url_tree_1.UrlTree) {
	            return this.scheduleNavigation(url, false);
	        }
	        else {
	            var urlTree = this.urlSerializer.parse(url);
	            return this.scheduleNavigation(urlTree, false);
	        }
	    };
	    Router.prototype.navigate = function (commands, extras) {
	        if (extras === void 0) { extras = {}; }
	        return this.scheduleNavigation(this.createUrlTree(commands, extras), false);
	    };
	    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
	    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
	    Router.prototype.scheduleNavigation = function (url, preventPushState) {
	        var _this = this;
	        var id = ++this.navigationId;
	        this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
	        return Promise.resolve().then(function (_) { return _this.runNavigate(url, preventPushState, id); });
	    };
	    Router.prototype.setUpLocationChangeListener = function () {
	        var _this = this;
	        this.locationSubscription = this.location.subscribe(function (change) {
	            return _this.scheduleNavigation(_this.urlSerializer.parse(change['url']), change['pop']);
	        });
	    };
	    Router.prototype.runNavigate = function (url, preventPushState, id) {
	        var _this = this;
	        if (id !== this.navigationId) {
	            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
	            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url)));
	            return Promise.resolve(false);
	        }
	        return new Promise(function (resolvePromise, rejectPromise) {
	            var updatedUrl;
	            var state;
	            apply_redirects_1.applyRedirects(url, _this.config)
	                .mergeMap(function (u) {
	                updatedUrl = u;
	                return recognize_1.recognize(_this.rootComponentType, _this.config, updatedUrl, _this.serializeUrl(updatedUrl));
	            })
	                .mergeMap(function (newRouterStateSnapshot) {
	                _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(updatedUrl), newRouterStateSnapshot));
	                return resolve_1.resolve(_this.resolver, newRouterStateSnapshot);
	            })
	                .map(function (routerStateSnapshot) {
	                return create_router_state_1.createRouterState(routerStateSnapshot, _this.currentRouterState);
	            })
	                .map(function (newState) {
	                state = newState;
	            })
	                .mergeMap(function (_) {
	                return new GuardChecks(state.snapshot, _this.currentRouterState.snapshot, _this.injector)
	                    .check(_this.outletMap);
	            })
	                .forEach(function (shouldActivate) {
	                if (!shouldActivate || id !== _this.navigationId) {
	                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url)));
	                    return Promise.resolve(false);
	                }
	                new ActivateRoutes(state, _this.currentRouterState).activate(_this.outletMap);
	                _this.currentUrlTree = updatedUrl;
	                _this.currentRouterState = state;
	                if (!preventPushState) {
	                    var path = _this.urlSerializer.serialize(updatedUrl);
	                    if (_this.location.isCurrentPathEqualTo(path)) {
	                        _this.location.replaceState(path);
	                    }
	                    else {
	                        _this.location.go(path);
	                    }
	                }
	                return Promise.resolve(true);
	            })
	                .then(function () {
	                _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(updatedUrl)));
	                resolvePromise(true);
	            }, function (e) {
	                _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
	                rejectPromise(e);
	            });
	        });
	    };
	    return Router;
	}());
	exports.Router = Router;
	var CanActivate = (function () {
	    function CanActivate(route) {
	        this.route = route;
	    }
	    return CanActivate;
	}());
	var CanDeactivate = (function () {
	    function CanDeactivate(component, route) {
	        this.component = component;
	        this.route = route;
	    }
	    return CanDeactivate;
	}());
	var GuardChecks = (function () {
	    function GuardChecks(future, curr, injector) {
	        this.future = future;
	        this.curr = curr;
	        this.injector = injector;
	        this.checks = [];
	    }
	    GuardChecks.prototype.check = function (parentOutletMap) {
	        var _this = this;
	        var futureRoot = this.future._root;
	        var currRoot = this.curr ? this.curr._root : null;
	        this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap);
	        if (this.checks.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(this.checks)
	            .map(function (s) {
	            if (s instanceof CanActivate) {
	                return _this.runCanActivate(s.route);
	            }
	            else if (s instanceof CanDeactivate) {
	                return _this.runCanDeactivate(s.component, s.route);
	            }
	            else {
	                throw new Error('Cannot be reached');
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    GuardChecks.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap) {
	        var _this = this;
	        var prevChildren = nodeChildrenAsMap(currNode);
	        futureNode.children.forEach(function (c) {
	            _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap);
	            delete prevChildren[c.value.outlet];
	        });
	        collection_1.forEach(prevChildren, function (v, k) { return _this.deactivateOutletAndItChildren(v, outletMap._outlets[k]); });
	    };
	    GuardChecks.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap) {
	        var future = futureNode.value;
	        var curr = currNode ? currNode.value : null;
	        var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
	        if (curr && future._routeConfig === curr._routeConfig) {
	            if (!collection_1.shallowEqual(future.params, curr.params)) {
	                this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(future));
	            }
	            this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null);
	        }
	        else {
	            this.deactivateOutletAndItChildren(curr, outlet);
	            this.checks.push(new CanActivate(future));
	            this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null);
	        }
	    };
	    GuardChecks.prototype.deactivateOutletAndItChildren = function (route, outlet) {
	        var _this = this;
	        if (outlet && outlet.isActivated) {
	            collection_1.forEach(outlet.outletMap._outlets, function (v) {
	                if (v.isActivated) {
	                    _this.deactivateOutletAndItChildren(v.activatedRoute.snapshot, v);
	                }
	            });
	            this.checks.push(new CanDeactivate(outlet.component, route));
	        }
	    };
	    GuardChecks.prototype.runCanActivate = function (future) {
	        var _this = this;
	        var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
	        if (!canActivate || canActivate.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(canActivate)
	            .map(function (c) {
	            var guard = _this.injector.get(c);
	            if (guard.canActivate) {
	                return wrapIntoObservable(guard.canActivate(future, _this.future));
	            }
	            else {
	                return wrapIntoObservable(guard(future, _this.future));
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    GuardChecks.prototype.runCanDeactivate = function (component, curr) {
	        var _this = this;
	        var canDeactivate = curr._routeConfig ? curr._routeConfig.canDeactivate : null;
	        if (!canDeactivate || canDeactivate.length === 0)
	            return of_1.of(true);
	        return Observable_1.Observable.from(canDeactivate)
	            .map(function (c) {
	            var guard = _this.injector.get(c);
	            if (guard.canDeactivate) {
	                return wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
	            }
	            else {
	                return wrapIntoObservable(guard(component, curr, _this.curr));
	            }
	        })
	            .mergeAll()
	            .every(function (result) { return result === true; });
	    };
	    return GuardChecks;
	}());
	function wrapIntoObservable(value) {
	    if (value instanceof Observable_1.Observable) {
	        return value;
	    }
	    else {
	        return of_1.of(value);
	    }
	}
	var ActivateRoutes = (function () {
	    function ActivateRoutes(futureState, currState) {
	        this.futureState = futureState;
	        this.currState = currState;
	    }
	    ActivateRoutes.prototype.activate = function (parentOutletMap) {
	        var futureRoot = this.futureState._root;
	        var currRoot = this.currState ? this.currState._root : null;
	        pushQueryParamsAndFragment(this.futureState);
	        this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
	    };
	    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
	        var _this = this;
	        var prevChildren = nodeChildrenAsMap(currNode);
	        futureNode.children.forEach(function (c) {
	            _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
	            delete prevChildren[c.value.outlet];
	        });
	        collection_1.forEach(prevChildren, function (v, k) { return _this.deactivateOutletAndItChildren(outletMap._outlets[k]); });
	    };
	    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
	        var future = futureNode.value;
	        var curr = currNode ? currNode.value : null;
	        var outlet = getOutlet(parentOutletMap, futureNode.value);
	        if (future === curr) {
	            router_state_1.advanceActivatedRoute(future);
	            this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
	        }
	        else {
	            this.deactivateOutletAndItChildren(outlet);
	            var outletMap = new router_outlet_map_1.RouterOutletMap();
	            this.activateNewRoutes(outletMap, future, outlet);
	            this.activateChildRoutes(futureNode, null, outletMap);
	        }
	    };
	    ActivateRoutes.prototype.activateNewRoutes = function (outletMap, future, outlet) {
	        var resolved = core_1.ReflectiveInjector.resolve([
	            { provide: router_state_1.ActivatedRoute, useValue: future },
	            { provide: router_outlet_map_1.RouterOutletMap, useValue: outletMap }
	        ]);
	        router_state_1.advanceActivatedRoute(future);
	        outlet.activate(future._futureSnapshot._resolvedComponentFactory, future, resolved, outletMap);
	    };
	    ActivateRoutes.prototype.deactivateOutletAndItChildren = function (outlet) {
	        var _this = this;
	        if (outlet && outlet.isActivated) {
	            collection_1.forEach(outlet.outletMap._outlets, function (v) { return _this.deactivateOutletAndItChildren(v); });
	            outlet.deactivate();
	        }
	    };
	    return ActivateRoutes;
	}());
	function pushQueryParamsAndFragment(state) {
	    if (!collection_1.shallowEqual(state.snapshot.queryParams, state.queryParams.value)) {
	        state.queryParams.next(state.snapshot.queryParams);
	    }
	    if (state.snapshot.fragment !== state.fragment.value) {
	        state.fragment.next(state.snapshot.fragment);
	    }
	}
	function nodeChildrenAsMap(node) {
	    return node ? node.children.reduce(function (m, c) {
	        m[c.value.outlet] = c;
	        return m;
	    }, {}) : {};
	}
	function getOutlet(outletMap, route) {
	    var outlet = outletMap._outlets[route.outlet];
	    if (!outlet) {
	        var componentName = route.component.name;
	        if (route.outlet === shared_1.PRIMARY_OUTLET) {
	            throw new Error("Cannot find primary outlet to load '" + componentName + "'");
	        }
	        else {
	            throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
	        }
	    }
	    return outlet;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 381:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var scan_1 = __webpack_require__(382);
	Observable_1.Observable.prototype.scan = scan_1.scan;
	//# sourceMappingURL=scan.js.map

/***/ },

/***/ 385:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var concat_1 = __webpack_require__(386);
	Observable_1.Observable.prototype.concat = concat_1.concat;
	//# sourceMappingURL=concat.js.map

/***/ },

/***/ 386:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isScheduler_1 = __webpack_require__(355);
	var ArrayObservable_1 = __webpack_require__(352);
	var mergeAll_1 = __webpack_require__(364);
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins this Observable with multiple other Observables by subscribing to them
	 * one at a time, starting with the source, and merging their results into the
	 * output Observable. Will wait for each Observable to complete before moving
	 * on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = timer.concat(sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = timer1.concat(timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} other An input Observable to concatenate after the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @method concat
	 * @owner Observable
	 */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return concatStatic.apply(void 0, [this].concat(observables));
	}
	exports.concat = concat;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins multiple Observables together by subscribing to them one at a time and
	 * merging their results into the output Observable. Will wait for each
	 * Observable to complete before moving on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = Rx.Observable.concat(timer, sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = Rx.Observable.concat(timer1, timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} input1 An input Observable to concatenate with others.
	 * @param {Observable} input2 An input Observable to concatenate with others.
	 * More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @static true
	 * @name concat
	 * @owner Observable
	 */
	function concatStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var scheduler = null;
	    var args = observables;
	    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
	        scheduler = args.pop();
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
	}
	exports.concatStatic = concatStatic;
	//# sourceMappingURL=concat.js.map

/***/ },

/***/ 387:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var concatMap_1 = __webpack_require__(388);
	Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },

/***/ 388:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeMap_1 = __webpack_require__(384);
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable, in a serialized fashion waiting for each one to complete before
	 * merging the next.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link concatAll}.</span>
	 *
	 * <img src="./img/concatMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. Each new inner Observable is
	 * concatenated with the previous inner Observable.
	 *
	 * __Warning:__ if source values arrive endlessly and faster than their
	 * corresponding inner Observables can complete, it will result in memory issues
	 * as inner Observables amass in an unbounded buffer waiting for their turn to
	 * be subscribed to.
	 *
	 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
	 * to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concat}
	 * @see {@link concatAll}
	 * @see {@link concatMapTo}
	 * @see {@link exhaustMap}
	 * @see {@link mergeMap}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} an observable of values merged from the projected
	 * Observables as they were subscribed to, one at a time. Optionally, these
	 * values may have been projected from a passed `projectResult` argument.
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and taking values from each projected inner
	 * Observable sequentially.
	 * @method concatMap
	 * @owner Observable
	 */
	function concatMap(project, resultSelector) {
	    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
	}
	exports.concatMap = concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },

/***/ 389:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var every_1 = __webpack_require__(390);
	Observable_1.Observable.prototype.every = every_1.every;
	//# sourceMappingURL=every.js.map

/***/ },

/***/ 390:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(42);
	/**
	 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
	 * @param {function} predicate a function for determining if an item meets a specified condition.
	 * @param {any} [thisArg] optional object to use for `this` in the callback
	 * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
	 * @method every
	 * @owner Observable
	 */
	function every(predicate, thisArg) {
	    return this.lift(new EveryOperator(predicate, thisArg, this));
	}
	exports.every = every;
	var EveryOperator = (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
	    };
	    return EveryOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var EverySubscriber = (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	        this.index = 0;
	        this.thisArg = thisArg || this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=every.js.map

/***/ },

/***/ 391:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var mergeAll_1 = __webpack_require__(364);
	Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
	//# sourceMappingURL=mergeAll.js.map

/***/ },

/***/ 392:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var from_1 = __webpack_require__(393);
	Observable_1.Observable.from = from_1.from;
	//# sourceMappingURL=from.js.map

/***/ },

/***/ 393:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromObservable_1 = __webpack_require__(394);
	exports.from = FromObservable_1.FromObservable.create;
	//# sourceMappingURL=from.js.map

/***/ },

/***/ 394:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(45);
	var isFunction_1 = __webpack_require__(43);
	var isPromise_1 = __webpack_require__(367);
	var isScheduler_1 = __webpack_require__(355);
	var PromiseObservable_1 = __webpack_require__(57);
	var IteratorObservable_1 = __webpack_require__(395);
	var ArrayObservable_1 = __webpack_require__(352);
	var ArrayLikeObservable_1 = __webpack_require__(396);
	var iterator_1 = __webpack_require__(368);
	var Observable_1 = __webpack_require__(38);
	var observeOn_1 = __webpack_require__(397);
	var $$observable = __webpack_require__(52);
	var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromObservable = (function (_super) {
	    __extends(FromObservable, _super);
	    function FromObservable(ish, scheduler) {
	        _super.call(this, null);
	        this.ish = ish;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable from an Array, an array-like object, a Promise, an
	     * iterable object, or an Observable-like object.
	     *
	     * <span class="informal">Converts almost anything to an Observable.</span>
	     *
	     * <img src="./img/from.png" width="100%">
	     *
	     * Convert various other objects and data types into Observables. `from`
	     * converts a Promise or an array-like or an
	     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
	     * object into an Observable that emits the items in that promise or array or
	     * iterable. A String, in this context, is treated as an array of characters.
	     * Observable-like objects (contains a function named with the ES2015 Symbol
	     * for Observable) can also be converted through this operator.
	     *
	     * @example <caption>Converts an array to an Observable</caption>
	     * var array = [10, 20, 30];
	     * var result = Rx.Observable.from(array);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
	     * function* generateDoubles(seed) {
	     *   var i = seed;
	     *   while (true) {
	     *     yield i;
	     *     i = 2 * i; // double it
	     *   }
	     * }
	     *
	     * var iterator = generateDoubles(3);
	     * var result = Rx.Observable.from(iterator).take(10);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link fromEvent}
	     * @see {@link fromEventPattern}
	     * @see {@link fromPromise}
	     *
	     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
	     * Observable-like, an Array, an iterable or an array-like object to be
	     * converted.
	     * @param {function(x: any, i: number): T} [mapFn] A "map" function to call
	     * when converting array-like objects, where `x` is a value from the
	     * array-like and `i` is the index of that value in the sequence.
	     * @param {any} [thisArg] The context object to use when calling the `mapFn`,
	     * if provided.
	     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
	     * emissions of values.
	     * @return {Observable<T>} The Observable whose values are originally from the
	     * input object that was converted.
	     * @static true
	     * @name from
	     * @owner Observable
	     */
	    FromObservable.create = function (ish, mapFnOrScheduler, thisArg, lastScheduler) {
	        var scheduler = null;
	        var mapFn = null;
	        if (isFunction_1.isFunction(mapFnOrScheduler)) {
	            scheduler = lastScheduler || null;
	            mapFn = mapFnOrScheduler;
	        }
	        else if (isScheduler_1.isScheduler(scheduler)) {
	            scheduler = mapFnOrScheduler;
	        }
	        if (ish != null) {
	            if (typeof ish[$$observable] === 'function') {
	                if (ish instanceof Observable_1.Observable && !scheduler) {
	                    return ish;
	                }
	                return new FromObservable(ish, scheduler);
	            }
	            else if (isArray_1.isArray(ish)) {
	                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
	            }
	            else if (isPromise_1.isPromise(ish)) {
	                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
	            }
	            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
	                return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);
	            }
	            else if (isArrayLike(ish)) {
	                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, mapFn, thisArg, scheduler);
	            }
	        }
	        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
	    };
	    FromObservable.prototype._subscribe = function (subscriber) {
	        var ish = this.ish;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            return ish[$$observable]().subscribe(subscriber);
	        }
	        else {
	            return ish[$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
	        }
	    };
	    return FromObservable;
	}(Observable_1.Observable));
	exports.FromObservable = FromObservable;
	//# sourceMappingURL=FromObservable.js.map

/***/ },

/***/ 395:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(39);
	var isObject_1 = __webpack_require__(46);
	var tryCatch_1 = __webpack_require__(47);
	var Observable_1 = __webpack_require__(38);
	var isFunction_1 = __webpack_require__(43);
	var iterator_1 = __webpack_require__(368);
	var errorObject_1 = __webpack_require__(48);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var IteratorObservable = (function (_super) {
	    __extends(IteratorObservable, _super);
	    function IteratorObservable(iterator, project, thisArg, scheduler) {
	        _super.call(this);
	        if (iterator == null) {
	            throw new Error('iterator cannot be null.');
	        }
	        if (isObject_1.isObject(project)) {
	            this.thisArg = project;
	            this.scheduler = thisArg;
	        }
	        else if (isFunction_1.isFunction(project)) {
	            this.project = project;
	            this.thisArg = thisArg;
	            this.scheduler = scheduler;
	        }
	        else if (project != null) {
	            throw new Error('When provided, `project` must be a function.');
	        }
	        this.iterator = getIterator(iterator);
	    }
	    IteratorObservable.create = function (iterator, project, thisArg, scheduler) {
	        return new IteratorObservable(iterator, project, thisArg, scheduler);
	    };
	    IteratorObservable.dispatch = function (state) {
	        var index = state.index, hasError = state.hasError, thisArg = state.thisArg, project = state.project, iterator = state.iterator, subscriber = state.subscriber;
	        if (hasError) {
	            subscriber.error(state.error);
	            return;
	        }
	        var result = iterator.next();
	        if (result.done) {
	            subscriber.complete();
	            return;
	        }
	        if (project) {
	            result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);
	            if (result === errorObject_1.errorObject) {
	                state.error = errorObject_1.errorObject.e;
	                state.hasError = true;
	            }
	            else {
	                subscriber.next(result);
	                state.index = index + 1;
	            }
	        }
	        else {
	            subscriber.next(result.value);
	            state.index = index + 1;
	        }
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        this.schedule(state);
	    };
	    IteratorObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, iterator = _a.iterator, project = _a.project, thisArg = _a.thisArg, scheduler = _a.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(IteratorObservable.dispatch, 0, {
	                index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                var result = iterator.next();
	                if (result.done) {
	                    subscriber.complete();
	                    break;
	                }
	                else if (project) {
	                    result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);
	                    if (result === errorObject_1.errorObject) {
	                        subscriber.error(errorObject_1.errorObject.e);
	                        break;
	                    }
	                    subscriber.next(result);
	                }
	                else {
	                    subscriber.next(result.value);
	                }
	                if (subscriber.isUnsubscribed) {
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return IteratorObservable;
	}(Observable_1.Observable));
	exports.IteratorObservable = IteratorObservable;
	var StringIterator = (function () {
	    function StringIterator(str, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = str.length; }
	        this.str = str;
	        this.idx = idx;
	        this.len = len;
	    }
	    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };
	    StringIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.str.charAt(this.idx++)
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return StringIterator;
	}());
	var ArrayIterator = (function () {
	    function ArrayIterator(arr, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = toLength(arr); }
	        this.arr = arr;
	        this.idx = idx;
	        this.len = len;
	    }
	    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };
	    ArrayIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.arr[this.idx++]
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return ArrayIterator;
	}());
	function getIterator(obj) {
	    var i = obj[iterator_1.$$iterator];
	    if (!i && typeof obj === 'string') {
	        return new StringIterator(obj);
	    }
	    if (!i && obj.length !== undefined) {
	        return new ArrayIterator(obj);
	    }
	    if (!i) {
	        throw new TypeError('Object is not iterable');
	    }
	    return obj[iterator_1.$$iterator]();
	}
	var maxSafeInteger = Math.pow(2, 53) - 1;
	function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	        return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	        return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	        return 0;
	    }
	    if (len > maxSafeInteger) {
	        return maxSafeInteger;
	    }
	    return len;
	}
	function numberIsFinite(value) {
	    return typeof value === 'number' && root_1.root.isFinite(value);
	}
	function sign(value) {
	    var valueAsNumber = +value;
	    if (valueAsNumber === 0) {
	        return valueAsNumber;
	    }
	    if (isNaN(valueAsNumber)) {
	        return valueAsNumber;
	    }
	    return valueAsNumber < 0 ? -1 : 1;
	}
	//# sourceMappingURL=IteratorObservable.js.map

/***/ },

/***/ 396:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(38);
	var ScalarObservable_1 = __webpack_require__(353);
	var EmptyObservable_1 = __webpack_require__(354);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayLikeObservable = (function (_super) {
	    __extends(ArrayLikeObservable, _super);
	    function ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler) {
	        _super.call(this);
	        this.arrayLike = arrayLike;
	        this.scheduler = scheduler;
	        if (!mapFn && !scheduler && arrayLike.length === 1) {
	            this._isScalar = true;
	            this.value = arrayLike[0];
	        }
	        if (mapFn) {
	            this.mapFn = mapFn.bind(thisArg);
	        }
	    }
	    ArrayLikeObservable.create = function (arrayLike, mapFn, thisArg, scheduler) {
	        var length = arrayLike.length;
	        if (length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        else if (length === 1 && !mapFn) {
	            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
	        }
	        else {
	            return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);
	        }
	    };
	    ArrayLikeObservable.dispatch = function (state) {
	        var arrayLike = state.arrayLike, index = state.index, length = state.length, mapFn = state.mapFn, subscriber = state.subscriber;
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        if (index >= length) {
	            subscriber.complete();
	            return;
	        }
	        var result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];
	        subscriber.next(result);
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, arrayLike = _a.arrayLike, mapFn = _a.mapFn, scheduler = _a.scheduler;
	        var length = arrayLike.length;
	        if (scheduler) {
	            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
	                arrayLike: arrayLike, index: index, length: length, mapFn: mapFn, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < length && !subscriber.isUnsubscribed; i++) {
	                var result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];
	                subscriber.next(result);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayLikeObservable;
	}(Observable_1.Observable));
	exports.ArrayLikeObservable = ArrayLikeObservable;
	//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ },

/***/ 399:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var of_1 = __webpack_require__(351);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var NoMatch = (function () {
	    function NoMatch(segment) {
	        if (segment === void 0) { segment = null; }
	        this.segment = segment;
	    }
	    return NoMatch;
	}());
	var GlobalRedirect = (function () {
	    function GlobalRedirect(paths) {
	        this.paths = paths;
	    }
	    return GlobalRedirect;
	}());
	function applyRedirects(urlTree, config) {
	    try {
	        return createUrlTree(urlTree, expandSegment(config, urlTree.root, shared_1.PRIMARY_OUTLET));
	    }
	    catch (e) {
	        if (e instanceof GlobalRedirect) {
	            return createUrlTree(urlTree, new url_tree_1.UrlSegment([], (_a = {}, _a[shared_1.PRIMARY_OUTLET] = new url_tree_1.UrlSegment(e.paths, {}), _a)));
	        }
	        else if (e instanceof NoMatch) {
	            return new Observable_1.Observable(function (obs) {
	                return obs.error(new Error("Cannot match any routes: '" + e.segment + "'"));
	            });
	        }
	        else {
	            return new Observable_1.Observable(function (obs) { return obs.error(e); });
	        }
	    }
	    var _a;
	}
	exports.applyRedirects = applyRedirects;
	function createUrlTree(urlTree, root) {
	    return of_1.of(new url_tree_1.UrlTree(root, urlTree.queryParams, urlTree.fragment));
	}
	function expandSegment(routes, segment, outlet) {
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return new url_tree_1.UrlSegment([], expandSegmentChildren(routes, segment));
	    }
	    else {
	        return expandPathsWithParams(segment, routes, segment.pathsWithParams, outlet, true);
	    }
	}
	function expandSegmentChildren(routes, segment) {
	    return url_tree_1.mapChildren(segment, function (child, childOutlet) { return expandSegment(routes, child, childOutlet); });
	}
	function expandPathsWithParams(segment, routes, paths, outlet, allowRedirects) {
	    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
	        var r = routes_1[_i];
	        try {
	            return expandPathsWithParamsAgainstRoute(segment, routes, r, paths, outlet, allowRedirects);
	        }
	        catch (e) {
	            if (!(e instanceof NoMatch))
	                throw e;
	        }
	    }
	    throw new NoMatch(segment);
	}
	function expandPathsWithParamsAgainstRoute(segment, routes, route, paths, outlet, allowRedirects) {
	    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== outlet)
	        throw new NoMatch();
	    if (route.redirectTo && !allowRedirects)
	        throw new NoMatch();
	    if (route.redirectTo) {
	        return expandPathsWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet);
	    }
	    else {
	        return matchPathsWithParamsAgainstRoute(segment, route, paths);
	    }
	}
	function expandPathsWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet) {
	    if (route.path === '**') {
	        return expandWildCardWithParamsAgainstRouteUsingRedirect(route);
	    }
	    else {
	        return expandRegularPathWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet);
	    }
	}
	function expandWildCardWithParamsAgainstRouteUsingRedirect(route) {
	    var newPaths = applyRedirectCommands([], route.redirectTo, {});
	    if (route.redirectTo.startsWith('/')) {
	        throw new GlobalRedirect(newPaths);
	    }
	    else {
	        return new url_tree_1.UrlSegment(newPaths, {});
	    }
	}
	function expandRegularPathWithParamsAgainstRouteUsingRedirect(segment, routes, route, paths, outlet) {
	    var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
	    var newPaths = applyRedirectCommands(consumedPaths, route.redirectTo, positionalParamSegments);
	    if (route.redirectTo.startsWith('/')) {
	        throw new GlobalRedirect(newPaths);
	    }
	    else {
	        return expandPathsWithParams(segment, routes, newPaths.concat(paths.slice(lastChild)), outlet, false);
	    }
	}
	function matchPathsWithParamsAgainstRoute(segment, route, paths) {
	    if (route.path === '**') {
	        return new url_tree_1.UrlSegment(paths, {});
	    }
	    else {
	        var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, lastChild = _a.lastChild;
	        var childConfig = route.children ? route.children : [];
	        var slicedPath = paths.slice(lastChild);
	        if (childConfig.length === 0 && slicedPath.length === 0) {
	            return new url_tree_1.UrlSegment(consumedPaths, {});
	        }
	        else if (slicedPath.length === 0 && Object.keys(segment.children).length > 0) {
	            var children = expandSegmentChildren(childConfig, segment);
	            return new url_tree_1.UrlSegment(consumedPaths, children);
	        }
	        else {
	            var cs = expandPathsWithParams(segment, childConfig, slicedPath, shared_1.PRIMARY_OUTLET, true);
	            return new url_tree_1.UrlSegment(consumedPaths.concat(cs.pathsWithParams), cs.children);
	        }
	    }
	}
	function match(segment, route, paths) {
	    if (route.path === '') {
	        if (route.terminal && (Object.keys(segment.children).length > 0 || paths.length > 0)) {
	            throw new NoMatch();
	        }
	        else {
	            return { consumedPaths: [], lastChild: 0, positionalParamSegments: {} };
	        }
	    }
	    var path = route.path;
	    var parts = path.split('/');
	    var positionalParamSegments = {};
	    var consumedPaths = [];
	    var currentIndex = 0;
	    for (var i = 0; i < parts.length; ++i) {
	        if (currentIndex >= paths.length)
	            throw new NoMatch();
	        var current = paths[currentIndex];
	        var p = parts[i];
	        var isPosParam = p.startsWith(':');
	        if (!isPosParam && p !== current.path)
	            throw new NoMatch();
	        if (isPosParam) {
	            positionalParamSegments[p.substring(1)] = current;
	        }
	        consumedPaths.push(current);
	        currentIndex++;
	    }
	    if (route.terminal && (Object.keys(segment.children).length > 0 || currentIndex < paths.length)) {
	        throw new NoMatch();
	    }
	    return { consumedPaths: consumedPaths, lastChild: currentIndex, positionalParamSegments: positionalParamSegments };
	}
	function applyRedirectCommands(paths, redirectTo, posParams) {
	    if (redirectTo.startsWith('/')) {
	        var parts = redirectTo.substring(1).split('/');
	        return createPaths(redirectTo, parts, paths, posParams);
	    }
	    else {
	        var parts = redirectTo.split('/');
	        return createPaths(redirectTo, parts, paths, posParams);
	    }
	}
	function createPaths(redirectTo, parts, segments, posParams) {
	    return parts.map(function (p) { return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) :
	        findOrCreatePath(p, segments); });
	}
	function findPosParam(part, posParams, redirectTo) {
	    var paramName = part.substring(1);
	    var pos = posParams[paramName];
	    if (!pos)
	        throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
	    return pos;
	}
	function findOrCreatePath(part, paths) {
	    var matchingIndex = paths.findIndex(function (s) { return s.path === part; });
	    if (matchingIndex > -1) {
	        var r = paths[matchingIndex];
	        paths.splice(matchingIndex);
	        return r;
	    }
	    else {
	        return new url_tree_1.UrlPathWithParams(part, {});
	    }
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 400:
/***/ function(module, exports) {

	"use strict";
	exports.PRIMARY_OUTLET = 'PRIMARY_OUTLET';
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NoYXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSWEsc0JBQWMsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTmFtZSBvZiB0aGUgcHJpbWFyeSBvdXRsZXQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgUFJJTUFSWV9PVVRMRVQgPSAnUFJJTUFSWV9PVVRMRVQnO1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBwYXJhbWV0ZXJzLlxuICovXG5leHBvcnQgdHlwZSBQYXJhbXMgPSB7XG4gIFtrZXk6IHN0cmluZ106IGFueVxufTtcbiJdfQ==

/***/ },

/***/ 401:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_serializer_1 = __webpack_require__(402);
	var collection_1 = __webpack_require__(403);
	function createEmptyUrlTree() {
	    return new UrlTree(new UrlSegment([], {}), {}, null);
	}
	exports.createEmptyUrlTree = createEmptyUrlTree;
	function containsTree(container, containee, exact) {
	    if (exact) {
	        return equalSegments(container.root, containee.root);
	    }
	    else {
	        return containsSegment(container.root, containee.root);
	    }
	}
	exports.containsTree = containsTree;
	function equalSegments(container, containee) {
	    if (!equalPath(container.pathsWithParams, containee.pathsWithParams))
	        return false;
	    if (Object.keys(container.children).length !== Object.keys(containee.children).length)
	        return false;
	    for (var c in containee.children) {
	        if (!container.children[c])
	            return false;
	        if (!equalSegments(container.children[c], containee.children[c]))
	            return false;
	    }
	    return true;
	}
	function containsSegment(container, containee) {
	    return containsSegmentHelper(container, containee, containee.pathsWithParams);
	}
	function containsSegmentHelper(container, containee, containeePaths) {
	    if (container.pathsWithParams.length > containeePaths.length) {
	        var current = container.pathsWithParams.slice(0, containeePaths.length);
	        if (!equalPath(current, containeePaths))
	            return false;
	        if (Object.keys(containee.children).length > 0)
	            return false;
	        return true;
	    }
	    else if (container.pathsWithParams.length === containeePaths.length) {
	        if (!equalPath(container.pathsWithParams, containeePaths))
	            return false;
	        for (var c in containee.children) {
	            if (!container.children[c])
	                return false;
	            if (!containsSegment(container.children[c], containee.children[c]))
	                return false;
	        }
	        return true;
	    }
	    else {
	        var current = containeePaths.slice(0, container.pathsWithParams.length);
	        var next = containeePaths.slice(container.pathsWithParams.length);
	        if (!equalPath(container.pathsWithParams, current))
	            return false;
	        return containsSegmentHelper(container.children[shared_1.PRIMARY_OUTLET], containee, next);
	    }
	}
	var UrlTree = (function () {
	    function UrlTree(root, queryParams, fragment) {
	        this.root = root;
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	    }
	    UrlTree.prototype.toString = function () { return new url_serializer_1.DefaultUrlSerializer().serialize(this); };
	    return UrlTree;
	}());
	exports.UrlTree = UrlTree;
	var UrlSegment = (function () {
	    function UrlSegment(pathsWithParams, children) {
	        var _this = this;
	        this.pathsWithParams = pathsWithParams;
	        this.children = children;
	        this.parent = null;
	        collection_1.forEach(children, function (v, k) { return v.parent = _this; });
	    }
	    UrlSegment.prototype.toString = function () { return url_serializer_1.serializePaths(this); };
	    return UrlSegment;
	}());
	exports.UrlSegment = UrlSegment;
	var UrlPathWithParams = (function () {
	    function UrlPathWithParams(path, parameters) {
	        this.path = path;
	        this.parameters = parameters;
	    }
	    UrlPathWithParams.prototype.toString = function () { return url_serializer_1.serializePath(this); };
	    return UrlPathWithParams;
	}());
	exports.UrlPathWithParams = UrlPathWithParams;
	function equalPathsWithParams(a, b) {
	    if (a.length !== b.length)
	        return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i].path !== b[i].path)
	            return false;
	        if (!collection_1.shallowEqual(a[i].parameters, b[i].parameters))
	            return false;
	    }
	    return true;
	}
	exports.equalPathsWithParams = equalPathsWithParams;
	function equalPath(a, b) {
	    if (a.length !== b.length)
	        return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i].path !== b[i].path)
	            return false;
	    }
	    return true;
	}
	exports.equalPath = equalPath;
	function mapChildren(segment, fn) {
	    var newChildren = {};
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet === shared_1.PRIMARY_OUTLET) {
	            newChildren[childOutlet] = fn(child, childOutlet);
	        }
	    });
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet !== shared_1.PRIMARY_OUTLET) {
	            newChildren[childOutlet] = fn(child, childOutlet);
	        }
	    });
	    return newChildren;
	}
	exports.mapChildren = mapChildren;
	function mapChildrenIntoArray(segment, fn) {
	    var res = [];
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet === shared_1.PRIMARY_OUTLET) {
	            res = res.concat(fn(child, childOutlet));
	        }
	    });
	    collection_1.forEach(segment.children, function (child, childOutlet) {
	        if (childOutlet !== shared_1.PRIMARY_OUTLET) {
	            res = res.concat(fn(child, childOutlet));
	        }
	    });
	    return res;
	}
	exports.mapChildrenIntoArray = mapChildrenIntoArray;
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 402:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var UrlSerializer = (function () {
	    function UrlSerializer() {
	    }
	    return UrlSerializer;
	}());
	exports.UrlSerializer = UrlSerializer;
	var DefaultUrlSerializer = (function () {
	    function DefaultUrlSerializer() {
	    }
	    DefaultUrlSerializer.prototype.parse = function (url) {
	        var p = new UrlParser(url);
	        return new url_tree_1.UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
	    };
	    DefaultUrlSerializer.prototype.serialize = function (tree) {
	        var segment = "/" + serializeSegment(tree.root, true);
	        var query = serializeQueryParams(tree.queryParams);
	        var fragment = tree.fragment !== null ? "#" + tree.fragment : '';
	        return "" + segment + query + fragment;
	    };
	    return DefaultUrlSerializer;
	}());
	exports.DefaultUrlSerializer = DefaultUrlSerializer;
	function serializePaths(segment) {
	    return segment.pathsWithParams.map(function (p) { return serializePath(p); }).join('/');
	}
	exports.serializePaths = serializePaths;
	function serializeSegment(segment, root) {
	    if (segment.children[shared_1.PRIMARY_OUTLET] && root) {
	        var primary = serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false);
	        var children_1 = [];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                children_1.push(k + ":" + serializeSegment(v, false));
	            }
	        });
	        if (children_1.length > 0) {
	            return primary + "(" + children_1.join('//') + ")";
	        }
	        else {
	            return "" + primary;
	        }
	    }
	    else if (segment.children[shared_1.PRIMARY_OUTLET] && !root) {
	        var children_2 = [serializeSegment(segment.children[shared_1.PRIMARY_OUTLET], false)];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                children_2.push(k + ":" + serializeSegment(v, false));
	            }
	        });
	        return serializePaths(segment) + "/(" + children_2.join('//') + ")";
	    }
	    else {
	        return serializePaths(segment);
	    }
	}
	function serializeChildren(segment) {
	    if (segment.children[shared_1.PRIMARY_OUTLET]) {
	        var primary = serializePaths(segment.children[shared_1.PRIMARY_OUTLET]);
	        var secondary_1 = [];
	        collection_1.forEach(segment.children, function (v, k) {
	            if (k !== shared_1.PRIMARY_OUTLET) {
	                secondary_1.push(k + ":" + serializePaths(v) + serializeChildren(v));
	            }
	        });
	        var secondaryStr = secondary_1.length > 0 ? "(" + secondary_1.join('//') + ")" : '';
	        var primaryChildren = serializeChildren(segment.children[shared_1.PRIMARY_OUTLET]);
	        var primaryChildrenStr = primaryChildren ? "/" + primaryChildren : '';
	        return "" + primary + secondaryStr + primaryChildrenStr;
	    }
	    else {
	        return '';
	    }
	}
	function serializePath(path) {
	    return "" + path.path + serializeParams(path.parameters);
	}
	exports.serializePath = serializePath;
	function serializeParams(params) {
	    return pairs(params).map(function (p) { return (";" + p.first + "=" + p.second); }).join('');
	}
	function serializeQueryParams(params) {
	    var strs = pairs(params).map(function (p) { return (p.first + "=" + p.second); });
	    return strs.length > 0 ? "?" + strs.join("&") : '';
	}
	var Pair = (function () {
	    function Pair(first, second) {
	        this.first = first;
	        this.second = second;
	    }
	    return Pair;
	}());
	function pairs(obj) {
	    var res = [];
	    for (var prop in obj) {
	        if (obj.hasOwnProperty(prop)) {
	            res.push(new Pair(prop, obj[prop]));
	        }
	    }
	    return res;
	}
	var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
	function matchPathWithParams(str) {
	    SEGMENT_RE.lastIndex = 0;
	    var match = SEGMENT_RE.exec(str);
	    return match ? match[0] : '';
	}
	var QUERY_PARAM_RE = /^[^=\?&#]+/;
	function matchQueryParams(str) {
	    QUERY_PARAM_RE.lastIndex = 0;
	    var match = SEGMENT_RE.exec(str);
	    return match ? match[0] : '';
	}
	var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
	function matchUrlQueryParamValue(str) {
	    QUERY_PARAM_VALUE_RE.lastIndex = 0;
	    var match = QUERY_PARAM_VALUE_RE.exec(str);
	    return match ? match[0] : '';
	}
	var UrlParser = (function () {
	    function UrlParser(remaining) {
	        this.remaining = remaining;
	    }
	    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
	    UrlParser.prototype.capture = function (str) {
	        if (!this.remaining.startsWith(str)) {
	            throw new Error("Expected \"" + str + "\".");
	        }
	        this.remaining = this.remaining.substring(str.length);
	    };
	    UrlParser.prototype.parseRootSegment = function () {
	        if (this.remaining === '' || this.remaining === '/') {
	            return new url_tree_1.UrlSegment([], {});
	        }
	        else {
	            return new url_tree_1.UrlSegment([], this.parseSegmentChildren());
	        }
	    };
	    UrlParser.prototype.parseSegmentChildren = function () {
	        if (this.remaining.length == 0) {
	            return {};
	        }
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var paths = [this.parsePathWithParams()];
	        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
	            this.capture('/');
	            paths.push(this.parsePathWithParams());
	        }
	        var children = {};
	        if (this.peekStartsWith('/(')) {
	            this.capture('/');
	            children = this.parseParens(true);
	        }
	        var res = {};
	        if (this.peekStartsWith('(')) {
	            res = this.parseParens(false);
	        }
	        res[shared_1.PRIMARY_OUTLET] = new url_tree_1.UrlSegment(paths, children);
	        return res;
	    };
	    UrlParser.prototype.parsePathWithParams = function () {
	        var path = matchPathWithParams(this.remaining);
	        this.capture(path);
	        var matrixParams = {};
	        if (this.peekStartsWith(';')) {
	            matrixParams = this.parseMatrixParams();
	        }
	        return new url_tree_1.UrlPathWithParams(path, matrixParams);
	    };
	    UrlParser.prototype.parseQueryParams = function () {
	        var params = {};
	        if (this.peekStartsWith('?')) {
	            this.capture('?');
	            this.parseQueryParam(params);
	            while (this.remaining.length > 0 && this.peekStartsWith('&')) {
	                this.capture('&');
	                this.parseQueryParam(params);
	            }
	        }
	        return params;
	    };
	    UrlParser.prototype.parseFragment = function () {
	        if (this.peekStartsWith('#')) {
	            return this.remaining.substring(1);
	        }
	        else {
	            return null;
	        }
	    };
	    UrlParser.prototype.parseMatrixParams = function () {
	        var params = {};
	        while (this.remaining.length > 0 && this.peekStartsWith(';')) {
	            this.capture(';');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseParam = function (params) {
	        var key = matchPathWithParams(this.remaining);
	        if (!key) {
	            return;
	        }
	        this.capture(key);
	        var value = 'true';
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchPathWithParams(this.remaining);
	            if (valueMatch) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseQueryParam = function (params) {
	        var key = matchQueryParams(this.remaining);
	        if (!key) {
	            return;
	        }
	        this.capture(key);
	        var value = 'true';
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchUrlQueryParamValue(this.remaining);
	            if (valueMatch) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseParens = function (allowPrimary) {
	        var segments = {};
	        this.capture('(');
	        while (!this.peekStartsWith(')') && this.remaining.length > 0) {
	            var path = matchPathWithParams(this.remaining);
	            var outletName = void 0;
	            if (path.indexOf(':') > -1) {
	                outletName = path.substr(0, path.indexOf(':'));
	                this.capture(outletName);
	                this.capture(':');
	            }
	            else if (allowPrimary) {
	                outletName = shared_1.PRIMARY_OUTLET;
	            }
	            var children = this.parseSegmentChildren();
	            segments[outletName] = Object.keys(children).length === 1 ? children[shared_1.PRIMARY_OUTLET] :
	                new url_tree_1.UrlSegment([], children);
	            if (this.peekStartsWith('//')) {
	                this.capture('//');
	            }
	        }
	        this.capture(')');
	        return segments;
	    };
	    return UrlParser;
	}());
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 403:
/***/ function(module, exports) {

	"use strict";
	function shallowEqual(a, b) {
	    var k1 = Object.keys(a);
	    var k2 = Object.keys(b);
	    if (k1.length != k2.length) {
	        return false;
	    }
	    var key;
	    for (var i = 0; i < k1.length; i++) {
	        key = k1[i];
	        if (a[key] !== b[key]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.shallowEqual = shallowEqual;
	function flatten(a) {
	    var target = [];
	    for (var i = 0; i < a.length; ++i) {
	        for (var j = 0; j < a[i].length; ++j) {
	            target.push(a[i][j]);
	        }
	    }
	    return target;
	}
	exports.flatten = flatten;
	function first(a) {
	    return a.length > 0 ? a[0] : null;
	}
	exports.first = first;
	function last(a) {
	    return a.length > 0 ? a[a.length - 1] : null;
	}
	exports.last = last;
	function and(bools) {
	    return bools.reduce(function (a, b) { return a && b; }, true);
	}
	exports.and = and;
	function merge(m1, m2) {
	    var m = {};
	    for (var attr in m1) {
	        if (m1.hasOwnProperty(attr)) {
	            m[attr] = m1[attr];
	        }
	    }
	    for (var attr in m2) {
	        if (m2.hasOwnProperty(attr)) {
	            m[attr] = m2[attr];
	        }
	    }
	    return m;
	}
	exports.merge = merge;
	function forEach(map, callback) {
	    for (var prop in map) {
	        if (map.hasOwnProperty(prop)) {
	            callback(map[prop], prop);
	        }
	    }
	}
	exports.forEach = forEach;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQkFBNkIsQ0FBcUIsRUFBRSxDQUFxQjtJQUN2RSxJQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELElBQUksR0FBVyxDQUFDO0lBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ25DLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWRlLG9CQUFZLGVBYzNCLENBQUE7QUFFRCxpQkFBMkIsQ0FBUTtJQUNqQyxJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7SUFDdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVJlLGVBQU8sVUFRdEIsQ0FBQTtBQUVELGVBQXlCLENBQU07SUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDcEMsQ0FBQztBQUZlLGFBQUssUUFFcEIsQ0FBQTtBQUVELGNBQXdCLENBQU07SUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUMvQyxDQUFDO0FBRmUsWUFBSSxPQUVuQixDQUFBO0FBRUQsYUFBb0IsS0FBZ0I7SUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxJQUFJLENBQUMsRUFBTixDQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUZlLFdBQUcsTUFFbEIsQ0FBQTtBQUVELGVBQXlCLEVBQXNCLEVBQUUsRUFBc0I7SUFDckUsSUFBSSxDQUFDLEdBQXVCLEVBQUUsQ0FBQztJQUUvQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQWhCZSxhQUFLLFFBZ0JwQixDQUFBO0FBRUQsaUJBQ0ksR0FBdUIsRUFBRSxRQUFxQztJQUNoRSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBUGUsZUFBTyxVQU90QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChhOiB7W3g6IHN0cmluZ106IGFueX0sIGI6IHtbeDogc3RyaW5nXTogYW55fSk6IGJvb2xlYW4ge1xuICBjb25zdCBrMSA9IE9iamVjdC5rZXlzKGEpO1xuICBjb25zdCBrMiA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoazEubGVuZ3RoICE9IGsyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQga2V5OiBzdHJpbmc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgazEubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrMVtpXTtcbiAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KGE6IFRbXVtdKTogVFtdIHtcbiAgY29uc3QgdGFyZ2V0OiBUW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBhW2ldLmxlbmd0aDsgKytqKSB7XG4gICAgICB0YXJnZXQucHVzaChhW2ldW2pdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0PFQ+KGE6IFRbXSk6IFQge1xuICByZXR1cm4gYS5sZW5ndGggPiAwID8gYVswXSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXN0PFQ+KGE6IFRbXSk6IFQge1xuICByZXR1cm4gYS5sZW5ndGggPiAwID8gYVthLmxlbmd0aCAtIDFdIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZChib29sczogYm9vbGVhbltdKTogYm9vbGVhbiB7XG4gIHJldHVybiBib29scy5yZWR1Y2UoKGEsIGIpID0+IGEgJiYgYiwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZTxWPihtMToge1trZXk6IHN0cmluZ106IFZ9LCBtMjoge1trZXk6IHN0cmluZ106IFZ9KToge1trZXk6IHN0cmluZ106IFZ9IHtcbiAgdmFyIG06IHtba2V5OiBzdHJpbmddOiBWfSA9IHt9O1xuXG4gIGZvciAodmFyIGF0dHIgaW4gbTEpIHtcbiAgICBpZiAobTEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIG1bYXR0cl0gPSBtMVthdHRyXTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBhdHRyIGluIG0yKSB7XG4gICAgaWYgKG0yLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICBtW2F0dHJdID0gbTJbYXR0cl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoPEssIFY+KFxuICAgIG1hcDoge1trZXk6IHN0cmluZ106IFZ9LCBjYWxsYmFjazogLyooViwgSykgPT4gdm9pZCovIEZ1bmN0aW9uKTogdm9pZCB7XG4gIGZvciAodmFyIHByb3AgaW4gbWFwKSB7XG4gICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgY2FsbGJhY2sobWFwW3Byb3BdLCBwcm9wKTtcbiAgICB9XG4gIH1cbn0iXX0=

/***/ },

/***/ 404:
/***/ function(module, exports) {

	"use strict";
	function validateConfig(config) {
	    config.forEach(validateNode);
	}
	exports.validateConfig = validateConfig;
	function validateNode(route) {
	    if (!!route.redirectTo && !!route.children) {
	        throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
	    }
	    if (!!route.redirectTo && !!route.component) {
	        throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
	    }
	    if (route.path === undefined) {
	        throw new Error("Invalid route configuration: routes must have path specified");
	    }
	    if (route.path.startsWith('/')) {
	        throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBZUEsd0JBQStCLE1BQW9CO0lBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUZlLHNCQUFjLGlCQUU3QixDQUFBO0FBRUQsc0JBQXNCLEtBQVk7SUFDaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQ1gscUNBQW1DLEtBQUssQ0FBQyxJQUFJLHVEQUFvRCxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksS0FBSyxDQUNYLHFDQUFtQyxLQUFLLENBQUMsSUFBSSx3REFBcUQsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBeUMsS0FBSyxDQUFDLElBQUksc0NBQW1DLENBQUMsQ0FBQztJQUMxRyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFJvdXRlckNvbmZpZyA9IFJvdXRlW107XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGUge1xuICBwYXRoPzogc3RyaW5nO1xuICB0ZXJtaW5hbD86IGJvb2xlYW47XG4gIGNvbXBvbmVudD86IFR5cGV8c3RyaW5nO1xuICBvdXRsZXQ/OiBzdHJpbmc7XG4gIGNhbkFjdGl2YXRlPzogYW55W107XG4gIGNhbkRlYWN0aXZhdGU/OiBhbnlbXTtcbiAgcmVkaXJlY3RUbz86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSb3V0ZVtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb25maWcoY29uZmlnOiBSb3V0ZXJDb25maWcpOiB2b2lkIHtcbiAgY29uZmlnLmZvckVhY2godmFsaWRhdGVOb2RlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOb2RlKHJvdXRlOiBSb3V0ZSk6IHZvaWQge1xuICBpZiAoISFyb3V0ZS5yZWRpcmVjdFRvICYmICEhcm91dGUuY2hpbGRyZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJyR7cm91dGUucGF0aH0nOiByZWRpcmVjdFRvIGFuZCBjaGlsZHJlbiBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcmApO1xuICB9XG4gIGlmICghIXJvdXRlLnJlZGlyZWN0VG8gJiYgISFyb3V0ZS5jb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJyR7cm91dGUucGF0aH0nOiByZWRpcmVjdFRvIGFuZCBjb21wb25lbnQgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXJgKTtcbiAgfVxuICBpZiAocm91dGUucGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJvdXRlIGNvbmZpZ3VyYXRpb246IHJvdXRlcyBtdXN0IGhhdmUgcGF0aCBzcGVjaWZpZWRgKTtcbiAgfVxuICBpZiAocm91dGUucGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcm91dGUgY29uZmlndXJhdGlvbiBvZiByb3V0ZSAnJHtyb3V0ZS5wYXRofSc6IHBhdGggY2Fubm90IHN0YXJ0IHdpdGggYSBzbGFzaGApO1xuICB9XG59Il19

/***/ },

/***/ 405:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BehaviorSubject_1 = __webpack_require__(406);
	var router_state_1 = __webpack_require__(407);
	var tree_1 = __webpack_require__(408);
	function createRouterState(curr, prevState) {
	    var root = createNode(curr._root, prevState ? prevState._root : undefined);
	    var queryParams = prevState ? prevState.queryParams : new BehaviorSubject_1.BehaviorSubject(curr.queryParams);
	    var fragment = prevState ? prevState.fragment : new BehaviorSubject_1.BehaviorSubject(curr.fragment);
	    return new router_state_1.RouterState(root, queryParams, fragment, curr);
	}
	exports.createRouterState = createRouterState;
	function createNode(curr, prevState) {
	    if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
	        var value = prevState.value;
	        value._futureSnapshot = curr.value;
	        var children = createOrReuseChildren(curr, prevState);
	        return new tree_1.TreeNode(value, children);
	    }
	    else {
	        var value = createActivatedRoute(curr.value);
	        var children = curr.children.map(function (c) { return createNode(c); });
	        return new tree_1.TreeNode(value, children);
	    }
	}
	function createOrReuseChildren(curr, prevState) {
	    return curr.children.map(function (child) {
	        var index = prevState.children.findIndex(function (p) { return equalRouteSnapshots(p.value.snapshot, child.value); });
	        if (index >= 0) {
	            return createNode(child, prevState.children[index]);
	        }
	        else {
	            return createNode(child);
	        }
	    });
	}
	function createActivatedRoute(c) {
	    return new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(c.url), new BehaviorSubject_1.BehaviorSubject(c.params), c.outlet, c.component, c);
	}
	function equalRouteSnapshots(a, b) {
	    return a._routeConfig === b._routeConfig;
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3JvdXRlcl9zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVfcm91dGVyX3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnQ0FBOEIsc0JBQXNCLENBQUMsQ0FBQTtBQUVyRCw2QkFBdUYsZ0JBQWdCLENBQUMsQ0FBQTtBQUN4RyxxQkFBdUIsY0FBYyxDQUFDLENBQUE7QUFFdEMsMkJBQWtDLElBQXlCLEVBQUUsU0FBc0I7SUFDakYsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDN0UsSUFBTSxXQUFXLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxpQ0FBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RixJQUFNLFFBQVEsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLGlDQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JGLE1BQU0sQ0FBQyxJQUFJLDBCQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUxlLHlCQUFpQixvQkFLaEMsQ0FBQTtBQUVELG9CQUFvQixJQUFzQyxFQUFFLFNBQW9DO0lBRTlGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNFLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUIsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRW5DLElBQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsSUFBSSxlQUFRLENBQWlCLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV2RCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLElBQUksZUFBUSxDQUFpQixLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkQsQ0FBQztBQUNILENBQUM7QUFFRCwrQkFDSSxJQUFzQyxFQUFFLFNBQW1DO0lBQzdFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUs7UUFDNUIsSUFBTSxLQUFLLEdBQ1AsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQWxELENBQWtELENBQUMsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCw4QkFBOEIsQ0FBeUI7SUFDckQsTUFBTSxDQUFDLElBQUksNkJBQWMsQ0FDckIsSUFBSSxpQ0FBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLGlDQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsNkJBQTZCLENBQXlCLEVBQUUsQ0FBeUI7SUFDL0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMvQmVoYXZpb3JTdWJqZWN0JztcblxuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGUsIFJvdXRlclN0YXRlU25hcHNob3R9IGZyb20gJy4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7VHJlZU5vZGV9IGZyb20gJy4vdXRpbHMvdHJlZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJTdGF0ZShjdXJyOiBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBwcmV2U3RhdGU6IFJvdXRlclN0YXRlKTogUm91dGVyU3RhdGUge1xuICBjb25zdCByb290ID0gY3JlYXRlTm9kZShjdXJyLl9yb290LCBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuX3Jvb3QgOiB1bmRlZmluZWQpO1xuICBjb25zdCBxdWVyeVBhcmFtcyA9IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5xdWVyeVBhcmFtcyA6IG5ldyBCZWhhdmlvclN1YmplY3QoY3Vyci5xdWVyeVBhcmFtcyk7XG4gIGNvbnN0IGZyYWdtZW50ID0gcHJldlN0YXRlID8gcHJldlN0YXRlLmZyYWdtZW50IDogbmV3IEJlaGF2aW9yU3ViamVjdChjdXJyLmZyYWdtZW50KTtcbiAgcmV0dXJuIG5ldyBSb3V0ZXJTdGF0ZShyb290LCBxdWVyeVBhcmFtcywgZnJhZ21lbnQsIGN1cnIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlKGN1cnI6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+LCBwcmV2U3RhdGU/OiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZT4pOlxuICAgIFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlPiB7XG4gIGlmIChwcmV2U3RhdGUgJiYgZXF1YWxSb3V0ZVNuYXBzaG90cyhwcmV2U3RhdGUudmFsdWUuc25hcHNob3QsIGN1cnIudmFsdWUpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBwcmV2U3RhdGUudmFsdWU7XG4gICAgdmFsdWUuX2Z1dHVyZVNuYXBzaG90ID0gY3Vyci52YWx1ZTtcblxuICAgIGNvbnN0IGNoaWxkcmVuID0gY3JlYXRlT3JSZXVzZUNoaWxkcmVuKGN1cnIsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIG5ldyBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZT4odmFsdWUsIGNoaWxkcmVuKTtcblxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZhbHVlID0gY3JlYXRlQWN0aXZhdGVkUm91dGUoY3Vyci52YWx1ZSk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBjdXJyLmNoaWxkcmVuLm1hcChjID0+IGNyZWF0ZU5vZGUoYykpO1xuICAgIHJldHVybiBuZXcgVHJlZU5vZGU8QWN0aXZhdGVkUm91dGU+KHZhbHVlLCBjaGlsZHJlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlT3JSZXVzZUNoaWxkcmVuKFxuICAgIGN1cnI6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+LCBwcmV2U3RhdGU6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlPikge1xuICByZXR1cm4gY3Vyci5jaGlsZHJlbi5tYXAoY2hpbGQgPT4ge1xuICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgcHJldlN0YXRlLmNoaWxkcmVuLmZpbmRJbmRleChwID0+IGVxdWFsUm91dGVTbmFwc2hvdHMocC52YWx1ZS5zbmFwc2hvdCwgY2hpbGQudmFsdWUpKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU5vZGUoY2hpbGQsIHByZXZTdGF0ZS5jaGlsZHJlbltpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlTm9kZShjaGlsZCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aXZhdGVkUm91dGUoYzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICByZXR1cm4gbmV3IEFjdGl2YXRlZFJvdXRlKFxuICAgICAgbmV3IEJlaGF2aW9yU3ViamVjdChjLnVybCksIG5ldyBCZWhhdmlvclN1YmplY3QoYy5wYXJhbXMpLCBjLm91dGxldCwgYy5jb21wb25lbnQsIGMpO1xufVxuXG5mdW5jdGlvbiBlcXVhbFJvdXRlU25hcHNob3RzKGE6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIGI6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIGEuX3JvdXRlQ29uZmlnID09PSBiLl9yb3V0ZUNvbmZpZztcbn0iXX0=

/***/ },

/***/ 406:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(37);
	var throwError_1 = __webpack_require__(55);
	var ObjectUnsubscribedError_1 = __webpack_require__(56);
	/**
	 * @class BehaviorSubject<T>
	 */
	var BehaviorSubject = (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        _super.call(this);
	        this._value = _value;
	    }
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasErrored) {
	            throwError_1.throwError(this.errorValue);
	        }
	        else if (this.isUnsubscribed) {
	            throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
	        }
	        else {
	            return this._value;
	        }
	    };
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.isUnsubscribed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype._next = function (value) {
	        _super.prototype._next.call(this, this._value = value);
	    };
	    BehaviorSubject.prototype._error = function (err) {
	        this.hasErrored = true;
	        _super.prototype._error.call(this, this.errorValue = err);
	    };
	    return BehaviorSubject;
	}(Subject_1.Subject));
	exports.BehaviorSubject = BehaviorSubject;
	//# sourceMappingURL=BehaviorSubject.js.map

/***/ },

/***/ 407:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BehaviorSubject_1 = __webpack_require__(406);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var tree_1 = __webpack_require__(408);
	var RouterState = (function (_super) {
	    __extends(RouterState, _super);
	    function RouterState(root, queryParams, fragment, snapshot) {
	        _super.call(this, root);
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	        this.snapshot = snapshot;
	    }
	    RouterState.prototype.toString = function () { return this.snapshot.toString(); };
	    return RouterState;
	}(tree_1.Tree));
	exports.RouterState = RouterState;
	function createEmptyState(urlTree, rootComponent) {
	    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
	    var emptyUrl = new BehaviorSubject_1.BehaviorSubject([new url_tree_1.UrlPathWithParams('', {})]);
	    var emptyParams = new BehaviorSubject_1.BehaviorSubject({});
	    var emptyQueryParams = new BehaviorSubject_1.BehaviorSubject({});
	    var fragment = new BehaviorSubject_1.BehaviorSubject('');
	    var activated = new ActivatedRoute(emptyUrl, emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, snapshot.root);
	    activated.snapshot = snapshot.root;
	    return new RouterState(new tree_1.TreeNode(activated, []), emptyQueryParams, fragment, snapshot);
	}
	exports.createEmptyState = createEmptyState;
	function createEmptyStateSnapshot(urlTree, rootComponent) {
	    var emptyParams = {};
	    var emptyQueryParams = {};
	    var fragment = '';
	    var activated = new ActivatedRouteSnapshot([], emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1);
	    return new RouterStateSnapshot('', new tree_1.TreeNode(activated, []), emptyQueryParams, fragment);
	}
	var ActivatedRoute = (function () {
	    function ActivatedRoute(url, params, outlet, component, futureSnapshot) {
	        this.url = url;
	        this.params = params;
	        this.outlet = outlet;
	        this.component = component;
	        this._futureSnapshot = futureSnapshot;
	    }
	    ActivatedRoute.prototype.toString = function () {
	        return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
	    };
	    return ActivatedRoute;
	}());
	exports.ActivatedRoute = ActivatedRoute;
	var ActivatedRouteSnapshot = (function () {
	    function ActivatedRouteSnapshot(url, params, outlet, component, routeConfig, urlSegment, lastPathIndex) {
	        this.url = url;
	        this.params = params;
	        this.outlet = outlet;
	        this.component = component;
	        this._routeConfig = routeConfig;
	        this._urlSegment = urlSegment;
	        this._lastPathIndex = lastPathIndex;
	    }
	    ActivatedRouteSnapshot.prototype.toString = function () {
	        var url = this.url.map(function (s) { return s.toString(); }).join('/');
	        var matched = this._routeConfig ? this._routeConfig.path : '';
	        return "Route(url:'" + url + "', path:'" + matched + "')";
	    };
	    return ActivatedRouteSnapshot;
	}());
	exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
	var RouterStateSnapshot = (function (_super) {
	    __extends(RouterStateSnapshot, _super);
	    function RouterStateSnapshot(url, root, queryParams, fragment) {
	        _super.call(this, root);
	        this.url = url;
	        this.queryParams = queryParams;
	        this.fragment = fragment;
	    }
	    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
	    return RouterStateSnapshot;
	}(tree_1.Tree));
	exports.RouterStateSnapshot = RouterStateSnapshot;
	function serializeNode(node) {
	    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
	    return "" + node.value + c;
	}
	function advanceActivatedRoute(route) {
	    if (route.snapshot && !collection_1.shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
	        route.snapshot = route._futureSnapshot;
	        route.url.next(route.snapshot.url);
	        route.params.next(route.snapshot.params);
	    }
	    else {
	        route.snapshot = route._futureSnapshot;
	    }
	}
	exports.advanceActivatedRoute = advanceActivatedRoute;
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 408:
/***/ function(module, exports) {

	"use strict";
	var Tree = (function () {
	    function Tree(root) {
	        this._root = root;
	    }
	    Object.defineProperty(Tree.prototype, "root", {
	        get: function () { return this._root.value; },
	        enumerable: true,
	        configurable: true
	    });
	    Tree.prototype.parent = function (t) {
	        var p = this.pathFromRoot(t);
	        return p.length > 1 ? p[p.length - 2] : null;
	    };
	    Tree.prototype.children = function (t) {
	        var n = findNode(t, this._root);
	        return n ? n.children.map(function (t) { return t.value; }) : [];
	    };
	    Tree.prototype.firstChild = function (t) {
	        var n = findNode(t, this._root);
	        return n && n.children.length > 0 ? n.children[0].value : null;
	    };
	    Tree.prototype.siblings = function (t) {
	        var p = findPath(t, this._root, []);
	        if (p.length < 2)
	            return [];
	        var c = p[p.length - 2].children.map(function (c) { return c.value; });
	        return c.filter(function (cc) { return cc !== t; });
	    };
	    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };
	    Tree.prototype.contains = function (tree) { return contains(this._root, tree._root); };
	    return Tree;
	}());
	exports.Tree = Tree;
	function findNode(expected, c) {
	    if (expected === c.value)
	        return c;
	    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	        var cc = _a[_i];
	        var r = findNode(expected, cc);
	        if (r)
	            return r;
	    }
	    return null;
	}
	function findPath(expected, c, collected) {
	    collected.push(c);
	    if (expected === c.value)
	        return collected;
	    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	        var cc = _a[_i];
	        var cloned = collected.slice(0);
	        var r = findPath(expected, cc, cloned);
	        if (r)
	            return r;
	    }
	    return [];
	}
	function contains(tree, subtree) {
	    if (tree.value !== subtree.value)
	        return false;
	    var _loop_1 = function(subtreeNode) {
	        var s = tree.children.filter(function (child) { return child.value === subtreeNode.value; });
	        if (s.length === 0)
	            return { value: false };
	        if (!contains(s[0], subtreeNode))
	            return { value: false };
	    };
	    for (var _i = 0, _a = subtree.children; _i < _a.length; _i++) {
	        var subtreeNode = _a[_i];
	        var state_1 = _loop_1(subtreeNode);
	        if (typeof state_1 === "object") return state_1.value;
	    }
	    return true;
	}
	var TreeNode = (function () {
	    function TreeNode(value, children) {
	        this.value = value;
	        this.children = children;
	    }
	    TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
	    return TreeNode;
	}());
	exports.TreeNode = TreeNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtJQUlFLGNBQVksSUFBaUI7UUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUFDLENBQUM7SUFFckQsc0JBQUksc0JBQUk7YUFBUixjQUFnQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUUxQyxxQkFBTSxHQUFOLFVBQU8sQ0FBSTtRQUNULElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUJBQVEsR0FBUixVQUFTLENBQUk7UUFDWCxJQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEtBQUssRUFBUCxDQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0MsQ0FBQztJQUVELHlCQUFVLEdBQVYsVUFBVyxDQUFJO1FBQ2IsSUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pFLENBQUM7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SyxFQUFqQyxDQUFpQyxDQUFDLENBQUM7UUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFBQyxnQkFBTyxLQUFLLEdBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQUMsZ0JBQU8sS0FBSyxHQUFDOztJQUhqRCxHQUFHLENBQUMsQ0FBb0IsVUFBZ0IsRUFBaEIsS0FBQSxPQUFPLENBQUMsUUFBUSxFQUFoQixjQUFnQixFQUFoQixJQUFnQixDQUFDO1FBQXBDLElBQUksV0FBVyxTQUFBOzs7S0FJbkI7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVEO0lBQ0Usa0JBQW1CLEtBQVEsRUFBUyxRQUF1QjtRQUF4QyxVQUFLLEdBQUwsS0FBSyxDQUFHO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBZTtJQUFHLENBQUM7SUFFL0QsMkJBQVEsR0FBUixjQUFxQixNQUFNLENBQUMsY0FBWSxJQUFJLENBQUMsS0FBSyxNQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFELGVBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQztBQUpZLGdCQUFRLFdBSXBCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVHJlZTxUPiB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3Jvb3Q6IFRyZWVOb2RlPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKHJvb3Q6IFRyZWVOb2RlPFQ+KSB7IHRoaXMuX3Jvb3QgPSByb290OyB9XG5cbiAgZ2V0IHJvb3QoKTogVCB7IHJldHVybiB0aGlzLl9yb290LnZhbHVlOyB9XG5cbiAgcGFyZW50KHQ6IFQpOiBUIHtcbiAgICBjb25zdCBwID0gdGhpcy5wYXRoRnJvbVJvb3QodCk7XG4gICAgcmV0dXJuIHAubGVuZ3RoID4gMSA/IHBbcC5sZW5ndGggLSAyXSA6IG51bGw7XG4gIH1cblxuICBjaGlsZHJlbih0OiBUKTogVFtdIHtcbiAgICBjb25zdCBuID0gZmluZE5vZGUodCwgdGhpcy5fcm9vdCk7XG4gICAgcmV0dXJuIG4gPyBuLmNoaWxkcmVuLm1hcCh0ID0+IHQudmFsdWUpIDogW107XG4gIH1cblxuICBmaXJzdENoaWxkKHQ6IFQpOiBUIHtcbiAgICBjb25zdCBuID0gZmluZE5vZGUodCwgdGhpcy5fcm9vdCk7XG4gICAgcmV0dXJuIG4gJiYgbi5jaGlsZHJlbi5sZW5ndGggPiAwID8gbi5jaGlsZHJlblswXS52YWx1ZSA6IG51bGw7XG4gIH1cblxuICBzaWJsaW5ncyh0OiBUKTogVFtdIHtcbiAgICBjb25zdCBwID0gZmluZFBhdGgodCwgdGhpcy5fcm9vdCwgW10pO1xuICAgIGlmIChwLmxlbmd0aCA8IDIpIHJldHVybiBbXTtcblxuICAgIGNvbnN0IGMgPSBwW3AubGVuZ3RoIC0gMl0uY2hpbGRyZW4ubWFwKGMgPT4gYy52YWx1ZSk7XG4gICAgcmV0dXJuIGMuZmlsdGVyKGNjID0+IGNjICE9PSB0KTtcbiAgfVxuXG4gIHBhdGhGcm9tUm9vdCh0OiBUKTogVFtdIHsgcmV0dXJuIGZpbmRQYXRoKHQsIHRoaXMuX3Jvb3QsIFtdKS5tYXAocyA9PiBzLnZhbHVlKTsgfVxuXG4gIGNvbnRhaW5zKHRyZWU6IFRyZWU8VD4pOiBib29sZWFuIHsgcmV0dXJuIGNvbnRhaW5zKHRoaXMuX3Jvb3QsIHRyZWUuX3Jvb3QpOyB9XG59XG5cbmZ1bmN0aW9uIGZpbmROb2RlPFQ+KGV4cGVjdGVkOiBULCBjOiBUcmVlTm9kZTxUPik6IFRyZWVOb2RlPFQ+IHtcbiAgaWYgKGV4cGVjdGVkID09PSBjLnZhbHVlKSByZXR1cm4gYztcbiAgZm9yIChsZXQgY2Mgb2YgYy5jaGlsZHJlbikge1xuICAgIGNvbnN0IHIgPSBmaW5kTm9kZShleHBlY3RlZCwgY2MpO1xuICAgIGlmIChyKSByZXR1cm4gcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZFBhdGg8VD4oZXhwZWN0ZWQ6IFQsIGM6IFRyZWVOb2RlPFQ+LCBjb2xsZWN0ZWQ6IFRyZWVOb2RlPFQ+W10pOiBUcmVlTm9kZTxUPltdIHtcbiAgY29sbGVjdGVkLnB1c2goYyk7XG4gIGlmIChleHBlY3RlZCA9PT0gYy52YWx1ZSkgcmV0dXJuIGNvbGxlY3RlZDtcblxuICBmb3IgKGxldCBjYyBvZiBjLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY29sbGVjdGVkLnNsaWNlKDApO1xuICAgIGNvbnN0IHIgPSBmaW5kUGF0aChleHBlY3RlZCwgY2MsIGNsb25lZCk7XG4gICAgaWYgKHIpIHJldHVybiByO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBjb250YWluczxUPih0cmVlOiBUcmVlTm9kZTxUPiwgc3VidHJlZTogVHJlZU5vZGU8VD4pOiBib29sZWFuIHtcbiAgaWYgKHRyZWUudmFsdWUgIT09IHN1YnRyZWUudmFsdWUpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGxldCBzdWJ0cmVlTm9kZSBvZiBzdWJ0cmVlLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgcyA9IHRyZWUuY2hpbGRyZW4uZmlsdGVyKGNoaWxkID0+IGNoaWxkLnZhbHVlID09PSBzdWJ0cmVlTm9kZS52YWx1ZSk7XG4gICAgaWYgKHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFjb250YWlucyhzWzBdLCBzdWJ0cmVlTm9kZSkpIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY2xhc3MgVHJlZU5vZGU8VD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IFQsIHB1YmxpYyBjaGlsZHJlbjogVHJlZU5vZGU8VD5bXSkge31cblxuICB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gYFRyZWVOb2RlKCR7dGhpcy52YWx1ZX0pYDsgfVxufSJdfQ==

/***/ },

/***/ 409:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	function createUrlTree(route, urlTree, commands, queryParams, fragment) {
	    if (commands.length === 0) {
	        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
	    }
	    var normalizedCommands = normalizeCommands(commands);
	    if (navigateToRoot(normalizedCommands)) {
	        return tree(urlTree.root, new url_tree_1.UrlSegment([], {}), urlTree, queryParams, fragment);
	    }
	    var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
	    var segment = startingPosition.processChildren ?
	        updateSegmentChildren(startingPosition.segment, startingPosition.index, normalizedCommands.commands) :
	        updateSegment(startingPosition.segment, startingPosition.index, normalizedCommands.commands);
	    return tree(startingPosition.segment, segment, urlTree, queryParams, fragment);
	}
	exports.createUrlTree = createUrlTree;
	function tree(oldSegment, newSegment, urlTree, queryParams, fragment) {
	    var q = queryParams ? stringify(queryParams) : urlTree.queryParams;
	    var f = fragment ? fragment : urlTree.fragment;
	    if (urlTree.root === oldSegment) {
	        return new url_tree_1.UrlTree(newSegment, q, f);
	    }
	    else {
	        return new url_tree_1.UrlTree(replaceSegment(urlTree.root, oldSegment, newSegment), q, f);
	    }
	}
	function replaceSegment(current, oldSegment, newSegment) {
	    var children = {};
	    collection_1.forEach(current.children, function (c, outletName) {
	        if (c === oldSegment) {
	            children[outletName] = newSegment;
	        }
	        else {
	            children[outletName] = replaceSegment(c, oldSegment, newSegment);
	        }
	    });
	    return new url_tree_1.UrlSegment(current.pathsWithParams, children);
	}
	function navigateToRoot(normalizedChange) {
	    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&
	        normalizedChange.commands[0] == '/';
	}
	var NormalizedNavigationCommands = (function () {
	    function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
	        this.isAbsolute = isAbsolute;
	        this.numberOfDoubleDots = numberOfDoubleDots;
	        this.commands = commands;
	    }
	    return NormalizedNavigationCommands;
	}());
	function normalizeCommands(commands) {
	    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
	        return new NormalizedNavigationCommands(true, 0, commands);
	    }
	    var numberOfDoubleDots = 0;
	    var isAbsolute = false;
	    var res = [];
	    for (var i = 0; i < commands.length; ++i) {
	        var c = commands[i];
	        if (!(typeof c === 'string')) {
	            res.push(c);
	            continue;
	        }
	        var parts = c.split('/');
	        for (var j = 0; j < parts.length; ++j) {
	            var cc = parts[j];
	            if (i == 0) {
	                if (j == 0 && cc == '.') {
	                }
	                else if (j == 0 && cc == '') {
	                    isAbsolute = true;
	                }
	                else if (cc == '..') {
	                    numberOfDoubleDots++;
	                }
	                else if (cc != '') {
	                    res.push(cc);
	                }
	            }
	            else {
	                if (cc != '') {
	                    res.push(cc);
	                }
	            }
	        }
	    }
	    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
	}
	var Position = (function () {
	    function Position(segment, processChildren, index) {
	        this.segment = segment;
	        this.processChildren = processChildren;
	        this.index = index;
	    }
	    return Position;
	}());
	function findStartingPosition(normalizedChange, urlTree, route) {
	    if (normalizedChange.isAbsolute) {
	        return new Position(urlTree.root, true, 0);
	    }
	    else if (route.snapshot._lastPathIndex === -1) {
	        return new Position(route.snapshot._urlSegment, true, 0);
	    }
	    else if (route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots >= 0) {
	        return new Position(route.snapshot._urlSegment, false, route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots);
	    }
	    else {
	        throw new Error('Invalid number of \'../\'');
	    }
	}
	function getPath(command) {
	    if (!(typeof command === 'string'))
	        return command.toString();
	    var parts = command.toString().split(':');
	    return parts.length > 1 ? parts[1] : command;
	}
	function getOutlet(commands) {
	    if (!(typeof commands[0] === 'string'))
	        return shared_1.PRIMARY_OUTLET;
	    var parts = commands[0].toString().split(':');
	    return parts.length > 1 ? parts[0] : shared_1.PRIMARY_OUTLET;
	}
	function updateSegment(segment, startIndex, commands) {
	    if (!segment) {
	        segment = new url_tree_1.UrlSegment([], {});
	    }
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return updateSegmentChildren(segment, startIndex, commands);
	    }
	    var m = prefixedWith(segment, startIndex, commands);
	    var slicedCommands = commands.slice(m.lastIndex);
	    if (m.match && slicedCommands.length === 0) {
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, {});
	    }
	    else if (m.match && Object.keys(segment.children).length === 0) {
	        return createNewSegment(segment, startIndex, commands);
	    }
	    else if (m.match) {
	        return updateSegmentChildren(segment, 0, slicedCommands);
	    }
	    else {
	        return createNewSegment(segment, startIndex, commands);
	    }
	}
	function updateSegmentChildren(segment, startIndex, commands) {
	    if (commands.length === 0) {
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, {});
	    }
	    else {
	        var outlet_1 = getOutlet(commands);
	        var children_1 = {};
	        children_1[outlet_1] = updateSegment(segment.children[outlet_1], startIndex, commands);
	        collection_1.forEach(segment.children, function (child, childOutlet) {
	            if (childOutlet !== outlet_1) {
	                children_1[childOutlet] = child;
	            }
	        });
	        return new url_tree_1.UrlSegment(segment.pathsWithParams, children_1);
	    }
	}
	function prefixedWith(segment, startIndex, commands) {
	    var currentCommandIndex = 0;
	    var currentPathIndex = startIndex;
	    var noMatch = { match: false, lastIndex: 0 };
	    while (currentPathIndex < segment.pathsWithParams.length) {
	        if (currentCommandIndex >= commands.length)
	            return noMatch;
	        var path = segment.pathsWithParams[currentPathIndex];
	        var curr = getPath(commands[currentCommandIndex]);
	        var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
	        if (curr && next && (typeof next === 'object')) {
	            if (!compare(curr, next, path))
	                return noMatch;
	            currentCommandIndex += 2;
	        }
	        else {
	            if (!compare(curr, {}, path))
	                return noMatch;
	            currentCommandIndex++;
	        }
	        currentPathIndex++;
	    }
	    return { match: true, lastIndex: currentCommandIndex };
	}
	function createNewSegment(segment, startIndex, commands) {
	    var paths = segment.pathsWithParams.slice(0, startIndex);
	    var i = 0;
	    while (i < commands.length) {
	        if (i === 0 && (typeof commands[0] === 'object')) {
	            var p = segment.pathsWithParams[startIndex];
	            paths.push(new url_tree_1.UrlPathWithParams(p.path, commands[0]));
	            i++;
	            continue;
	        }
	        var curr = getPath(commands[i]);
	        var next = (i < commands.length - 1) ? commands[i + 1] : null;
	        if (curr && next && (typeof next === 'object')) {
	            paths.push(new url_tree_1.UrlPathWithParams(curr, stringify(next)));
	            i += 2;
	        }
	        else {
	            paths.push(new url_tree_1.UrlPathWithParams(curr, {}));
	            i++;
	        }
	    }
	    return new url_tree_1.UrlSegment(paths, {});
	}
	function stringify(params) {
	    var res = {};
	    collection_1.forEach(params, function (v, k) { return res[k] = "" + v; });
	    return res;
	}
	function compare(path, params, pathWithParams) {
	    return path == pathWithParams.path && collection_1.shallowEqual(params, pathWithParams.parameters);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3VybF90cmVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZV91cmxfdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsdUJBQXFDLFVBQVUsQ0FBQyxDQUFBO0FBQ2hELHlCQUFxRCxZQUFZLENBQUMsQ0FBQTtBQUNsRSwyQkFBb0Msb0JBQW9CLENBQUMsQ0FBQTtBQUV6RCx1QkFDSSxLQUFxQixFQUFFLE9BQWdCLEVBQUUsUUFBZSxFQUFFLFdBQW1CLEVBQzdFLFFBQWdCO0lBQ2xCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxJQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxxQkFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxJQUFNLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRixJQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlO1FBQzVDLHFCQUFxQixDQUNqQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUNsRixhQUFhLENBQUMsZ0JBQWdCLENB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QkFBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QyxDQUFDLEVBQUUsQ0FBQztRQUNOLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUkscUJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELG1CQUFtQixNQUE0QjtJQUM3QyxJQUFNLEdBQUcsR0FBNEIsRUFBRSxDQUFDO0lBQ3hDLG9CQUFPLENBQUMsTUFBTSxFQUFFLFVBQUMsQ0FBTSxFQUFFLENBQVMsSUFBSyxPQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFHLENBQUcsRUFBZixDQUFlLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELGlCQUNJLElBQVksRUFBRSxNQUE0QixFQUFFLGNBQWlDO0lBQy9FLE1BQU0sQ0FBQyxJQUFJLElBQUksY0FBYyxDQUFDLElBQUksSUFBSSx5QkFBWSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWN0aXZhdGVkUm91dGV9IGZyb20gJy4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7UFJJTUFSWV9PVVRMRVQsIFBhcmFtc30gZnJvbSAnLi9zaGFyZWQnO1xuaW1wb3J0IHtVcmxQYXRoV2l0aFBhcmFtcywgVXJsU2VnbWVudCwgVXJsVHJlZX0gZnJvbSAnLi91cmxfdHJlZSc7XG5pbXBvcnQge2ZvckVhY2gsIHNoYWxsb3dFcXVhbH0gZnJvbSAnLi91dGlscy9jb2xsZWN0aW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVybFRyZWUoXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCB1cmxUcmVlOiBVcmxUcmVlLCBjb21tYW5kczogYW55W10sIHF1ZXJ5UGFyYW1zOiBQYXJhbXMsXG4gICAgZnJhZ21lbnQ6IHN0cmluZyk6IFVybFRyZWUge1xuICBpZiAoY29tbWFuZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRyZWUodXJsVHJlZS5yb290LCB1cmxUcmVlLnJvb3QsIHVybFRyZWUsIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCk7XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkQ29tbWFuZHMgPSBub3JtYWxpemVDb21tYW5kcyhjb21tYW5kcyk7XG4gIGlmIChuYXZpZ2F0ZVRvUm9vdChub3JtYWxpemVkQ29tbWFuZHMpKSB7XG4gICAgcmV0dXJuIHRyZWUodXJsVHJlZS5yb290LCBuZXcgVXJsU2VnbWVudChbXSwge30pLCB1cmxUcmVlLCBxdWVyeVBhcmFtcywgZnJhZ21lbnQpO1xuICB9XG5cbiAgY29uc3Qgc3RhcnRpbmdQb3NpdGlvbiA9IGZpbmRTdGFydGluZ1Bvc2l0aW9uKG5vcm1hbGl6ZWRDb21tYW5kcywgdXJsVHJlZSwgcm91dGUpO1xuICBjb25zdCBzZWdtZW50ID0gc3RhcnRpbmdQb3NpdGlvbi5wcm9jZXNzQ2hpbGRyZW4gP1xuICAgICAgdXBkYXRlU2VnbWVudENoaWxkcmVuKFxuICAgICAgICAgIHN0YXJ0aW5nUG9zaXRpb24uc2VnbWVudCwgc3RhcnRpbmdQb3NpdGlvbi5pbmRleCwgbm9ybWFsaXplZENvbW1hbmRzLmNvbW1hbmRzKSA6XG4gICAgICB1cGRhdGVTZWdtZW50KHN0YXJ0aW5nUG9zaXRpb24uc2VnbWVudCwgc3RhcnRpbmdQb3NpdGlvbi5pbmRleCwgbm9ybWFsaXplZENvbW1hbmRzLmNvbW1hbmRzKTtcbiAgcmV0dXJuIHRyZWUoc3RhcnRpbmdQb3NpdGlvbi5zZWdtZW50LCBzZWdtZW50LCB1cmxUcmVlLCBxdWVyeVBhcmFtcywgZnJhZ21lbnQpO1xufVxuXG5mdW5jdGlvbiB0cmVlKFxuICAgIG9sZFNlZ21lbnQ6IFVybFNlZ21lbnQsIG5ld1NlZ21lbnQ6IFVybFNlZ21lbnQsIHVybFRyZWU6IFVybFRyZWUsIHF1ZXJ5UGFyYW1zOiBQYXJhbXMsXG4gICAgZnJhZ21lbnQ6IHN0cmluZyk6IFVybFRyZWUge1xuICBjb25zdCBxID0gcXVlcnlQYXJhbXMgPyBzdHJpbmdpZnkocXVlcnlQYXJhbXMpIDogdXJsVHJlZS5xdWVyeVBhcmFtcztcbiAgY29uc3QgZiA9IGZyYWdtZW50ID8gZnJhZ21lbnQgOiB1cmxUcmVlLmZyYWdtZW50O1xuXG4gIGlmICh1cmxUcmVlLnJvb3QgPT09IG9sZFNlZ21lbnQpIHtcbiAgICByZXR1cm4gbmV3IFVybFRyZWUobmV3U2VnbWVudCwgcSwgZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBVcmxUcmVlKHJlcGxhY2VTZWdtZW50KHVybFRyZWUucm9vdCwgb2xkU2VnbWVudCwgbmV3U2VnbWVudCksIHEsIGYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VTZWdtZW50KFxuICAgIGN1cnJlbnQ6IFVybFNlZ21lbnQsIG9sZFNlZ21lbnQ6IFVybFNlZ21lbnQsIG5ld1NlZ21lbnQ6IFVybFNlZ21lbnQpOiBVcmxTZWdtZW50IHtcbiAgY29uc3QgY2hpbGRyZW46IHtba2V5OiBzdHJpbmddOiBVcmxTZWdtZW50fSA9IHt9O1xuICBmb3JFYWNoKGN1cnJlbnQuY2hpbGRyZW4sIChjOiBVcmxTZWdtZW50LCBvdXRsZXROYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoYyA9PT0gb2xkU2VnbWVudCkge1xuICAgICAgY2hpbGRyZW5bb3V0bGV0TmFtZV0gPSBuZXdTZWdtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZHJlbltvdXRsZXROYW1lXSA9IHJlcGxhY2VTZWdtZW50KGMsIG9sZFNlZ21lbnQsIG5ld1NlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXcgVXJsU2VnbWVudChjdXJyZW50LnBhdGhzV2l0aFBhcmFtcywgY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBuYXZpZ2F0ZVRvUm9vdChub3JtYWxpemVkQ2hhbmdlOiBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzKTogYm9vbGVhbiB7XG4gIHJldHVybiBub3JtYWxpemVkQ2hhbmdlLmlzQWJzb2x1dGUgJiYgbm9ybWFsaXplZENoYW5nZS5jb21tYW5kcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vcm1hbGl6ZWRDaGFuZ2UuY29tbWFuZHNbMF0gPT0gJy8nO1xufVxuXG5jbGFzcyBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgaXNBYnNvbHV0ZTogYm9vbGVhbiwgcHVibGljIG51bWJlck9mRG91YmxlRG90czogbnVtYmVyLCBwdWJsaWMgY29tbWFuZHM6IGFueVtdKSB7fVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVDb21tYW5kcyhjb21tYW5kczogYW55W10pOiBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzIHtcbiAgaWYgKCh0eXBlb2YgY29tbWFuZHNbMF0gPT09ICdzdHJpbmcnKSAmJiBjb21tYW5kcy5sZW5ndGggPT09IDEgJiYgY29tbWFuZHNbMF0gPT0gJy8nKSB7XG4gICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzKHRydWUsIDAsIGNvbW1hbmRzKTtcbiAgfVxuXG4gIGxldCBudW1iZXJPZkRvdWJsZURvdHMgPSAwO1xuICBsZXQgaXNBYnNvbHV0ZSA9IGZhbHNlO1xuICBjb25zdCByZXM6IGFueVtdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21tYW5kcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGMgPSBjb21tYW5kc1tpXTtcblxuICAgIGlmICghKHR5cGVvZiBjID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgcGFydHMgPSBjLnNwbGl0KCcvJyk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJ0cy5sZW5ndGg7ICsraikge1xuICAgICAgbGV0IGNjID0gcGFydHNbal07XG5cbiAgICAgIC8vIGZpcnN0IGV4cCBpcyB0cmVhdGVkIGluIGEgc3BlY2lhbCB3YXlcbiAgICAgIGlmIChpID09IDApIHtcbiAgICAgICAgaWYgKGogPT0gMCAmJiBjYyA9PSAnLicpIHsgIC8vICAnLi9hJ1xuICAgICAgICAgIC8vIHNraXAgaXRcbiAgICAgICAgfSBlbHNlIGlmIChqID09IDAgJiYgY2MgPT0gJycpIHsgIC8vICAnL2EnXG4gICAgICAgICAgaXNBYnNvbHV0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2MgPT0gJy4uJykgeyAgLy8gICcuLi9hJ1xuICAgICAgICAgIG51bWJlck9mRG91YmxlRG90cysrO1xuICAgICAgICB9IGVsc2UgaWYgKGNjICE9ICcnKSB7XG4gICAgICAgICAgcmVzLnB1c2goY2MpO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjYyAhPSAnJykge1xuICAgICAgICAgIHJlcy5wdXNoKGNjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgTm9ybWFsaXplZE5hdmlnYXRpb25Db21tYW5kcyhpc0Fic29sdXRlLCBudW1iZXJPZkRvdWJsZURvdHMsIHJlcyk7XG59XG5cbmNsYXNzIFBvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHNlZ21lbnQ6IFVybFNlZ21lbnQsIHB1YmxpYyBwcm9jZXNzQ2hpbGRyZW46IGJvb2xlYW4sIHB1YmxpYyBpbmRleDogbnVtYmVyKSB7fVxufVxuXG5mdW5jdGlvbiBmaW5kU3RhcnRpbmdQb3NpdGlvbihcbiAgICBub3JtYWxpemVkQ2hhbmdlOiBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzLCB1cmxUcmVlOiBVcmxUcmVlLFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk6IFBvc2l0aW9uIHtcbiAgaWYgKG5vcm1hbGl6ZWRDaGFuZ2UuaXNBYnNvbHV0ZSkge1xuICAgIHJldHVybiBuZXcgUG9zaXRpb24odXJsVHJlZS5yb290LCB0cnVlLCAwKTtcbiAgfSBlbHNlIGlmIChyb3V0ZS5zbmFwc2hvdC5fbGFzdFBhdGhJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHJvdXRlLnNuYXBzaG90Ll91cmxTZWdtZW50LCB0cnVlLCAwKTtcbiAgfSBlbHNlIGlmIChyb3V0ZS5zbmFwc2hvdC5fbGFzdFBhdGhJbmRleCArIDEgLSBub3JtYWxpemVkQ2hhbmdlLm51bWJlck9mRG91YmxlRG90cyA+PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBQb3NpdGlvbihcbiAgICAgICAgcm91dGUuc25hcHNob3QuX3VybFNlZ21lbnQsIGZhbHNlLFxuICAgICAgICByb3V0ZS5zbmFwc2hvdC5fbGFzdFBhdGhJbmRleCArIDEgLSBub3JtYWxpemVkQ2hhbmdlLm51bWJlck9mRG91YmxlRG90cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBcXCcuLi9cXCcnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoKGNvbW1hbmQ6IGFueSk6IGFueSB7XG4gIGlmICghKHR5cGVvZiBjb21tYW5kID09PSAnc3RyaW5nJykpIHJldHVybiBjb21tYW5kLnRvU3RyaW5nKCk7XG4gIGNvbnN0IHBhcnRzID0gY29tbWFuZC50b1N0cmluZygpLnNwbGl0KCc6Jyk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPiAxID8gcGFydHNbMV0gOiBjb21tYW5kO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRsZXQoY29tbWFuZHM6IGFueVtdKTogc3RyaW5nIHtcbiAgaWYgKCEodHlwZW9mIGNvbW1hbmRzWzBdID09PSAnc3RyaW5nJykpIHJldHVybiBQUklNQVJZX09VVExFVDtcbiAgY29uc3QgcGFydHMgPSBjb21tYW5kc1swXS50b1N0cmluZygpLnNwbGl0KCc6Jyk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPiAxID8gcGFydHNbMF0gOiBQUklNQVJZX09VVExFVDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2VnbWVudChzZWdtZW50OiBVcmxTZWdtZW50LCBzdGFydEluZGV4OiBudW1iZXIsIGNvbW1hbmRzOiBhbnlbXSk6IFVybFNlZ21lbnQge1xuICBpZiAoIXNlZ21lbnQpIHtcbiAgICBzZWdtZW50ID0gbmV3IFVybFNlZ21lbnQoW10sIHt9KTtcbiAgfVxuICBpZiAoc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdXBkYXRlU2VnbWVudENoaWxkcmVuKHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgfVxuICBjb25zdCBtID0gcHJlZml4ZWRXaXRoKHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgY29uc3Qgc2xpY2VkQ29tbWFuZHMgPSBjb21tYW5kcy5zbGljZShtLmxhc3RJbmRleCk7XG5cbiAgaWYgKG0ubWF0Y2ggJiYgc2xpY2VkQ29tbWFuZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBVcmxTZWdtZW50KHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLCB7fSk7XG4gIH0gZWxzZSBpZiAobS5tYXRjaCAmJiBPYmplY3Qua2V5cyhzZWdtZW50LmNoaWxkcmVuKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gY3JlYXRlTmV3U2VnbWVudChzZWdtZW50LCBzdGFydEluZGV4LCBjb21tYW5kcyk7XG4gIH0gZWxzZSBpZiAobS5tYXRjaCkge1xuICAgIHJldHVybiB1cGRhdGVTZWdtZW50Q2hpbGRyZW4oc2VnbWVudCwgMCwgc2xpY2VkQ29tbWFuZHMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVOZXdTZWdtZW50KHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTZWdtZW50Q2hpbGRyZW4oXG4gICAgc2VnbWVudDogVXJsU2VnbWVudCwgc3RhcnRJbmRleDogbnVtYmVyLCBjb21tYW5kczogYW55W10pOiBVcmxTZWdtZW50IHtcbiAgaWYgKGNvbW1hbmRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgVXJsU2VnbWVudChzZWdtZW50LnBhdGhzV2l0aFBhcmFtcywge30pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG91dGxldCA9IGdldE91dGxldChjb21tYW5kcyk7XG4gICAgY29uc3QgY2hpbGRyZW46IHtba2V5OiBzdHJpbmddOiBVcmxTZWdtZW50fSA9IHt9O1xuICAgIGNoaWxkcmVuW291dGxldF0gPSB1cGRhdGVTZWdtZW50KHNlZ21lbnQuY2hpbGRyZW5bb3V0bGV0XSwgc3RhcnRJbmRleCwgY29tbWFuZHMpO1xuICAgIGZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgKGNoaWxkOiBVcmxTZWdtZW50LCBjaGlsZE91dGxldDogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoY2hpbGRPdXRsZXQgIT09IG91dGxldCkge1xuICAgICAgICBjaGlsZHJlbltjaGlsZE91dGxldF0gPSBjaGlsZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFVybFNlZ21lbnQoc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMsIGNoaWxkcmVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVmaXhlZFdpdGgoc2VnbWVudDogVXJsU2VnbWVudCwgc3RhcnRJbmRleDogbnVtYmVyLCBjb21tYW5kczogYW55W10pIHtcbiAgbGV0IGN1cnJlbnRDb21tYW5kSW5kZXggPSAwO1xuICBsZXQgY3VycmVudFBhdGhJbmRleCA9IHN0YXJ0SW5kZXg7XG5cbiAgY29uc3Qgbm9NYXRjaCA9IHttYXRjaDogZmFsc2UsIGxhc3RJbmRleDogMH07XG4gIHdoaWxlIChjdXJyZW50UGF0aEluZGV4IDwgc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoKSB7XG4gICAgaWYgKGN1cnJlbnRDb21tYW5kSW5kZXggPj0gY29tbWFuZHMubGVuZ3RoKSByZXR1cm4gbm9NYXRjaDtcbiAgICBjb25zdCBwYXRoID0gc2VnbWVudC5wYXRoc1dpdGhQYXJhbXNbY3VycmVudFBhdGhJbmRleF07XG4gICAgY29uc3QgY3VyciA9IGdldFBhdGgoY29tbWFuZHNbY3VycmVudENvbW1hbmRJbmRleF0pO1xuICAgIGNvbnN0IG5leHQgPVxuICAgICAgICBjdXJyZW50Q29tbWFuZEluZGV4IDwgY29tbWFuZHMubGVuZ3RoIC0gMSA/IGNvbW1hbmRzW2N1cnJlbnRDb21tYW5kSW5kZXggKyAxXSA6IG51bGw7XG5cbiAgICBpZiAoY3VyciAmJiBuZXh0ICYmICh0eXBlb2YgbmV4dCA9PT0gJ29iamVjdCcpKSB7XG4gICAgICBpZiAoIWNvbXBhcmUoY3VyciwgbmV4dCwgcGF0aCkpIHJldHVybiBub01hdGNoO1xuICAgICAgY3VycmVudENvbW1hbmRJbmRleCArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNvbXBhcmUoY3Vyciwge30sIHBhdGgpKSByZXR1cm4gbm9NYXRjaDtcbiAgICAgIGN1cnJlbnRDb21tYW5kSW5kZXgrKztcbiAgICB9XG4gICAgY3VycmVudFBhdGhJbmRleCsrO1xuICB9XG5cbiAgcmV0dXJuIHttYXRjaDogdHJ1ZSwgbGFzdEluZGV4OiBjdXJyZW50Q29tbWFuZEluZGV4fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmV3U2VnbWVudChzZWdtZW50OiBVcmxTZWdtZW50LCBzdGFydEluZGV4OiBudW1iZXIsIGNvbW1hbmRzOiBhbnlbXSk6IFVybFNlZ21lbnQge1xuICBjb25zdCBwYXRocyA9IHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLnNsaWNlKDAsIHN0YXJ0SW5kZXgpO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgY29tbWFuZHMubGVuZ3RoKSB7XG4gICAgLy8gaWYgd2Ugc3RhcnQgd2l0aCBhbiBvYmplY3QgbGl0ZXJhbCwgd2UgbmVlZCB0byByZXVzZSB0aGUgcGF0aCBwYXJ0IGZyb20gdGhlIHNlZ21lbnRcbiAgICBpZiAoaSA9PT0gMCAmJiAodHlwZW9mIGNvbW1hbmRzWzBdID09PSAnb2JqZWN0JykpIHtcbiAgICAgIGNvbnN0IHAgPSBzZWdtZW50LnBhdGhzV2l0aFBhcmFtc1tzdGFydEluZGV4XTtcbiAgICAgIHBhdGhzLnB1c2gobmV3IFVybFBhdGhXaXRoUGFyYW1zKHAucGF0aCwgY29tbWFuZHNbMF0pKTtcbiAgICAgIGkrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnIgPSBnZXRQYXRoKGNvbW1hbmRzW2ldKTtcbiAgICBjb25zdCBuZXh0ID0gKGkgPCBjb21tYW5kcy5sZW5ndGggLSAxKSA/IGNvbW1hbmRzW2kgKyAxXSA6IG51bGw7XG4gICAgaWYgKGN1cnIgJiYgbmV4dCAmJiAodHlwZW9mIG5leHQgPT09ICdvYmplY3QnKSkge1xuICAgICAgcGF0aHMucHVzaChuZXcgVXJsUGF0aFdpdGhQYXJhbXMoY3Vyciwgc3RyaW5naWZ5KG5leHQpKSk7XG4gICAgICBpICs9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGhzLnB1c2gobmV3IFVybFBhdGhXaXRoUGFyYW1zKGN1cnIsIHt9KSk7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgVXJsU2VnbWVudChwYXRocywge30pO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkocGFyYW1zOiB7W2tleTogc3RyaW5nXTogYW55fSk6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9IHtcbiAgY29uc3QgcmVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuICBmb3JFYWNoKHBhcmFtcywgKHY6IGFueSwgazogc3RyaW5nKSA9PiByZXNba10gPSBgJHt2fWApO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlKFxuICAgIHBhdGg6IHN0cmluZywgcGFyYW1zOiB7W2tleTogc3RyaW5nXTogYW55fSwgcGF0aFdpdGhQYXJhbXM6IFVybFBhdGhXaXRoUGFyYW1zKTogYm9vbGVhbiB7XG4gIHJldHVybiBwYXRoID09IHBhdGhXaXRoUGFyYW1zLnBhdGggJiYgc2hhbGxvd0VxdWFsKHBhcmFtcywgcGF0aFdpdGhQYXJhbXMucGFyYW1ldGVycyk7XG59Il19

/***/ },

/***/ 410:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var of_1 = __webpack_require__(351);
	var router_state_1 = __webpack_require__(407);
	var shared_1 = __webpack_require__(400);
	var url_tree_1 = __webpack_require__(401);
	var collection_1 = __webpack_require__(403);
	var tree_1 = __webpack_require__(408);
	var NoMatch = (function () {
	    function NoMatch(segment) {
	        if (segment === void 0) { segment = null; }
	        this.segment = segment;
	    }
	    return NoMatch;
	}());
	function recognize(rootComponentType, config, urlTree, url) {
	    try {
	        var children = processSegment(config, urlTree.root, shared_1.PRIMARY_OUTLET);
	        var root = new router_state_1.ActivatedRouteSnapshot([], {}, shared_1.PRIMARY_OUTLET, rootComponentType, null, urlTree.root, -1);
	        var rootNode = new tree_1.TreeNode(root, children);
	        return of_1.of(new router_state_1.RouterStateSnapshot(url, rootNode, urlTree.queryParams, urlTree.fragment));
	    }
	    catch (e) {
	        if (e instanceof NoMatch) {
	            return new Observable_1.Observable(function (obs) {
	                return obs.error(new Error("Cannot match any routes: '" + e.segment + "'"));
	            });
	        }
	        else {
	            return new Observable_1.Observable(function (obs) { return obs.error(e); });
	        }
	    }
	}
	exports.recognize = recognize;
	function processSegment(config, segment, outlet) {
	    if (segment.pathsWithParams.length === 0 && Object.keys(segment.children).length > 0) {
	        return processSegmentChildren(config, segment);
	    }
	    else {
	        return [processPathsWithParams(config, segment, 0, segment.pathsWithParams, outlet)];
	    }
	}
	function processSegmentChildren(config, segment) {
	    var children = url_tree_1.mapChildrenIntoArray(segment, function (child, childOutlet) { return processSegment(config, child, childOutlet); });
	    checkOutletNameUniqueness(children);
	    sortActivatedRouteSnapshots(children);
	    return children;
	}
	function sortActivatedRouteSnapshots(nodes) {
	    nodes.sort(function (a, b) {
	        if (a.value.outlet === shared_1.PRIMARY_OUTLET)
	            return -1;
	        if (b.value.outlet === shared_1.PRIMARY_OUTLET)
	            return 1;
	        return a.value.outlet.localeCompare(b.value.outlet);
	    });
	}
	function processPathsWithParams(config, segment, pathIndex, paths, outlet) {
	    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
	        var r = config_1[_i];
	        try {
	            return processPathsWithParamsAgainstRoute(r, segment, pathIndex, paths, outlet);
	        }
	        catch (e) {
	            if (!(e instanceof NoMatch))
	                throw e;
	        }
	    }
	    throw new NoMatch(segment);
	}
	function processPathsWithParamsAgainstRoute(route, segment, pathIndex, paths, outlet) {
	    if (route.redirectTo)
	        throw new NoMatch();
	    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== outlet)
	        throw new NoMatch();
	    if (route.path === '**') {
	        var params = paths.length > 0 ? collection_1.last(paths).parameters : {};
	        var snapshot_1 = new router_state_1.ActivatedRouteSnapshot(paths, params, outlet, route.component, route, segment, -1);
	        return new tree_1.TreeNode(snapshot_1, []);
	    }
	    var _a = match(segment, route, paths), consumedPaths = _a.consumedPaths, parameters = _a.parameters, lastChild = _a.lastChild;
	    var snapshot = new router_state_1.ActivatedRouteSnapshot(consumedPaths, parameters, outlet, route.component, route, segment, pathIndex + lastChild - 1);
	    var slicedPath = paths.slice(lastChild);
	    var childConfig = route.children ? route.children : [];
	    if (childConfig.length === 0 && slicedPath.length === 0) {
	        return new tree_1.TreeNode(snapshot, []);
	    }
	    else if (slicedPath.length === 0 && Object.keys(segment.children).length > 0) {
	        var children = processSegmentChildren(childConfig, segment);
	        return new tree_1.TreeNode(snapshot, children);
	    }
	    else {
	        var child = processPathsWithParams(childConfig, segment, pathIndex + lastChild, slicedPath, shared_1.PRIMARY_OUTLET);
	        return new tree_1.TreeNode(snapshot, [child]);
	    }
	}
	function match(segment, route, paths) {
	    if (route.path === '') {
	        if (route.terminal && (Object.keys(segment.children).length > 0 || paths.length > 0)) {
	            throw new NoMatch();
	        }
	        else {
	            return { consumedPaths: [], lastChild: 0, parameters: {} };
	        }
	    }
	    var path = route.path;
	    var parts = path.split('/');
	    var posParameters = {};
	    var consumedPaths = [];
	    var currentIndex = 0;
	    for (var i = 0; i < parts.length; ++i) {
	        if (currentIndex >= paths.length)
	            throw new NoMatch();
	        var current = paths[currentIndex];
	        var p = parts[i];
	        var isPosParam = p.startsWith(':');
	        if (!isPosParam && p !== current.path)
	            throw new NoMatch();
	        if (isPosParam) {
	            posParameters[p.substring(1)] = current.path;
	        }
	        consumedPaths.push(current);
	        currentIndex++;
	    }
	    if (route.terminal && (Object.keys(segment.children).length > 0 || currentIndex < paths.length)) {
	        throw new NoMatch();
	    }
	    var parameters = collection_1.merge(posParameters, consumedPaths[consumedPaths.length - 1].parameters);
	    return { consumedPaths: consumedPaths, lastChild: currentIndex, parameters: parameters };
	}
	function checkOutletNameUniqueness(nodes) {
	    var names = {};
	    nodes.forEach(function (n) {
	        var routeWithSameOutletName = names[n.value.outlet];
	        if (routeWithSameOutletName) {
	            var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
	            var c = n.value.url.map(function (s) { return s.toString(); }).join('/');
	            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
	        }
	        names[n.value.outlet] = n.value;
	    });
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ },

/***/ 411:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(360);
	__webpack_require__(412);
	var forkJoin_1 = __webpack_require__(413);
	var fromPromise_1 = __webpack_require__(415);
	function resolve(resolver, state) {
	    return resolveNode(resolver, state._root).map(function (_) { return state; });
	}
	exports.resolve = resolve;
	function resolveNode(resolver, node) {
	    if (node.children.length === 0) {
	        return fromPromise_1.fromPromise(resolver.resolveComponent(node.value.component).then(function (factory) {
	            node.value._resolvedComponentFactory = factory;
	            return node.value;
	        }));
	    }
	    else {
	        var c = node.children.map(function (c) { return resolveNode(resolver, c).toPromise(); });
	        return forkJoin_1.forkJoin(c).map(function (_) { return resolver.resolveComponent(node.value.component).then(function (factory) {
	            node.value._resolvedComponentFactory = factory;
	            return node.value;
	        }); });
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFPLHVCQUF1QixDQUFDLENBQUE7QUFDL0IsUUFBTyw2QkFBNkIsQ0FBQyxDQUFBO0FBSXJDLHlCQUF1QiwwQkFBMEIsQ0FBQyxDQUFBO0FBQ2xELDRCQUEwQiw2QkFBNkIsQ0FBQyxDQUFBO0FBS3hELGlCQUNJLFFBQTJCLEVBQUUsS0FBMEI7SUFDekQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBSGUsZUFBTyxVQUd0QixDQUFBO0FBRUQscUJBQ0ksUUFBMkIsRUFBRSxJQUFzQztJQUNyRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyx5QkFBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsR0FBRyxPQUFPLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FDbEIsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsZ0JBQWdCLENBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ3BFLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCLEdBQUcsT0FBTyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxFQUhHLENBR0gsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3RvUHJvbWlzZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50UmVzb2x2ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHtmb3JrSm9pbn0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2ZvcmtKb2luJztcbmltcG9ydCB7ZnJvbVByb21pc2V9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZSc7XG5cbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xuaW1wb3J0IHtUcmVlTm9kZX0gZnJvbSAnLi91dGlscy90cmVlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoXG4gICAgcmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Um91dGVyU3RhdGVTbmFwc2hvdD4ge1xuICByZXR1cm4gcmVzb2x2ZU5vZGUocmVzb2x2ZXIsIHN0YXRlLl9yb290KS5tYXAoXyA9PiBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOb2RlKFxuICAgIHJlc29sdmVyOiBDb21wb25lbnRSZXNvbHZlciwgbm9kZTogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnJvbVByb21pc2UocmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudCg8YW55Pm5vZGUudmFsdWUuY29tcG9uZW50KS50aGVuKGZhY3RvcnkgPT4ge1xuICAgICAgbm9kZS52YWx1ZS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH0pKTtcblxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGMgPSBub2RlLmNoaWxkcmVuLm1hcChjID0+IHJlc29sdmVOb2RlKHJlc29sdmVyLCBjKS50b1Byb21pc2UoKSk7XG4gICAgcmV0dXJuIGZvcmtKb2luKGMpLm1hcChcbiAgICAgICAgXyA9PiByZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50KDxhbnk+bm9kZS52YWx1ZS5jb21wb25lbnQpLnRoZW4oZmFjdG9yeSA9PiB7XG4gICAgICAgICAgbm9kZS52YWx1ZS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICAgICAgfSkpO1xuICB9XG59Il19

/***/ },

/***/ 412:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(38);
	var toPromise_1 = __webpack_require__(58);
	Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },

/***/ 415:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var PromiseObservable_1 = __webpack_require__(57);
	exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
	//# sourceMappingURL=fromPromise.js.map

/***/ },

/***/ 416:
/***/ function(module, exports) {

	"use strict";
	var RouterOutletMap = (function () {
	    function RouterOutletMap() {
	        this._outlets = {};
	    }
	    RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
	    return RouterOutletMap;
	}());
	exports.RouterOutletMap = RouterOutletMap;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX291dGxldF9tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcm91dGVyX291dGxldF9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBO0lBQUE7UUFFRSxhQUFRLEdBQW1DLEVBQUUsQ0FBQztJQUVoRCxDQUFDO0lBREMsd0NBQWMsR0FBZCxVQUFlLElBQVksRUFBRSxNQUFvQixJQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RixzQkFBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBSlksdUJBQWUsa0JBSTNCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvdXRlck91dGxldH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyT3V0bGV0TWFwIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfb3V0bGV0czoge1tuYW1lOiBzdHJpbmddOiBSb3V0ZXJPdXRsZXR9ID0ge307XG4gIHJlZ2lzdGVyT3V0bGV0KG5hbWU6IHN0cmluZywgb3V0bGV0OiBSb3V0ZXJPdXRsZXQpOiB2b2lkIHsgdGhpcy5fb3V0bGV0c1tuYW1lXSA9IG91dGxldDsgfVxufVxuIl19

/***/ },

/***/ 417:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var url_tree_1 = __webpack_require__(401);
	var router_link_1 = __webpack_require__(379);
	var RouterLinkActive = (function () {
	    function RouterLinkActive(router, element, renderer) {
	        var _this = this;
	        this.router = router;
	        this.element = element;
	        this.renderer = renderer;
	        this.classes = [];
	        this.routerLinkActiveOptions = { exact: true };
	        this.subscription = router.events.subscribe(function (s) {
	            if (s instanceof router_1.NavigationEnd) {
	                _this.update();
	            }
	        });
	    }
	    RouterLinkActive.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.links.changes.subscribe(function (s) { return _this.update(); });
	        this.update();
	    };
	    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
	        set: function (data) {
	            if (Array.isArray(data)) {
	                this.classes = data;
	            }
	            else {
	                this.classes = data.split(' ');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
	    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
	    RouterLinkActive.prototype.update = function () {
	        var _this = this;
	        if (!this.links || this.links.length === 0)
	            return;
	        var currentUrlTree = this.router.parseUrl(this.router.url);
	        var isActive = this.links.reduce(function (res, link) {
	            return res || url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.routerLinkActiveOptions.exact);
	        }, false);
	        this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, isActive); });
	    };
	    __decorate([
	        core_1.ContentChildren(router_link_1.RouterLink), 
	        __metadata('design:type', core_1.QueryList)
	    ], RouterLinkActive.prototype, "links", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RouterLinkActive.prototype, "routerLinkActiveOptions", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RouterLinkActive.prototype, "routerLinkActive", null);
	    RouterLinkActive = __decorate([
	        core_1.Directive({ selector: '[routerLinkActive]' }), 
	        __metadata('design:paramtypes', [router_1.Router, core_1.ElementRef, core_1.Renderer])
	    ], RouterLinkActive);
	    return RouterLinkActive;
	}());
	exports.RouterLinkActive = RouterLinkActive;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX2xpbmtfYWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RpcmVjdGl2ZXMvcm91dGVyX2xpbmtfYWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxQkFBeUgsZUFBZSxDQUFDLENBQUE7QUFHekksdUJBQW9DLFdBQVcsQ0FBQyxDQUFBO0FBQ2hELHlCQUEyQixhQUFhLENBQUMsQ0FBQTtBQUV6Qyw0QkFBeUIsZUFBZSxDQUFDLENBQUE7QUFPekM7SUFVRSwwQkFBb0IsTUFBYyxFQUFVLE9BQW1CLEVBQVUsUUFBa0I7UUFWN0YsaUJBK0NDO1FBckNxQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFSbkYsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUdkLDRCQUF1QixHQUE0QixFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztRQU1oRixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUEsQ0FBQztZQUMzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksc0JBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNkNBQWtCLEdBQWxCO1FBQUEsaUJBR0M7UUFGQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxFQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFHRCxzQkFBSSw4Q0FBZ0I7YUFBcEIsVUFBcUIsSUFBcUI7WUFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQVEsSUFBSSxDQUFDO1lBQzNCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNILENBQUM7OztPQUFBO0lBRUQsc0NBQVcsR0FBWCxVQUFZLE9BQVcsSUFBUyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELHNDQUFXLEdBQVgsY0FBcUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFL0MsaUNBQU0sR0FBZDtRQUFBLGlCQVdDO1FBVkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUVuRCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUM5QixVQUFDLEdBQUcsRUFBRSxJQUFJO1lBQ04sT0FBQSxHQUFHLElBQUksdUJBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDO1FBQXJGLENBQXFGLEVBQ3pGLEtBQUssQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ2hCLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUF0RSxDQUFzRSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQTdDRDtRQUFDLHNCQUFlLENBQUMsd0JBQVUsQ0FBQzs7bURBQUE7SUFJNUI7UUFBQyxZQUFLLEVBQUU7O3FFQUFBO0lBa0JSO1FBQUMsWUFBSyxFQUFFOzs7NERBQUE7SUF4QlY7UUFBQyxnQkFBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLG9CQUFvQixFQUFDLENBQUM7O3dCQUFBO0lBZ0Q1Qyx1QkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0M7QUEvQ1ksd0JBQWdCLG1CQStDNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBSZW5kZXJlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5pbXBvcnQge05hdmlnYXRpb25FbmQsIFJvdXRlcn0gZnJvbSAnLi4vcm91dGVyJztcbmltcG9ydCB7Y29udGFpbnNUcmVlfSBmcm9tICcuLi91cmxfdHJlZSc7XG5cbmltcG9ydCB7Um91dGVyTGlua30gZnJvbSAnLi9yb3V0ZXJfbGluayc7XG5cbmludGVyZmFjZSBSb3V0ZXJMaW5rQWN0aXZlT3B0aW9ucyB7XG4gIGV4YWN0OiBib29sZWFuO1xufVxuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rQWN0aXZlXSd9KVxuZXhwb3J0IGNsYXNzIFJvdXRlckxpbmtBY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBDb250ZW50Q2hpbGRyZW4oUm91dGVyTGluaykgcHJpdmF0ZSBsaW5rczogUXVlcnlMaXN0PFJvdXRlckxpbms+O1xuICBwcml2YXRlIGNsYXNzZXM6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQElucHV0KCkgcHJpdmF0ZSByb3V0ZXJMaW5rQWN0aXZlT3B0aW9uczogUm91dGVyTGlua0FjdGl2ZU9wdGlvbnMgPSB7ZXhhY3Q6IHRydWV9O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHMgPT4ge1xuICAgICAgaWYgKHMgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5saW5rcy5jaGFuZ2VzLnN1YnNjcmliZShzID0+IHRoaXMudXBkYXRlKCkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgcm91dGVyTGlua0FjdGl2ZShkYXRhOiBzdHJpbmdbXXxzdHJpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5jbGFzc2VzID0gPGFueT5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsYXNzZXMgPSBkYXRhLnNwbGl0KCcgJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczoge30pOiBhbnkgeyB0aGlzLnVwZGF0ZSgpOyB9XG4gIG5nT25EZXN0cm95KCk6IGFueSB7IHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH1cblxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubGlua3MgfHwgdGhpcy5saW5rcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IGN1cnJlbnRVcmxUcmVlID0gdGhpcy5yb3V0ZXIucGFyc2VVcmwodGhpcy5yb3V0ZXIudXJsKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMubGlua3MucmVkdWNlKFxuICAgICAgICAocmVzLCBsaW5rKSA9PlxuICAgICAgICAgICAgcmVzIHx8IGNvbnRhaW5zVHJlZShjdXJyZW50VXJsVHJlZSwgbGluay51cmxUcmVlLCB0aGlzLnJvdXRlckxpbmtBY3RpdmVPcHRpb25zLmV4YWN0KSxcbiAgICAgICAgZmFsc2UpO1xuXG4gICAgdGhpcy5jbGFzc2VzLmZvckVhY2goXG4gICAgICAgIGMgPT4gdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50Q2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGMsIGlzQWN0aXZlKSk7XG4gIH1cbn1cbiJdfQ==

/***/ },

/***/ 418:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(5);
	var router_outlet_map_1 = __webpack_require__(416);
	var shared_1 = __webpack_require__(400);
	var RouterOutlet = (function () {
	    function RouterOutlet(parentOutletMap, location, name) {
	        this.location = location;
	        parentOutletMap.registerOutlet(name ? name : shared_1.PRIMARY_OUTLET, this);
	    }
	    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
	        get: function () { return !!this.activated; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterOutlet.prototype, "component", {
	        get: function () {
	            if (!this.activated)
	                throw new Error('Outlet is not activated');
	            return this.activated.instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
	        get: function () {
	            if (!this.activated)
	                throw new Error('Outlet is not activated');
	            return this._activatedRoute;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterOutlet.prototype.deactivate = function () {
	        if (this.activated) {
	            this.activated.destroy();
	            this.activated = null;
	        }
	    };
	    RouterOutlet.prototype.activate = function (factory, activatedRoute, providers, outletMap) {
	        this.outletMap = outletMap;
	        this._activatedRoute = activatedRoute;
	        var inj = core_1.ReflectiveInjector.fromResolvedProviders(providers, this.location.parentInjector);
	        this.activated = this.location.createComponent(factory, this.location.length, inj, []);
	    };
	    RouterOutlet = __decorate([
	        core_1.Directive({ selector: 'router-outlet' }),
	        __param(2, core_1.Attribute('name')), 
	        __metadata('design:paramtypes', [router_outlet_map_1.RouterOutletMap, core_1.ViewContainerRef, String])
	    ], RouterOutlet);
	    return RouterOutlet;
	}());
	exports.RouterOutlet = RouterOutlet;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX291dGxldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHFCQUFxSSxlQUFlLENBQUMsQ0FBQTtBQUNySixrQ0FBOEIsc0JBQXNCLENBQUMsQ0FBQTtBQUVyRCx1QkFBNkIsV0FBVyxDQUFDLENBQUE7QUFHekM7SUFRRSxzQkFDSSxlQUFnQyxFQUFVLFFBQTBCLEVBQ2pELElBQVk7UUFEVyxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUV0RSxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsdUJBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsc0JBQUkscUNBQVc7YUFBZixjQUE2QixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUN2RCxzQkFBSSxtQ0FBUzthQUFiO1lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFDRCxzQkFBSSx3Q0FBYzthQUFsQjtZQUNFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCxpQ0FBVSxHQUFWO1FBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUVELCtCQUFRLEdBQVIsVUFDSSxPQUE4QixFQUFFLGNBQThCLEVBQzlELFNBQXVDLEVBQUUsU0FBMEI7UUFDckUsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBTSxHQUFHLEdBQUcseUJBQWtCLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUF2Q0g7UUFBQyxnQkFBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLGVBQWUsRUFBQyxDQUFDO21CQVdoQyxnQkFBUyxDQUFDLE1BQU0sQ0FBQzs7b0JBWGU7SUF3Q3ZDLG1CQUFDO0FBQUQsQ0FBQyxBQXZDRCxJQXVDQztBQXZDWSxvQkFBWSxlQXVDeEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXR0cmlidXRlLCBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgUmVmbGVjdGl2ZUluamVjdG9yLCBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlciwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi4vcm91dGVyX291dGxldF9tYXAnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSAnLi4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7UFJJTUFSWV9PVVRMRVR9IGZyb20gJy4uL3NoYXJlZCc7XG5cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAncm91dGVyLW91dGxldCd9KVxuZXhwb3J0IGNsYXNzIFJvdXRlck91dGxldCB7XG4gIHByaXZhdGUgYWN0aXZhdGVkOiBDb21wb25lbnRSZWY8YW55PjtcbiAgcHJpdmF0ZSBfYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlO1xuICBwdWJsaWMgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXA7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwYXJlbnRPdXRsZXRNYXA6IFJvdXRlck91dGxldE1hcCwgcHJpdmF0ZSBsb2NhdGlvbjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgIEBBdHRyaWJ1dGUoJ25hbWUnKSBuYW1lOiBzdHJpbmcpIHtcbiAgICBwYXJlbnRPdXRsZXRNYXAucmVnaXN0ZXJPdXRsZXQobmFtZSA/IG5hbWUgOiBQUklNQVJZX09VVExFVCwgdGhpcyk7XG4gIH1cblxuICBnZXQgaXNBY3RpdmF0ZWQoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuYWN0aXZhdGVkOyB9XG4gIGdldCBjb21wb25lbnQoKTogT2JqZWN0IHtcbiAgICBpZiAoIXRoaXMuYWN0aXZhdGVkKSB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVkLmluc3RhbmNlO1xuICB9XG4gIGdldCBhY3RpdmF0ZWRSb3V0ZSgpOiBBY3RpdmF0ZWRSb3V0ZSB7XG4gICAgaWYgKCF0aGlzLmFjdGl2YXRlZCkgdGhyb3cgbmV3IEVycm9yKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmF0ZWRSb3V0ZTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWN0aXZhdGVkKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlZC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmFjdGl2YXRlZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGUoXG4gICAgICBmYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4sIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgIHByb3ZpZGVyczogUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJbXSwgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXApOiB2b2lkIHtcbiAgICB0aGlzLm91dGxldE1hcCA9IG91dGxldE1hcDtcbiAgICB0aGlzLl9hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xuICAgIGNvbnN0IGluaiA9IFJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocHJvdmlkZXJzLCB0aGlzLmxvY2F0aW9uLnBhcmVudEluamVjdG9yKTtcbiAgICB0aGlzLmFjdGl2YXRlZCA9IHRoaXMubG9jYXRpb24uY3JlYXRlQ29tcG9uZW50KGZhY3RvcnksIHRoaXMubG9jYXRpb24ubGVuZ3RoLCBpbmosIFtdKTtcbiAgfVxufVxuIl19

/***/ },

/***/ 419:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(2);
	var platform_browser_1 = __webpack_require__(257);
	var common = __webpack_require__(420);
	function provideRouter(config, opts) {
	    if (opts === void 0) { opts = {}; }
	    return [
	        { provide: common_1.PlatformLocation, useClass: platform_browser_1.BrowserPlatformLocation }
	    ].concat(common.provideRouter(config, opts));
	}
	exports.provideRouter = provideRouter;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXJfcHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBK0IsaUJBQWlCLENBQUMsQ0FBQTtBQUNqRCxpQ0FBc0MsMkJBQTJCLENBQUMsQ0FBQTtBQUVsRSxJQUFZLE1BQU0sV0FBTSwyQkFBMkIsQ0FBQyxDQUFBO0FBc0JwRCx1QkFBOEIsTUFBb0IsRUFBRSxJQUE4QjtJQUE5QixvQkFBOEIsR0FBOUIsU0FBOEI7SUFDaEYsTUFBTSxDQUFDO1FBQ0wsRUFBQyxPQUFPLEVBQUUseUJBQWdCLEVBQUUsUUFBUSxFQUFFLDBDQUF1QixFQUFDO2FBQzNELE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUN0QyxDQUFDO0FBQ0osQ0FBQztBQUxlLHFCQUFhLGdCQUs1QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbGF0Zm9ybUxvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuL2NvbW1vbl9yb3V0ZXJfcHJvdmlkZXJzJztcbmltcG9ydCB7Um91dGVyQ29uZmlnfSBmcm9tICcuL2NvbmZpZyc7XG5cblxuLyoqXG4gKiBBIGxpc3Qgb2Yge0BsaW5rIFByb3ZpZGVyfXMuIFRvIHVzZSB0aGUgcm91dGVyLCB5b3UgbXVzdCBhZGQgdGhpcyB0byB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdfSlcbiAqIGNsYXNzIEFwcENtcCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGNvbnN0IHJvdXRlciA9IFtcbiAqICAge3BhdGg6ICcvaG9tZScsIGNvbXBvbmVudDogSG9tZX1cbiAqIF07XG4gKlxuICogYm9vdHN0cmFwKEFwcENtcCwgW3Byb3ZpZGVSb3V0ZXIocm91dGVyKV0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUm91dGVyKGNvbmZpZzogUm91dGVyQ29uZmlnLCBvcHRzOiBjb21tb24uRXh0cmFPcHRpb25zID0ge30pOiBhbnlbXSB7XG4gIHJldHVybiBbXG4gICAge3Byb3ZpZGU6IFBsYXRmb3JtTG9jYXRpb24sIHVzZUNsYXNzOiBCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbn0sXG4gICAgLi4uY29tbW9uLnByb3ZpZGVSb3V0ZXIoY29uZmlnLCBvcHRzKVxuICBdO1xufVxuIl19

/***/ },

/***/ 420:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var common_1 = __webpack_require__(2);
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(380);
	var router_outlet_map_1 = __webpack_require__(416);
	var router_state_1 = __webpack_require__(407);
	var url_serializer_1 = __webpack_require__(402);
	exports.ROUTER_CONFIG = new core_1.OpaqueToken('ROUTER_CONFIG');
	exports.ROUTER_OPTIONS = new core_1.OpaqueToken('ROUTER_OPTIONS');
	function setupRouter(ref, resolver, urlSerializer, outletMap, location, injector, config, opts) {
	    if (ref.componentTypes.length == 0) {
	        throw new Error('Bootstrap at least one component before injecting Router.');
	    }
	    var componentType = ref.componentTypes[0];
	    var r = new router_1.Router(componentType, resolver, urlSerializer, outletMap, location, injector, config);
	    ref.registerDisposeListener(function () { return r.dispose(); });
	    if (opts.enableTracing) {
	        r.events.subscribe(function (e) {
	            console.group("Router Event: " + e.constructor.name);
	            console.log(e.toString());
	            console.log(e);
	            console.groupEnd();
	        });
	    }
	    return r;
	}
	exports.setupRouter = setupRouter;
	function setupRouterInitializer(injector) {
	    setTimeout(function () {
	        var appRef = injector.get(core_1.ApplicationRef);
	        if (appRef.componentTypes.length == 0) {
	            appRef.registerBootstrapListener(function () { injector.get(router_1.Router).initialNavigation(); });
	        }
	        else {
	            injector.get(router_1.Router).initialNavigation();
	        }
	    }, 0);
	    return function () { return null; };
	}
	exports.setupRouterInitializer = setupRouterInitializer;
	function provideRouter(_config, _opts) {
	    return [
	        { provide: exports.ROUTER_CONFIG, useValue: _config }, { provide: exports.ROUTER_OPTIONS, useValue: _opts },
	        common_1.Location, { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy },
	        { provide: url_serializer_1.UrlSerializer, useClass: url_serializer_1.DefaultUrlSerializer },
	        {
	            provide: router_1.Router,
	            useFactory: setupRouter,
	            deps: [
	                core_1.ApplicationRef, core_1.ComponentResolver, url_serializer_1.UrlSerializer, router_outlet_map_1.RouterOutletMap, common_1.Location, core_1.Injector,
	                exports.ROUTER_CONFIG, exports.ROUTER_OPTIONS
	            ]
	        },
	        router_outlet_map_1.RouterOutletMap,
	        { provide: router_state_1.ActivatedRoute, useFactory: function (r) { return r.routerState.root; }, deps: [router_1.Router] },
	        { provide: core_1.APP_INITIALIZER, multi: true, useFactory: setupRouterInitializer, deps: [core_1.Injector] }
	    ];
	}
	exports.provideRouter = provideRouter;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX3JvdXRlcl9wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uX3JvdXRlcl9wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUErRCxpQkFBaUIsQ0FBQyxDQUFBO0FBQ2pGLHFCQUF3RixlQUFlLENBQUMsQ0FBQTtBQUd4Ryx1QkFBcUIsVUFBVSxDQUFDLENBQUE7QUFDaEMsa0NBQThCLHFCQUFxQixDQUFDLENBQUE7QUFDcEQsNkJBQTZCLGdCQUFnQixDQUFDLENBQUE7QUFDOUMsK0JBQWtELGtCQUFrQixDQUFDLENBQUE7QUFFeEQscUJBQWEsR0FBRyxJQUFJLGtCQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsc0JBQWMsR0FBRyxJQUFJLGtCQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUloRSxxQkFDSSxHQUFtQixFQUFFLFFBQTJCLEVBQUUsYUFBNEIsRUFDOUUsU0FBMEIsRUFBRSxRQUFrQixFQUFFLFFBQWtCLEVBQUUsTUFBb0IsRUFDeEYsSUFBa0I7SUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUNELElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsSUFBTSxDQUFDLEdBQ0gsSUFBSSxlQUFNLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUYsR0FBRyxDQUFDLHVCQUF1QixDQUFDLGNBQU0sT0FBQSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7SUFFL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQXVCLENBQUMsQ0FBQyxXQUFZLENBQUMsSUFBTSxDQUFDLENBQUM7WUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBdEJlLG1CQUFXLGNBc0IxQixDQUFBO0FBRUQsZ0NBQXVDLFFBQWtCO0lBSXZELFVBQVUsQ0FBQztRQUNULElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQWMsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLGNBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEYsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzNDLENBQUM7SUFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDTixNQUFNLENBQUMsY0FBVyxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7QUFDekIsQ0FBQztBQWJlLDhCQUFzQix5QkFhckMsQ0FBQTtBQW9CRCx1QkFBOEIsT0FBcUIsRUFBRSxLQUFtQjtJQUN0RSxNQUFNLENBQUM7UUFDTCxFQUFDLE9BQU8sRUFBRSxxQkFBYSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxzQkFBYyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUM7UUFDdkYsaUJBQVEsRUFBRSxFQUFDLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxRQUFRLEVBQUUsNkJBQW9CLEVBQUM7UUFDckUsRUFBQyxPQUFPLEVBQUUsOEJBQWEsRUFBRSxRQUFRLEVBQUUscUNBQW9CLEVBQUM7UUFFeEQ7WUFDRSxPQUFPLEVBQUUsZUFBTTtZQUNmLFVBQVUsRUFBRSxXQUFXO1lBQ3ZCLElBQUksRUFBRTtnQkFDSixxQkFBYyxFQUFFLHdCQUFpQixFQUFFLDhCQUFhLEVBQUUsbUNBQWUsRUFBRSxpQkFBUSxFQUFFLGVBQVE7Z0JBQ3JGLHFCQUFhLEVBQUUsc0JBQWM7YUFDOUI7U0FDRjtRQUVELG1DQUFlO1FBQ2YsRUFBQyxPQUFPLEVBQUUsNkJBQWMsRUFBRSxVQUFVLEVBQUUsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksRUFBbEIsQ0FBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFNLENBQUMsRUFBQztRQUd4RixFQUFDLE9BQU8sRUFBRSxzQkFBZSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLGVBQVEsQ0FBQyxFQUFDO0tBQzlGLENBQUM7QUFDSixDQUFDO0FBckJlLHFCQUFhLGdCQXFCNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb24sIExvY2F0aW9uU3RyYXRlZ3ksIFBhdGhMb2NhdGlvblN0cmF0ZWd5fSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZXNvbHZlciwgSW5qZWN0b3IsIE9wYXF1ZVRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtSb3V0ZXJDb25maWd9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL3JvdXRlcic7XG5pbXBvcnQge1JvdXRlck91dGxldE1hcH0gZnJvbSAnLi9yb3V0ZXJfb3V0bGV0X21hcCc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICcuL3JvdXRlcl9zdGF0ZSc7XG5pbXBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZXJpYWxpemVyfSBmcm9tICcuL3VybF9zZXJpYWxpemVyJztcblxuZXhwb3J0IGNvbnN0IFJPVVRFUl9DT05GSUcgPSBuZXcgT3BhcXVlVG9rZW4oJ1JPVVRFUl9DT05GSUcnKTtcbmV4cG9ydCBjb25zdCBST1VURVJfT1BUSU9OUyA9IG5ldyBPcGFxdWVUb2tlbignUk9VVEVSX09QVElPTlMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBFeHRyYU9wdGlvbnMgeyBlbmFibGVUcmFjaW5nPzogYm9vbGVhbjsgfVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBSb3V0ZXIoXG4gICAgcmVmOiBBcHBsaWNhdGlvblJlZiwgcmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLCB1cmxTZXJpYWxpemVyOiBVcmxTZXJpYWxpemVyLFxuICAgIG91dGxldE1hcDogUm91dGVyT3V0bGV0TWFwLCBsb2NhdGlvbjogTG9jYXRpb24sIGluamVjdG9yOiBJbmplY3RvciwgY29uZmlnOiBSb3V0ZXJDb25maWcsXG4gICAgb3B0czogRXh0cmFPcHRpb25zKSB7XG4gIGlmIChyZWYuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLicpO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudFR5cGUgPSByZWYuY29tcG9uZW50VHlwZXNbMF07XG4gIGNvbnN0IHIgPVxuICAgICAgbmV3IFJvdXRlcihjb21wb25lbnRUeXBlLCByZXNvbHZlciwgdXJsU2VyaWFsaXplciwgb3V0bGV0TWFwLCBsb2NhdGlvbiwgaW5qZWN0b3IsIGNvbmZpZyk7XG4gIHJlZi5yZWdpc3RlckRpc3Bvc2VMaXN0ZW5lcigoKSA9PiByLmRpc3Bvc2UoKSk7XG5cbiAgaWYgKG9wdHMuZW5hYmxlVHJhY2luZykge1xuICAgIHIuZXZlbnRzLnN1YnNjcmliZShlID0+IHtcbiAgICAgIGNvbnNvbGUuZ3JvdXAoYFJvdXRlciBFdmVudDogJHsoPGFueT5lLmNvbnN0cnVjdG9yKS5uYW1lfWApO1xuICAgICAgY29uc29sZS5sb2coZS50b1N0cmluZygpKTtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJvdXRlckluaXRpYWxpemVyKGluamVjdG9yOiBJbmplY3Rvcikge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy85MTAxXG4gIC8vIERlbGF5IHRoZSByb3V0ZXIgaW5zdGFudGlhdGlvbiB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IChBcHBsaWNhdGlvblJlZiAtPlxuICAvLyBBUFBfSU5JVElBTElaRVIgLT4gUm91dGVyKVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBjb25zdCBhcHBSZWYgPSBpbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xuICAgIGlmIChhcHBSZWYuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICAgIGFwcFJlZi5yZWdpc3RlckJvb3RzdHJhcExpc3RlbmVyKCgpID0+IHsgaW5qZWN0b3IuZ2V0KFJvdXRlcikuaW5pdGlhbE5hdmlnYXRpb24oKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluamVjdG9yLmdldChSb3V0ZXIpLmluaXRpYWxOYXZpZ2F0aW9uKCk7XG4gICAgfVxuICB9LCAwKTtcbiAgcmV0dXJuICgpOiBhbnkgPT4gbnVsbDtcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2Yge0BsaW5rIFByb3ZpZGVyfXMuIFRvIHVzZSB0aGUgcm91dGVyLCB5b3UgbXVzdCBhZGQgdGhpcyB0byB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdfSlcbiAqIGNsYXNzIEFwcENtcCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGNvbnN0IHJvdXRlciA9IFtcbiAqICAge3BhdGg6ICcvaG9tZScsIGNvbXBvbmVudDogSG9tZX1cbiAqIF07XG4gKlxuICogYm9vdHN0cmFwKEFwcENtcCwgW3Byb3ZpZGVSb3V0ZXIocm91dGVyKV0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUm91dGVyKF9jb25maWc6IFJvdXRlckNvbmZpZywgX29wdHM6IEV4dHJhT3B0aW9ucyk6IGFueVtdIHtcbiAgcmV0dXJuIFtcbiAgICB7cHJvdmlkZTogUk9VVEVSX0NPTkZJRywgdXNlVmFsdWU6IF9jb25maWd9LCB7cHJvdmlkZTogUk9VVEVSX09QVElPTlMsIHVzZVZhbHVlOiBfb3B0c30sXG4gICAgTG9jYXRpb24sIHtwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VDbGFzczogUGF0aExvY2F0aW9uU3RyYXRlZ3l9LFxuICAgIHtwcm92aWRlOiBVcmxTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFVybFNlcmlhbGl6ZXJ9LFxuXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVyLFxuICAgICAgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXIsXG4gICAgICBkZXBzOiBbXG4gICAgICAgIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZXNvbHZlciwgVXJsU2VyaWFsaXplciwgUm91dGVyT3V0bGV0TWFwLCBMb2NhdGlvbiwgSW5qZWN0b3IsXG4gICAgICAgIFJPVVRFUl9DT05GSUcsIFJPVVRFUl9PUFRJT05TXG4gICAgICBdXG4gICAgfSxcblxuICAgIFJvdXRlck91dGxldE1hcCxcbiAgICB7cHJvdmlkZTogQWN0aXZhdGVkUm91dGUsIHVzZUZhY3Rvcnk6IChyOiBSb3V0ZXIpID0+IHIucm91dGVyU3RhdGUucm9vdCwgZGVwczogW1JvdXRlcl19LFxuXG4gICAgLy8gVHJpZ2dlciBpbml0aWFsIG5hdmlnYXRpb25cbiAgICB7cHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLCBtdWx0aTogdHJ1ZSwgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXJJbml0aWFsaXplciwgZGVwczogW0luamVjdG9yXX1cbiAgXTtcbn1cbiJdfQ==

/***/ },

/***/ 437:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var app_service_1 = __webpack_require__(438);
	exports.AppService = app_service_1.AppService;
	var project_service_1 = __webpack_require__(440);
	exports.ProjectService = project_service_1.ProjectService;
	var task_service_1 = __webpack_require__(451);
	exports.TaskService = task_service_1.TaskService;
	var reference_service_1 = __webpack_require__(452);
	exports.ReferenceService = reference_service_1.ReferenceService;
	var staff_service_1 = __webpack_require__(454);
	exports.StaffService = staff_service_1.StaffService;
	var comment_service_1 = __webpack_require__(455);
	exports.CommentService = comment_service_1.CommentService;
	exports.APP_SERVICES = [
	    app_service_1.AppService,
	    project_service_1.ProjectService,
	    task_service_1.TaskService,
	    reference_service_1.ReferenceService,
	    staff_service_1.StaffService,
	    comment_service_1.CommentService
	];


/***/ },

/***/ 438:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var AppService = (function () {
	    function AppService(http) {
	        this.http = http;
	        this.isLogged = false;
	    }
	    AppService.prototype.getUserProfile = function () {
	        var headers = { headers: HEADERS };
	        var url = 'p?id=userprofile';
	        return this.http.get(url, headers).map(function (response) {
	            return utils_1.parseResponseObjects(response.json().objects);
	        });
	    };
	    AppService.prototype.getTranslations = function () {
	        var _this = this;
	        if (this.translations) {
	            return Observable_1.Observable.of(this.translations);
	        }
	        var headers = { headers: HEADERS };
	        var url = 'p?id=common-captions';
	        return this.http.get(url, headers).map(function (response) {
	            _this.translations = response.json().captions;
	            return _this.translations;
	        });
	    };
	    AppService.prototype.getNav = function () {
	        var headers = { headers: HEADERS };
	        var url = 'p?id=outline';
	        return this.http.get(url, headers).map(function (response) { return response.json().objects[0]; });
	    };
	    AppService.prototype.updateUserProfile = function (user) {
	    };
	    AppService.prototype.logout = function () {
	        return this.http.delete('/');
	    };
	    AppService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], AppService);
	    return AppService;
	}());
	exports.AppService = AppService;


/***/ },

/***/ 439:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var http_1 = __webpack_require__(326);
	function createURLSearchParams(_params) {
	    var params = new http_1.URLSearchParams();
	    for (var p in _params) {
	        params.set(encodeURIComponent(p), encodeURIComponent(_params[p]));
	    }
	    return params;
	}
	exports.createURLSearchParams = createURLSearchParams;
	function serializeObj(obj) {
	    var result = [];
	    for (var property in obj) {
	        result.push(encodeURIComponent(property) + '=' + encodeURIComponent(obj[property]));
	    }
	    return result.join('&');
	}
	exports.serializeObj = serializeObj;
	function parseResponseObjects(objects) {
	    var result = [];
	    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {
	        var obj = objects_1[_i];
	        if (obj.kind) {
	            result[obj.kind] = obj;
	        }
	        else if (obj.list && obj.meta && obj.type) {
	            result[obj.type] = obj;
	        }
	        else {
	            result.push(obj);
	        }
	    }
	    return result;
	}
	exports.parseResponseObjects = parseResponseObjects;


/***/ },

/***/ 440:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var models_1 = __webpack_require__(441);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var ProjectService = (function () {
	    function ProjectService(store, http, translate) {
	        this.store = store;
	        this.http = http;
	        this.translate = translate;
	    }
	    ProjectService.prototype.getProjectStatusTypes = function () {
	        return this.translate.get(['draft', 'processed', 'finished']).map(function (t) { return [
	            { value: 'DRAFT', text: t.draft, default: true },
	            { value: 'PROCESSED', text: t.processed },
	            { value: 'FINISHED', text: t.finished }
	        ]; });
	    };
	    ProjectService.prototype.fetchProjects = function (queryParams) {
	        if (queryParams === void 0) { queryParams = {}; }
	        return this.http.get('p?id=project-view', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                projects: data.list,
	                meta: data.meta,
	                loading: true
	            };
	        });
	    };
	    ProjectService.prototype.fetchProjectById = function (projectId) {
	        if (projectId === 'new') {
	            return Observable_1.Observable.of(new models_1.Project());
	        }
	        return this.http.get('p?id=project-form&projectId=' + projectId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; });
	    };
	    ProjectService.prototype.saveProject = function (project) {
	        var _this = this;
	        var url = 'p?id=project-form&projectId=' + project.id;
	        return this.http.post(url, utils_1.serializeObj(project), { headers: HEADERS })
	            .map(function (response) { return _this.transformPostResponse(response); })
	            .catch(function (error) { return Observable_1.Observable.throw(_this.transformPostResponse(error)); });
	    };
	    ProjectService.prototype.deleteProject = function (projects) {
	        return this.http.delete('p?id=project-view&ids=' + projects.map(function (it) { return it.id; }).join(','));
	    };
	    ProjectService.prototype.transformPostResponse = function (response) {
	        var json = response.json();
	        return Object.assign(json, {
	            ok: json.type === 'DOCUMENT_SAVED',
	            message: json.captions ? json.captions.type : json.message
	        });
	    };
	    ProjectService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [store_1.Store, http_1.Http, ng2_translate_1.TranslateService])
	    ], ProjectService);
	    return ProjectService;
	}());
	exports.ProjectService = ProjectService;


/***/ },

/***/ 441:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var user_1 = __webpack_require__(442);
	exports.User = user_1.User;
	var organization_1 = __webpack_require__(443);
	exports.Organization = organization_1.Organization;
	var attachment_1 = __webpack_require__(444);
	exports.Attachment = attachment_1.Attachment;
	var project_1 = __webpack_require__(445);
	exports.Project = project_1.Project;
	var task_1 = __webpack_require__(446);
	exports.Task = task_1.Task;
	var tag_1 = __webpack_require__(447);
	exports.Tag = tag_1.Tag;
	var task_type_1 = __webpack_require__(448);
	exports.TaskType = task_type_1.TaskType;
	var comment_1 = __webpack_require__(449);
	exports.Comment = comment_1.Comment;
	var request_1 = __webpack_require__(450);
	exports.Request = request_1.Request;


/***/ },

/***/ 442:
/***/ function(module, exports) {

	"use strict";
	var User = (function () {
	    function User() {
	        this.id = '';
	        this.userName = '@anonymous';
	    }
	    return User;
	}());
	exports.User = User;


/***/ },

/***/ 443:
/***/ function(module, exports) {

	"use strict";
	var Organization = (function () {
	    function Organization() {
	        this.id = '';
	    }
	    return Organization;
	}());
	exports.Organization = Organization;


/***/ },

/***/ 444:
/***/ function(module, exports) {

	"use strict";
	var Attachment = (function () {
	    function Attachment() {
	        this.id = '';
	    }
	    return Attachment;
	}());
	exports.Attachment = Attachment;


/***/ },

/***/ 445:
/***/ function(module, exports) {

	"use strict";
	var Project = (function () {
	    function Project() {
	        this.id = '';
	        this.fsid = '1';
	        this.status = 'DRAFT';
	    }
	    return Project;
	}());
	exports.Project = Project;


/***/ },

/***/ 446:
/***/ function(module, exports) {

	"use strict";
	var Task = (function () {
	    function Task() {
	        this.id = '';
	        this.fsid = '1';
	        this.status = 'DRAFT';
	        this.priority = 'NORMAL';
	    }
	    return Task;
	}());
	exports.Task = Task;


/***/ },

/***/ 447:
/***/ function(module, exports) {

	"use strict";
	var Tag = (function () {
	    function Tag() {
	        this.id = '';
	    }
	    return Tag;
	}());
	exports.Tag = Tag;


/***/ },

/***/ 448:
/***/ function(module, exports) {

	"use strict";
	var TaskType = (function () {
	    function TaskType() {
	        this.id = '';
	    }
	    return TaskType;
	}());
	exports.TaskType = TaskType;


/***/ },

/***/ 449:
/***/ function(module, exports) {

	"use strict";
	var Comment = (function () {
	    function Comment() {
	        this.id = '';
	    }
	    return Comment;
	}());
	exports.Comment = Comment;


/***/ },

/***/ 450:
/***/ function(module, exports) {

	"use strict";
	var Request = (function () {
	    function Request() {
	        this.id = '';
	    }
	    return Request;
	}());
	exports.Request = Request;


/***/ },

/***/ 451:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var Observable_1 = __webpack_require__(38);
	var ng2_translate_1 = __webpack_require__(347);
	var models_1 = __webpack_require__(441);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var TaskService = (function () {
	    function TaskService(http, translate) {
	        this.http = http;
	        this.translate = translate;
	    }
	    TaskService.prototype.getTaskPriorityType = function () {
	        return this.translate.get(['urgent', 'high', 'medium', 'normal']).map(function (t) { return [
	            { value: 'NORMAL', text: t.normal, default: true },
	            { value: 'MEDIUM', text: t.medium },
	            { value: 'HIGH', text: t.high },
	            { value: 'URGENT', text: t.urgent }
	        ]; });
	    };
	    TaskService.prototype.getTaskStatusType = function () {
	        return this.translate.get(['draft', 'waiting', 'processed', 'finished']).map(function (t) { return [
	            { value: 'DRAFT', text: t.draft, default: true },
	            { value: 'WAITING', text: t.waiting },
	            { value: 'PROCESSED', text: t.processed },
	            { value: 'FINISHED', text: t.finished }
	        ]; });
	    };
	    TaskService.prototype.fetchTasks = function (queryParams) {
	        if (queryParams === void 0) { queryParams = {}; }
	        return this.http.get('p?id=task-view', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                tasks: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    TaskService.prototype.fetchTaskById = function (taskId) {
	        if (taskId === 'new') {
	            return Observable_1.Observable.of(new models_1.Task());
	        }
	        return this.http.get('p?id=task-form&taskId=' + taskId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; });
	    };
	    TaskService.prototype.saveTask = function (task) {
	        var _this = this;
	        var url = 'p?id=task-form' + (task.id ? '&taskId=' + task.id : '');
	        return this.http.post(url, utils_1.serializeObj(task), { headers: HEADERS })
	            .map(function (response) { return _this.transformPostResponse(response); })
	            .catch(function (error) { return Observable_1.Observable.throw(_this.transformPostResponse(error)); });
	    };
	    TaskService.prototype.deleteTask = function (task) {
	        return this.http.delete('p?id=task-view&ids=' + task.id);
	    };
	    TaskService.prototype.transformPostResponse = function (response) {
	        var json = response.json();
	        return Object.assign(json, {
	            ok: json.type === 'DOCUMENT_SAVED',
	            message: json.captions ? json.captions.type : json.message
	        });
	    };
	    TaskService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http, ng2_translate_1.TranslateService])
	    ], TaskService);
	    return TaskService;
	}());
	exports.TaskService = TaskService;


/***/ },

/***/ 452:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var store_1 = __webpack_require__(421);
	var reference_reducer_1 = __webpack_require__(453);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var ReferenceService = (function () {
	    function ReferenceService(http, store) {
	        this.http = http;
	        this.store = store;
	    }
	    ReferenceService.prototype.loadReference = function () {
	        var _this = this;
	        this.fetchTags().subscribe(function (data) {
	            _this.store.dispatch({ type: reference_reducer_1.FETCH_TAGS, payload: data });
	        });
	        this.fetchTaskTypes().subscribe(function (data) {
	            _this.store.dispatch({ type: reference_reducer_1.FETCH_TASK_TYPES, payload: data });
	        });
	    };
	    ReferenceService.prototype.fetchTags = function () {
	        return this.http.get('/Reference/p?id=tags', { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                tags: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    ReferenceService.prototype.fetchTaskTypes = function () {
	        return this.http.get('/Reference/p?id=tasktypes', { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                taskTypes: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    ReferenceService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http, store_1.Store])
	    ], ReferenceService);
	    return ReferenceService;
	}());
	exports.ReferenceService = ReferenceService;


/***/ },

/***/ 453:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_TAGS = 'FETCH_TAGS';
	exports.FETCH_TASK_TYPES = 'FETCH_TASK_TYPES';
	;
	var initialState = {
	    tags: [],
	    taskTypes: []
	};
	exports.referenceReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_TAGS:
	            return Object.assign({}, state, {
	                tags: payload.tags
	            });
	        case exports.FETCH_TASK_TYPES:
	            return Object.assign({}, state, {
	                taskTypes: payload.taskTypes
	            });
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 454:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var utils_1 = __webpack_require__(439);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var StaffService = (function () {
	    function StaffService(http) {
	        this.http = http;
	    }
	    StaffService.prototype.getOrganizations = function (queryParams) {
	        return this.http.get('/Staff/p?id=get-organizations', {
	            headers: HEADERS,
	            search: utils_1.createURLSearchParams(queryParams)
	        })
	            .map(function (response) { return response.json().objects[0]; })
	            .map(function (data) {
	            return {
	                organizations: data.list,
	                meta: data.meta
	            };
	        });
	    };
	    StaffService.prototype.getOrganizationById = function (id) {
	        return this.getOrganizations({ ids: id });
	    };
	    StaffService.prototype.getUsers = function () {
	        return this.http.get('p?id=users', { headers: HEADERS })
	            .map(function (response) { return response.json().objects[0].list; });
	    };
	    StaffService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], StaffService);
	    return StaffService;
	}());
	exports.StaffService = StaffService;


/***/ },

/***/ 455:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var http_1 = __webpack_require__(326);
	var HEADERS = new http_1.Headers({
	    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
	    'Accept': 'application/json'
	});
	var CommentService = (function () {
	    function CommentService(http) {
	        this.http = http;
	    }
	    CommentService.prototype.fetchTaskComments = function (taskId, page) {
	        if (page === void 0) { page = 0; }
	        return this.http.get('p?id=comments&taskId=' + taskId, { headers: HEADERS })
	            .map(function (response) { return response.json().objects[1]; });
	    };
	    CommentService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [http_1.Http])
	    ], CommentService);
	    return CommentService;
	}());
	exports.CommentService = CommentService;


/***/ },

/***/ 456:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_ORGANIZATIONS = 'FETCH_ORGANIZATIONS';
	exports.FETCH_USERS = 'FETCH_USERS';
	;
	var initialState = {
	    organizations: [],
	    users: []
	};
	exports.staffReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_ORGANIZATIONS:
	            return Object.assign({}, state, {
	                organizations: payload.organizations
	            });
	        case exports.FETCH_USERS:
	            return Object.assign({}, state, {
	                users: payload
	            });
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 457:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var dropdown_component_1 = __webpack_require__(458);
	var dropdown_toggle_component_1 = __webpack_require__(459);
	exports.DROPDOWN_DIRECTIVES = [dropdown_component_1.DropdownComponent, dropdown_toggle_component_1.DropdownToggleComponent];


/***/ },

/***/ 458:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var dropdown_toggle_component_1 = __webpack_require__(459);
	var DropdownComponent = (function () {
	    function DropdownComponent(renderer) {
	        var _this = this;
	        this.renderer = renderer;
	        this.open = false;
	        this.mouseEvent = false;
	        this.selfClick = false;
	        this.delay = 500;
	        this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
	            if (!_this.selfClick) {
	                _this.open = false;
	            }
	            else {
	                _this.selfClick = false;
	            }
	        });
	        this.documentKeyupListener = this.renderer.listenGlobal('body', 'keyup', function (event) {
	            if (event.code === 'Escape') {
	                _this.open = false;
	            }
	        });
	    }
	    Object.defineProperty(DropdownComponent.prototype, "isOpen", {
	        get: function () { return this.open; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    DropdownComponent.prototype.onMouseEnter = function ($event) {
	        var _this = this;
	        if (this.mouseEvent) {
	            clearTimeout(this.time);
	            this.time = setTimeout(function () { return _this.open = true; }, this.delay);
	        }
	    };
	    DropdownComponent.prototype.onMouseLeave = function ($event) {
	        var _this = this;
	        if (this.mouseEvent) {
	            clearTimeout(this.time);
	            this.time = setTimeout(function () { return _this.open = false; }, this.delay);
	        }
	    };
	    DropdownComponent.prototype.onClick = function ($event) {
	        this.selfClick = true;
	    };
	    DropdownComponent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.toggleComponent.forEach(function (it) { return it.toggle.subscribe(function (event) {
	            _this.toggleDropdown(event);
	        }); });
	    };
	    DropdownComponent.prototype.ngOnDestroy = function () {
	        this.documentClickListener();
	    };
	    DropdownComponent.prototype.toggleDropdown = function (event) {
	        this.open = !this.open;
	        event.preventDefault();
	    };
	    __decorate([
	        core_1.HostBinding('class.dropdown'), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostBinding('class.open'), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "isOpen", null);
	    __decorate([
	        core_1.HostListener('mouseenter', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onMouseEnter", null);
	    __decorate([
	        core_1.HostListener('mouseleave', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onMouseLeave", null);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownComponent.prototype, "onClick", null);
	    __decorate([
	        core_1.ContentChildren(dropdown_toggle_component_1.DropdownToggleComponent), 
	        __metadata('design:type', core_1.QueryList)
	    ], DropdownComponent.prototype, "toggleComponent", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "open", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropdownComponent.prototype, "mouseEvent", void 0);
	    DropdownComponent = __decorate([
	        core_1.Component({
	            selector: '[dropdown]',
	            template: "<ng-content></ng-content>"
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer])
	    ], DropdownComponent);
	    return DropdownComponent;
	}());
	exports.DropdownComponent = DropdownComponent;


/***/ },

/***/ 459:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var DropdownToggleComponent = (function () {
	    function DropdownToggleComponent() {
	        this.toggle = new core_1.EventEmitter();
	    }
	    DropdownToggleComponent.prototype.onClick = function ($event) {
	        this.toggle.emit($event);
	    };
	    __decorate([
	        core_1.HostBinding('class.dropdown-toggle'), 
	        __metadata('design:type', Object)
	    ], DropdownToggleComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [MouseEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropdownToggleComponent.prototype, "onClick", null);
	    DropdownToggleComponent = __decorate([
	        core_1.Component({
	            selector: '[dropdown-toggle]',
	            template: "<ng-content></ng-content>"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], DropdownToggleComponent);
	    return DropdownToggleComponent;
	}());
	exports.DropdownToggleComponent = DropdownToggleComponent;


/***/ },

/***/ 460:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var projects_reducer_1 = __webpack_require__(461);
	var project_service_1 = __webpack_require__(440);
	var NavComponent = (function () {
	    function NavComponent(store, router, projectService) {
	        this.store = store;
	        this.router = router;
	        this.projectService = projectService;
	    }
	    NavComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('projects').subscribe(function (data) {
	            if (data) {
	                _this.projects = data.projects;
	            }
	        });
	        this.projectService.fetchProjects({ nav: 1 }).subscribe(function (data) {
	            _this.store.dispatch({ type: projects_reducer_1.FETCH_NAV_PROJECTS, payload: data });
	        });
	    };
	    NavComponent.prototype.ngOnDestroy = function () {
	        this.storeSub && this.storeSub.unsubscribe();
	    };
	    NavComponent = __decorate([
	        core_1.Component({
	            selector: '[nav]',
	            template: __webpack_require__(462),
	            directives: [router_1.ROUTER_DIRECTIVES],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, project_service_1.ProjectService])
	    ], NavComponent);
	    return NavComponent;
	}());
	exports.NavComponent = NavComponent;


/***/ },

/***/ 461:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_NAV_PROJECTS = 'FETCH_NAV_PROJECTS';
	exports.FETCH_PROJECTS = 'FETCH_PROJECTS';
	exports.FETCH_PROJECT = 'FETCH_PROJECT';
	exports.ADD_PROJECT = 'ADD_PROJECT';
	exports.UPDATE_PROJECT = 'UPDATE_PROJECT';
	exports.DELETE_PROJECT = 'DELETE_PROJECT';
	;
	var initialState = {
	    meta: {},
	    projects: [],
	    project: undefined,
	    loading: false
	};
	exports.projectsReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_NAV_PROJECTS:
	            return payload;
	        case exports.FETCH_PROJECTS:
	            return payload;
	        case exports.FETCH_PROJECT:
	            return payload;
	        case exports.ADD_PROJECT:
	            return payload;
	        case exports.UPDATE_PROJECT:
	            return payload;
	        case exports.DELETE_PROJECT:
	            return payload;
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 462:
/***/ function(module, exports) {

	module.exports = "<ul>\r\n    <li>\r\n        <a [routerLink]=\"['/tasks', 'my']\" class=\"nav-link\">\r\n            <i class=\"fa fa-pencil\"></i>\r\n            <span>{{'my_tasks' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li>\r\n        <a [routerLink]=\"['/tasks', 'inbox']\" class=\"nav-link\">\r\n            <i class=\"fa fa-inbox\"></i>\r\n            <span>{{'tasks_assigned_to_me' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li>\r\n        <a [routerLink]=\"['/']\" class=\"nav-link\">\r\n            <i class=\"fa fa-calendar\"></i>\r\n            <span>{{'dashboard' | translate}}</span>\r\n        </a>\r\n    </li>\r\n    <li class=\"divider\"></li>\r\n    <li>\r\n        <a [routerLink]=\"['/projects']\" class=\"nav-link\">\r\n            <i class=\"fa fa-puzzle-piece\"></i>\r\n            <span>{{'projects' | translate}}</span>\r\n        </a>\r\n        <ul>\r\n            <li *ngFor=\"let project of projects\">\r\n                <a [routerLink]=\"['/project', project.id, 'tasks']\" class=\"nav-link\">\r\n                    <i class=\"fa fa-file-text-o\"></i>\r\n                    <span>{{project.name}}</span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n"

/***/ },

/***/ 463:
/***/ function(module, exports) {

	module.exports = "<notification></notification>\r\n<div class=\"layout\" [class.hidden]=\"!isReady\">\r\n    <div class=\"content-overlay\" (mousedown)=\"hideNav($event)\" (touchstart)=\"hideNav($event)\"></div>\r\n    <header class=\"header navbar navbar-fixed-top\">\r\n        <div class=\"container\">\r\n            <div class=\"navbar-header\">\r\n                <button class=\"btn-side-nav-toggle\" type=\"button\" (click)=\"toggleNav()\"></button>\r\n                <img class=\"brand-logo\" alt=\"logo\" src=\"img/logo.png\" />\r\n                <span class=\"brand-title\">\r\n                    {{HEADER_TITLE}}\r\n                </span>\r\n            </div>\r\n            <nav class=\"navbar-nav navbar-right\">\r\n                <ul class=\"nav nav-inline navbar-right\">\r\n                    <li dropdown class=\"dropdown\">\r\n                        <a dropdown-toggle href=\"#\" class=\"dropdown-toggle\" (click)=\"preventDefault($event)\">\r\n                            <i class=\"fa fa-user\"></i>\r\n                        </a>\r\n                        <ul class=\"dropdown-menu right\">\r\n                            <li>\r\n                                <a class=\"user-profile\" [routerLink]=\"['user-profile']\">\r\n                                    {{loggedUser.name}}\r\n                                </a>\r\n                            </li>\r\n                            <li class=\"divider\"></li>\r\n                            <li>\r\n                                <a class=\"logout\" href=\"#logout\" (click)=\"logout($event)\">\r\n                                    {{'logout' | translate}}\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <form class=\"navbar-form navbar-search\" name=\"ft-search\" (submit)=\"ftSearch()\">\r\n                    <input type=\"hidden\" name=\"id\" value=\"search\" />\r\n                    <input type=\"search\" class=\"q\" name=\"keyword\" value=\"{{search_keyword}}\" placeholder=\"{{'search' | translate}}\" required autocomplete=\"off\" (focus)=\"searchToggle()\" (blur)=\"searchToggle()\" />\r\n                    <button type=\"reset\">\r\n                        <i class=\"fa fa-times\"></i>\r\n                    </button>\r\n                    <input type=\"submit\" value=\"search\" />\r\n                </form>\r\n            </nav>\r\n        </div>\r\n    </header>\r\n    <section class=\"container\">\r\n        <nav nav class=\"aside side-nav\"></nav>\r\n        <main class=\"content\">\r\n            <router-outlet></router-outlet>\r\n        </main>\r\n    </section>\r\n</div>\r\n"

/***/ },

/***/ 464:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var router_1 = __webpack_require__(378);
	var auth_guard_1 = __webpack_require__(465);
	var dashboard_1 = __webpack_require__(466);
	var projects_1 = __webpack_require__(467);
	var project_1 = __webpack_require__(580);
	var tasks_1 = __webpack_require__(586);
	var task_1 = __webpack_require__(591);
	var user_profile_1 = __webpack_require__(596);
	var login_1 = __webpack_require__(601);
	var routes = [
	    { path: '', component: dashboard_1.DashboardComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'dashboard', component: dashboard_1.DashboardComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'projects/:projectId', component: project_1.ProjectComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'projects', component: projects_1.ProjectsComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'project/:projectId/tasks', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'tasks/:for', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'tasks', component: tasks_1.TasksComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'task/:taskId', component: task_1.TaskComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'user-profile', component: user_profile_1.UserProfileComponent, canActivate: [auth_guard_1.AuthGuard] },
	    { path: 'login', component: login_1.LoginComponent },
	    { path: '**', component: dashboard_1.DashboardComponent, canActivate: [auth_guard_1.AuthGuard] }
	];
	exports.APP_ROUTER_PROVIDERS = [
	    router_1.provideRouter(routes),
	    auth_guard_1.AuthGuard
	];


/***/ },

/***/ 465:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var services_1 = __webpack_require__(437);
	var AuthGuard = (function () {
	    function AuthGuard(appService, router) {
	        this.appService = appService;
	        this.router = router;
	    }
	    AuthGuard.prototype.canActivate = function (next, state) {
	        if (this.appService.isLogged) {
	            return true;
	        }
	        this.router.navigate(['login']);
	        return false;
	    };
	    AuthGuard = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [services_1.AppService, router_1.Router])
	    ], AuthGuard);
	    return AuthGuard;
	}());
	exports.AuthGuard = AuthGuard;


/***/ },

/***/ 466:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var DashboardComponent = (function () {
	    function DashboardComponent(router) {
	        this.router = router;
	    }
	    DashboardComponent = __decorate([
	        core_1.Component({
	            selector: '[dashboard]',
	            template: 'dashboard'
	        }), 
	        __metadata('design:paramtypes', [router_1.Router])
	    ], DashboardComponent);
	    return DashboardComponent;
	}());
	exports.DashboardComponent = DashboardComponent;


/***/ },

/***/ 467:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var pipes_1 = __webpack_require__(468);
	var pagination_1 = __webpack_require__(573);
	var project_service_1 = __webpack_require__(440);
	var project_row_1 = __webpack_require__(575);
	var projects_reducer_1 = __webpack_require__(461);
	var ProjectsComponent = (function () {
	    function ProjectsComponent(store, router, projectService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.projectService = projectService;
	        this.notifyService = notifyService;
	        this.title = 'projects';
	        this.params = {};
	        this.meta = {};
	        this.requestProcess = true;
	    }
	    ProjectsComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('projects').subscribe(function (data) {
	            if (data) {
	                _this.projects = data.projects;
	                _this.meta = data.meta;
	                _this.requestProcess = false;
	            }
	        });
	        this.loadData();
	    };
	    ProjectsComponent.prototype.ngOnDestroy = function () {
	        this.storeSub && this.storeSub.unsubscribe();
	    };
	    ProjectsComponent.prototype.loadData = function (params) {
	        var _this = this;
	        this.projectService.fetchProjects(params).subscribe(function (data) {
	            _this.store.dispatch({ type: projects_reducer_1.FETCH_PROJECTS, payload: data });
	        });
	    };
	    ProjectsComponent.prototype.goToPage = function (params) {
	        this.loadData({
	            page: params.page
	        });
	    };
	    ProjectsComponent.prototype.newProject = function () {
	        this.router.navigate(['/projects', 'new']);
	    };
	    ProjectsComponent.prototype.deleteProject = function () {
	    };
	    ProjectsComponent = __decorate([
	        core_1.Component({
	            selector: 'project-list',
	            template: __webpack_require__(579),
	            directives: [
	                router_1.ROUTER_DIRECTIVES,
	                pagination_1.PaginationComponent,
	                project_row_1.ProjectRowComponent
	            ],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, project_service_1.ProjectService, notification_1.NotificationService])
	    ], ProjectsComponent);
	    return ProjectsComponent;
	}());
	exports.ProjectsComponent = ProjectsComponent;


/***/ },

/***/ 468:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var date_format_pipe_1 = __webpack_require__(469);
	exports.DateFormatPipe = date_format_pipe_1.DateFormatPipe;
	var text_transform_pipe_1 = __webpack_require__(572);
	exports.TextTransformPipe = text_transform_pipe_1.TextTransformPipe;


/***/ },

/***/ 469:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var moment = __webpack_require__(470);
	var DateFormatPipe = (function () {
	    function DateFormatPipe() {
	    }
	    DateFormatPipe.prototype.transform = function (date, format) {
	        if (!date) {
	            return '';
	        }
	        if (!format) {
	            format = 'DD.MM.YYYY';
	        }
	        var md = moment(date);
	        if (md.isValid()) {
	            return md.format(format);
	        }
	        return '';
	    };
	    DateFormatPipe = __decorate([
	        core_1.Pipe({ name: 'dateFmt' }), 
	        __metadata('design:paramtypes', [])
	    ], DateFormatPipe);
	    return DateFormatPipe;
	}());
	exports.DateFormatPipe = DateFormatPipe;


/***/ },

/***/ 572:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var TextTransformPipe = (function () {
	    function TextTransformPipe() {
	    }
	    TextTransformPipe.prototype.transform = function (text, transform) {
	        switch (transform) {
	            case 'L':
	                return text.toLowerCase();
	            case 'U':
	                return text.toUpperCase();
	            default:
	                return text;
	        }
	    };
	    TextTransformPipe = __decorate([
	        core_1.Pipe({ name: 'text' }), 
	        __metadata('design:paramtypes', [])
	    ], TextTransformPipe);
	    return TextTransformPipe;
	}());
	exports.TextTransformPipe = TextTransformPipe;


/***/ },

/***/ 573:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(574));


/***/ },

/***/ 574:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var PaginationComponent = (function () {
	    function PaginationComponent() {
	        this.maxPageControl = 5;
	        this.totalPages = -1;
	        this.onPageChange = new core_1.EventEmitter();
	        this.initialized = 0;
	        this.currentPage = 0;
	        this.startPage = 0;
	        this.stopPage = 0;
	        this.pages = [];
	    }
	    Object.defineProperty(PaginationComponent.prototype, "hostHidden", {
	        get: function () { return this.totalPages < 2; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(PaginationComponent.prototype, "page", {
	        set: function (value) {
	            this.currentPage = +value;
	            if (this.initialized < 2) {
	                ++this.initialized;
	                this.pagination();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PaginationComponent.prototype.toPage = function (event, page) {
	        event.preventDefault();
	        this.currentPage = +page;
	        this.onPageChange.emit({ page: page });
	        this.pagination();
	    };
	    PaginationComponent.prototype.pagination = function () {
	        this.pages = [];
	        if (this.totalPages <= 1) {
	            return;
	        }
	        this.maxPageControl = +this.maxPageControl;
	        this.totalPages = +this.totalPages;
	        this.currentPage = +this.currentPage;
	        var perPage = Math.floor(this.maxPageControl / 2);
	        this.startPage = (this.currentPage - perPage);
	        this.stopPage = (this.currentPage + perPage);
	        if (this.startPage <= perPage) {
	            this.startPage = 1;
	        }
	        else if (this.currentPage == this.totalPages) {
	            this.startPage = this.totalPages - this.maxPageControl;
	        }
	        if (this.stopPage > (this.totalPages - perPage)) {
	            this.stopPage = this.totalPages;
	        }
	        else if (this.currentPage == 1) {
	            this.stopPage = this.maxPageControl + 1;
	        }
	        if ((this.maxPageControl + perPage) >= this.totalPages) {
	            this.startPage = 1;
	            this.stopPage = this.totalPages;
	        }
	        for (var p = this.startPage; p <= this.stopPage; p++) {
	            this.pages.push(p);
	        }
	    };
	    __decorate([
	        core_1.HostBinding('hidden'), 
	        __metadata('design:type', Object)
	    ], PaginationComponent.prototype, "hostHidden", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PaginationComponent.prototype, "maxPageControl", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], PaginationComponent.prototype, "totalPages", void 0);
	    __decorate([
	        core_1.Input('page'), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], PaginationComponent.prototype, "page", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], PaginationComponent.prototype, "onPageChange", void 0);
	    PaginationComponent = __decorate([
	        core_1.Component({
	            selector: 'pagination',
	            template: "\n        <div class=\"pagination\" *ngIf=\"totalPages > 1\">\n            <a href=\"#\" *ngIf=\"startPage > 1\" (click)=\"toPage($event, 1)\">1</a>\n            <span *ngIf=\"startPage > 1\">...</span>\n            <a [class.page-active]=\"p == currentPage\" href=\"#\" *ngFor=\"let p of pages\" (click)=\"toPage($event, p)\">{{p}}</a>\n            <span *ngIf=\"stopPage < totalPages\">...</span>\n            <a *ngIf=\"stopPage < totalPages\" href=\"#\" (click)=\"toPage($event, totalPages)\">{{totalPages}}</a>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], PaginationComponent);
	    return PaginationComponent;
	}());
	exports.PaginationComponent = PaginationComponent;


/***/ },

/***/ 575:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var ng2_translate_1 = __webpack_require__(347);
	var pipes_1 = __webpack_require__(468);
	var customer_cell_1 = __webpack_require__(576);
	var user_cell_1 = __webpack_require__(577);
	var project_1 = __webpack_require__(445);
	var ProjectRowComponent = (function () {
	    function ProjectRowComponent() {
	        this.selected = false;
	    }
	    ProjectRowComponent.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', project_1.Project)
	    ], ProjectRowComponent.prototype, "project", void 0);
	    ProjectRowComponent = __decorate([
	        core_1.Component({
	            selector: 'project-row',
	            template: __webpack_require__(578),
	            directives: [router_1.ROUTER_DIRECTIVES, customer_cell_1.CustomerCellComponent, user_cell_1.UserCellComponent],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ProjectRowComponent);
	    return ProjectRowComponent;
	}());
	exports.ProjectRowComponent = ProjectRowComponent;


/***/ },

/***/ 576:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var CustomerCellComponent = (function () {
	    function CustomerCellComponent(store) {
	        this.store = store;
	    }
	    CustomerCellComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('staff').subscribe(function (state) {
	            _this.customer = state.organizations.filter(function (it) { return it.id == _this.customerId; })[0];
	        });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], CustomerCellComponent.prototype, "customerId", void 0);
	    CustomerCellComponent = __decorate([
	        core_1.Component({
	            selector: 'customer-cell',
	            template: "{{ customer?.name }}"
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], CustomerCellComponent);
	    return CustomerCellComponent;
	}());
	exports.CustomerCellComponent = CustomerCellComponent;


/***/ },

/***/ 577:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var UserCellComponent = (function () {
	    function UserCellComponent(store) {
	        this.store = store;
	    }
	    UserCellComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('staff').subscribe(function (state) {
	            if (state && state.users) {
	                _this.user = state.users.filter(function (it) { return it.id == _this.userId; })[0];
	            }
	        });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], UserCellComponent.prototype, "userId", void 0);
	    UserCellComponent = __decorate([
	        core_1.Component({
	            selector: 'user-cell',
	            template: "{{ user?.login }}"
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], UserCellComponent);
	    return UserCellComponent;
	}());
	exports.UserCellComponent = UserCellComponent;


/***/ },

/***/ 578:
/***/ function(module, exports) {

	module.exports = "<div class=\"entry-wrap\" [class.active]=\"selected\">\r\n    <div class=\"entry\">\r\n        <label class=\"entry-select\">\r\n            <input type=\"checkbox\" name=\"project-id\" value=\"{{project.id}}\" (change)=\"toggleSelected()\" [checked]=\"selected\" />\r\n        </label>\r\n        <a class=\"entry-link\" [routerLink]=\"['./', project.id]\">\r\n            <div class=\"entry-fields\">\r\n                <span class=\"vw-project-name\">{{project.name}}</span>\r\n                <span class=\"vw-project-status\">{{project.status | text:'L' | translate}}</span>\r\n                <span class=\"vw-icon\">\r\n                    <i class=\"fa fa-paperclip\" *ngIf=\"project.hasAttachments\"></i>\r\n                </span>\r\n                <span class=\"vw-project-customer\">\r\n                    <customer-cell [customerId]=\"project.customerId\"></customer-cell>\r\n                </span>\r\n                <span class=\"vw-user-manager\">\r\n                    <user-cell [userId]=\"project.managerUserId\"></user-cell>\r\n                </span>\r\n                <span class=\"vw-user-programmer\">\r\n                    <user-cell [userId]=\"project.programmerUserId\"></user-cell>\r\n                </span>\r\n                <span class=\"vw-user-tester\">\r\n                    <user-cell [userId]=\"project.testerUserId\"></user-cell>\r\n                </span>\r\n                <span class=\"vw-project-comment\">{{project.comment}}</span>\r\n                <span class=\"vw-date\">{{project.finishDate | dateFmt}}</span>\r\n            </div>\r\n        </a>\r\n    </div>\r\n</div>\r\n"

/***/ },

/***/ 579:
/***/ function(module, exports) {

	module.exports = "<div class=\"content-header\">\r\n    <h1 class=\"header-title\">\r\n        {{title | translate}}\r\n    </h1>\r\n    <div class=\"content-actions\">\r\n        <button class=\"btn\" type=\"button\" (click)=\"newProject()\">\r\n            {{'new_project' | translate}}\r\n        </button>\r\n        <pagination class=\"pull-right\" totalPages=\"{{meta.totalPages}}\" page=\"{{meta.page}}\" (onPageChange)=\"goToPage($event)\"></pagination>\r\n    </div>\r\n</div>\r\n<div class=\"content-body\">\r\n    <div class=\"view view-project\" [class.load]=\"requestProcess\">\r\n        <header class=\"entries-head\">\r\n            <div class=\"head-wrap\">\r\n                <label class=\"entry-select\">\r\n                    <input type=\"checkbox\" class=\"all\" />\r\n                </label>\r\n                <div class=\"entry-captions\">\r\n                    <span class=\"vw-project-name\">{{'name' | translate}}</span>\r\n                    <span class=\"vw-project-status\">{{'status' | translate}}</span>\r\n                    <span class=\"vw-icon\"><i class=\"fa fa-paperclip\"></i></span>\r\n                    <span class=\"vw-project-customer\">{{'customer' | translate}}</span>\r\n                    <span class=\"vw-user-manager\">{{'manager' | translate}}</span>\r\n                    <span class=\"vw-user-programmer\">{{'programmer' | translate}}</span>\r\n                    <span class=\"vw-user-tester\">{{'tester' | translate}}</span>\r\n                    <span class=\"vw-project-comment\">{{'comment' | translate}}</span>\r\n                    <span class=\"vw-date\">{{'finish_date' | translate}}</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"entries\">\r\n            <project-row [project]=\"project\" *ngFor=\"let project of projects\"></project-row>\r\n        </div>\r\n    </div>\r\n</div>\r\n<router-outlet></router-outlet>\r\n"

/***/ },

/***/ 580:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(457);
	var switch_button_1 = __webpack_require__(581);
	var customer_select_1 = __webpack_require__(583);
	var user_select_1 = __webpack_require__(584);
	var pipes_1 = __webpack_require__(468);
	var services_1 = __webpack_require__(437);
	var ProjectComponent = (function () {
	    function ProjectComponent(store, router, route, formBuilder, translate, appService, projectService, staffService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.route = route;
	        this.formBuilder = formBuilder;
	        this.translate = translate;
	        this.appService = appService;
	        this.projectService = projectService;
	        this.staffService = staffService;
	        this.notifyService = notifyService;
	        this.isReady = false;
	    }
	    ProjectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.form = this.formBuilder.group({
	            name: ['', common_1.Validators.required],
	            status: [''],
	            customerUserId: [''],
	            managerUserId: [''],
	            programmerUserId: [''],
	            testerUserId: [''],
	            observerUserIds: [''],
	            comment: [''],
	            finishDate: [''],
	            attachments: ['']
	        });
	        this.sub = this.route.params.subscribe(function (params) {
	            _this.projectService.fetchProjectById(params['projectId']).subscribe(function (project) {
	                console.log(project);
	                _this.project = project;
	                _this.loadData();
	                _this.isReady = true;
	            }, function (error) { return _this.handleXhrError(error); });
	        });
	    };
	    ProjectComponent.prototype.loadData = function () {
	        var _this = this;
	        this.projectService.getProjectStatusTypes().subscribe(function (data) { return _this.projectStatusTypes = data; });
	    };
	    ProjectComponent.prototype.saveProject = function () {
	        var _this = this;
	        var noty = this.notifyService.process(this.translate.instant('wait_while_document_save')).show();
	        this.projectService.saveProject(this.project).subscribe(function (response) {
	            console.log(response);
	            noty.set({ type: 'success', message: response.message }).remove(1500);
	            _this.close();
	            return response;
	        }, function (error) {
	            console.log(error);
	            noty.set({ type: 'error', message: error.message }).remove(1500);
	            _this.errorSaveProject(error);
	            return error;
	        }, function () { return noty.remove(1500); });
	    };
	    ProjectComponent.prototype.errorSaveProject = function (errorResponse) {
	        console.log(errorResponse);
	    };
	    ProjectComponent.prototype.close = function () {
	        this.router.navigate(['/projects']);
	    };
	    ProjectComponent.prototype.handleXhrError = function (errorResponse) {
	        console.log(errorResponse);
	        if (errorResponse.status === 401) {
	            this.router.navigate(['/login']);
	        }
	    };
	    ProjectComponent.prototype.setStatus = function (value) {
	        this.project.status = value;
	    };
	    ProjectComponent.prototype.closeDropdown = function () {
	        document.body.click();
	    };
	    ProjectComponent.prototype.selectCustomer = function (customer) {
	        this.project.customerId = customer.id;
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectManager = function (user) {
	        this.project.managerUserId = user.id;
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectProgrammer = function (user) {
	        this.project.programmerUserId = user.id;
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectTester = function (user) {
	        this.project.testerUserId = user.id;
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.selectObserver = function (observer) {
	        if (!this.project.observerUserIds) {
	            this.project.observerUserIds = [];
	        }
	        this.project.observerUserIds.push(observer.id);
	        this.closeDropdown();
	    };
	    ProjectComponent.prototype.removeObserver = function (observer, $event) {
	        var _this = this;
	        this.project.observerUserIds.forEach(function (id, index) {
	            if (id === observer.id) {
	                _this.project.observerUserIds.splice(index, 1);
	            }
	        });
	        $event.stopPropagation();
	        this.closeDropdown();
	    };
	    ProjectComponent = __decorate([
	        core_1.Component({
	            selector: 'project',
	            styles: ["project { display: block; }"],
	            template: __webpack_require__(585),
	            directives: [
	                router_1.ROUTER_DIRECTIVES,
	                common_1.FORM_DIRECTIVES,
	                dropdown_1.DROPDOWN_DIRECTIVES,
	                switch_button_1.SwitchButtonComponent,
	                customer_select_1.CustomerSelectComponent,
	                user_select_1.UserSelectComponent
	            ],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, router_1.ActivatedRoute, common_1.FormBuilder, ng2_translate_1.TranslateService, services_1.AppService, services_1.ProjectService, services_1.StaffService, notification_1.NotificationService])
	    ], ProjectComponent);
	    return ProjectComponent;
	}());
	exports.ProjectComponent = ProjectComponent;


/***/ },

/***/ 581:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(582));


/***/ },

/***/ 582:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var SwitchButtonComponent = (function () {
	    function SwitchButtonComponent() {
	        this.name = 'swb' + Math.random();
	        this.multi = false;
	        this.disabled = false;
	        this.checkDefault = true;
	    }
	    SwitchButtonComponent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        [].concat(this.items).forEach(function (it) {
	            if (_this.checkDefault && it.value == _this.model[_this.value]) {
	                _this.checkDefault = false;
	            }
	        });
	    };
	    SwitchButtonComponent.prototype.select = function (value, event) {
	        this.model[this.value] = value;
	    };
	    SwitchButtonComponent.prototype.isSelected = function (item) {
	        return item.value == this.model[this.value] || (this.checkDefault && item.default);
	    };
	    __decorate([
	        core_1.HostBinding('class.switch-button'), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "true", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "model", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "value", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "items", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "name", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "multi", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], SwitchButtonComponent.prototype, "disabled", void 0);
	    SwitchButtonComponent = __decorate([
	        core_1.Component({
	            selector: 'switch-button',
	            template: "\n        <label class=\"input\"\n                [class.active]=\"isSelected(item)\"\n                [class.disabled]=\"disabled || item.disabled\"\n                *ngFor=\"let item of items\">\n            <input type=\"{{multi ? 'checkbox' : 'radio'}}\"\n                name=\"{{name}}\"\n                value=\"{{item.value}}\"\n                [checked]=\"isSelected(item)\"\n                [disabled]=\"disabled || item.disabled\"\n                (change)=\"select(item.value, $event)\" />\n            <i class=\"fa fa-{{item.icon}}\" *ngIf=\"item.icon\"></i>\n            <span>{{item.text}}</span>\n        </label>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], SwitchButtonComponent);
	    return SwitchButtonComponent;
	}());
	exports.SwitchButtonComponent = SwitchButtonComponent;


/***/ },

/***/ 583:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var dropdown_1 = __webpack_require__(457);
	var CustomerSelectComponent = (function () {
	    function CustomerSelectComponent(store) {
	        this.store = store;
	        this.onSelect = new core_1.EventEmitter();
	    }
	    CustomerSelectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('staff').subscribe(function (state) {
	            _this.customers = state.organizations;
	            _this.customer = state.organizations.filter(function (it) { return it.id == _this.customerId; })[0];
	        });
	    };
	    CustomerSelectComponent.prototype.select = function (m) {
	        this.customer = m;
	        this.onSelect.emit(this.customer);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], CustomerSelectComponent.prototype, "customerId", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], CustomerSelectComponent.prototype, "onSelect", void 0);
	    CustomerSelectComponent = __decorate([
	        core_1.Component({
	            selector: 'customer-select',
	            directives: [dropdown_1.DROPDOWN_DIRECTIVES],
	            pipes: [ng2_translate_1.TranslatePipe],
	            template: "\n        <div dropdown class=\"select\">\n            <div dropdown-toggle class=\"select-selection input\">\n                <span>{{customer?.name}}</span>\n            </div>\n            <div class=\"dropdown-menu select-dropdown\">\n                <!-- <div class=\"select-search\">\n                    <input name=\"keyword\" placeholder=\"{{'search' | translate}}\" (keyup)=\"searchCustomer($event)\" />\n                </div> -->\n                <ul class=\"select-list scroll-shadow\">\n                    <li class=\"select-option\" [class.selected]=\"customer?.id == m.id\" *ngFor=\"let m of customers\" (click)=\"select(m)\">\n                        {{m.name}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], CustomerSelectComponent);
	    return CustomerSelectComponent;
	}());
	exports.CustomerSelectComponent = CustomerSelectComponent;


/***/ },

/***/ 584:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var dropdown_1 = __webpack_require__(457);
	var UserSelectComponent = (function () {
	    function UserSelectComponent(store) {
	        this.store = store;
	        this.onSelect = new core_1.EventEmitter();
	    }
	    UserSelectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('staff').subscribe(function (state) {
	            _this.users = state.users;
	            _this.user = state.users.filter(function (it) { return it.id == _this.userId; })[0];
	        });
	    };
	    UserSelectComponent.prototype.select = function (m) {
	        this.user = m;
	        this.onSelect.emit(this.user);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], UserSelectComponent.prototype, "userId", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], UserSelectComponent.prototype, "onSelect", void 0);
	    UserSelectComponent = __decorate([
	        core_1.Component({
	            selector: 'user-select',
	            directives: [dropdown_1.DROPDOWN_DIRECTIVES],
	            pipes: [ng2_translate_1.TranslatePipe],
	            template: "\n        <div dropdown class=\"select\">\n            <div dropdown-toggle class=\"select-selection input\">\n                <span>{{user?.userName || user?.login}}</span>\n            </div>\n            <div class=\"dropdown-menu select-dropdown\">\n                <ul class=\"select-list scroll-shadow\">\n                    <li class=\"select-option\" [class.selected]=\"userId == m.id\" *ngFor=\"let m of users\" (click)=\"select(m)\">\n                        {{m.name || m.login}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], UserSelectComponent);
	    return UserSelectComponent;
	}());
	exports.UserSelectComponent = UserSelectComponent;


/***/ },

/***/ 585:
/***/ function(module, exports) {

	module.exports = "<form class=\"form\" [ngFormModel]=\"form\" *ngIf=\"isReady\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{(project.id ? 'project' : 'new_project') | translate}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"saveProject()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <fieldset class=\"fieldset\">\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'name' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.name.valid\">\r\n                    <input class=\"span8\" [(ngModel)]=\"project.name\" ngControl=\"name\" />\r\n                    <div [hidden]=\"form.controls.name.valid || form.controls.name.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'customer' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.customerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <customer-select [customerId]=\"project.customerId\" (onSelect)=\"selectCustomer($event)\"></customer-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.customerUserId.valid || form.controls.customerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'manager' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.managerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <user-select [userId]=\"project.managerUserId\" (onSelect)=\"selectManager($event)\"></user-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.managerUserId.valid || form.controls.managerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'programmer' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.programmerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <user-select [userId]=\"project.programmerUserId\" (onSelect)=\"selectProgrammer($event)\"></user-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.programmerUserId.valid || form.controls.programmerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'tester' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.testerUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <user-select [userId]=\"project.testerUserId\" (onSelect)=\"selectTester($event)\"></user-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.testerUserId.valid || form.controls.testerUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'observers' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <div class=\"span8\">\r\n                        <user-select [userId]=\"project.observerUserIds\" (onSelect)=\"selectObserver($event)\"></user-select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'status' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <switch-button [model]=\"project\" value=\"status\" [items]=\"projectStatusTypes\"></switch-button>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'finish_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"project.finishDate\" ngControl=\"finishDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'comment' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.comment.valid\">\r\n                    <textarea class=\"span8\" [(ngModel)]=\"project.comment\" ngControl=\"comment\"></textarea>\r\n                    <div [hidden]=\"form.controls.comment.valid || form.controls.comment.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n        <fieldset class=\"fieldset\">\r\n            <legend class=\"legend\">\r\n                {{'attachments' | translate}}\r\n            </legend>\r\n            <div class=\"form-group\">\r\n                <button type=\"button\" class=\"btn btn-upload\" data-upload=\"\">\r\n                    <i class=\"fa fa-paperclip\"></i>\r\n                    <span>{{'attach_file' | translate}}</span>\r\n                </button>\r\n                <div class=\"attachments\" data-upload-files=\"\">\r\n                    <div class=\"attachments-file\" *ngFor=\"let att of project.attachments\">\r\n                        <a class=\"file-name\" href=\"{{att.url}}\">\r\n                            {{att.realFileName}}\r\n                        </a>\r\n                        <span class=\"btn btn-sm btn-link btn-remove-file on-edit\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 586:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var pipes_1 = __webpack_require__(468);
	var pagination_1 = __webpack_require__(573);
	var task_service_1 = __webpack_require__(451);
	var task_row_1 = __webpack_require__(587);
	var tasks_reducer_1 = __webpack_require__(589);
	var TasksComponent = (function () {
	    function TasksComponent(store, router, route, taskService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.route = route;
	        this.taskService = taskService;
	        this.notifyService = notifyService;
	        this.params = {};
	        this.meta = {};
	        this.requestProcess = true;
	    }
	    TasksComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.storeSub = this.store.select('tasks').subscribe(function (data) {
	            if (data) {
	                _this.tasks = data.tasks;
	                _this.meta = data.meta;
	                _this.requestProcess = false;
	            }
	        });
	        this.paramsSub = this.route.params.subscribe(function (params) {
	            var taskFor = params['for'];
	            var projectId = params['projectId'];
	            switch (taskFor) {
	                case 'inbox':
	                    _this.title = 'tasks_assigned_to_me';
	                    break;
	                case 'my':
	                    _this.title = 'my_tasks';
	                    break;
	                default:
	                    _this.title = 'tasks';
	                    break;
	            }
	            _this.params = params;
	            _this.loadData(_this.params);
	        });
	    };
	    TasksComponent.prototype.ngOnDestroy = function () {
	        this.storeSub.unsubscribe();
	        this.paramsSub.unsubscribe();
	    };
	    TasksComponent.prototype.loadData = function (params) {
	        var _this = this;
	        this.requestProcess = true;
	        this.taskService.fetchTasks(params).subscribe(function (data) {
	            _this.store.dispatch({ type: tasks_reducer_1.FETCH_TASKS, payload: data });
	        });
	    };
	    TasksComponent.prototype.goToPage = function (params) {
	        this.loadData({
	            page: params.page
	        });
	    };
	    TasksComponent.prototype.newTask = function () {
	        this.router.navigate(['/task', 'new']);
	    };
	    TasksComponent.prototype.deleteTask = function (task) {
	        this.taskService.deleteTask(task).subscribe();
	    };
	    TasksComponent = __decorate([
	        core_1.Component({
	            selector: 'tasks',
	            template: __webpack_require__(590),
	            directives: [router_1.ROUTER_DIRECTIVES, pagination_1.PaginationComponent, task_row_1.TaskRowComponent],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, router_1.ActivatedRoute, task_service_1.TaskService, notification_1.NotificationService])
	    ], TasksComponent);
	    return TasksComponent;
	}());
	exports.TasksComponent = TasksComponent;


/***/ },

/***/ 587:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var ng2_translate_1 = __webpack_require__(347);
	var user_cell_1 = __webpack_require__(577);
	var pipes_1 = __webpack_require__(468);
	var task_1 = __webpack_require__(446);
	var TaskRowComponent = (function () {
	    function TaskRowComponent() {
	        this.selected = false;
	    }
	    TaskRowComponent.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', task_1.Task)
	    ], TaskRowComponent.prototype, "task", void 0);
	    TaskRowComponent = __decorate([
	        core_1.Component({
	            selector: 'task-row',
	            template: __webpack_require__(588),
	            directives: [router_1.ROUTER_DIRECTIVES, user_cell_1.UserCellComponent],
	            pipes: [pipes_1.DateFormatPipe, ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], TaskRowComponent);
	    return TaskRowComponent;
	}());
	exports.TaskRowComponent = TaskRowComponent;


/***/ },

/***/ 588:
/***/ function(module, exports) {

	module.exports = "<div class=\"entry-wrap\" [class.active]=\"selected\">\r\n    <div class=\"entry\">\r\n        <label class=\"entry-select\">\r\n            <input type=\"checkbox\" name=\"task-id\" value=\"{{task.id}}\" (change)=\"toggleSelected()\" [checked]=\"selected\" />\r\n        </label>\r\n        <a class=\"entry-link\" [routerLink]=\"['/task', task.id]\">\r\n            <div class=\"entry-fields\">\r\n                <span class=\"vw-task-body\">{{task.body}}</span>\r\n                <span class=\"vw-task-status\">{{task.status | text:'L' | translate}}</span>\r\n                <span class=\"vw-task-priority\">{{task.priority | text:'L' | translate}}</span>\r\n                <span class=\"vw-task-assignee\">\r\n                    <user-cell [userId]=\"task.assigneeUserId\"></user-cell>\r\n                </span>\r\n                <span class=\"vw-date\">{{task.startDate | dateFmt}}</span>\r\n                <span class=\"vw-date\">{{task.dueDate | dateFmt}}</span>\r\n                <span class=\"vw-tags\">\r\n                    <span class=\"tag\" *ngFor=\"let tag of task.tags\">{{tag.name}}</span>\r\n                </span>\r\n            </div>\r\n        </a>\r\n    </div>\r\n</div>\r\n"

/***/ },

/***/ 589:
/***/ function(module, exports) {

	"use strict";
	exports.FETCH_TASKS = 'FETCH_TASKS';
	exports.FETCH_TASK = 'FETCH_TASK';
	exports.ADD_TASK = 'ADD_TASK';
	exports.UPDATE_TASK = 'UPDATE_TASK';
	exports.DELETE_TASK = 'DELETE_TASK';
	;
	var initialState = {
	    meta: {},
	    tasks: [],
	    loading: false
	};
	exports.tasksReducer = function (state, _a) {
	    if (state === void 0) { state = initialState; }
	    var type = _a.type, payload = _a.payload;
	    switch (type) {
	        case exports.FETCH_TASKS:
	            return payload;
	        case exports.FETCH_TASK:
	            return payload;
	        case exports.ADD_TASK:
	            return payload;
	        case exports.UPDATE_TASK:
	            return payload;
	        case exports.DELETE_TASK:
	            return payload;
	        default:
	            return state;
	    }
	};


/***/ },

/***/ 590:
/***/ function(module, exports) {

	module.exports = "<div class=\"content-header\">\r\n    <h1 class=\"header-title\">\r\n        {{title | translate}}\r\n    </h1>\r\n    <div class=\"content-actions\">\r\n        <button class=\"btn\" type=\"button\" (click)=\"newTask()\">\r\n            {{'new_task' | translate}}\r\n        </button>\r\n        <pagination class=\"pull-right\" totalPages=\"{{meta.totalPages}}\" page=\"{{meta.page}}\" (onPageChange)=\"goToPage($event)\"></pagination>\r\n    </div>\r\n</div>\r\n<div class=\"content-body\">\r\n    <div class=\"view view-task\" [class.load]=\"requestProcess\">\r\n        <header class=\"entries-head\">\r\n            <div class=\"head-wrap\">\r\n                <label class=\"entry-select\">\r\n                    <input type=\"checkbox\" class=\"all\" />\r\n                </label>\r\n                <div class=\"entry-captions\">\r\n                    <span class=\"vw-task-body\">{{'body' | translate}}</span>\r\n                    <span class=\"vw-task-status\">{{'status' | translate}}</span>\r\n                    <span class=\"vw-task-priority\">{{'priority' | translate}}</span>\r\n                    <span class=\"vw-task-assignee\">{{'assignee_user' | translate}}</span>\r\n                    <span class=\"vw-date\">{{'start_date' | translate}}</span>\r\n                    <span class=\"vw-date\">{{'due_date' | translate}}</span>\r\n                    <span class=\"vw-tags\">{{'tags' | translate}}</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"entries\">\r\n            <task-row [task]=\"task\" *ngFor=\"let task of tasks\"></task-row>\r\n        </div>\r\n    </div>\r\n</div>\r\n<router-outlet></router-outlet>\r\n"

/***/ },

/***/ 591:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var Observable_1 = __webpack_require__(38);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var notification_1 = __webpack_require__(373);
	var dropdown_1 = __webpack_require__(457);
	var switch_button_1 = __webpack_require__(581);
	var user_select_1 = __webpack_require__(584);
	var project_select_1 = __webpack_require__(592);
	var task_type_select_1 = __webpack_require__(593);
	var tags_select_1 = __webpack_require__(594);
	var pipes_1 = __webpack_require__(468);
	var services_1 = __webpack_require__(437);
	var TaskComponent = (function () {
	    function TaskComponent(store, router, route, formBuilder, translate, appService, projectService, taskService, referenceService, notifyService) {
	        this.store = store;
	        this.router = router;
	        this.route = route;
	        this.formBuilder = formBuilder;
	        this.translate = translate;
	        this.appService = appService;
	        this.projectService = projectService;
	        this.taskService = taskService;
	        this.referenceService = referenceService;
	        this.notifyService = notifyService;
	        this.isReady = false;
	        this.form = formBuilder.group({
	            projectId: [''],
	            taskTypeId: [''],
	            status: [''],
	            priority: [''],
	            body: ['', common_1.Validators.required],
	            assigneeUserId: [''],
	            startDate: [''],
	            dueDate: [''],
	            tagIds: [''],
	            attachments: ['']
	        });
	    }
	    TaskComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.sub = this.route.params.subscribe(function (params) {
	            _this.taskService.fetchTaskById(params['taskId']).subscribe(function (task) {
	                _this.task = task;
	                _this.loadData();
	            }, function (errorResponse) { return _this.handleXhrError(errorResponse); });
	        });
	    };
	    TaskComponent.prototype.loadData = function () {
	        var _this = this;
	        Observable_1.Observable.forkJoin(this.taskService.getTaskStatusType(), this.taskService.getTaskPriorityType()).subscribe(function (data) {
	            _this.taskStatusTypes = data[0];
	            _this.taskPriorityTypes = data[1];
	        }, function (error) {
	            _this.handleXhrError(error);
	        }, function () { return _this.isReady = true; });
	    };
	    TaskComponent.prototype.saveTask = function () {
	        var _this = this;
	        var noty = this.notifyService.process(this.translate.instant('wait_while_document_save')).show();
	        this.taskService.saveTask(this.task).subscribe(function (response) {
	            noty.set({ type: 'success', message: response.message }).remove(1500);
	            _this.close();
	        }, function (error) {
	            noty.set({ type: 'error', message: error.message }).remove(1500);
	            _this.errorSaveTask(error);
	        });
	    };
	    TaskComponent.prototype.errorSaveTask = function (errorResponse) {
	        console.log(errorResponse);
	    };
	    TaskComponent.prototype.close = function () {
	        this.router.navigate(['/tasks']);
	    };
	    TaskComponent.prototype.handleXhrError = function (errorResponse) {
	        if (errorResponse.status === 401) {
	            this.router.navigate(['/login']);
	        }
	    };
	    TaskComponent.prototype.setStatus = function (value) {
	        this.task.status = value;
	    };
	    TaskComponent.prototype.setPriority = function (value) {
	        this.task.priority = value;
	    };
	    TaskComponent.prototype.closeDropdown = function () {
	        document.body.click();
	    };
	    TaskComponent.prototype.selectProject = function (project) {
	        this.task.projectId = project.id;
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.selectTaskType = function (taskType) {
	        this.task.taskTypeId = taskType.id;
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.selectAssigneeUser = function (assigneeUser) {
	        this.task.assigneeUserId = assigneeUser.id;
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.setTags = function (tags) {
	        this.task.tagIds = tags.map(function (it) { return it.id; });
	    };
	    TaskComponent.prototype.selectTag = function (tag) {
	        if (!this.task.tagIds) {
	            this.task.tagIds = [];
	        }
	        this.task.tagIds.push(tag.id);
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.removeTag = function (tag, $event) {
	        var _this = this;
	        this.task.tagIds.forEach(function (id, index) {
	            if (id === tag.id) {
	                _this.task.tagIds.splice(index, 1);
	            }
	        });
	        $event.stopPropagation();
	        this.closeDropdown();
	    };
	    TaskComponent.prototype.ngOnDestroy = function () {
	        this.taskPriorityTypes = [];
	        this.taskStatusTypes = [];
	    };
	    TaskComponent = __decorate([
	        core_1.Component({
	            selector: 'task',
	            template: __webpack_require__(595),
	            directives: [
	                router_1.ROUTER_DIRECTIVES,
	                common_1.FORM_DIRECTIVES,
	                switch_button_1.SwitchButtonComponent,
	                dropdown_1.DROPDOWN_DIRECTIVES,
	                user_select_1.UserSelectComponent,
	                project_select_1.ProjectSelectComponent,
	                task_type_select_1.TaskTypeSelectComponent,
	                tags_select_1.TagsSelectComponent
	            ],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe, pipes_1.TextTransformPipe]
	        }), 
	        __metadata('design:paramtypes', [store_1.Store, router_1.Router, router_1.ActivatedRoute, common_1.FormBuilder, ng2_translate_1.TranslateService, services_1.AppService, services_1.ProjectService, services_1.TaskService, services_1.ReferenceService, notification_1.NotificationService])
	    ], TaskComponent);
	    return TaskComponent;
	}());
	exports.TaskComponent = TaskComponent;


/***/ },

/***/ 592:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var ng2_translate_1 = __webpack_require__(347);
	var dropdown_1 = __webpack_require__(457);
	var ProjectSelectComponent = (function () {
	    function ProjectSelectComponent(store) {
	        this.store = store;
	        this.onSelect = new core_1.EventEmitter();
	    }
	    ProjectSelectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('projects').subscribe(function (state) {
	            _this.projects = state.projects;
	            _this.project = state.projects.filter(function (it) { return it.id == _this.projectId; })[0];
	        });
	    };
	    ProjectSelectComponent.prototype.select = function (m) {
	        this.project = m;
	        this.onSelect.emit(this.project);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ProjectSelectComponent.prototype, "projectId", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ProjectSelectComponent.prototype, "onSelect", void 0);
	    ProjectSelectComponent = __decorate([
	        core_1.Component({
	            selector: 'project-select',
	            directives: [dropdown_1.DROPDOWN_DIRECTIVES],
	            pipes: [ng2_translate_1.TranslatePipe],
	            template: "\n        <div dropdown class=\"select\">\n            <div dropdown-toggle class=\"select-selection input\">\n                <span>{{project?.name}}</span>\n            </div>\n            <div class=\"dropdown-menu select-dropdown\">\n                <ul class=\"select-list scroll-shadow\">\n                    <li class=\"select-option\" [class.selected]=\"projectId == m.id\" *ngFor=\"let m of projects\" (click)=\"select(m)\">\n                        {{m.name}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], ProjectSelectComponent);
	    return ProjectSelectComponent;
	}());
	exports.ProjectSelectComponent = ProjectSelectComponent;


/***/ },

/***/ 593:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var dropdown_1 = __webpack_require__(457);
	var TaskTypeSelectComponent = (function () {
	    function TaskTypeSelectComponent(store) {
	        this.store = store;
	        this.onSelect = new core_1.EventEmitter();
	    }
	    TaskTypeSelectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('reference').subscribe(function (state) {
	            _this.taskTypes = state.taskTypes;
	            _this.taskType = state.taskTypes.filter(function (it) { return it.id == _this.taskTypeId; })[0];
	        });
	    };
	    TaskTypeSelectComponent.prototype.select = function (m) {
	        this.taskType = m;
	        this.onSelect.emit(this.taskType);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], TaskTypeSelectComponent.prototype, "taskTypeId", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], TaskTypeSelectComponent.prototype, "onSelect", void 0);
	    TaskTypeSelectComponent = __decorate([
	        core_1.Component({
	            selector: 'task-type-select',
	            directives: [dropdown_1.DROPDOWN_DIRECTIVES],
	            template: "\n        <div dropdown class=\"select\">\n            <div dropdown-toggle class=\"select-selection input\">\n                <span>{{taskType?.name}}</span>\n            </div>\n            <div class=\"dropdown-menu select-dropdown\">\n                <ul class=\"select-list scroll-shadow\">\n                    <li class=\"select-option\" [class.selected]=\"taskTypeId == m.id\" *ngFor=\"let m of taskTypes\" (click)=\"select(m)\">\n                        {{m.name}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], TaskTypeSelectComponent);
	    return TaskTypeSelectComponent;
	}());
	exports.TaskTypeSelectComponent = TaskTypeSelectComponent;


/***/ },

/***/ 594:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var store_1 = __webpack_require__(421);
	var dropdown_1 = __webpack_require__(457);
	var TagsSelectComponent = (function () {
	    function TagsSelectComponent(store) {
	        this.store = store;
	        this.tagIds = [];
	        this.setTags = new core_1.EventEmitter();
	        this.tags = [];
	        this.selectedTags = [];
	    }
	    TagsSelectComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.store.select('reference').subscribe(function (state) {
	            _this.tags = state.tags;
	            if (_this.tagIds) {
	                _this.selectedTags = state.tags.filter(function (it) { return _this.tagIds.indexOf(it.id) != -1; });
	            }
	        });
	    };
	    TagsSelectComponent.prototype.getTags = function () {
	        var _this = this;
	        if (this.tagIds) {
	            return this.tags.filter(function (it) { return _this.tagIds.indexOf(it.id) == -1; });
	        }
	        else {
	            return this.tags;
	        }
	    };
	    TagsSelectComponent.prototype.add = function (m) {
	        this.selectedTags.push(m);
	        this.setTags.emit(this.selectedTags);
	    };
	    TagsSelectComponent.prototype.remove = function (m) {
	        this.selectedTags = this.selectedTags.filter(function (it) { return it.id != m.id; });
	        this.setTags.emit(this.selectedTags);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Array)
	    ], TagsSelectComponent.prototype, "tagIds", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], TagsSelectComponent.prototype, "setTags", void 0);
	    TagsSelectComponent = __decorate([
	        core_1.Component({
	            selector: 'tags-select',
	            directives: [dropdown_1.DROPDOWN_DIRECTIVES],
	            template: "\n        <div dropdown class=\"select\">\n            <div dropdown-toggle class=\"select-selection input\">\n                <span class=\"tag\" *ngFor=\"let m of selectedTags\" (click)=\"remove(m, $event)\">{{m.name}}</span>\n            </div>\n            <div class=\"dropdown-menu select-dropdown\">\n                <ul class=\"select-list scroll-shadow\">\n                    <li class=\"select-option\" *ngFor=\"let m of getTags()\" (click)=\"add(m)\">\n                        {{m.name}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [store_1.Store])
	    ], TagsSelectComponent);
	    return TagsSelectComponent;
	}());
	exports.TagsSelectComponent = TagsSelectComponent;


/***/ },

/***/ 595:
/***/ function(module, exports) {

	module.exports = "<form class=\"form\" [ngFormModel]=\"form\" *ngIf=\"isReady\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{(task.id ? 'task' : 'new_task') | translate}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"saveTask()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <fieldset class=\"fieldset\">\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'project' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.projectId.valid\">\r\n                    <div class=\"span8\">\r\n                        <project-select [projectId]=\"task.projectId\" (onSelect)=\"selectProject($event)\"></project-select>\r\n                    </div>\r\n                </div>\r\n                <div [hidden]=\"form.controls.projectId.valid || form.controls.projectId.pristine\" class=\"error-message\">\r\n                    {{'required' | translate}}\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'task_type' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.taskTypeId.valid\">\r\n                    <div class=\"span8\">\r\n                        <task-type-select [taskTypeId]=\"task.taskTypeId\" (onSelect)=\"selectTaskType($event)\"></task-type-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.taskTypeId.valid || form.controls.taskTypeId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'status' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <switch-button [model]=\"task\" value=\"status\" [items]=\"taskStatusTypes\"></switch-button>\r\n                    <div [hidden]=\"form.controls.status.valid || form.controls.status.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'priority' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.priority.valid\">\r\n                    <switch-button [model]=\"task\" value=\"priority\" [items]=\"taskPriorityTypes\"></switch-button>\r\n                    <div [hidden]=\"form.controls.priority.valid || form.controls.priority.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'body' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.body.valid\">\r\n                    <textarea class=\"span8\" [(ngModel)]=\"task.body\" ngControl=\"body\"></textarea>\r\n                    <div [hidden]=\"form.controls.body.valid || form.controls.body.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'assignee_user' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.assigneeUserId.valid\">\r\n                    <div class=\"span8\">\r\n                        <user-select [userId]=\"task.assigneeUserId\" (onSelect)=\"selectAssigneeUser($event)\"></user-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.assigneeUserId.valid || form.controls.assigneeUserId.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'start_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"task.startDate\" ngControl=\"startDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'due_date' | translate}}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <input type=\"date\" class=\"span2\" [(ngModel)]=\"task.dueDate\" ngControl=\"dueDate\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <div class=\"control-label\">\r\n                    {{'tags' | translate}}\r\n                </div>\r\n                <div class=\"controls\" [class.has-error]=\"!form.controls.tagIds.valid\">\r\n                    <div class=\"span8\">\r\n                        <tags-select [tagIds]=\"task.tagIds\" (setTags)=\"setTags($event)\"></tags-select>\r\n                    </div>\r\n                    <div [hidden]=\"form.controls.tagIds.valid || form.controls.tagIds.pristine\" class=\"error-message\">\r\n                        {{'required' | translate}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n        <fieldset class=\"fieldset\">\r\n            <legend class=\"legend\">\r\n                {{'attachments' | translate}}\r\n            </legend>\r\n            <div class=\"form-group\">\r\n                <button type=\"button\" class=\"btn btn-upload\" data-upload=\"\">\r\n                    <i class=\"fa fa-paperclip\"></i>\r\n                    <span>{{'attach_file' | translate}}</span>\r\n                </button>\r\n                <div class=\"attachments\" data-upload-files=\"\">\r\n                    <div class=\"attachments-file\" *ngFor=\"let att of task.attachments\">\r\n                        <a class=\"file-name\" href=\"{{att.url}}\">\r\n                            {{att.realFileName}}\r\n                        </a>\r\n                        <span class=\"btn btn-sm btn-link btn-remove-file on-edit\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 596:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var router_1 = __webpack_require__(378);
	var common_1 = __webpack_require__(2);
	var ng2_translate_1 = __webpack_require__(347);
	var tabs_1 = __webpack_require__(597);
	var app_service_1 = __webpack_require__(438);
	var user_1 = __webpack_require__(442);
	var UserProfileComponent = (function () {
	    function UserProfileComponent(router, formBuilder, appService) {
	        this.router = router;
	        this.formBuilder = formBuilder;
	        this.appService = appService;
	        this.user = new user_1.User();
	        this.changePassword = false;
	        this.form = formBuilder.group({
	            login: [],
	            pwd: [],
	            pwd_confirm: [],
	            email: []
	        });
	    }
	    UserProfileComponent.prototype.toggleChangePassword = function () {
	        this.changePassword = !this.changePassword;
	    };
	    UserProfileComponent.prototype.updateUserProfile = function () {
	        this.appService.updateUserProfile(this.user);
	    };
	    UserProfileComponent.prototype.close = function (event) {
	        event.preventDefault();
	        window.history.back();
	    };
	    UserProfileComponent = __decorate([
	        core_1.Component({
	            selector: '[user-profile]',
	            template: __webpack_require__(600),
	            directives: [common_1.FORM_DIRECTIVES, tabs_1.TAB_DIRECTIVES],
	            providers: [common_1.FormBuilder],
	            pipes: [ng2_translate_1.TranslatePipe]
	        }), 
	        __metadata('design:paramtypes', [router_1.Router, common_1.FormBuilder, app_service_1.AppService])
	    ], UserProfileComponent);
	    return UserProfileComponent;
	}());
	exports.UserProfileComponent = UserProfileComponent;


/***/ },

/***/ 597:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var tabs_1 = __webpack_require__(598);
	var tab_1 = __webpack_require__(599);
	exports.TAB_DIRECTIVES = [tabs_1.Tabs, tab_1.Tab];


/***/ },

/***/ 598:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var tab_1 = __webpack_require__(599);
	var Tabs = (function () {
	    function Tabs() {
	    }
	    Tabs.prototype.ngAfterContentInit = function () {
	        var activeTabs = this.tabs.filter(function (tab) { return tab.active; });
	        if (activeTabs.length === 0) {
	            this.selectTab(this.tabs.first);
	        }
	    };
	    Tabs.prototype.selectTab = function (tab) {
	        this.tabs.forEach(function (tab) { return tab.active = false; });
	        tab.active = true;
	    };
	    Tabs.prototype.preventDefault = function (event) {
	        event.preventDefault();
	    };
	    __decorate([
	        core_1.ContentChildren(tab_1.Tab), 
	        __metadata('design:type', core_1.QueryList)
	    ], Tabs.prototype, "tabs", void 0);
	    Tabs = __decorate([
	        core_1.Component({
	            selector: 'tabs',
	            template: "\n      <ul class=\"nav nav-tabs\">\n        <li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\" [class.active]=\"tab.active\">\n          <a href=\"#\" (click)=\"preventDefault($event)\">{{tab.title}}</a>\n        </li>\n      </ul>\n      <ng-content></ng-content>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Tabs);
	    return Tabs;
	}());
	exports.Tabs = Tabs;


/***/ },

/***/ 599:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var Tab = (function () {
	    function Tab() {
	        this.active = false;
	    }
	    __decorate([
	        core_1.Input('tabTitle'), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tab.prototype, "active", void 0);
	    Tab = __decorate([
	        core_1.Component({
	            selector: 'tab',
	            template: "\n      <div [hidden]=\"!active\" class=\"pane\">\n        <ng-content></ng-content>\n      </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Tab);
	    return Tab;
	}());
	exports.Tab = Tab;


/***/ },

/***/ 600:
/***/ function(module, exports) {

	module.exports = "<form class=\"form form-userprofile\" autocomplete=\"off\" [ngFormModel]=\"form\">\r\n    <header class=\"content-header\">\r\n        <button class=\"btn-back\" type=\"button\" (click)=\"close($event)\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </button>\r\n        <h1 class=\"header-title\">\r\n            {{'employee' | translate}} {{user.name}}\r\n        </h1>\r\n        <div class=\"content-actions\">\r\n            <button class=\"btn btn-primary\" type=\"button\" [disabled]=\"!form.valid\" (click)=\"updateUserProfile()\">\r\n                {{'save_close' | translate}}\r\n            </button>\r\n            <button class=\"btn\" type=\"button\" (click)=\"close($event)\">\r\n                {{'close' | translate}}\r\n            </button>\r\n        </div>\r\n    </header>\r\n    <section class=\"content-body\">\r\n        <tabs>\r\n            <tab class=\"tab-pane\" tabTitle=\"{{'properties' | translate}}\">\r\n                <!--<fieldset class=\"fieldset fieldset-user-avatar\">\r\n                            <img class=\"user-avatar\" src=\"img/avatar.png\"/>\r\n                </fieldset>-->\r\n                <fieldset class=\"fieldset fieldset-user-fields\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'user_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.name}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'login_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"text\" class=\"span4\" [(ngModel)]=\"user.login\" ngControl=\"login\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"!changePassword\">\r\n                        <div class=\"control-label\"></div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"btn btn-xs\" (click)=\"toggleChangePassword()\">{{'change_password' | translate}}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"changePassword\">\r\n                        <div class=\"control-label\">\r\n                            {{'password' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"password\" class=\"span4\" [(ngModel)]=\"user.pwd\" ngControl=\"pwd\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\" *ngIf=\"changePassword\">\r\n                        <div class=\"control-label\">\r\n                            {{'password_confirm' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"password\" class=\"span4\" [(ngModel)]=\"user.pwd_confirm\" ngControl=\"pwd_confirm\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'email' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <input type=\"email\" class=\"span4\" [(ngModel)]=\"user.email\" ngControl=\"email\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'org_name' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.organization}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'department' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.department}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'position' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <span class=\"input-placeholder\">\r\n                                {{user.position}}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'roles' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <ul class=\"input-placeholder list-style-none\">\r\n                                <xsl:for-each select=\"fields/roles/entry\">\r\n                                    <li>\r\n                                        <xsl:value-of select=\".\" />\r\n                                    </li>\r\n                                </xsl:for-each>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </tab>\r\n            <tab class=\"tab-pane\" tabTitle=\"{{'interface' | translate}}\">\r\n                <fieldset class=\"fieldset\">\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'limit_view' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <select name=\"pagesize\" class=\"native span2\">\r\n                                <option value=\"10\">\r\n                                    <xsl:if test=\"//pagesize = '10'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    10\r\n                                </option>\r\n                                <option value=\"20\">\r\n                                    <xsl:if test=\"//pagesize = '20'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    20\r\n                                </option>\r\n                                <option value=\"30\">\r\n                                    <xsl:if test=\"//pagesize = '30'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    30\r\n                                </option>\r\n                                <option value=\"50\">\r\n                                    <xsl:if test=\"//pagesize = '50'\">\r\n                                        <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                    </xsl:if>\r\n                                    50\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\">\r\n                            {{'interface_lang' | translate}}\r\n                        </div>\r\n                        <div class=\"controls\">\r\n                            <xsl:variable name=\"currentlang\" select=\"/request/@lang\" />\r\n                            <select name=\"lang\" class=\"native span2\">\r\n                                <xsl:for-each select=\"//query[@entity = 'language']/entry\">\r\n                                    <option value=\"{viewcontent/lang/@id}\">\r\n                                        <xsl:if test=\"viewcontent/lang/@id = $currentlang\">\r\n                                            <xsl:attribute name=\"selected\" select=\"'selected'\" />\r\n                                        </xsl:if>\r\n                                        <xsl:value-of select=\"viewcontent/lang\" />\r\n                                    </option>\r\n                                </xsl:for-each>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"control-label\"></div>\r\n                        <div class=\"controls\">\r\n                            <a href=\"javascript:void(0)\" data-toggle-theme=\"theme1\" class=\"input-placeholder\">\r\n                                {{'change_skin' | translate}}\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </tab>\r\n        </tabs>\r\n    </section>\r\n</form>\r\n"

/***/ },

/***/ 601:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(5);
	var LoginComponent = (function () {
	    function LoginComponent() {
	    }
	    LoginComponent = __decorate([
	        core_1.Component({
	            selector: '[login]',
	            template: ''
	        }), 
	        __metadata('design:paramtypes', [])
	    ], LoginComponent);
	    return LoginComponent;
	}());
	exports.LoginComponent = LoginComponent;


/***/ },

/***/ 602:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(603));


/***/ },

/***/ 603:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var store_1 = __webpack_require__(421);
	var compose_1 = __webpack_require__(604);
	var projects_reducer_1 = __webpack_require__(461);
	var tasks_reducer_1 = __webpack_require__(589);
	var staff_reducer_1 = __webpack_require__(456);
	var reference_reducer_1 = __webpack_require__(453);
	;
	exports.APP_STORE = store_1.provideStore(compose_1.compose(store_1.combineReducers)({
	    projects: projects_reducer_1.projectsReducer,
	    tasks: tasks_reducer_1.tasksReducer,
	    staff: staff_reducer_1.staffReducer,
	    reference: reference_reducer_1.referenceReducer
	}));


/***/ },

/***/ 604:
/***/ function(module, exports) {

	"use strict";
	exports.compose = function () {
	    var functions = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        functions[_i - 0] = arguments[_i];
	    }
	    return function (arg) {
	        if (functions.length === 0) {
	            return arg;
	        }
	        var last = functions[functions.length - 1];
	        var rest = functions.slice(0, -1);
	        return rest.reduceRight(function (composed, fn) { return fn(composed); }, last(arg));
	    };
	};
	//# sourceMappingURL=compose.js.map

/***/ }

});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi5icm93c2VyLnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvbm90aWZpY2F0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL2FwcC9hcHAuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcm91dGVyL2RpcmVjdGl2ZXMvcm91dGVyX2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvcm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3Ivc2Nhbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvY29uY2F0LmpzIiwid2VicGFjazovLy8uL34vcnhqcy9hZGQvb3BlcmF0b3IvY29uY2F0TWFwLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vcGVyYXRvci9jb25jYXRNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb3BlcmF0b3IvZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yeGpzL2FkZC9vcGVyYXRvci9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0Zyb21PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vcnhqcy9vYnNlcnZhYmxlL0l0ZXJhdG9yT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9BcnJheUxpa2VPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcm91dGVyL2FwcGx5X3JlZGlyZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvdXJsX3RyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvdXJsX3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvdXRpbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvY3JlYXRlX3JvdXRlcl9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcm91dGVyL3JvdXRlcl9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci91dGlscy90cmVlLmpzIiwid2VicGFjazovLy8uL34vQGFuZ3VsYXIvcm91dGVyL2NyZWF0ZV91cmxfdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9yZWNvZ25pemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvYWRkL29wZXJhdG9yL3RvUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3J4anMvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9yb3V0ZXJfb3V0bGV0X21hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9kaXJlY3RpdmVzL3JvdXRlcl9saW5rX2FjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYW5ndWxhci9yb3V0ZXIvcm91dGVyX3Byb3ZpZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9jb21tb25fcm91dGVyX3Byb3ZpZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NlcnZpY2VzL2FwcC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC91dGlscy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VydmljZXMvcHJvamVjdC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vZGVscy91c2VyLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvb3JnYW5pemF0aW9uLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvYXR0YWNobWVudC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvbW9kZWxzL3Byb2plY3QudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vZGVscy90YXNrLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvdGFnLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvdGFzay10eXBlLnRzIiwid2VicGFjazovLy8uL2FwcC9tb2RlbHMvY29tbWVudC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvbW9kZWxzL3JlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NlcnZpY2VzL3Rhc2suc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VydmljZXMvcmVmZXJlbmNlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3JlZHVjZXJzL3JlZmVyZW5jZS5yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL2FwcC9zZXJ2aWNlcy9zdGFmZi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2FwcC9zZXJ2aWNlcy9jb21tZW50LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3JlZHVjZXJzL3N0YWZmLnJlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9kcm9wZG93bi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL2Ryb3Bkb3duL2Ryb3Bkb3duLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL2Ryb3Bkb3duL2Ryb3Bkb3duLXRvZ2dsZS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvbmF2LnRzIiwid2VicGFjazovLy8uL2FwcC9yZWR1Y2Vycy9wcm9qZWN0cy5yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL2FwcC90ZW1wbGF0ZXMvbmF2Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RlbXBsYXRlcy9hcHAuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvYXBwLnJvdXRlcy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvYXV0aC5ndWFyZC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvcHJvamVjdC9wcm9qZWN0cy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvcGlwZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3BpcGVzL2RhdGUtZm9ybWF0LnBpcGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3BpcGVzL3RleHQtdHJhbnNmb3JtLnBpcGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NoYXJlZC9wYWdpbmF0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdC1yb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvc2hhcmVkL2N1c3RvbWVyLWNlbGwudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvc2hhcmVkL3VzZXItY2VsbC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9wcm9qZWN0L3RlbXBsYXRlcy9wcm9qZWN0LXJvdy5odG1sIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Byb2plY3QvdGVtcGxhdGVzL3Byb2plY3RzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvcHJvamVjdC9wcm9qZWN0LnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvc3dpdGNoLWJ1dHRvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL3N3aXRjaC1idXR0b24vc3dpdGNoLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9zaGFyZWQvY3VzdG9tZXItc2VsZWN0LnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3NoYXJlZC91c2VyLXNlbGVjdC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9wcm9qZWN0L3RlbXBsYXRlcy9wcm9qZWN0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvdGFzay90YXNrcy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy90YXNrL3Rhc2stcm93LnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3Rhc2svdGVtcGxhdGVzL3Rhc2stcm93Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3JlZHVjZXJzL3Rhc2tzLnJlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvdGFzay90ZW1wbGF0ZXMvdGFza3MuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy90YXNrL3Rhc2sudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvc2hhcmVkL3Byb2plY3Qtc2VsZWN0LnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3NoYXJlZC90YXNrLXR5cGUtc2VsZWN0LnRzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL3NoYXJlZC90YWdzLXNlbGVjdC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy90YXNrL3RlbXBsYXRlcy90YXNrLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvdXNlci1wcm9maWxlLnRzIiwid2VicGFjazovLy8uL2FwcC9zaGFyZWQvdGFicy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL3RhYnMvdGFicy50cyIsIndlYnBhY2s6Ly8vLi9hcHAvc2hhcmVkL3RhYnMvdGFiLnRzIiwid2VicGFjazovLy8uL2FwcC90ZW1wbGF0ZXMvdXNlci1wcm9maWxlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0b3JlL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwcC9zdG9yZS9zdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9+L0BuZ3J4L2NvcmUvY29tcG9zZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzREFBMEIsQ0FBbUMsQ0FBQztBQUM5RCxrQ0FBd0MsQ0FBZSxDQUFDO0FBQ3hELGtDQUErQixHQUFlLENBQUM7QUFDL0Msb0NBQXVELENBQWlCLENBQUM7QUFFekUsMkNBQXVFLEdBQTZCLENBQUM7QUFHckcsMENBQW9DLEdBQXVCLENBQUM7QUFDNUQsMkNBQTZCLEdBQWlCLENBQUM7QUFDL0Msd0NBQXFDLEdBQWMsQ0FBQztBQUNwRCx5Q0FBMkIsR0FBd0IsQ0FBQztBQUNwRCxzQ0FBNkIsR0FBWSxDQUFDO0FBQzFDLG1DQUEwQixHQUFTLENBQUM7QUFFcEMscUNBQVMsQ0FBQyw0QkFBWSxFQUFFO0tBQ3BCLHFC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QUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFvRCxxREFBcUQsRUFBRTtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQSxjQUFhO0FBQ2IsVUFBUztBQUNUO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBLHVDQUFzQyx3QkFBd0IsRUFBRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVCw2REFBNEQsc0VBQXNFLEVBQUU7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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LG9QQUFvUCwwQkFBMEIsOExBQThMLGlCQUFpQixvUEFBb1Asd0JBQXdCLDhMQUE4TCxlQUFlLG9QQUFvUCxxQkFBcUIsMHBCQUEwcEIseUJBQXlCLGlNQUFpTSwwQkFBMEIsaTJEQUFpMkQsOEJBQThCLDRaQUE0WixxQkFBcUIsMDJCQUEwMkIsMkJBQTJCLDhNOzs7Ozs7Ozs7Ozs7Ozs7OztBQ0FqN1Msa0NBQTBCLENBQWUsQ0FBQztBQU8xQztLQUNJO0tBRUEsQ0FBQztLQVJMO1NBQUMsZ0JBQVMsQ0FBQzthQUNQLFFBQVEsRUFBRSxTQUFTO2FBQ25CLFFBQVEsRUFBRSxFQUFFO1VBQ2YsQ0FBQzs7dUJBQUE7S0FNRixxQkFBQztBQUFELEVBQUM7QUFKWSx1QkFBYyxpQkFJMUI7Ozs7Ozs7Ozs7OztBQ1hELDhCQUFjLEdBQVMsQ0FBQzs7Ozs7Ozs7O0FDQXhCLG1DQUE4QyxHQUFhLENBQUM7QUFDNUQscUNBQXdCLEdBQW9CLENBQUM7QUFNN0MsOENBQTRDLEdBQThCLENBQUM7QUFDM0UsMkNBQXNDLEdBQTJCLENBQUM7QUFDbEUsMkNBQXNDLEdBQTJCLENBQUM7QUFDbEUsK0NBQThDLEdBQStCLENBQUM7QUFVN0UsRUFBQztBQUVXLGtCQUFTLEdBQUcsb0JBQVksQ0FDakMsaUJBQU8sQ0FBQyx1QkFBZSxDQUFDLENBQUM7S0FDckIsNENBQVE7S0FDUixtQ0FBSztLQUNMLG1DQUFLO0tBQ0wsK0NBQVM7RUFDWixDQUFDLENBQ0wsQ0FBQzs7Ozs7Ozs7QUM3QkY7QUFDQTtBQUNBO0FBQ0EscUJBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQXlELHFCQUFxQixFQUFFO0FBQ2hGO0FBQ0E7QUFDQSxvQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBib290c3RyYXAgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xyXG5pbXBvcnQgeyBwcm92aWRlLCBlbmFibGVQcm9kTW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIVFRQX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xyXG5pbXBvcnQgeyBMb2NhdGlvblN0cmF0ZWd5LCBIYXNoTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBUUkFOU0xBVEVfUFJPVklERVJTLCBUcmFuc2xhdGVTZXJ2aWNlLCBUcmFuc2xhdGVMb2FkZXIgfSBmcm9tICduZzItdHJhbnNsYXRlL25nMi10cmFuc2xhdGUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJ1xyXG5cclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vc2hhcmVkL25vdGlmaWNhdGlvbic7XHJcbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEFQUF9ST1VURVJfUFJPVklERVJTIH0gZnJvbSAnLi9hcHAucm91dGVzJztcclxuaW1wb3J0IHsgQXBwU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXBwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBUFBfU0VSVklDRVMgfSBmcm9tICcuL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgQVBQX1NUT1JFIH0gZnJvbSAnLi9zdG9yZSc7XHJcblxyXG5ib290c3RyYXAoQXBwQ29tcG9uZW50LCBbXHJcbiAgICBIVFRQX1BST1ZJREVSUyxcclxuICAgIEFQUF9ST1VURVJfUFJPVklERVJTLFxyXG4gICAgcHJvdmlkZShMb2NhdGlvblN0cmF0ZWd5LCB7IHVzZUNsYXNzOiBIYXNoTG9jYXRpb25TdHJhdGVneSB9KSxcclxuICAgIFRyYW5zbGF0ZVNlcnZpY2UsXHJcbiAgICBUUkFOU0xBVEVfUFJPVklERVJTLFxyXG4gICAgcHJvdmlkZShUcmFuc2xhdGVMb2FkZXIsIHtcclxuICAgICAgICB1c2VGYWN0b3J5OiAoYXBwU2VydmljZTogQXBwU2VydmljZSkgPT4gbmV3IEN1c3RvbVRyYW5zbGF0ZUxvYWRlcihhcHBTZXJ2aWNlKSxcclxuICAgICAgICBkZXBzOiBbQXBwU2VydmljZV1cclxuICAgIH0pLFxyXG4gICAgTm90aWZpY2F0aW9uU2VydmljZSxcclxuICAgIEFQUF9TRVJWSUNFUyxcclxuICAgIEFQUF9TVE9SRVxyXG5dKS5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcclxuXHJcbi8vXHJcbmNsYXNzIEN1c3RvbVRyYW5zbGF0ZUxvYWRlciBpbXBsZW1lbnRzIFRyYW5zbGF0ZUxvYWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcFNlcnZpY2UuZ2V0VHJhbnNsYXRpb25zKCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbWFpbi5icm93c2VyLnRzXG4gKiovIiwiZXhwb3J0ICogZnJvbSAnLi9ub3RpZmljYXRpb24uc2VydmljZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbm90aWZpY2F0aW9uJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2hhcmVkL25vdGlmaWNhdGlvbi9pbmRleC50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuL25vdGlmaWNhdGlvbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgZW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgcHVibGljIGdldEVtaXR0ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdHRlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbmZvKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGQoeyB0eXBlOiAnaW5mbycsIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VjY2VzcyhtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHsgdHlwZTogJ3N1Y2Nlc3MnLCBtZXNzYWdlOiBtZXNzYWdlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGVycm9yKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGQoeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlOiBtZXNzYWdlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb2Nlc3MobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZCh7IHR5cGU6ICdwcm9jZXNzJywgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGQob3B0aW9ucyk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICAgICAgbGV0IG5vdHkgPSBuZXcgTm90aWZpY2F0aW9uKG9wdGlvbnMudHlwZSwgb3B0aW9ucy5tZXNzYWdlKTtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCh7IGNvbW1hbmQ6ICdhZGQnLCBub3RpZnk6IG5vdHkgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5vdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlQWxsKCkge1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KHsgY29tbWFuZDogJ2NsZWFuQWxsJyB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzXG4gKiovIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uIHtcclxuICAgIHByaXZhdGUgZW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgcHJpdmF0ZSB0eXBlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIHByaXZhdGUgZGlzcGxheSA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBkZWxheTtcclxuICAgIHByaXZhdGUgcHJvbWlzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW1pdHRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbWl0dGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5ID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChvcHRpb25zKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21lc3NhZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndHlwZScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRpc21pc3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVsYXkgPT09ICdjbGljaycpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoeyBkaXNtaXNzOiB0cnVlLCBub3RpZnk6IHRoaXMsIHByb21pc2U6IHRoaXMucHJvbWlzZSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGRlbGF5OiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XHJcblxyXG4gICAgICAgIGlmIChkZWxheSA9PT0gJ2NsaWNrJykge1xyXG4gICAgICAgICAgICAvLyByZXNvbHZlIG9uIGRpc21pc3NcclxuICAgICAgICB9IGVsc2UgaWYgKGRlbGF5ID4gMCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KHsgZGlzbWlzczogdHJ1ZSwgbm90aWZ5OiB0aGlzLCBwcm9taXNlOiB0aGlzLnByb21pc2UgfSk7XHJcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCh7IGRpc21pc3M6IHRydWUsIG5vdGlmeTogdGhpcywgcHJvbWlzZTogdGhpcy5wcm9taXNlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9ub3RpZmljYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gJy4vbm90aWZpY2F0aW9uJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdub3RpZmljYXRpb24nLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwibmItbm90aWZ5LWVudHJ5LXt7bm90aWZ5LnR5cGV9fVwiXHJcbiAgICAgICAgICAgICAgICBbY2xhc3MuZGlzbWlzcy1jbGlja109XCJub3RpZnkuZGVsYXkgPT0gJ2NsaWNrJ1wiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJub3RpZnkuZGlzcGxheSA/ICdibG9jayc6ICdub25lJ1wiXHJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwibm90aWZ5LmRpc21pc3MoKVwiXHJcbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgbm90aWZ5IG9mIG5vdGlmaWNhdGlvbnNcIj5cclxuICAgICAgICAgICAge3tub3RpZnkubWVzc2FnZX19XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MubmItbm90aWZ5JykgdHJ1ZTtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaGlkZGVuJykgZ2V0IGhpZGRlbigpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9ucy5sZW5ndGggPT0gMDsgfTtcclxuXHJcbiAgICBwdWJsaWMgbm90aWZpY2F0aW9uczogTm90aWZpY2F0aW9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgbGlzdGVuZXI6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2UpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSB0aGlzLm5vdGlmeVNlcnZpY2UuZ2V0RW1pdHRlcigpLnN1YnNjcmliZShpdGVtID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLmNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFuQWxsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90aWZ5KGl0ZW0ubm90aWZ5KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLm1hcChpdCA9PiBpdC5nZXRFbWl0dGVyKCkudW5zdWJzY3JpYmUoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTm90aWZ5KG5vdGlmeTogTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2gobm90aWZ5KTtcclxuICAgICAgICBub3RpZnkuZ2V0RW1pdHRlcigpLnN1YnNjcmliZShpdGVtID0+IHRoaXMubm90aWZ5RW1pdHRlcihpdGVtKSk7XHJcbiAgICB9XHJcblxyXG4gICAgbm90aWZ5RW1pdHRlcihkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuZGlzbWlzcykge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm5vdGlmaWNhdGlvbnMuaW5kZXhPZihkYXRhLm5vdGlmeSk7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICBkYXRhLm5vdGlmeS5nZXRFbWl0dGVyKCkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2hhcmVkL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uY29tcG9uZW50LnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBST1VURVJfRElSRUNUSVZFUyB9ICBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBBcHBTZXJ2aWNlLCBQcm9qZWN0U2VydmljZSwgVGFza1NlcnZpY2UsIFJlZmVyZW5jZVNlcnZpY2UsIFN0YWZmU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMnO1xyXG5pbXBvcnQgeyBGRVRDSF9PUkdBTklaQVRJT05TLCBGRVRDSF9VU0VSUyB9IGZyb20gJy4vcmVkdWNlcnMvc3RhZmYucmVkdWNlcic7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UsIE5vdGlmaWNhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vc2hhcmVkL25vdGlmaWNhdGlvbic7XHJcbmltcG9ydCB7IERST1BET1dOX0RJUkVDVElWRVMgfSBmcm9tICcuL3NoYXJlZC9kcm9wZG93bic7XHJcbmltcG9ydCB7IE5hdkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9uYXYnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi9tb2RlbHMvdXNlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwJyxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9hcHAuaHRtbCcpLFxyXG4gICAgZGlyZWN0aXZlczogW1JPVVRFUl9ESVJFQ1RJVkVTLCBOYXZDb21wb25lbnQsIE5vdGlmaWNhdGlvbkNvbXBvbmVudCwgRFJPUERPV05fRElSRUNUSVZFU10sXHJcbiAgICBwcm92aWRlcnM6IFtOb3RpZmljYXRpb25TZXJ2aWNlXSxcclxuICAgIHBpcGVzOiBbVHJhbnNsYXRlUGlwZV1cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBzdWI6IGFueTtcclxuICAgIGlzUmVhZHk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxvZ2dlZFVzZXI6IFVzZXI7XHJcbiAgICBsYW5ndWFnZTogYW55O1xyXG4gICAgSEVBREVSX1RJVExFOiBzdHJpbmcgPSAnUHJvamVjdHMnO1xyXG4gICAgaXNOYXZDb2xsYXBzZWQ6IEJvb2xlYW47XHJcbiAgICBpc1NlYXJjaE9wZW46IEJvb2xlYW47XHJcbiAgICBpc01vYmlsZURldmljZTogQm9vbGVhbjtcclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQudGFyZ2V0J10pIHJlc2l6ZSh3aW5kb3cpIHsgdGhpcy5vblJlc2l6ZSh3aW5kb3cpOyB9O1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5waG9uZScpIGdldCBkZXZpY2UoKSB7IHJldHVybiB0aGlzLmlzTW9iaWxlRGV2aWNlOyB9O1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zaWRlLW5hdi10b2dnbGUnKSBnZXQgdG9nZ2xlTmF2VmlzaWJsZSgpIHsgcmV0dXJuIHRoaXMuaXNOYXZDb2xsYXBzZWQ7IH07XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNlYXJjaC1vcGVuJykgZ2V0IHRvZ2dsZVNlYXJjaCgpIHsgcmV0dXJuIHRoaXMuaXNTZWFyY2hPcGVuOyB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXHJcbiAgICAgICAgcHJpdmF0ZSBhcHBTZXJ2aWNlOiBBcHBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcmVmZXJlbmNlU2VydmljZTogUmVmZXJlbmNlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHN0YWZmU2VydmljZTogU3RhZmZTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdWIgPSB0aGlzLnN0b3JlLnNlbGVjdCgncmVmZXJlbmNlJyk7XHJcblxyXG4gICAgICAgIHRoaXMucmVmZXJlbmNlU2VydmljZS5sb2FkUmVmZXJlbmNlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhZmZTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbnMoKS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiBGRVRDSF9PUkdBTklaQVRJT05TLCBwYXlsb2FkOiBkYXRhIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnN0YWZmU2VydmljZS5nZXRVc2VycygpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7IHR5cGU6IEZFVENIX1VTRVJTLCBwYXlsb2FkOiBkYXRhIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmlzU2VhcmNoT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNOYXZDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvZ2dlZFVzZXIgPSBuZXcgVXNlcigpO1xyXG4gICAgICAgIHRoaXMuaXNNb2JpbGVEZXZpY2UgPSB0aGlzLmlzTW9iaWxlKCk7XHJcblxyXG4gICAgICAgIC8vIG5nMi10cmFuc2xhdGVcclxuICAgICAgICB2YXIgdXNlckxhbmcgPSBuYXZpZ2F0b3IubGFuZ3VhZ2Uuc3BsaXQoJy0nKVswXTsgLy8gdXNlIG5hdmlnYXRvciBsYW5nIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIHVzZXJMYW5nID0gLyhydXxlbikvZ2kudGVzdCh1c2VyTGFuZykgPyB1c2VyTGFuZyA6ICdlbic7XHJcbiAgICAgICAgLy8gdGhpcyBsYW5ndWFnZSB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFjayB3aGVuIGEgdHJhbnNsYXRpb24gaXNuJ3QgZm91bmQgaW4gdGhlIGN1cnJlbnQgbGFuZ3VhZ2VcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZS5zZXREZWZhdWx0TGFuZygnZW4nKTtcclxuICAgICAgICAvLyB0aGUgbGFuZyB0byB1c2UsIGlmIHRoZSBsYW5nIGlzbid0IGF2YWlsYWJsZSwgaXQgd2lsbCB1c2UgdGhlIGN1cnJlbnQgbG9hZGVyIHRvIGdldCB0aGVtXHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGUudXNlKHVzZXJMYW5nKTtcclxuXHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGUuZ2V0KCdicmFuZCcpLnN1YnNjcmliZSh2YWx1ZSA9PiB0aGlzLkhFQURFUl9USVRMRSA9IHZhbHVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHBTZXJ2aWNlLmdldFVzZXJQcm9maWxlKCkuc3Vic2NyaWJlKChyZXNwOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZWRVc2VyID0gcmVzcC5lbXBsb3llZTtcclxuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZSA9IHJlc3AubGFuZ3VhZ2VcclxuICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5hcHBTZXJ2aWNlLmlzTG9nZ2VkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnN1YiAmJiB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZU5hdigpIHtcclxuICAgICAgICB0aGlzLmlzTmF2Q29sbGFwc2VkID0gIXRoaXMuaXNOYXZDb2xsYXBzZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZU5hdihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5pc05hdkNvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNTZWFyY2hPcGVuID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoVG9nZ2xlKCkge1xyXG4gICAgICAgIHRoaXMuaXNTZWFyY2hPcGVuID0gIXRoaXMuaXNTZWFyY2hPcGVuO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZ291dChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgLy8gdGhpcy5sb2dnZWRVc2VyID0gbnVsbDtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdMb2dvdXQnO1xyXG4gICAgfVxyXG5cclxuICAgIGdvQmFjaygpIHtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJldmVudERlZmF1bHQoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTW9iaWxlKCkge1xyXG4gICAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUod2luZG93KSB7XHJcbiAgICAgICAgdGhpcy5pc01vYmlsZURldmljZSA9IHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQgfHwgdGhpcy5pc01vYmlsZSgpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2FwcC5jb21wb25lbnQudHNcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciByb3V0ZXJfbGlua18xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3JvdXRlcl9saW5rJyk7XG52YXIgcm91dGVyX2xpbmtfYWN0aXZlXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvcm91dGVyX2xpbmtfYWN0aXZlJyk7XG52YXIgcm91dGVyX291dGxldF8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3JvdXRlcl9vdXRsZXQnKTtcbnZhciByb3V0ZXJfMSA9IHJlcXVpcmUoJy4vcm91dGVyJyk7XG5leHBvcnRzLk5hdmlnYXRpb25DYW5jZWwgPSByb3V0ZXJfMS5OYXZpZ2F0aW9uQ2FuY2VsO1xuZXhwb3J0cy5OYXZpZ2F0aW9uRW5kID0gcm91dGVyXzEuTmF2aWdhdGlvbkVuZDtcbmV4cG9ydHMuTmF2aWdhdGlvbkVycm9yID0gcm91dGVyXzEuTmF2aWdhdGlvbkVycm9yO1xuZXhwb3J0cy5OYXZpZ2F0aW9uU3RhcnQgPSByb3V0ZXJfMS5OYXZpZ2F0aW9uU3RhcnQ7XG5leHBvcnRzLlJvdXRlciA9IHJvdXRlcl8xLlJvdXRlcjtcbmV4cG9ydHMuUm91dGVzUmVjb2duaXplZCA9IHJvdXRlcl8xLlJvdXRlc1JlY29nbml6ZWQ7XG52YXIgcm91dGVyX291dGxldF9tYXBfMSA9IHJlcXVpcmUoJy4vcm91dGVyX291dGxldF9tYXAnKTtcbmV4cG9ydHMuUm91dGVyT3V0bGV0TWFwID0gcm91dGVyX291dGxldF9tYXBfMS5Sb3V0ZXJPdXRsZXRNYXA7XG52YXIgcm91dGVyX3Byb3ZpZGVyc18xID0gcmVxdWlyZSgnLi9yb3V0ZXJfcHJvdmlkZXJzJyk7XG5leHBvcnRzLnByb3ZpZGVSb3V0ZXIgPSByb3V0ZXJfcHJvdmlkZXJzXzEucHJvdmlkZVJvdXRlcjtcbnZhciByb3V0ZXJfc3RhdGVfMSA9IHJlcXVpcmUoJy4vcm91dGVyX3N0YXRlJyk7XG5leHBvcnRzLkFjdGl2YXRlZFJvdXRlID0gcm91dGVyX3N0YXRlXzEuQWN0aXZhdGVkUm91dGU7XG5leHBvcnRzLkFjdGl2YXRlZFJvdXRlU25hcHNob3QgPSByb3V0ZXJfc3RhdGVfMS5BY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xuZXhwb3J0cy5Sb3V0ZXJTdGF0ZSA9IHJvdXRlcl9zdGF0ZV8xLlJvdXRlclN0YXRlO1xuZXhwb3J0cy5Sb3V0ZXJTdGF0ZVNuYXBzaG90ID0gcm91dGVyX3N0YXRlXzEuUm91dGVyU3RhdGVTbmFwc2hvdDtcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG5leHBvcnRzLlBSSU1BUllfT1VUTEVUID0gc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVQ7XG52YXIgdXJsX3NlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoJy4vdXJsX3NlcmlhbGl6ZXInKTtcbmV4cG9ydHMuRGVmYXVsdFVybFNlcmlhbGl6ZXIgPSB1cmxfc2VyaWFsaXplcl8xLkRlZmF1bHRVcmxTZXJpYWxpemVyO1xuZXhwb3J0cy5VcmxTZXJpYWxpemVyID0gdXJsX3NlcmlhbGl6ZXJfMS5VcmxTZXJpYWxpemVyO1xudmFyIHVybF90cmVlXzEgPSByZXF1aXJlKCcuL3VybF90cmVlJyk7XG5leHBvcnRzLlVybFBhdGhXaXRoUGFyYW1zID0gdXJsX3RyZWVfMS5VcmxQYXRoV2l0aFBhcmFtcztcbmV4cG9ydHMuVXJsVHJlZSA9IHVybF90cmVlXzEuVXJsVHJlZTtcbmV4cG9ydHMuUk9VVEVSX0RJUkVDVElWRVMgPSBbcm91dGVyX291dGxldF8xLlJvdXRlck91dGxldCwgcm91dGVyX2xpbmtfMS5Sb3V0ZXJMaW5rLCByb3V0ZXJfbGlua19hY3RpdmVfMS5Sb3V0ZXJMaW5rQWN0aXZlXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJMRFJDUVVGNVFpd3dRa0ZCTUVJc1EwRkJReXhEUVVGQk8wRkJRM0JFTEcxRFFVRXJRaXhwUTBGQmFVTXNRMEZCUXl4RFFVRkJPMEZCUTJwRkxEaENRVUV5UWl3MFFrRkJORUlzUTBGQlF5eERRVUZCTzBGQlMzaEVMSFZDUVVGcFNDeFZRVUZWTEVOQlFVTTdRVUZCTjBjc2NVUkJRV2RDTzBGQlFVVXNLME5CUVdFN1FVRkJSU3h0UkVGQlpUdEJRVUZGTEcxRVFVRmxPMEZCUVVVc2FVTkJRVTA3UVVGQlJTeHhSRUZCYTBNN1FVRkROVWdzYTBOQlFUaENMSEZDUVVGeFFpeERRVUZETzBGQlFUVkRMRGhFUVVFMFF6dEJRVU53UkN4cFEwRkJORUlzYjBKQlFXOUNMRU5CUVVNN1FVRkJla01zZVVSQlFYbERPMEZCUTJwRUxEWkNRVUYxUml4blFrRkJaMElzUTBGQlF6dEJRVUZvUnl4MVJFRkJZenRCUVVGRkxIVkZRVUZ6UWp0QlFVRkZMR2xFUVVGWE8wRkJRVVVzYVVWQlFUSkRPMEZCUTNoSExIVkNRVUZ4UXl4VlFVRlZMRU5CUVVNN1FVRkJlRU1zYVVSQlFYZERPMEZCUTJoRUxDdENRVUZyUkN4clFrRkJhMElzUTBGQlF6dEJRVUUzUkN4eFJVRkJiMEk3UVVGQlJTeDFSRUZCZFVNN1FVRkRja1VzZVVKQlFYbERMRmxCUVZrc1EwRkJRenRCUVVFNVF5eDVSRUZCYVVJN1FVRkJSU3h4UTBGQk1rSTdRVUZGZWtNc2VVSkJRV2xDTEVkQlFVY3NRMEZCUXl3MFFrRkJXU3hGUVVGRkxIZENRVUZWTEVWQlFVVXNjVU5CUVdkQ0xFTkJRVU1zUTBGQlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdVbTkxZEdWeVRHbHVhMzBnWm5KdmJTQW5MaTlrYVhKbFkzUnBkbVZ6TDNKdmRYUmxjbDlzYVc1ckp6dGNibWx0Y0c5eWRDQjdVbTkxZEdWeVRHbHVhMEZqZEdsMlpYMGdabkp2YlNBbkxpOWthWEpsWTNScGRtVnpMM0p2ZFhSbGNsOXNhVzVyWDJGamRHbDJaU2M3WEc1cGJYQnZjblFnZTFKdmRYUmxjazkxZEd4bGRIMGdabkp2YlNBbkxpOWthWEpsWTNScGRtVnpMM0p2ZFhSbGNsOXZkWFJzWlhRbk8xeHVYRzVsZUhCdmNuUWdlMFY0ZEhKaFQzQjBhVzl1YzMwZ1puSnZiU0FuTGk5amIyMXRiMjVmY205MWRHVnlYM0J5YjNacFpHVnljeWM3WEc1bGVIQnZjblFnZTFKdmRYUmxMQ0JTYjNWMFpYSkRiMjVtYVdkOUlHWnliMjBnSnk0dlkyOXVabWxuSnp0Y2JtVjRjRzl5ZENCN1EyRnVRV04wYVhaaGRHVXNJRU5oYmtSbFlXTjBhWFpoZEdWOUlHWnliMjBnSnk0dmFXNTBaWEptWVdObGN5YzdYRzVsZUhCdmNuUWdlMFYyWlc1MExDQk9ZWFpwWjJGMGFXOXVRMkZ1WTJWc0xDQk9ZWFpwWjJGMGFXOXVSVzVrTENCT1lYWnBaMkYwYVc5dVJYSnliM0lzSUU1aGRtbG5ZWFJwYjI1VGRHRnlkQ3dnVW05MWRHVnlMQ0JTYjNWMFpYTlNaV052WjI1cGVtVmtmU0JtY205dElDY3VMM0p2ZFhSbGNpYzdYRzVsZUhCdmNuUWdlMUp2ZFhSbGNrOTFkR3hsZEUxaGNIMGdabkp2YlNBbkxpOXliM1YwWlhKZmIzVjBiR1YwWDIxaGNDYzdYRzVsZUhCdmNuUWdlM0J5YjNacFpHVlNiM1YwWlhKOUlHWnliMjBnSnk0dmNtOTFkR1Z5WDNCeWIzWnBaR1Z5Y3ljN1hHNWxlSEJ2Y25RZ2UwRmpkR2wyWVhSbFpGSnZkWFJsTENCQlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBMQ0JTYjNWMFpYSlRkR0YwWlN3Z1VtOTFkR1Z5VTNSaGRHVlRibUZ3YzJodmRIMGdabkp2YlNBbkxpOXliM1YwWlhKZmMzUmhkR1VuTzF4dVpYaHdiM0owSUh0UVVrbE5RVkpaWDA5VlZFeEZWQ3dnVUdGeVlXMXpmU0JtY205dElDY3VMM05vWVhKbFpDYzdYRzVsZUhCdmNuUWdlMFJsWm1GMWJIUlZjbXhUWlhKcFlXeHBlbVZ5TENCVmNteFRaWEpwWVd4cGVtVnlmU0JtY205dElDY3VMM1Z5YkY5elpYSnBZV3hwZW1WeUp6dGNibVY0Y0c5eWRDQjdWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTXNJRlZ5YkZSeVpXVjlJR1p5YjIwZ0p5NHZkWEpzWDNSeVpXVW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdVazlWVkVWU1gwUkpVa1ZEVkVsV1JWTWdQU0JiVW05MWRHVnlUM1YwYkdWMExDQlNiM1YwWlhKTWFXNXJMQ0JTYjNWMFpYSk1hVzVyUVdOMGFYWmxYVHNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDM3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29tbW9uJyk7XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnLi4vcm91dGVyJyk7XG52YXIgcm91dGVyX3N0YXRlXzEgPSByZXF1aXJlKCcuLi9yb3V0ZXJfc3RhdGUnKTtcbnZhciBSb3V0ZXJMaW5rID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSb3V0ZXJMaW5rKHJvdXRlciwgcm91dGUsIGxvY2F0aW9uU3RyYXRlZ3kpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gICAgICAgIHRoaXMucm91dGUgPSByb3V0ZTtcbiAgICAgICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5ID0gbG9jYXRpb25TdHJhdGVneTtcbiAgICAgICAgdGhpcy5jb21tYW5kcyA9IFtdO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm91dGVyTGluay5wcm90b3R5cGUsIFwicm91dGVyTGlua1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcyA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRzID0gW2RhdGFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBSb3V0ZXJMaW5rLnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7IHRoaXMudXBkYXRlVGFyZ2V0VXJsQW5kSHJlZigpOyB9O1xuICAgIFJvdXRlckxpbmsucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiAoYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5KSB7XG4gICAgICAgIGlmIChidXR0b24gIT09IDAgfHwgY3RybEtleSB8fCBtZXRhS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0aGlzLnRhcmdldCAhPSAnX3NlbGYnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHRoaXMudXJsVHJlZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFJvdXRlckxpbmsucHJvdG90eXBlLnVwZGF0ZVRhcmdldFVybEFuZEhyZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXJsVHJlZSA9IHRoaXMucm91dGVyLmNyZWF0ZVVybFRyZWUodGhpcy5jb21tYW5kcywgeyByZWxhdGl2ZVRvOiB0aGlzLnJvdXRlLCBxdWVyeVBhcmFtczogdGhpcy5xdWVyeVBhcmFtcywgZnJhZ21lbnQ6IHRoaXMuZnJhZ21lbnQgfSk7XG4gICAgICAgIGlmICh0aGlzLnVybFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuaHJlZiA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5wcmVwYXJlRXh0ZXJuYWxVcmwodGhpcy5yb3V0ZXIuc2VyaWFsaXplVXJsKHRoaXMudXJsVHJlZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLklucHV0KCksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIFN0cmluZylcbiAgICBdLCBSb3V0ZXJMaW5rLnByb3RvdHlwZSwgXCJ0YXJnZXRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLklucHV0KCksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIE9iamVjdClcbiAgICBdLCBSb3V0ZXJMaW5rLnByb3RvdHlwZSwgXCJxdWVyeVBhcmFtc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgU3RyaW5nKVxuICAgIF0sIFJvdXRlckxpbmsucHJvdG90eXBlLCBcImZyYWdtZW50XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5Ib3N0QmluZGluZygpLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnR5cGUnLCBTdHJpbmcpXG4gICAgXSwgUm91dGVyTGluay5wcm90b3R5cGUsIFwiaHJlZlwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgT2JqZWN0KSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdF0pXG4gICAgXSwgUm91dGVyTGluay5wcm90b3R5cGUsIFwicm91dGVyTGlua1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC5idXR0b24nLCAnJGV2ZW50LmN0cmxLZXknLCAnJGV2ZW50Lm1ldGFLZXknXSksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIEZ1bmN0aW9uKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW051bWJlciwgQm9vbGVhbiwgQm9vbGVhbl0pLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnJldHVybnR5cGUnLCBCb29sZWFuKVxuICAgIF0sIFJvdXRlckxpbmsucHJvdG90eXBlLCBcIm9uQ2xpY2tcIiwgbnVsbCk7XG4gICAgUm91dGVyTGluayA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuRGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbcm91dGVyTGlua10nIH0pLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcm91dGVyXzEuUm91dGVyLCByb3V0ZXJfc3RhdGVfMS5BY3RpdmF0ZWRSb3V0ZSwgY29tbW9uXzEuTG9jYXRpb25TdHJhdGVneV0pXG4gICAgXSwgUm91dGVyTGluayk7XG4gICAgcmV0dXJuIFJvdXRlckxpbms7XG59KCkpO1xuZXhwb3J0cy5Sb3V0ZXJMaW5rID0gUm91dGVyTGluaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5WDJ4cGJtc3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdlpHbHlaV04wYVhabGN5OXliM1YwWlhKZmJHbHVheTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3TzBGQlFVRXNkVUpCUVN0Q0xHbENRVUZwUWl4RFFVRkRMRU5CUVVFN1FVRkRha1FzY1VKQlFYRkZMR1ZCUVdVc1EwRkJReXhEUVVGQk8wRkJSWEpHTEhWQ1FVRnhRaXhYUVVGWExFTkJRVU1zUTBGQlFUdEJRVU5xUXl3MlFrRkJOa0lzYVVKQlFXbENMRU5CUVVNc1EwRkJRVHRCUVN0Q0wwTTdTVUZqUlN4dlFrRkRXU3hOUVVGakxFVkJRVlVzUzBGQmNVSXNSVUZETjBNc1owSkJRV3RETzFGQlJHeERMRmRCUVUwc1IwRkJUaXhOUVVGTkxFTkJRVkU3VVVGQlZTeFZRVUZMTEVkQlFVd3NTMEZCU3l4RFFVRm5RanRSUVVNM1F5eHhRa0ZCWjBJc1IwRkJhRUlzWjBKQlFXZENMRU5CUVd0Q08xRkJaSFJETEdGQlFWRXNSMEZCVlN4RlFVRkZMRU5CUVVNN1NVRmpiMElzUTBGQlF6dEpRVWRzUkN4elFrRkJTU3hyUTBGQlZUdGhRVUZrTEZWQlFXVXNTVUZCYTBJN1dVRkRMMElzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFWRXNTVUZCU1N4RFFVRkRPMWxCUXpWQ0xFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRUaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRla0lzUTBGQlF6dFJRVU5JTEVOQlFVTTdPenRQUVVGQk8wbEJSVVFzWjBOQlFWY3NSMEZCV0N4VlFVRlpMRTlCUVZjc1NVRkJVeXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGSGFFVXNORUpCUVU4c1IwRkJVQ3hWUVVGUkxFMUJRV01zUlVGQlJTeFBRVUZuUWl4RlFVRkZMRTlCUVdkQ08xRkJRM2hFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFbEJRVWtzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRka01zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTmtMRU5CUVVNN1VVRkZSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVVzc1VVRkJVU3hKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNNVJDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJRc1EwRkJRenRSUVVWRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU40UXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRMllzUTBGQlF6dEpRVVZQTERKRFFVRnpRaXhIUVVFNVFqdFJRVU5GTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlEzQkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRMklzUlVGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlF5eERRVUZETEVOQlFVTTdVVUZEZEVZc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRha0lzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETDBZc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGcVJFUTdVVUZCUXl4WlFVRkxMRVZCUVVVN096aERRVUZCTzBsQlJWSTdVVUZCUXl4WlFVRkxMRVZCUVVVN08yMUVRVUZCTzBsQlExSTdVVUZCUXl4WlFVRkxMRVZCUVVVN08yZEVRVUZCTzBsQlIxSTdVVUZCUXl4clFrRkJWeXhGUVVGRk96czBRMEZCUVR0SlFWZGtPMUZCUVVNc1dVRkJTeXhGUVVGRk96czdaMFJCUVVFN1NVRlhVanRSUVVGRExHMUNRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1pVRkJaU3hGUVVGRkxHZENRVUZuUWl4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPenM3TmtOQlFVRTdTVUU1UWk5Rk8xRkJRVU1zWjBKQlFWTXNRMEZCUXl4RlFVRkRMRkZCUVZFc1JVRkJSU3hqUVVGakxFVkJRVU1zUTBGQlF6czdhMEpCUVVFN1NVRnZSSFJETEdsQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVc1RVJDeEpRVzFFUXp0QlFXNUVXU3hyUWtGQlZTeGhRVzFFZEVJc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3VEc5allYUnBiMjVUZEhKaGRHVm5lWDBnWm5KdmJTQW5RR0Z1WjNWc1lYSXZZMjl0Ylc5dUp6dGNibWx0Y0c5eWRDQjdSR2x5WldOMGFYWmxMQ0JJYjNOMFFtbHVaR2x1Wnl3Z1NHOXpkRXhwYzNSbGJtVnlMQ0JKYm5CMWRDd2dUMjVEYUdGdVoyVnpmU0JtY205dElDZEFZVzVuZFd4aGNpOWpiM0psSnp0Y2JseHVhVzF3YjNKMElIdFNiM1YwWlhKOUlHWnliMjBnSnk0dUwzSnZkWFJsY2ljN1hHNXBiWEJ2Y25RZ2UwRmpkR2wyWVhSbFpGSnZkWFJsZlNCbWNtOXRJQ2N1TGk5eWIzVjBaWEpmYzNSaGRHVW5PMXh1YVcxd2IzSjBJSHRWY214VWNtVmxmU0JtY205dElDY3VMaTkxY214ZmRISmxaU2M3WEc1Y2JseHVYRzR2S2lwY2JpQXFJRlJvWlNCU2IzVjBaWEpNYVc1cklHUnBjbVZqZEdsMlpTQnNaWFJ6SUhsdmRTQnNhVzVySUhSdklITndaV05wWm1saklIQmhjblJ6SUc5bUlIbHZkWElnWVhCd0xseHVJQ3BjYmlBcUlFTnZibk5wWkdWeUlIUm9aU0JtYjJ4c2IzZHBibWNnY205MWRHVWdZMjl1Wm1sbmRYSmhkR2x2YmpwY2JseHVJQ29nWUdCZ1hHNGdLaUJiZXlCd1lYUm9PaUFuTDNWelpYSW5MQ0JqYjIxd2IyNWxiblE2SUZWelpYSkRiWEFnZlYxY2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUZkb1pXNGdiR2x1YTJsdVp5QjBieUIwYUdseklHQlZjMlZ5WUNCeWIzVjBaU3dnZVc5MUlHTmhiaUIzY21sMFpUcGNiaUFxWEc0Z0tpQmdZR0JjYmlBcUlEeGhJRnR5YjNWMFpYSk1hVzVyWFQxY0lsc25MM1Z6WlhJblhWd2lQbXhwYm1zZ2RHOGdkWE5sY2lCamIyMXdiMjVsYm5ROEwyRStYRzRnS2lCZ1lHQmNiaUFxWEc0Z0tpQlNiM1YwWlhKTWFXNXJJR1Y0Y0dWamRITWdkR2hsSUhaaGJIVmxJSFJ2SUdKbElHRnVJR0Z5Y21GNUlHOW1JSEJoZEdnZ2MyVm5iV1Z1ZEhNc0lHWnZiR3h2ZDJWa0lHSjVJSFJvWlNCd1lYSmhiWE5jYmlBcUlHWnZjaUIwYUdGMElHeGxkbVZzSUc5bUlISnZkWFJwYm1jdUlFWnZjaUJwYm5OMFlXNWpaU0JnV3ljdmRHVmhiU2NzSUh0MFpXRnRTV1E2SURGOUxDQW5kWE5sY2ljc0lIdDFjMlZ5U1dRNklESjlYV0JjYmlBcUlHMWxZVzV6SUhSb1lYUWdkMlVnZDJGdWRDQjBieUJuWlc1bGNtRjBaU0JoSUd4cGJtc2dkRzhnWUM5MFpXRnRPM1JsWVcxSlpEMHhMM1Z6WlhJN2RYTmxja2xrUFRKZ0xseHVJQ3BjYmlBcUlGUm9aU0JtYVhKemRDQnpaV2R0Wlc1MElHNWhiV1VnWTJGdUlHSmxJSEJ5WlhCbGJtUmxaQ0IzYVhSb0lHQXZZQ3dnWUM0dllDd2diM0lnWUM0dUwyQXVYRzRnS2lCSlppQjBhR1VnYzJWbmJXVnVkQ0JpWldkcGJuTWdkMmwwYUNCZ0wyQXNJSFJvWlNCeWIzVjBaWElnZDJsc2JDQnNiMjlySUhWd0lIUm9aU0J5YjNWMFpTQm1jbTl0SUhSb1pTQnliMjkwSUc5bUlIUm9aU0JoY0hBdVhHNGdLaUJKWmlCMGFHVWdjMlZuYldWdWRDQmlaV2RwYm5NZ2QybDBhQ0JnTGk5Z0xDQnZjaUJrYjJWemJpZDBJR0psWjJsdUlIZHBkR2dnWVNCemJHRnphQ3dnZEdobElISnZkWFJsY2lCM2FXeHNYRzRnS2lCcGJuTjBaV0ZrSUd4dmIyc2dhVzRnZEdobElHTjFjbkpsYm5RZ1kyOXRjRzl1Wlc1MEozTWdZMmhwYkdSeVpXNGdabTl5SUhSb1pTQnliM1YwWlM1Y2JpQXFJRUZ1WkNCcFppQjBhR1VnYzJWbmJXVnVkQ0JpWldkcGJuTWdkMmwwYUNCZ0xpNHZZQ3dnZEdobElISnZkWFJsY2lCM2FXeHNJR2R2SUhWd0lHOXVaU0JzWlhabGJDNWNiaUFxTDF4dVFFUnBjbVZqZEdsMlpTaDdjMlZzWldOMGIzSTZJQ2RiY205MWRHVnlUR2x1YTEwbmZTbGNibVY0Y0c5eWRDQmpiR0Z6Y3lCU2IzVjBaWEpNYVc1cklHbHRjR3hsYldWdWRITWdUMjVEYUdGdVoyVnpJSHRjYmlBZ1FFbHVjSFYwS0NrZ2RHRnlaMlYwT2lCemRISnBibWM3WEc0Z0lIQnlhWFpoZEdVZ1kyOXRiV0Z1WkhNNklHRnVlVnRkSUQwZ1cxMDdYRzRnSUVCSmJuQjFkQ2dwSUhGMVpYSjVVR0Z5WVcxek9pQjdXMnM2SUhOMGNtbHVaMTA2SUdGdWVYMDdYRzRnSUVCSmJuQjFkQ2dwSUdaeVlXZHRaVzUwT2lCemRISnBibWM3WEc1Y2JpQWdMeThnZEdobElIVnliQ0JrYVhOd2JHRjVaV1FnYjI0Z2RHaGxJR0Z1WTJodmNpQmxiR1Z0Wlc1MExseHVJQ0JBU0c5emRFSnBibVJwYm1jb0tTQm9jbVZtT2lCemRISnBibWM3WEc1Y2JpQWdkWEpzVkhKbFpUb2dWWEpzVkhKbFpUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJSEJ5YVhaaGRHVWdjbTkxZEdWeU9pQlNiM1YwWlhJc0lIQnlhWFpoZEdVZ2NtOTFkR1U2SUVGamRHbDJZWFJsWkZKdmRYUmxMRnh1SUNBZ0lDQWdjSEpwZG1GMFpTQnNiMk5oZEdsdmJsTjBjbUYwWldkNU9pQk1iMk5oZEdsdmJsTjBjbUYwWldkNUtTQjdmVnh1WEc0Z0lFQkpibkIxZENncFhHNGdJSE5sZENCeWIzVjBaWEpNYVc1cktHUmhkR0U2SUdGdWVWdGRmSE4wY21sdVp5a2dlMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbU52YlcxaGJtUnpJRDBnUEdGdWVUNWtZWFJoTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJXMWhibVJ6SUQwZ1cyUmhkR0ZkTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUc1blQyNURhR0Z1WjJWektHTm9ZVzVuWlhNNklIdDlLVG9nWVc1NUlIc2dkR2hwY3k1MWNHUmhkR1ZVWVhKblpYUlZjbXhCYm1SSWNtVm1LQ2s3SUgxY2JseHVJQ0JBU0c5emRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lGc25KR1YyWlc1MExtSjFkSFJ2Ymljc0lDY2taWFpsYm5RdVkzUnliRXRsZVNjc0lDY2taWFpsYm5RdWJXVjBZVXRsZVNkZEtWeHVJQ0J2YmtOc2FXTnJLR0oxZEhSdmJqb2diblZ0WW1WeUxDQmpkSEpzUzJWNU9pQmliMjlzWldGdUxDQnRaWFJoUzJWNU9pQmliMjlzWldGdUtUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ2FXWWdLR0oxZEhSdmJpQWhQVDBnTUNCOGZDQmpkSEpzUzJWNUlIeDhJRzFsZEdGTFpYa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NTBZWEpuWlhRZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUhSb2FYTXVkR0Z5WjJWMElDRTlJQ2RmYzJWc1ppY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWNtOTFkR1Z5TG01aGRtbG5ZWFJsUW5sVmNtd29kR2hwY3k1MWNteFVjbVZsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElIVndaR0YwWlZSaGNtZGxkRlZ5YkVGdVpFaHlaV1lvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1MWNteFVjbVZsSUQwZ2RHaHBjeTV5YjNWMFpYSXVZM0psWVhSbFZYSnNWSEpsWlNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxdFlXNWtjeXhjYmlBZ0lDQWdJQ0FnZTNKbGJHRjBhWFpsVkc4NklIUm9hWE11Y205MWRHVXNJSEYxWlhKNVVHRnlZVzF6T2lCMGFHbHpMbkYxWlhKNVVHRnlZVzF6TENCbWNtRm5iV1Z1ZERvZ2RHaHBjeTVtY21GbmJXVnVkSDBwTzF4dUlDQWdJR2xtSUNoMGFHbHpMblZ5YkZSeVpXVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWFISmxaaUE5SUhSb2FYTXViRzlqWVhScGIyNVRkSEpoZEdWbmVTNXdjbVZ3WVhKbFJYaDBaWEp1WVd4VmNtd29kR2hwY3k1eWIzVjBaWEl1YzJWeWFXRnNhWHBsVlhKc0tIUm9hWE11ZFhKc1ZISmxaU2twTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9kaXJlY3RpdmVzL3JvdXRlcl9saW5rLmpzXG4gKiogbW9kdWxlIGlkID0gMzc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL21hcCcpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3Ivc2NhbicpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvbWVyZ2VNYXAnKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdCcpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvY29uY2F0TWFwJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci9ldmVyeScpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvbWVyZ2VBbGwnKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29ic2VydmFibGUvZnJvbScpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCdyeGpzL09ic2VydmFibGUnKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCdyeGpzL1N1YmplY3QnKTtcbnZhciBvZl8xID0gcmVxdWlyZSgncnhqcy9vYnNlcnZhYmxlL29mJyk7XG52YXIgYXBwbHlfcmVkaXJlY3RzXzEgPSByZXF1aXJlKCcuL2FwcGx5X3JlZGlyZWN0cycpO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnZhciBjcmVhdGVfcm91dGVyX3N0YXRlXzEgPSByZXF1aXJlKCcuL2NyZWF0ZV9yb3V0ZXJfc3RhdGUnKTtcbnZhciBjcmVhdGVfdXJsX3RyZWVfMSA9IHJlcXVpcmUoJy4vY3JlYXRlX3VybF90cmVlJyk7XG52YXIgcmVjb2duaXplXzEgPSByZXF1aXJlKCcuL3JlY29nbml6ZScpO1xudmFyIHJlc29sdmVfMSA9IHJlcXVpcmUoJy4vcmVzb2x2ZScpO1xudmFyIHJvdXRlcl9vdXRsZXRfbWFwXzEgPSByZXF1aXJlKCcuL3JvdXRlcl9vdXRsZXRfbWFwJyk7XG52YXIgcm91dGVyX3N0YXRlXzEgPSByZXF1aXJlKCcuL3JvdXRlcl9zdGF0ZScpO1xudmFyIHNoYXJlZF8xID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcbnZhciB1cmxfdHJlZV8xID0gcmVxdWlyZSgnLi91cmxfdHJlZScpO1xudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJy4vdXRpbHMvY29sbGVjdGlvbicpO1xudmFyIE5hdmlnYXRpb25TdGFydCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmF2aWdhdGlvblN0YXJ0KGlkLCB1cmwpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG4gICAgTmF2aWdhdGlvblN0YXJ0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiTmF2aWdhdGlvblN0YXJ0KGlkOiBcIiArIHRoaXMuaWQgKyBcIiwgdXJsOiAnXCIgKyB0aGlzLnVybCArIFwiJylcIjsgfTtcbiAgICByZXR1cm4gTmF2aWdhdGlvblN0YXJ0O1xufSgpKTtcbmV4cG9ydHMuTmF2aWdhdGlvblN0YXJ0ID0gTmF2aWdhdGlvblN0YXJ0O1xudmFyIE5hdmlnYXRpb25FbmQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5hdmlnYXRpb25FbmQoaWQsIHVybCwgdXJsQWZ0ZXJSZWRpcmVjdHMpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy51cmxBZnRlclJlZGlyZWN0cyA9IHVybEFmdGVyUmVkaXJlY3RzO1xuICAgIH1cbiAgICBOYXZpZ2F0aW9uRW5kLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiTmF2aWdhdGlvbkVuZChpZDogXCIgKyB0aGlzLmlkICsgXCIsIHVybDogJ1wiICsgdGhpcy51cmwgKyBcIicsIHVybEFmdGVyUmVkaXJlY3RzOiAnXCIgKyB0aGlzLnVybEFmdGVyUmVkaXJlY3RzICsgXCInKVwiO1xuICAgIH07XG4gICAgcmV0dXJuIE5hdmlnYXRpb25FbmQ7XG59KCkpO1xuZXhwb3J0cy5OYXZpZ2F0aW9uRW5kID0gTmF2aWdhdGlvbkVuZDtcbnZhciBOYXZpZ2F0aW9uQ2FuY2VsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOYXZpZ2F0aW9uQ2FuY2VsKGlkLCB1cmwpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG4gICAgTmF2aWdhdGlvbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIk5hdmlnYXRpb25DYW5jZWwoaWQ6IFwiICsgdGhpcy5pZCArIFwiLCB1cmw6ICdcIiArIHRoaXMudXJsICsgXCInKVwiOyB9O1xuICAgIHJldHVybiBOYXZpZ2F0aW9uQ2FuY2VsO1xufSgpKTtcbmV4cG9ydHMuTmF2aWdhdGlvbkNhbmNlbCA9IE5hdmlnYXRpb25DYW5jZWw7XG52YXIgTmF2aWdhdGlvbkVycm9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOYXZpZ2F0aW9uRXJyb3IoaWQsIHVybCwgZXJyb3IpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbiAgICBOYXZpZ2F0aW9uRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJOYXZpZ2F0aW9uRXJyb3IoaWQ6IFwiICsgdGhpcy5pZCArIFwiLCB1cmw6ICdcIiArIHRoaXMudXJsICsgXCInLCBlcnJvcjogXCIgKyB0aGlzLmVycm9yICsgXCIpXCI7XG4gICAgfTtcbiAgICByZXR1cm4gTmF2aWdhdGlvbkVycm9yO1xufSgpKTtcbmV4cG9ydHMuTmF2aWdhdGlvbkVycm9yID0gTmF2aWdhdGlvbkVycm9yO1xudmFyIFJvdXRlc1JlY29nbml6ZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJvdXRlc1JlY29nbml6ZWQoaWQsIHVybCwgdXJsQWZ0ZXJSZWRpcmVjdHMsIHN0YXRlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMudXJsQWZ0ZXJSZWRpcmVjdHMgPSB1cmxBZnRlclJlZGlyZWN0cztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbiAgICBSb3V0ZXNSZWNvZ25pemVkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiUm91dGVzUmVjb2duaXplZChpZDogXCIgKyB0aGlzLmlkICsgXCIsIHVybDogJ1wiICsgdGhpcy51cmwgKyBcIicsIHVybEFmdGVyUmVkaXJlY3RzOiAnXCIgKyB0aGlzLnVybEFmdGVyUmVkaXJlY3RzICsgXCInLCBzdGF0ZTogXCIgKyB0aGlzLnN0YXRlICsgXCIpXCI7XG4gICAgfTtcbiAgICByZXR1cm4gUm91dGVzUmVjb2duaXplZDtcbn0oKSk7XG5leHBvcnRzLlJvdXRlc1JlY29nbml6ZWQgPSBSb3V0ZXNSZWNvZ25pemVkO1xudmFyIFJvdXRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyKHJvb3RDb21wb25lbnRUeXBlLCByZXNvbHZlciwgdXJsU2VyaWFsaXplciwgb3V0bGV0TWFwLCBsb2NhdGlvbiwgaW5qZWN0b3IsIGNvbmZpZykge1xuICAgICAgICB0aGlzLnJvb3RDb21wb25lbnRUeXBlID0gcm9vdENvbXBvbmVudFR5cGU7XG4gICAgICAgIHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlcjtcbiAgICAgICAgdGhpcy51cmxTZXJpYWxpemVyID0gdXJsU2VyaWFsaXplcjtcbiAgICAgICAgdGhpcy5vdXRsZXRNYXAgPSBvdXRsZXRNYXA7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgdGhpcy5pbmplY3RvciA9IGluamVjdG9yO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25JZCA9IDA7XG4gICAgICAgIHRoaXMucmVzZXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5yb3V0ZXJFdmVudHMgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50VXJsVHJlZSA9IHVybF90cmVlXzEuY3JlYXRlRW1wdHlVcmxUcmVlKCk7XG4gICAgICAgIHRoaXMuY3VycmVudFJvdXRlclN0YXRlID0gcm91dGVyX3N0YXRlXzEuY3JlYXRlRW1wdHlTdGF0ZSh0aGlzLmN1cnJlbnRVcmxUcmVlLCB0aGlzLnJvb3RDb21wb25lbnRUeXBlKTtcbiAgICB9XG4gICAgUm91dGVyLnByb3RvdHlwZS5pbml0aWFsTmF2aWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZXRVcExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZUJ5VXJsKHRoaXMubG9jYXRpb24ucGF0aCgpKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSb3V0ZXIucHJvdG90eXBlLCBcInJvdXRlclN0YXRlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmN1cnJlbnRSb3V0ZXJTdGF0ZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvdXRlci5wcm90b3R5cGUsIFwidXJsXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnNlcmlhbGl6ZVVybCh0aGlzLmN1cnJlbnRVcmxUcmVlKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvdXRlci5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnJvdXRlckV2ZW50czsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgUm91dGVyLnByb3RvdHlwZS5yZXNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnXzEudmFsaWRhdGVDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IHRoaXMubG9jYXRpb25TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLmNyZWF0ZVVybFRyZWUgPSBmdW5jdGlvbiAoY29tbWFuZHMsIF9hKSB7XG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCByZWxhdGl2ZVRvID0gX2IucmVsYXRpdmVUbywgcXVlcnlQYXJhbXMgPSBfYi5xdWVyeVBhcmFtcywgZnJhZ21lbnQgPSBfYi5mcmFnbWVudDtcbiAgICAgICAgdmFyIGEgPSByZWxhdGl2ZVRvID8gcmVsYXRpdmVUbyA6IHRoaXMucm91dGVyU3RhdGUucm9vdDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZV91cmxfdHJlZV8xLmNyZWF0ZVVybFRyZWUoYSwgdGhpcy5jdXJyZW50VXJsVHJlZSwgY29tbWFuZHMsIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCk7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLm5hdmlnYXRlQnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiB1cmxfdHJlZV8xLlVybFRyZWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlTmF2aWdhdGlvbih1cmwsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciB1cmxUcmVlID0gdGhpcy51cmxTZXJpYWxpemVyLnBhcnNlKHVybCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZU5hdmlnYXRpb24odXJsVHJlZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLm5hdmlnYXRlID0gZnVuY3Rpb24gKGNvbW1hbmRzLCBleHRyYXMpIHtcbiAgICAgICAgaWYgKGV4dHJhcyA9PT0gdm9pZCAwKSB7IGV4dHJhcyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlTmF2aWdhdGlvbih0aGlzLmNyZWF0ZVVybFRyZWUoY29tbWFuZHMsIGV4dHJhcyksIGZhbHNlKTtcbiAgICB9O1xuICAgIFJvdXRlci5wcm90b3R5cGUuc2VyaWFsaXplVXJsID0gZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gdGhpcy51cmxTZXJpYWxpemVyLnNlcmlhbGl6ZSh1cmwpOyB9O1xuICAgIFJvdXRlci5wcm90b3R5cGUucGFyc2VVcmwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiB0aGlzLnVybFNlcmlhbGl6ZXIucGFyc2UodXJsKTsgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNjaGVkdWxlTmF2aWdhdGlvbiA9IGZ1bmN0aW9uICh1cmwsIHByZXZlbnRQdXNoU3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGlkID0gKyt0aGlzLm5hdmlnYXRpb25JZDtcbiAgICAgICAgdGhpcy5yb3V0ZXJFdmVudHMubmV4dChuZXcgTmF2aWdhdGlvblN0YXJ0KGlkLCB0aGlzLnNlcmlhbGl6ZVVybCh1cmwpKSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfdGhpcy5ydW5OYXZpZ2F0ZSh1cmwsIHByZXZlbnRQdXNoU3RhdGUsIGlkKTsgfSk7XG4gICAgfTtcbiAgICBSb3V0ZXIucHJvdG90eXBlLnNldFVwTG9jYXRpb25DaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5sb2NhdGlvblN1YnNjcmlwdGlvbiA9IHRoaXMubG9jYXRpb24uc3Vic2NyaWJlKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zY2hlZHVsZU5hdmlnYXRpb24oX3RoaXMudXJsU2VyaWFsaXplci5wYXJzZShjaGFuZ2VbJ3VybCddKSwgY2hhbmdlWydwb3AnXSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUm91dGVyLnByb3RvdHlwZS5ydW5OYXZpZ2F0ZSA9IGZ1bmN0aW9uICh1cmwsIHByZXZlbnRQdXNoU3RhdGUsIGlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpZCAhPT0gdGhpcy5uYXZpZ2F0aW9uSWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24uZ28odGhpcy51cmxTZXJpYWxpemVyLnNlcmlhbGl6ZSh0aGlzLmN1cnJlbnRVcmxUcmVlKSk7XG4gICAgICAgICAgICB0aGlzLnJvdXRlckV2ZW50cy5uZXh0KG5ldyBOYXZpZ2F0aW9uQ2FuY2VsKGlkLCB0aGlzLnNlcmlhbGl6ZVVybCh1cmwpKSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmVQcm9taXNlLCByZWplY3RQcm9taXNlKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFVybDtcbiAgICAgICAgICAgIHZhciBzdGF0ZTtcbiAgICAgICAgICAgIGFwcGx5X3JlZGlyZWN0c18xLmFwcGx5UmVkaXJlY3RzKHVybCwgX3RoaXMuY29uZmlnKVxuICAgICAgICAgICAgICAgIC5tZXJnZU1hcChmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRVcmwgPSB1O1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVfMS5yZWNvZ25pemUoX3RoaXMucm9vdENvbXBvbmVudFR5cGUsIF90aGlzLmNvbmZpZywgdXBkYXRlZFVybCwgX3RoaXMuc2VyaWFsaXplVXJsKHVwZGF0ZWRVcmwpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1lcmdlTWFwKGZ1bmN0aW9uIChuZXdSb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm91dGVyRXZlbnRzLm5leHQobmV3IFJvdXRlc1JlY29nbml6ZWQoaWQsIF90aGlzLnNlcmlhbGl6ZVVybCh1cmwpLCBfdGhpcy5zZXJpYWxpemVVcmwodXBkYXRlZFVybCksIG5ld1JvdXRlclN0YXRlU25hcHNob3QpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZV8xLnJlc29sdmUoX3RoaXMucmVzb2x2ZXIsIG5ld1JvdXRlclN0YXRlU25hcHNob3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZV9yb3V0ZXJfc3RhdGVfMS5jcmVhdGVSb3V0ZXJTdGF0ZShyb3V0ZXJTdGF0ZVNuYXBzaG90LCBfdGhpcy5jdXJyZW50Um91dGVyU3RhdGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5tZXJnZU1hcChmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR3VhcmRDaGVja3Moc3RhdGUuc25hcHNob3QsIF90aGlzLmN1cnJlbnRSb3V0ZXJTdGF0ZS5zbmFwc2hvdCwgX3RoaXMuaW5qZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgIC5jaGVjayhfdGhpcy5vdXRsZXRNYXApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc2hvdWxkQWN0aXZhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3VsZEFjdGl2YXRlIHx8IGlkICE9PSBfdGhpcy5uYXZpZ2F0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucm91dGVyRXZlbnRzLm5leHQobmV3IE5hdmlnYXRpb25DYW5jZWwoaWQsIF90aGlzLnNlcmlhbGl6ZVVybCh1cmwpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXcgQWN0aXZhdGVSb3V0ZXMoc3RhdGUsIF90aGlzLmN1cnJlbnRSb3V0ZXJTdGF0ZSkuYWN0aXZhdGUoX3RoaXMub3V0bGV0TWFwKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50VXJsVHJlZSA9IHVwZGF0ZWRVcmw7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFJvdXRlclN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50UHVzaFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gX3RoaXMudXJsU2VyaWFsaXplci5zZXJpYWxpemUodXBkYXRlZFVybCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5sb2NhdGlvbi5pc0N1cnJlbnRQYXRoRXF1YWxUbyhwYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9jYXRpb24ucmVwbGFjZVN0YXRlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9jYXRpb24uZ28ocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvdXRlckV2ZW50cy5uZXh0KG5ldyBOYXZpZ2F0aW9uRW5kKGlkLCBfdGhpcy5zZXJpYWxpemVVcmwodXJsKSwgX3RoaXMuc2VyaWFsaXplVXJsKHVwZGF0ZWRVcmwpKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UodHJ1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvdXRlckV2ZW50cy5uZXh0KG5ldyBOYXZpZ2F0aW9uRXJyb3IoaWQsIF90aGlzLnNlcmlhbGl6ZVVybCh1cmwpLCBlKSk7XG4gICAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZShlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBSb3V0ZXI7XG59KCkpO1xuZXhwb3J0cy5Sb3V0ZXIgPSBSb3V0ZXI7XG52YXIgQ2FuQWN0aXZhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbkFjdGl2YXRlKHJvdXRlKSB7XG4gICAgICAgIHRoaXMucm91dGUgPSByb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIENhbkFjdGl2YXRlO1xufSgpKTtcbnZhciBDYW5EZWFjdGl2YXRlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYW5EZWFjdGl2YXRlKGNvbXBvbmVudCwgcm91dGUpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMucm91dGUgPSByb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIENhbkRlYWN0aXZhdGU7XG59KCkpO1xudmFyIEd1YXJkQ2hlY2tzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHdWFyZENoZWNrcyhmdXR1cmUsIGN1cnIsIGluamVjdG9yKSB7XG4gICAgICAgIHRoaXMuZnV0dXJlID0gZnV0dXJlO1xuICAgICAgICB0aGlzLmN1cnIgPSBjdXJyO1xuICAgICAgICB0aGlzLmluamVjdG9yID0gaW5qZWN0b3I7XG4gICAgICAgIHRoaXMuY2hlY2tzID0gW107XG4gICAgfVxuICAgIEd1YXJkQ2hlY2tzLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uIChwYXJlbnRPdXRsZXRNYXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGZ1dHVyZVJvb3QgPSB0aGlzLmZ1dHVyZS5fcm9vdDtcbiAgICAgICAgdmFyIGN1cnJSb290ID0gdGhpcy5jdXJyID8gdGhpcy5jdXJyLl9yb290IDogbnVsbDtcbiAgICAgICAgdGhpcy50cmF2ZXJzZUNoaWxkUm91dGVzKGZ1dHVyZVJvb3QsIGN1cnJSb290LCBwYXJlbnRPdXRsZXRNYXApO1xuICAgICAgICBpZiAodGhpcy5jaGVja3MubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG9mXzEub2YodHJ1ZSk7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tKHRoaXMuY2hlY2tzKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgaWYgKHMgaW5zdGFuY2VvZiBDYW5BY3RpdmF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW5DYW5BY3RpdmF0ZShzLnJvdXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHMgaW5zdGFuY2VvZiBDYW5EZWFjdGl2YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJ1bkNhbkRlYWN0aXZhdGUocy5jb21wb25lbnQsIHMucm91dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYmUgcmVhY2hlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlQWxsKClcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQgPT09IHRydWU7IH0pO1xuICAgIH07XG4gICAgR3VhcmRDaGVja3MucHJvdG90eXBlLnRyYXZlcnNlQ2hpbGRSb3V0ZXMgPSBmdW5jdGlvbiAoZnV0dXJlTm9kZSwgY3Vyck5vZGUsIG91dGxldE1hcCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gbm9kZUNoaWxkcmVuQXNNYXAoY3Vyck5vZGUpO1xuICAgICAgICBmdXR1cmVOb2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIF90aGlzLnRyYXZlcnNlUm91dGVzKGMsIHByZXZDaGlsZHJlbltjLnZhbHVlLm91dGxldF0sIG91dGxldE1hcCk7XG4gICAgICAgICAgICBkZWxldGUgcHJldkNoaWxkcmVuW2MudmFsdWUub3V0bGV0XTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbGxlY3Rpb25fMS5mb3JFYWNoKHByZXZDaGlsZHJlbiwgZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIF90aGlzLmRlYWN0aXZhdGVPdXRsZXRBbmRJdENoaWxkcmVuKHYsIG91dGxldE1hcC5fb3V0bGV0c1trXSk7IH0pO1xuICAgIH07XG4gICAgR3VhcmRDaGVja3MucHJvdG90eXBlLnRyYXZlcnNlUm91dGVzID0gZnVuY3Rpb24gKGZ1dHVyZU5vZGUsIGN1cnJOb2RlLCBwYXJlbnRPdXRsZXRNYXApIHtcbiAgICAgICAgdmFyIGZ1dHVyZSA9IGZ1dHVyZU5vZGUudmFsdWU7XG4gICAgICAgIHZhciBjdXJyID0gY3Vyck5vZGUgPyBjdXJyTm9kZS52YWx1ZSA6IG51bGw7XG4gICAgICAgIHZhciBvdXRsZXQgPSBwYXJlbnRPdXRsZXRNYXAgPyBwYXJlbnRPdXRsZXRNYXAuX291dGxldHNbZnV0dXJlTm9kZS52YWx1ZS5vdXRsZXRdIDogbnVsbDtcbiAgICAgICAgaWYgKGN1cnIgJiYgZnV0dXJlLl9yb3V0ZUNvbmZpZyA9PT0gY3Vyci5fcm91dGVDb25maWcpIHtcbiAgICAgICAgICAgIGlmICghY29sbGVjdGlvbl8xLnNoYWxsb3dFcXVhbChmdXR1cmUucGFyYW1zLCBjdXJyLnBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrcy5wdXNoKG5ldyBDYW5EZWFjdGl2YXRlKG91dGxldC5jb21wb25lbnQsIGN1cnIpLCBuZXcgQ2FuQWN0aXZhdGUoZnV0dXJlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlQ2hpbGRSb3V0ZXMoZnV0dXJlTm9kZSwgY3Vyck5vZGUsIG91dGxldCA/IG91dGxldC5vdXRsZXRNYXAgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZU91dGxldEFuZEl0Q2hpbGRyZW4oY3Vyciwgb3V0bGV0KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzLnB1c2gobmV3IENhbkFjdGl2YXRlKGZ1dHVyZSkpO1xuICAgICAgICAgICAgdGhpcy50cmF2ZXJzZUNoaWxkUm91dGVzKGZ1dHVyZU5vZGUsIG51bGwsIG91dGxldCA/IG91dGxldC5vdXRsZXRNYXAgOiBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR3VhcmRDaGVja3MucHJvdG90eXBlLmRlYWN0aXZhdGVPdXRsZXRBbmRJdENoaWxkcmVuID0gZnVuY3Rpb24gKHJvdXRlLCBvdXRsZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG91dGxldCAmJiBvdXRsZXQuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5mb3JFYWNoKG91dGxldC5vdXRsZXRNYXAuX291dGxldHMsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVhY3RpdmF0ZU91dGxldEFuZEl0Q2hpbGRyZW4odi5hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdCwgdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrcy5wdXNoKG5ldyBDYW5EZWFjdGl2YXRlKG91dGxldC5jb21wb25lbnQsIHJvdXRlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEd1YXJkQ2hlY2tzLnByb3RvdHlwZS5ydW5DYW5BY3RpdmF0ZSA9IGZ1bmN0aW9uIChmdXR1cmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNhbkFjdGl2YXRlID0gZnV0dXJlLl9yb3V0ZUNvbmZpZyA/IGZ1dHVyZS5fcm91dGVDb25maWcuY2FuQWN0aXZhdGUgOiBudWxsO1xuICAgICAgICBpZiAoIWNhbkFjdGl2YXRlIHx8IGNhbkFjdGl2YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBvZl8xLm9mKHRydWUpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZnJvbShjYW5BY3RpdmF0ZSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciBndWFyZCA9IF90aGlzLmluamVjdG9yLmdldChjKTtcbiAgICAgICAgICAgIGlmIChndWFyZC5jYW5BY3RpdmF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwSW50b09ic2VydmFibGUoZ3VhcmQuY2FuQWN0aXZhdGUoZnV0dXJlLCBfdGhpcy5mdXR1cmUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwSW50b09ic2VydmFibGUoZ3VhcmQoZnV0dXJlLCBfdGhpcy5mdXR1cmUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5tZXJnZUFsbCgpXG4gICAgICAgICAgICAuZXZlcnkoZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0ID09PSB0cnVlOyB9KTtcbiAgICB9O1xuICAgIEd1YXJkQ2hlY2tzLnByb3RvdHlwZS5ydW5DYW5EZWFjdGl2YXRlID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgY3Vycikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2FuRGVhY3RpdmF0ZSA9IGN1cnIuX3JvdXRlQ29uZmlnID8gY3Vyci5fcm91dGVDb25maWcuY2FuRGVhY3RpdmF0ZSA6IG51bGw7XG4gICAgICAgIGlmICghY2FuRGVhY3RpdmF0ZSB8fCBjYW5EZWFjdGl2YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBvZl8xLm9mKHRydWUpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUuZnJvbShjYW5EZWFjdGl2YXRlKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgdmFyIGd1YXJkID0gX3RoaXMuaW5qZWN0b3IuZ2V0KGMpO1xuICAgICAgICAgICAgaWYgKGd1YXJkLmNhbkRlYWN0aXZhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcEludG9PYnNlcnZhYmxlKGd1YXJkLmNhbkRlYWN0aXZhdGUoY29tcG9uZW50LCBjdXJyLCBfdGhpcy5jdXJyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcEludG9PYnNlcnZhYmxlKGd1YXJkKGNvbXBvbmVudCwgY3VyciwgX3RoaXMuY3VycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlQWxsKClcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQgPT09IHRydWU7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEd1YXJkQ2hlY2tzO1xufSgpKTtcbmZ1bmN0aW9uIHdyYXBJbnRvT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBvZl8xLm9mKHZhbHVlKTtcbiAgICB9XG59XG52YXIgQWN0aXZhdGVSb3V0ZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFjdGl2YXRlUm91dGVzKGZ1dHVyZVN0YXRlLCBjdXJyU3RhdGUpIHtcbiAgICAgICAgdGhpcy5mdXR1cmVTdGF0ZSA9IGZ1dHVyZVN0YXRlO1xuICAgICAgICB0aGlzLmN1cnJTdGF0ZSA9IGN1cnJTdGF0ZTtcbiAgICB9XG4gICAgQWN0aXZhdGVSb3V0ZXMucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHBhcmVudE91dGxldE1hcCkge1xuICAgICAgICB2YXIgZnV0dXJlUm9vdCA9IHRoaXMuZnV0dXJlU3RhdGUuX3Jvb3Q7XG4gICAgICAgIHZhciBjdXJyUm9vdCA9IHRoaXMuY3VyclN0YXRlID8gdGhpcy5jdXJyU3RhdGUuX3Jvb3QgOiBudWxsO1xuICAgICAgICBwdXNoUXVlcnlQYXJhbXNBbmRGcmFnbWVudCh0aGlzLmZ1dHVyZVN0YXRlKTtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZUNoaWxkUm91dGVzKGZ1dHVyZVJvb3QsIGN1cnJSb290LCBwYXJlbnRPdXRsZXRNYXApO1xuICAgIH07XG4gICAgQWN0aXZhdGVSb3V0ZXMucHJvdG90eXBlLmFjdGl2YXRlQ2hpbGRSb3V0ZXMgPSBmdW5jdGlvbiAoZnV0dXJlTm9kZSwgY3Vyck5vZGUsIG91dGxldE1hcCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gbm9kZUNoaWxkcmVuQXNNYXAoY3Vyck5vZGUpO1xuICAgICAgICBmdXR1cmVOb2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2YXRlUm91dGVzKGMsIHByZXZDaGlsZHJlbltjLnZhbHVlLm91dGxldF0sIG91dGxldE1hcCk7XG4gICAgICAgICAgICBkZWxldGUgcHJldkNoaWxkcmVuW2MudmFsdWUub3V0bGV0XTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbGxlY3Rpb25fMS5mb3JFYWNoKHByZXZDaGlsZHJlbiwgZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIF90aGlzLmRlYWN0aXZhdGVPdXRsZXRBbmRJdENoaWxkcmVuKG91dGxldE1hcC5fb3V0bGV0c1trXSk7IH0pO1xuICAgIH07XG4gICAgQWN0aXZhdGVSb3V0ZXMucHJvdG90eXBlLmFjdGl2YXRlUm91dGVzID0gZnVuY3Rpb24gKGZ1dHVyZU5vZGUsIGN1cnJOb2RlLCBwYXJlbnRPdXRsZXRNYXApIHtcbiAgICAgICAgdmFyIGZ1dHVyZSA9IGZ1dHVyZU5vZGUudmFsdWU7XG4gICAgICAgIHZhciBjdXJyID0gY3Vyck5vZGUgPyBjdXJyTm9kZS52YWx1ZSA6IG51bGw7XG4gICAgICAgIHZhciBvdXRsZXQgPSBnZXRPdXRsZXQocGFyZW50T3V0bGV0TWFwLCBmdXR1cmVOb2RlLnZhbHVlKTtcbiAgICAgICAgaWYgKGZ1dHVyZSA9PT0gY3Vycikge1xuICAgICAgICAgICAgcm91dGVyX3N0YXRlXzEuYWR2YW5jZUFjdGl2YXRlZFJvdXRlKGZ1dHVyZSk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlQ2hpbGRSb3V0ZXMoZnV0dXJlTm9kZSwgY3Vyck5vZGUsIG91dGxldC5vdXRsZXRNYXApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlT3V0bGV0QW5kSXRDaGlsZHJlbihvdXRsZXQpO1xuICAgICAgICAgICAgdmFyIG91dGxldE1hcCA9IG5ldyByb3V0ZXJfb3V0bGV0X21hcF8xLlJvdXRlck91dGxldE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZU5ld1JvdXRlcyhvdXRsZXRNYXAsIGZ1dHVyZSwgb3V0bGV0KTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVDaGlsZFJvdXRlcyhmdXR1cmVOb2RlLCBudWxsLCBvdXRsZXRNYXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY3RpdmF0ZVJvdXRlcy5wcm90b3R5cGUuYWN0aXZhdGVOZXdSb3V0ZXMgPSBmdW5jdGlvbiAob3V0bGV0TWFwLCBmdXR1cmUsIG91dGxldCkge1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBjb3JlXzEuUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUoW1xuICAgICAgICAgICAgeyBwcm92aWRlOiByb3V0ZXJfc3RhdGVfMS5BY3RpdmF0ZWRSb3V0ZSwgdXNlVmFsdWU6IGZ1dHVyZSB9LFxuICAgICAgICAgICAgeyBwcm92aWRlOiByb3V0ZXJfb3V0bGV0X21hcF8xLlJvdXRlck91dGxldE1hcCwgdXNlVmFsdWU6IG91dGxldE1hcCB9XG4gICAgICAgIF0pO1xuICAgICAgICByb3V0ZXJfc3RhdGVfMS5hZHZhbmNlQWN0aXZhdGVkUm91dGUoZnV0dXJlKTtcbiAgICAgICAgb3V0bGV0LmFjdGl2YXRlKGZ1dHVyZS5fZnV0dXJlU25hcHNob3QuX3Jlc29sdmVkQ29tcG9uZW50RmFjdG9yeSwgZnV0dXJlLCByZXNvbHZlZCwgb3V0bGV0TWFwKTtcbiAgICB9O1xuICAgIEFjdGl2YXRlUm91dGVzLnByb3RvdHlwZS5kZWFjdGl2YXRlT3V0bGV0QW5kSXRDaGlsZHJlbiA9IGZ1bmN0aW9uIChvdXRsZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG91dGxldCAmJiBvdXRsZXQuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5mb3JFYWNoKG91dGxldC5vdXRsZXRNYXAuX291dGxldHMsIGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdGhpcy5kZWFjdGl2YXRlT3V0bGV0QW5kSXRDaGlsZHJlbih2KTsgfSk7XG4gICAgICAgICAgICBvdXRsZXQuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aXZhdGVSb3V0ZXM7XG59KCkpO1xuZnVuY3Rpb24gcHVzaFF1ZXJ5UGFyYW1zQW5kRnJhZ21lbnQoc3RhdGUpIHtcbiAgICBpZiAoIWNvbGxlY3Rpb25fMS5zaGFsbG93RXF1YWwoc3RhdGUuc25hcHNob3QucXVlcnlQYXJhbXMsIHN0YXRlLnF1ZXJ5UGFyYW1zLnZhbHVlKSkge1xuICAgICAgICBzdGF0ZS5xdWVyeVBhcmFtcy5uZXh0KHN0YXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLnNuYXBzaG90LmZyYWdtZW50ICE9PSBzdGF0ZS5mcmFnbWVudC52YWx1ZSkge1xuICAgICAgICBzdGF0ZS5mcmFnbWVudC5uZXh0KHN0YXRlLnNuYXBzaG90LmZyYWdtZW50KTtcbiAgICB9XG59XG5mdW5jdGlvbiBub2RlQ2hpbGRyZW5Bc01hcChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgPyBub2RlLmNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAobSwgYykge1xuICAgICAgICBtW2MudmFsdWUub3V0bGV0XSA9IGM7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH0sIHt9KSA6IHt9O1xufVxuZnVuY3Rpb24gZ2V0T3V0bGV0KG91dGxldE1hcCwgcm91dGUpIHtcbiAgICB2YXIgb3V0bGV0ID0gb3V0bGV0TWFwLl9vdXRsZXRzW3JvdXRlLm91dGxldF07XG4gICAgaWYgKCFvdXRsZXQpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSByb3V0ZS5jb21wb25lbnQubmFtZTtcbiAgICAgICAgaWYgKHJvdXRlLm91dGxldCA9PT0gc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHByaW1hcnkgb3V0bGV0IHRvIGxvYWQgJ1wiICsgY29tcG9uZW50TmFtZSArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHRoZSBvdXRsZXQgXCIgKyByb3V0ZS5vdXRsZXQgKyBcIiB0byBsb2FkICdcIiArIGNvbXBvbmVudE5hbWUgKyBcIidcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dGxldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwzSnZkWFJsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUVzVVVGQlR5eDFRa0ZCZFVJc1EwRkJReXhEUVVGQk8wRkJReTlDTEZGQlFVOHNkMEpCUVhkQ0xFTkJRVU1zUTBGQlFUdEJRVU5vUXl4UlFVRlBMRFJDUVVFMFFpeERRVUZETEVOQlFVRTdRVUZEY0VNc1VVRkJUeXd3UWtGQk1FSXNRMEZCUXl4RFFVRkJPMEZCUTJ4RExGRkJRVThzTmtKQlFUWkNMRU5CUVVNc1EwRkJRVHRCUVVOeVF5eFJRVUZQTEhsQ1FVRjVRaXhEUVVGRExFTkJRVUU3UVVGRGFrTXNVVUZCVHl3MFFrRkJORUlzUTBGQlF5eERRVUZCTzBGQlEzQkRMRkZCUVU4c01FSkJRVEJDTEVOQlFVTXNRMEZCUVR0QlFVZHNReXh4UWtGQmIwVXNaVUZCWlN4RFFVRkRMRU5CUVVFN1FVRkRjRVlzTWtKQlFYbENMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdRVUZETTBNc2QwSkJRWE5DTEdOQlFXTXNRMEZCUXl4RFFVRkJPMEZCUlhKRExHMUNRVUZyUWl4dlFrRkJiMElzUTBGQlF5eERRVUZCTzBGQlJYWkRMR2REUVVFMlFpeHRRa0ZCYlVJc1EwRkJReXhEUVVGQk8wRkJRMnBFTEhWQ1FVRXlReXhWUVVGVkxFTkJRVU1zUTBGQlFUdEJRVU4wUkN4dlEwRkJaME1zZFVKQlFYVkNMRU5CUVVNc1EwRkJRVHRCUVVONFJDeG5RMEZCTkVJc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0QlFVVm9SQ3d3UWtGQmQwSXNZVUZCWVN4RFFVRkRMRU5CUVVFN1FVRkRkRU1zZDBKQlFYTkNMRmRCUVZjc1EwRkJReXhEUVVGQk8wRkJRMnhETEd0RFFVRTRRaXh4UWtGQmNVSXNRMEZCUXl4RFFVRkJPMEZCUTNCRUxEWkNRVUZuU1N4blFrRkJaMElzUTBGQlF5eERRVUZCTzBGQlEycEtMSFZDUVVGeFF5eFZRVUZWTEVOQlFVTXNRMEZCUVR0QlFVVm9SQ3g1UWtGQk1FTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1FVRkRka1FzTWtKQlFXOURMRzlDUVVGdlFpeERRVUZETEVOQlFVRTdRVUZaZWtRN1NVRkRSU3g1UWtGQmJVSXNSVUZCVlN4RlFVRlRMRWRCUVZjN1VVRkJPVUlzVDBGQlJTeEhRVUZHTEVWQlFVVXNRMEZCVVR0UlFVRlRMRkZCUVVjc1IwRkJTQ3hIUVVGSExFTkJRVkU3U1VGQlJ5eERRVUZETzBsQlJYSkVMR3REUVVGUkxFZEJRVklzWTBGQmNVSXNUVUZCVFN4RFFVRkRMSGxDUVVGMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4blFrRkJWeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFBRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNSR0xITkNRVUZETzBGQlFVUXNRMEZCUXl4QlFVcEVMRWxCU1VNN1FVRktXU3gxUWtGQlpTeHJRa0ZKTTBJc1EwRkJRVHRCUVV0RU8wbEJRMFVzZFVKQlFXMUNMRVZCUVZVc1JVRkJVeXhIUVVGWExFVkJRVk1zYVVKQlFYbENPMUZCUVdoRkxFOUJRVVVzUjBGQlJpeEZRVUZGTEVOQlFWRTdVVUZCVXl4UlFVRkhMRWRCUVVnc1IwRkJSeXhEUVVGUk8xRkJRVk1zYzBKQlFXbENMRWRCUVdwQ0xHbENRVUZwUWl4RFFVRlJPMGxCUVVjc1EwRkJRenRKUVVWMlJpeG5RMEZCVVN4SFFVRlNPMUZCUTBVc1RVRkJUU3hEUVVGRExIVkNRVUZ4UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3huUWtGQlZ5eEpRVUZKTEVOQlFVTXNSMEZCUnl3clFrRkJNRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhQUVVGSkxFTkJRVU03U1VGRE4wY3NRMEZCUXp0SlFVTklMRzlDUVVGRE8wRkJRVVFzUTBGQlF5eEJRVTVFTEVsQlRVTTdRVUZPV1N4eFFrRkJZU3huUWtGTmVrSXNRMEZCUVR0QlFVdEVPMGxCUTBVc01FSkJRVzFDTEVWQlFWVXNSVUZCVXl4SFFVRlhPMUZCUVRsQ0xFOUJRVVVzUjBGQlJpeEZRVUZGTEVOQlFWRTdVVUZCVXl4UlFVRkhMRWRCUVVnc1IwRkJSeXhEUVVGUk8wbEJRVWNzUTBGQlF6dEpRVVZ5UkN4dFEwRkJVU3hIUVVGU0xHTkJRWEZDTEUxQlFVMHNRMEZCUXl3d1FrRkJkMElzU1VGQlNTeERRVUZETEVWQlFVVXNaMEpCUVZjc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTjJSaXgxUWtGQlF6dEJRVUZFTEVOQlFVTXNRVUZLUkN4SlFVbERPMEZCU2xrc2QwSkJRV2RDTEcxQ1FVazFRaXhEUVVGQk8wRkJTMFE3U1VGRFJTeDVRa0ZCYlVJc1JVRkJWU3hGUVVGVExFZEJRVmNzUlVGQlV5eExRVUZWTzFGQlFXcEVMRTlCUVVVc1IwRkJSaXhGUVVGRkxFTkJRVkU3VVVGQlV5eFJRVUZITEVkQlFVZ3NSMEZCUnl4RFFVRlJPMUZCUVZNc1ZVRkJTeXhIUVVGTUxFdEJRVXNzUTBGQlN6dEpRVUZITEVOQlFVTTdTVUZGZUVVc2EwTkJRVkVzUjBGQlVqdFJRVU5GTEUxQlFVMHNRMEZCUXl4NVFrRkJkVUlzU1VGQlNTeERRVUZETEVWQlFVVXNaMEpCUVZjc1NVRkJTU3hEUVVGRExFZEJRVWNzYTBKQlFXRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1RVRkJSeXhEUVVGRE8wbEJRM0pHTEVOQlFVTTdTVUZEU0N4elFrRkJRenRCUVVGRUxFTkJRVU1zUVVGT1JDeEpRVTFETzBGQlRsa3NkVUpCUVdVc2EwSkJUVE5DTEVOQlFVRTdRVUZMUkR0SlFVTkZMREJDUVVOWExFVkJRVlVzUlVGQlV5eEhRVUZYTEVWQlFWTXNhVUpCUVhsQ0xFVkJRMmhGTEV0QlFUQkNPMUZCUkRGQ0xFOUJRVVVzUjBGQlJpeEZRVUZGTEVOQlFWRTdVVUZCVXl4UlFVRkhMRWRCUVVnc1IwRkJSeXhEUVVGUk8xRkJRVk1zYzBKQlFXbENMRWRCUVdwQ0xHbENRVUZwUWl4RFFVRlJPMUZCUTJoRkxGVkJRVXNzUjBGQlRDeExRVUZMTEVOQlFYRkNPMGxCUVVjc1EwRkJRenRKUVVWNlF5eHRRMEZCVVN4SFFVRlNPMUZCUTBVc1RVRkJUU3hEUVVGRExEQkNRVUYzUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3huUWtGQlZ5eEpRVUZKTEVOQlFVTXNSMEZCUnl3clFrRkJNRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhyUWtGQllTeEpRVUZKTEVOQlFVTXNTMEZCU3l4TlFVRkhMRU5CUVVNN1NVRkRkRWtzUTBGQlF6dEpRVU5JTEhWQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVZKRUxFbEJVVU03UVVGU1dTeDNRa0ZCWjBJc2JVSkJVVFZDTEVOQlFVRTdRVUZQUkR0SlFWZEZMR2RDUVVOWkxHbENRVUYxUWl4RlFVRlZMRkZCUVRKQ0xFVkJRelZFTEdGQlFUUkNMRVZCUVZVc1UwRkJNRUlzUlVGRGFFVXNVVUZCYTBJc1JVRkJWU3hSUVVGclFpeEZRVUZGTEUxQlFXOUNPMUZCUm5CRkxITkNRVUZwUWl4SFFVRnFRaXhwUWtGQmFVSXNRMEZCVFR0UlFVRlZMR0ZCUVZFc1IwRkJVaXhSUVVGUkxFTkJRVzFDTzFGQlF6VkVMR3RDUVVGaExFZEJRV0lzWVVGQllTeERRVUZsTzFGQlFWVXNZMEZCVXl4SFFVRlVMRk5CUVZNc1EwRkJhVUk3VVVGRGFFVXNZVUZCVVN4SFFVRlNMRkZCUVZFc1EwRkJWVHRSUVVGVkxHRkJRVkVzUjBGQlVpeFJRVUZSTEVOQlFWVTdVVUZVYkVRc2FVSkJRVmtzUjBGQlZ5eERRVUZETEVOQlFVTTdVVUZWTDBJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NhVUpCUVU4c1JVRkJVeXhEUVVGRE8xRkJRM3BETEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc05rSkJRV3RDTEVWQlFVVXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc0swSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVNeFJpeERRVUZETzBsQlMwUXNhME5CUVdsQ0xFZEJRV3BDTzFGQlEwVXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeEZRVUZGTEVOQlFVTTdVVUZEYmtNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRE0wTXNRMEZCUXp0SlFVdEVMSE5DUVVGSkxDdENRVUZYTzJGQlFXWXNZMEZCYVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU03T3p0UFFVRkJPMGxCUzJ4RkxITkNRVUZKTEhWQ1FVRkhPMkZCUVZBc1kwRkJiMElzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXpzN08wOUJRVUU3U1VGTGNFVXNjMEpCUVVrc01FSkJRVTA3WVVGQlZpeGpRVUZyUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdPenRQUVVGQk8wbEJaMEkzUkN3MFFrRkJWeXhIUVVGWUxGVkJRVmtzVFVGQmIwSTdVVUZET1VJc2RVSkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTjJRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0SlFVTjJRaXhEUVVGRE8wbEJTMFFzZDBKQlFVOHNSMEZCVUN4alFVRnJRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQmFVTTFSQ3c0UWtGQllTeEhRVUZpTEZWQlFXTXNVVUZCWlN4RlFVRkZMRVZCUVRCRU8xbEJRVEZFTERSQ1FVRXdSQ3hGUVVGNlJDd3dRa0ZCVlN4RlFVRkZMRFJDUVVGWExFVkJRVVVzYzBKQlFWRTdVVUZGTDBRc1NVRkJUU3hEUVVGRExFZEJRVWNzVlVGQlZTeEhRVUZITEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU14UkN4TlFVRk5MRU5CUVVNc0swSkJRV0VzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTJoR0xFTkJRVU03U1VGblFrUXNPRUpCUVdFc1IwRkJZaXhWUVVGakxFZEJRVzFDTzFGQlF5OUNMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzV1VGQldTeHJRa0ZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVNM1F5eERRVUZETzFGQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRUaXhKUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU01UXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFJRVU5xUkN4RFFVRkRPMGxCUTBnc1EwRkJRenRKUVdsQ1JDeDVRa0ZCVVN4SFFVRlNMRlZCUVZNc1VVRkJaU3hGUVVGRkxFMUJRVFpDTzFGQlFUZENMSE5DUVVFMlFpeEhRVUUzUWl4WFFVRTJRanRSUVVOeVJDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUXpsRkxFTkJRVU03U1VGTFJDdzJRa0ZCV1N4SFFVRmFMRlZCUVdFc1IwRkJXU3hKUVVGWkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZMYUVZc2VVSkJRVkVzUjBGQlVpeFZRVUZUTEVkQlFWY3NTVUZCWVN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSV2hGTEcxRFFVRnJRaXhIUVVFeFFpeFZRVUV5UWl4SFFVRlpMRVZCUVVVc1owSkJRWGxDTzFGQlFXeEZMR2xDUVVsRE8xRkJTRU1zU1VGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJReTlDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzWlVGQlpTeERRVUZETEVWQlFVVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGRExFTkJRVU1zU1VGQlN5eFBRVUZCTEV0QlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVFelF5eERRVUV5UXl4RFFVRkRMRU5CUVVNN1NVRkRjRVlzUTBGQlF6dEpRVVZQTERSRFFVRXlRaXhIUVVGdVF6dFJRVUZCTEdsQ1FVbERPMUZCU0VNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRlJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFVTXNUVUZCVFR0WlFVTTVSQ3hOUVVGTkxFTkJRVU1zUzBGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFdEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BHTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWUExEUkNRVUZYTEVkQlFXNUNMRlZCUVc5Q0xFZEJRVmtzUlVGQlJTeG5Ra0ZCZVVJc1JVRkJSU3hGUVVGVk8xRkJRWFpGTEdsQ1FXOUZRenRSUVc1RlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETjBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRjRVVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla1VzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRGFFTXNRMEZCUXp0UlFVVkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eFZRVUZETEdOQlFXTXNSVUZCUlN4aFFVRmhPMWxCUXk5RExFbEJRVWtzVlVGQmJVSXNRMEZCUXp0WlFVTjRRaXhKUVVGSkxFdEJRV3RDTEVOQlFVTTdXVUZEZGtJc1owTkJRV01zUTBGQlF5eEhRVUZITEVWQlFVVXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRwUWtGRE0wSXNVVUZCVVN4RFFVRkRMRlZCUVVFc1EwRkJRenRuUWtGRFZDeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVObUxFMUJRVTBzUTBGQlF5eHhRa0ZCVXl4RFFVTmFMRXRCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4TFFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVlVzUlVGQlJTeExRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRFWXNRMEZCUXl4RFFVRkRPMmxDUVVWRUxGRkJRVkVzUTBGQlF5eFZRVUZETEhOQ1FVRnpRanRuUWtGREwwSXNTMEZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeG5Ra0ZCWjBJc1EwRkRka01zUlVGQlJTeEZRVUZGTEV0QlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUzBGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3h6UWtGQmMwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hHTEUxQlFVMHNRMEZCUXl4cFFrRkJUeXhEUVVGRExFdEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFpRVVY0UkN4RFFVRkRMRU5CUVVNN2FVSkJRMFFzUjBGQlJ5eERRVUZETEZWQlFVTXNiVUpCUVcxQ08yZENRVU4yUWl4TlFVRk5MRU5CUVVNc2RVTkJRV2xDTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzUzBGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03V1VGRmVrVXNRMEZCUXl4RFFVRkRPMmxDUVVORUxFZEJRVWNzUTBGQlF5eFZRVUZETEZGQlFYRkNPMmRDUVVONlFpeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRPMWxCUlc1Q0xFTkJRVU1zUTBGQlF6dHBRa0ZEUkN4UlFVRlJMRU5CUVVNc1ZVRkJRU3hEUVVGRE8yZENRVU5VTEUxQlFVMHNRMEZCUXl4SlFVRkpMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenR4UWtGRGJFWXNTMEZCU3l4RFFVRkRMRXRCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVVUzUWl4RFFVRkRMRU5CUVVNN2FVSkJRMFFzVDBGQlR5eERRVUZETEZWQlFVTXNZMEZCZFVJN1owSkJReTlDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhKUVVGSkxFVkJRVVVzUzBGQlN5eExRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGFFUXNTMEZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlEzcEZMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVOb1F5eERRVUZETzJkQ1FVVkVMRWxCUVVrc1kwRkJZeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8yZENRVVUxUlN4TFFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExGVkJRVlVzUTBGQlF6dG5Ra0ZEYWtNc1MwRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRXRCUVVzc1EwRkJRenRuUWtGRGFFTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM1JDTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMjlDUVVOd1JDeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZETjBNc1MwRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMjVETEVOQlFVTTdiMEpCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03ZDBKQlEwNHNTMEZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUTNwQ0xFTkJRVU03WjBKQlEwZ3NRMEZCUXp0blFrRkRSQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVNdlFpeERRVUZETEVOQlFVTTdhVUpCUTBRc1NVRkJTU3hEUVVORU8yZENRVU5GTEV0QlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVOc1FpeEpRVUZKTEdGQlFXRXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRiRVlzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUlhaQ0xFTkJRVU1zUlVGRFJDeFZRVUZCTEVOQlFVTTdaMEpCUTBNc1MwRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4bFFVRmxMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETTBVc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMklzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUTBnc1lVRkJRenRCUVVGRUxFTkJRVU1zUVVFNVQwUXNTVUU0VDBNN1FVRTVUMWtzWTBGQlRTeFRRVGhQYkVJc1EwRkJRVHRCUVVWRU8wbEJRMFVzY1VKQlFXMUNMRXRCUVRaQ08xRkJRVGRDTEZWQlFVc3NSMEZCVEN4TFFVRkxMRU5CUVhkQ08wbEJRVWNzUTBGQlF6dEpRVU4wUkN4clFrRkJRenRCUVVGRUxFTkJRVU1zUVVGR1JDeEpRVVZETzBGQlEwUTdTVUZEUlN4MVFrRkJiVUlzVTBGQmFVSXNSVUZCVXl4TFFVRTJRanRSUVVGMlJDeGpRVUZUTEVkQlFWUXNVMEZCVXl4RFFVRlJPMUZCUVZNc1ZVRkJTeXhIUVVGTUxFdEJRVXNzUTBGQmQwSTdTVUZCUnl4RFFVRkRPMGxCUTJoR0xHOUNRVUZETzBGQlFVUXNRMEZCUXl4QlFVWkVMRWxCUlVNN1FVRkZSRHRKUVVWRkxIRkNRVU5aTEUxQlFUSkNMRVZCUVZVc1NVRkJlVUlzUlVGRE9VUXNVVUZCYTBJN1VVRkViRUlzVjBGQlRTeEhRVUZPTEUxQlFVMHNRMEZCY1VJN1VVRkJWU3hUUVVGSkxFZEJRVW9zU1VGQlNTeERRVUZ4UWp0UlFVTTVSQ3hoUVVGUkxFZEJRVklzVVVGQlVTeERRVUZWTzFGQlNIUkNMRmRCUVUwc1IwRkJjVU1zUlVGQlJTeERRVUZETzBsQlIzSkNMRU5CUVVNN1NVRkZiRU1zTWtKQlFVc3NSMEZCVEN4VlFVRk5MR1ZCUVdkRE8xRkJRWFJETEdsQ1FXdENRenRSUVdwQ1F5eEpRVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU55UXl4SlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU53UkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hsUVVGbExFTkJRVU1zUTBGQlF6dFJRVU5vUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkJReXhOUVVGTkxFTkJRVU1zVDBGQlJTeERRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUlM5RExFMUJRVTBzUTBGQlF5eDFRa0ZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzJGQlF6bENMRWRCUVVjc1EwRkJReXhWUVVGQkxFTkJRVU03V1VGRFNpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETjBJc1RVRkJUU3hEUVVGRExFdEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRM1JETEVOQlFVTTdXVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM1JETEUxQlFVMHNRMEZCUXl4TFFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEY2tRc1EwRkJRenRaUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTk9MRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRaUVVOMlF5eERRVUZETzFGQlEwZ3NRMEZCUXl4RFFVRkRPMkZCUTBRc1VVRkJVU3hGUVVGRk8yRkJRMVlzUzBGQlN5eERRVUZETEZWQlFVRXNUVUZCVFN4SlFVRkpMRTlCUVVFc1RVRkJUU3hMUVVGTExFbEJRVWtzUlVGQlppeERRVUZsTEVOQlFVTXNRMEZCUXp0SlFVTjRReXhEUVVGRE8wbEJSVThzZVVOQlFXMUNMRWRCUVROQ0xGVkJRMGtzVlVGQk5FTXNSVUZCUlN4UlFVRXdReXhGUVVONFJpeFRRVUV3UWp0UlFVWTVRaXhwUWtGWFF6dFJRVkpETEVsQlFVMHNXVUZCV1N4SFFVRjVRaXhwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVOMlJTeFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFTkJRVU03V1VGRE0wSXNTMEZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdXVUZEYUVVc1QwRkJUeXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOMFF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRzlDUVVGUExFTkJRMGdzV1VGQldTeEZRVU5hTEZWQlFVTXNRMEZCVFN4RlFVRkZMRU5CUVZNc1NVRkJTeXhQUVVGQkxFdEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhEUVVGRExFVkJRVVVzVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVFMVJDeERRVUUwUkN4RFFVRkRMRU5CUVVNN1NVRkRNMFlzUTBGQlF6dEpRVVZFTEc5RFFVRmpMRWRCUVdRc1ZVRkRTU3hWUVVFMFF5eEZRVUZGTEZGQlFUQkRMRVZCUTNoR0xHVkJRV2RETzFGQlEyeERMRWxCUVUwc1RVRkJUU3hIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEYUVNc1NVRkJUU3hKUVVGSkxFZEJRVWNzVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRemxETEVsQlFVMHNUVUZCVFN4SFFVRkhMR1ZCUVdVc1IwRkJSeXhsUVVGbExFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlJURkdMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeE5RVUZOTEVOQlFVTXNXVUZCV1N4TFFVRkxMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzUkVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zZVVKQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRemxETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExFVkJRVVVzU1VGQlNTeFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlJpeERRVUZETzFsQlEwUXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZWQlFWVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRia1lzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTA0c1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU5xUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRekZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXk5RkxFTkJRVU03U1VGRFNDeERRVUZETzBsQlJVOHNiVVJCUVRaQ0xFZEJRWEpETEZWQlFYTkRMRXRCUVRaQ0xFVkJRVVVzVFVGQmIwSTdVVUZCZWtZc2FVSkJVME03VVVGU1F5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtNc2IwSkJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGRExFTkJRV1U3WjBKQlEycEVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOc1FpeExRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU1zUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEyNUZMRU5CUVVNN1dVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU12UkN4RFFVRkRPMGxCUTBnc1EwRkJRenRKUVVWUExHOURRVUZqTEVkQlFYUkNMRlZCUVhWQ0xFMUJRVGhDTzFGQlFYSkVMR2xDUVdORE8xRkJZa01zU1VGQlRTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRha1lzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1YwRkJWeXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTTdXVUZCUXl4TlFVRk5MRU5CUVVNc1QwRkJSU3hEUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF5OUVMRTFCUVUwc1EwRkJReXgxUWtGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNN1lVRkRPVUlzUjBGQlJ5eERRVUZETEZWQlFVRXNRMEZCUXp0WlFVTktMRWxCUVUwc1MwRkJTeXhIUVVGSExFdEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVETEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTjBRaXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNFVXNRMEZCUXp0WlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU5PTEUxQlFVMHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzaEVMRU5CUVVNN1VVRkRTQ3hEUVVGRExFTkJRVU03WVVGRFJDeFJRVUZSTEVWQlFVVTdZVUZEVml4TFFVRkxMRU5CUVVNc1ZVRkJRU3hOUVVGTkxFbEJRVWtzVDBGQlFTeE5RVUZOTEV0QlFVc3NTVUZCU1N4RlFVRm1MRU5CUVdVc1EwRkJReXhEUVVGRE8wbEJRM2hETEVOQlFVTTdTVUZGVHl4elEwRkJaMElzUjBGQmVFSXNWVUZCZVVJc1UwRkJhVUlzUlVGQlJTeEpRVUUwUWp0UlFVRjRSU3hwUWtGalF6dFJRV0pETEVsQlFVMHNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRMnBHTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1lVRkJZU3hKUVVGSkxHRkJRV0VzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUVVNc1RVRkJUU3hEUVVGRExFOUJRVVVzUTBGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnVSU3hOUVVGTkxFTkJRVU1zZFVKQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRE8yRkJRMmhETEVkQlFVY3NRMEZCUXl4VlFVRkJMRU5CUVVNN1dVRkRTaXhKUVVGTkxFdEJRVXNzUjBGQlJ5eExRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRlRUlzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTNSU3hEUVVGRE8xbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUTA0c1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJReTlFTEVOQlFVTTdVVUZEU0N4RFFVRkRMRU5CUVVNN1lVRkRSQ3hSUVVGUkxFVkJRVVU3WVVGRFZpeExRVUZMTEVOQlFVTXNWVUZCUVN4TlFVRk5MRWxCUVVrc1QwRkJRU3hOUVVGTkxFdEJRVXNzU1VGQlNTeEZRVUZtTEVOQlFXVXNRMEZCUXl4RFFVRkRPMGxCUTNoRExFTkJRVU03U1VGRFNDeHJRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRndSMFFzU1VGdlIwTTdRVUZGUkN3MFFrRkJLMElzUzBGQmQwSTdTVUZEY2tRc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eFpRVUZaTEhWQ1FVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMmhETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRaaXhEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4TlFVRk5MRU5CUVVNc1QwRkJSU3hEUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEzQkNMRU5CUVVNN1FVRkRTQ3hEUVVGRE8wRkJSVVE3U1VGRFJTeDNRa0ZCYjBJc1YwRkJkMElzUlVGQlZTeFRRVUZ6UWp0UlFVRjRSQ3huUWtGQlZ5eEhRVUZZTEZkQlFWY3NRMEZCWVR0UlFVRlZMR05CUVZNc1IwRkJWQ3hUUVVGVExFTkJRV0U3U1VGQlJ5eERRVUZETzBsQlJXaEdMR2xEUVVGUkxFZEJRVklzVlVGQlV5eGxRVUZuUXp0UlFVTjJReXhKUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVNeFF5eEpRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVVNVJDd3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZETjBNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTTdTVUZEYkVVc1EwRkJRenRKUVVWUExEUkRRVUZ0UWl4SFFVRXpRaXhWUVVOSkxGVkJRVzlETEVWQlFVVXNVVUZCYTBNc1JVRkRlRVVzVTBGQk1FSTdVVUZHT1VJc2FVSkJWME03VVVGU1F5eEpRVUZOTEZsQlFWa3NSMEZCZVVJc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRka1VzVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hEUVVGRE8xbEJRek5DTEV0QlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzFsQlEyaEZMRTlCUVU4c1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRkRU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4dlFrRkJUeXhEUVVOSUxGbEJRVmtzUlVGRFdpeFZRVUZETEVOQlFVMHNSVUZCUlN4RFFVRlRMRWxCUVVzc1QwRkJRU3hMUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRjZSQ3hEUVVGNVJDeERRVUZETEVOQlFVTTdTVUZEZUVZc1EwRkJRenRKUVVWRUxIVkRRVUZqTEVkQlFXUXNWVUZEU1N4VlFVRnZReXhGUVVGRkxGRkJRV3RETEVWQlEzaEZMR1ZCUVdkRE8xRkJRMnhETEVsQlFVMHNUVUZCVFN4SFFVRkhMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGFFTXNTVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUlRsRExFbEJRVTBzVFVGQlRTeEhRVUZITEZOQlFWTXNRMEZCUXl4bFFVRmxMRVZCUVVVc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlJUVkVMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNCQ0xHOURRVUZ4UWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xbEJRemxDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFZRVUZWTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU51UlN4RFFVRkRPMUZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRFRpeEpRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZETTBNc1NVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeHRRMEZCWlN4RlFVRkZMRU5CUVVNN1dVRkRlRU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGTkJRVk1zUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkRiRVFzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRlRVFzUTBGQlF6dEpRVU5JTEVOQlFVTTdTVUZGVHl3d1EwRkJhVUlzUjBGQmVrSXNWVUZEU1N4VFFVRXdRaXhGUVVGRkxFMUJRWE5DTEVWQlFVVXNUVUZCYjBJN1VVRkRNVVVzU1VGQlRTeFJRVUZSTEVkQlFVY3NlVUpCUVd0Q0xFTkJRVU1zVDBGQlR5eERRVUZETzFsQlF6RkRMRVZCUVVNc1QwRkJUeXhGUVVGRkxEWkNRVUZqTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJRenRaUVVNelF5eEZRVUZETEU5QlFVOHNSVUZCUlN4dFEwRkJaU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFRRVUZUTEVWQlFVTTdVMEZEYUVRc1EwRkJReXhEUVVGRE8xRkJRMGdzYjBOQlFYRkNMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRE9VSXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEhsQ1FVRjVRaXhGUVVGRkxFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1NVRkRha2NzUTBGQlF6dEpRVVZQTEhORVFVRTJRaXhIUVVGeVF5eFZRVUZ6UXl4TlFVRnZRanRSUVVFeFJDeHBRa0ZOUXp0UlFVeERMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOcVF5eHZRa0ZCVHl4RFFVTklMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVTXNRMEZCWlN4SlFVRkxMRTlCUVVFc1MwRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGeVF5eERRVUZ4UXl4RFFVRkRMRU5CUVVNN1dVRkRNMFlzVFVGQlRTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMUZCUTNSQ0xFTkJRVU03U1VGRFNDeERRVUZETzBsQlEwZ3NjVUpCUVVNN1FVRkJSQ3hEUVVGRExFRkJOVVJFTEVsQk5FUkRPMEZCUlVRc2IwTkJRVzlETEV0QlFXdENPMGxCUTNCRUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNlVUpCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCVVN4TFFVRkxMRU5CUVVNc1YwRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hMUVVGTExFTkJRVU1zVjBGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBsQlF6VkVMRU5CUVVNN1NVRkZSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1MwRkJWeXhMUVVGTExFTkJRVU1zVVVGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRVFzUzBGQlN5eERRVUZETEZGQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTjBSQ3hEUVVGRE8wRkJRMGdzUTBGQlF6dEJRVVZFTERKQ1FVRXlRaXhKUVVGdFFqdEpRVU0xUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVVNc1EwRkJUU3hGUVVGRkxFTkJRV2RDTzFGQlF6RkVMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOMFFpeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFnc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmtMRU5CUVVNN1FVRkZSQ3h0UWtGQmJVSXNVMEZCTUVJc1JVRkJSU3hMUVVGeFFqdEpRVU5zUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVNNVF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFdpeEpRVUZOTEdGQlFXRXNSMEZCVXl4TFFVRkxMRU5CUVVNc1UwRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5zUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeExRVUZMTEhWQ1FVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0JETEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2VVTkJRWFZETEdGQlFXRXNUVUZCUnl4RFFVRkRMRU5CUVVNN1VVRkRNMFVzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTA0c1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5dzBRa0ZCTUVJc1MwRkJTeXhEUVVGRExFMUJRVTBzYTBKQlFXRXNZVUZCWVN4TlFVRkhMRU5CUVVNc1EwRkJRenRSUVVOMlJpeERRVUZETzBsQlEwZ3NRMEZCUXp0SlFVTkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENBbmNuaHFjeTloWkdRdmIzQmxjbUYwYjNJdmJXRndKenRjYm1sdGNHOXlkQ0FuY25ocWN5OWhaR1F2YjNCbGNtRjBiM0l2YzJOaGJpYzdYRzVwYlhCdmNuUWdKM0o0YW5NdllXUmtMMjl3WlhKaGRHOXlMMjFsY21kbFRXRndKenRjYm1sdGNHOXlkQ0FuY25ocWN5OWhaR1F2YjNCbGNtRjBiM0l2WTI5dVkyRjBKenRjYm1sdGNHOXlkQ0FuY25ocWN5OWhaR1F2YjNCbGNtRjBiM0l2WTI5dVkyRjBUV0Z3Snp0Y2JtbHRjRzl5ZENBbmNuaHFjeTloWkdRdmIzQmxjbUYwYjNJdlpYWmxjbmtuTzF4dWFXMXdiM0owSUNkeWVHcHpMMkZrWkM5dmNHVnlZWFJ2Y2k5dFpYSm5aVUZzYkNjN1hHNXBiWEJ2Y25RZ0ozSjRhbk12WVdSa0wyOWljMlZ5ZG1GaWJHVXZabkp2YlNjN1hHNWNibWx0Y0c5eWRDQjdURzlqWVhScGIyNTlJR1p5YjIwZ0owQmhibWQxYkdGeUwyTnZiVzF2YmljN1hHNXBiWEJ2Y25RZ2UwTnZiWEJ2Ym1WdWRGSmxjMjlzZG1WeUxDQkpibXBsWTNSdmNpd2dVbVZtYkdWamRHbDJaVWx1YW1WamRHOXlMQ0JVZVhCbGZTQm1jbTl0SUNkQVlXNW5kV3hoY2k5amIzSmxKenRjYm1sdGNHOXlkQ0I3VDJKelpYSjJZV0pzWlgwZ1puSnZiU0FuY25ocWN5OVBZbk5sY25aaFlteGxKenRjYm1sdGNHOXlkQ0I3VTNWaWFtVmpkSDBnWm5KdmJTQW5jbmhxY3k5VGRXSnFaV04wSnp0Y2JtbHRjRzl5ZENCN1UzVmljMk55YVhCMGFXOXVmU0JtY205dElDZHllR3B6TDFOMVluTmpjbWx3ZEdsdmJpYzdYRzVwYlhCdmNuUWdlMjltSUgwZ1puSnZiU0FuY25ocWN5OXZZbk5sY25aaFlteGxMMjltSnp0Y2JseHVhVzF3YjNKMElIdGhjSEJzZVZKbFpHbHlaV04wYzMwZ1puSnZiU0FuTGk5aGNIQnNlVjl5WldScGNtVmpkSE1uTzF4dWFXMXdiM0owSUh0U2IzVjBaWEpEYjI1bWFXY3NJSFpoYkdsa1lYUmxRMjl1Wm1sbmZTQm1jbTl0SUNjdUwyTnZibVpwWnljN1hHNXBiWEJ2Y25RZ2UyTnlaV0YwWlZKdmRYUmxjbE4wWVhSbGZTQm1jbTl0SUNjdUwyTnlaV0YwWlY5eWIzVjBaWEpmYzNSaGRHVW5PMXh1YVcxd2IzSjBJSHRqY21WaGRHVlZjbXhVY21WbGZTQm1jbTl0SUNjdUwyTnlaV0YwWlY5MWNteGZkSEpsWlNjN1hHNXBiWEJ2Y25RZ2UxSnZkWFJsY2s5MWRHeGxkSDBnWm5KdmJTQW5MaTlrYVhKbFkzUnBkbVZ6TDNKdmRYUmxjbDl2ZFhSc1pYUW5PMXh1YVcxd2IzSjBJSHR5WldOdloyNXBlbVY5SUdaeWIyMGdKeTR2Y21WamIyZHVhWHBsSnp0Y2JtbHRjRzl5ZENCN2NtVnpiMngyWlgwZ1puSnZiU0FuTGk5eVpYTnZiSFpsSnp0Y2JtbHRjRzl5ZENCN1VtOTFkR1Z5VDNWMGJHVjBUV0Z3ZlNCbWNtOXRJQ2N1TDNKdmRYUmxjbDl2ZFhSc1pYUmZiV0Z3Snp0Y2JtbHRjRzl5ZENCN1FXTjBhWFpoZEdWa1VtOTFkR1VzSUVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUXNJRkp2ZFhSbGNsTjBZWFJsTENCU2IzVjBaWEpUZEdGMFpWTnVZWEJ6YUc5MExDQmhaSFpoYm1ObFFXTjBhWFpoZEdWa1VtOTFkR1VzSUdOeVpXRjBaVVZ0Y0hSNVUzUmhkR1Y5SUdaeWIyMGdKeTR2Y205MWRHVnlYM04wWVhSbEp6dGNibWx0Y0c5eWRDQjdVRkpKVFVGU1dWOVBWVlJNUlZRc0lGQmhjbUZ0YzMwZ1puSnZiU0FuTGk5emFHRnlaV1FuTzF4dWFXMXdiM0owSUh0VmNteFRaWEpwWVd4cGVtVnlmU0JtY205dElDY3VMM1Z5YkY5elpYSnBZV3hwZW1WeUp6dGNibWx0Y0c5eWRDQjdWWEpzVkhKbFpTd2dZM0psWVhSbFJXMXdkSGxWY214VWNtVmxmU0JtY205dElDY3VMM1Z5YkY5MGNtVmxKenRjYm1sdGNHOXlkQ0I3Wm05eVJXRmphQ3dnYzJoaGJHeHZkMFZ4ZFdGc2ZTQm1jbTl0SUNjdUwzVjBhV3h6TDJOdmJHeGxZM1JwYjI0bk8xeHVhVzF3YjNKMElIdFVjbVZsVG05a1pYMGdabkp2YlNBbkxpOTFkR2xzY3k5MGNtVmxKenRjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCT1lYWnBaMkYwYVc5dVJYaDBjbUZ6SUh0Y2JpQWdjbVZzWVhScGRtVlViejg2SUVGamRHbDJZWFJsWkZKdmRYUmxPMXh1SUNCeGRXVnllVkJoY21GdGN6ODZJRkJoY21GdGN6dGNiaUFnWm5KaFoyMWxiblEvT2lCemRISnBibWM3WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkSEpwWjJkbGNtVmtJSGRvWlc0Z1lTQnVZWFpwWjJGMGFXOXVJSE4wWVhKMGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdUbUYyYVdkaGRHbHZibE4wWVhKMElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2NIVmliR2xqSUdsa09pQnVkVzFpWlhJc0lIQjFZbXhwWXlCMWNtdzZJSE4wY21sdVp5a2dlMzFjYmx4dUlDQjBiMU4wY21sdVp5Z3BPaUJ6ZEhKcGJtY2dleUJ5WlhSMWNtNGdZRTVoZG1sbllYUnBiMjVUZEdGeWRDaHBaRG9nSkh0MGFHbHpMbWxrZlN3Z2RYSnNPaUFuSkh0MGFHbHpMblZ5YkgwbktXQTdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBjbWxuWjJWeVpXUWdkMmhsYmlCaElHNWhkbWxuWVhScGIyNGdaVzVrY3lCemRXTmpaWE56Wm5Wc2JIbGNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTVoZG1sbllYUnBiMjVGYm1RZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lod2RXSnNhV01nYVdRNklHNTFiV0psY2l3Z2NIVmliR2xqSUhWeWJEb2djM1J5YVc1bkxDQndkV0pzYVdNZ2RYSnNRV1owWlhKU1pXUnBjbVZqZEhNNklITjBjbWx1WnlrZ2UzMWNibHh1SUNCMGIxTjBjbWx1WnlncE9pQnpkSEpwYm1jZ2UxeHVJQ0FnSUhKbGRIVnliaUJnVG1GMmFXZGhkR2x2YmtWdVpDaHBaRG9nSkh0MGFHbHpMbWxrZlN3Z2RYSnNPaUFuSkh0MGFHbHpMblZ5YkgwbkxDQjFjbXhCWm5SbGNsSmxaR2x5WldOMGN6b2dKeVI3ZEdocGN5NTFjbXhCWm5SbGNsSmxaR2x5WldOMGMzMG5LV0E3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGNtbG5aMlZ5WldRZ2QyaGxiaUJoSUc1aGRtbG5ZWFJwYjI0Z2FYTWdZMkZ1WTJWc1pXUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTVoZG1sbllYUnBiMjVEWVc1alpXd2dlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdkV0pzYVdNZ2FXUTZJRzUxYldKbGNpd2djSFZpYkdsaklIVnliRG9nYzNSeWFXNW5LU0I3ZlZ4dVhHNGdJSFJ2VTNSeWFXNW5LQ2s2SUhOMGNtbHVaeUI3SUhKbGRIVnliaUJnVG1GMmFXZGhkR2x2YmtOaGJtTmxiQ2hwWkRvZ0pIdDBhR2x6TG1sa2ZTd2dkWEpzT2lBbkpIdDBhR2x6TG5WeWJIMG5LV0E3SUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwY21sbloyVnlaV1FnZDJobGJpQmhJRzVoZG1sbllYUnBiMjRnWm1GcGJITWdaSFZsSUhSdklIVnVaWGh3WldOMFpXUWdaWEp5YjNKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFNWhkbWxuWVhScGIyNUZjbkp2Y2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCMVlteHBZeUJwWkRvZ2JuVnRZbVZ5TENCd2RXSnNhV01nZFhKc09pQnpkSEpwYm1jc0lIQjFZbXhwWXlCbGNuSnZjam9nWVc1NUtTQjdmVnh1WEc0Z0lIUnZVM1J5YVc1bktDazZJSE4wY21sdVp5QjdYRzRnSUNBZ2NtVjBkWEp1SUdCT1lYWnBaMkYwYVc5dVJYSnliM0lvYVdRNklDUjdkR2hwY3k1cFpIMHNJSFZ5YkRvZ0p5UjdkR2hwY3k1MWNteDlKeXdnWlhKeWIzSTZJQ1I3ZEdocGN5NWxjbkp2Y24wcFlEdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJ5YVdkblpYSmxaQ0IzYUdWdUlISnZkWFJsY3lCaGNtVWdjbVZqYjJkdWFYcGxaRnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVW05MWRHVnpVbVZqYjJkdWFYcGxaQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdjSFZpYkdsaklHbGtPaUJ1ZFcxaVpYSXNJSEIxWW14cFl5QjFjbXc2SUhOMGNtbHVaeXdnY0hWaWJHbGpJSFZ5YkVGbWRHVnlVbVZrYVhKbFkzUnpPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQndkV0pzYVdNZ2MzUmhkR1U2SUZKdmRYUmxjbE4wWVhSbFUyNWhjSE5vYjNRcElIdDlYRzVjYmlBZ2RHOVRkSEpwYm1jb0tUb2djM1J5YVc1bklIdGNiaUFnSUNCeVpYUjFjbTRnWUZKdmRYUmxjMUpsWTI5bmJtbDZaV1FvYVdRNklDUjdkR2hwY3k1cFpIMHNJSFZ5YkRvZ0p5UjdkR2hwY3k1MWNteDlKeXdnZFhKc1FXWjBaWEpTWldScGNtVmpkSE02SUNja2UzUm9hWE11ZFhKc1FXWjBaWEpTWldScGNtVmpkSE45Snl3Z2MzUmhkR1U2SUNSN2RHaHBjeTV6ZEdGMFpYMHBZRHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnZEhsd1pTQkZkbVZ1ZENBOUlFNWhkbWxuWVhScGIyNVRkR0Z5ZENCOElFNWhkbWxuWVhScGIyNUZibVFnZkNCT1lYWnBaMkYwYVc5dVEyRnVZMlZzSUh3Z1RtRjJhV2RoZEdsdmJrVnljbTl5TzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JnVW05MWRHVnlZQ0JwY3lCeVpYTndiMjV6YVdKc1pTQm1iM0lnYldGd2NHbHVaeUJWVWt4eklIUnZJR052YlhCdmJtVnVkSE11WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCU2IzVjBaWElnZTF4dUlDQndjbWwyWVhSbElHTjFjbkpsYm5SVmNteFVjbVZsT2lCVmNteFVjbVZsTzF4dUlDQndjbWwyWVhSbElHTjFjbkpsYm5SU2IzVjBaWEpUZEdGMFpUb2dVbTkxZEdWeVUzUmhkR1U3WEc0Z0lIQnlhWFpoZEdVZ2JHOWpZWFJwYjI1VGRXSnpZM0pwY0hScGIyNDZJRk4xWW5OamNtbHdkR2x2Ymp0Y2JpQWdjSEpwZG1GMFpTQnliM1YwWlhKRmRtVnVkSE02SUZOMVltcGxZM1E4UlhabGJuUStPMXh1SUNCd2NtbDJZWFJsSUc1aGRtbG5ZWFJwYjI1SlpEb2diblZ0WW1WeUlEMGdNRHRjYmlBZ2NISnBkbUYwWlNCamIyNW1hV2M2SUZKdmRYUmxja052Ym1acFp6dGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJSEJ5YVhaaGRHVWdjbTl2ZEVOdmJYQnZibVZ1ZEZSNWNHVTZJRlI1Y0dVc0lIQnlhWFpoZEdVZ2NtVnpiMngyWlhJNklFTnZiWEJ2Ym1WdWRGSmxjMjlzZG1WeUxGeHVJQ0FnSUNBZ2NISnBkbUYwWlNCMWNteFRaWEpwWVd4cGVtVnlPaUJWY214VFpYSnBZV3hwZW1WeUxDQndjbWwyWVhSbElHOTFkR3hsZEUxaGNEb2dVbTkxZEdWeVQzVjBiR1YwVFdGd0xGeHVJQ0FnSUNBZ2NISnBkbUYwWlNCc2IyTmhkR2x2YmpvZ1RHOWpZWFJwYjI0c0lIQnlhWFpoZEdVZ2FXNXFaV04wYjNJNklFbHVhbVZqZEc5eUxDQmpiMjVtYVdjNklGSnZkWFJsY2tOdmJtWnBaeWtnZTF4dUlDQWdJSFJvYVhNdWNtVnpaWFJEYjI1bWFXY29ZMjl1Wm1sbktUdGNiaUFnSUNCMGFHbHpMbkp2ZFhSbGNrVjJaVzUwY3lBOUlHNWxkeUJUZFdKcVpXTjBQRVYyWlc1MFBpZ3BPMXh1SUNBZ0lIUm9hWE11WTNWeWNtVnVkRlZ5YkZSeVpXVWdQU0JqY21WaGRHVkZiWEIwZVZWeWJGUnlaV1VvS1R0Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5SU2IzVjBaWEpUZEdGMFpTQTlJR055WldGMFpVVnRjSFI1VTNSaGRHVW9kR2hwY3k1amRYSnlaVzUwVlhKc1ZISmxaU3dnZEdocGN5NXliMjkwUTI5dGNHOXVaVzUwVkhsd1pTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCcGJtbDBhV0ZzVG1GMmFXZGhkR2x2YmlncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxuTmxkRlZ3VEc5allYUnBiMjVEYUdGdVoyVk1hWE4wWlc1bGNpZ3BPMXh1SUNBZ0lIUm9hWE11Ym1GMmFXZGhkR1ZDZVZWeWJDaDBhR2x6TG14dlkyRjBhVzl1TG5CaGRHZ29LU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdZM1Z5Y21WdWRDQnliM1YwWlNCemRHRjBaUzVjYmlBZ0lDb3ZYRzRnSUdkbGRDQnliM1YwWlhKVGRHRjBaU2dwT2lCU2IzVjBaWEpUZEdGMFpTQjdJSEpsZEhWeWJpQjBhR2x6TG1OMWNuSmxiblJTYjNWMFpYSlRkR0YwWlRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQmpkWEp5Wlc1MElIVnliQzVjYmlBZ0lDb3ZYRzRnSUdkbGRDQjFjbXdvS1RvZ2MzUnlhVzVuSUhzZ2NtVjBkWEp1SUhSb2FYTXVjMlZ5YVdGc2FYcGxWWEpzS0hSb2FYTXVZM1Z5Y21WdWRGVnliRlJ5WldVcE95QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lXNGdiMkp6WlhKMllXSnNaU0J2WmlCeWIzVjBaU0JsZG1WdWRITmNiaUFnSUNvdlhHNGdJR2RsZENCbGRtVnVkSE1vS1RvZ1QySnpaWEoyWVdKc1pUeEZkbVZ1ZEQ0Z2V5QnlaWFIxY200Z2RHaHBjeTV5YjNWMFpYSkZkbVZ1ZEhNN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnpaWFJ6SUhSb1pTQmpiMjVtYVdkMWNtRjBhVzl1SUhWelpXUWdabTl5SUc1aGRtbG5ZWFJwYjI0Z1lXNWtJR2RsYm1WeVlYUnBibWNnYkdsdWEzTXVYRzRnSUNBcVhHNGdJQ0FxSUNNakl5QlZjMkZuWlZ4dUlDQWdLbHh1SUNBZ0tpQmdZR0JjYmlBZ0lDb2djbTkxZEdWeUxuSmxjMlYwUTI5dVptbG5LRnRjYmlBZ0lDb2dJSHNnY0dGMGFEb2dKM1JsWVcwdk9tbGtKeXdnWTI5dGNHOXVaVzUwT2lCVVpXRnRRMjF3TENCamFHbHNaSEpsYmpvZ1cxeHVJQ0FnS2lBZ0lDQjdJSEJoZEdnNklDZHphVzF3YkdVbkxDQmpiMjF3YjI1bGJuUTZJRk5wYlhCc1pVTnRjQ0I5TEZ4dUlDQWdLaUFnSUNCN0lIQmhkR2c2SUNkMWMyVnlMenB1WVcxbEp5d2dZMjl0Y0c5dVpXNTBPaUJWYzJWeVEyMXdJSDFjYmlBZ0lDb2dJRjBnZlZ4dUlDQWdLaUJkS1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxTDF4dUlDQnlaWE5sZEVOdmJtWnBaeWhqYjI1bWFXYzZJRkp2ZFhSbGNrTnZibVpwWnlrNklIWnZhV1FnZTF4dUlDQWdJSFpoYkdsa1lYUmxRMjl1Wm1sbktHTnZibVpwWnlrN1hHNGdJQ0FnZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JrYVhOd2IzTmxLQ2s2SUhadmFXUWdleUIwYUdsekxteHZZMkYwYVc5dVUzVmljMk55YVhCMGFXOXVMblZ1YzNWaWMyTnlhV0psS0NrN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FYQndiR2xsY3lCaGJpQmhjbkpoZVNCdlppQmpiMjF0WVc1a2N5QjBieUIwYUdVZ1kzVnljbVZ1ZENCMWNtd2dkSEpsWlNCaGJtUWdZM0psWVhSbGMxeHVJQ0FnS2lCaElHNWxkeUIxY213Z2RISmxaUzVjYmlBZ0lDcGNiaUFnSUNvZ1YyaGxiaUJuYVhabGJpQmhiaUJoWTNScGRtRjBaU0J5YjNWMFpTd2dZWEJ3YkdsbGN5QjBhR1VnWjJsMlpXNGdZMjl0YldGdVpITWdjM1JoY25ScGJtY2dabkp2YlNCMGFHVWdjbTkxZEdVdVhHNGdJQ0FxSUZkb1pXNGdibTkwSUdkcGRtVnVJR0VnY205MWRHVXNJR0Z3Y0d4cFpYTWdkR2hsSUdkcGRtVnVJR052YlcxaGJtUWdjM1JoY25ScGJtY2dabkp2YlNCMGFHVWdjbTl2ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dJeU1qSUZWellXZGxYRzRnSUNBcVhHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2lBdkx5QmpjbVZoZEdVZ0wzUmxZVzB2TXpNdmRYTmxjaTh4TVZ4dUlDQWdLaUJ5YjNWMFpYSXVZM0psWVhSbFZYSnNWSEpsWlNoYkp5OTBaV0Z0Snl3Z016TXNJQ2QxYzJWeUp5d2dNVEZkS1R0Y2JpQWdJQ3BjYmlBZ0lDb2dMeThnWTNKbFlYUmxJQzkwWldGdEx6TXpPMlY0Y0dGdVpEMTBjblZsTDNWelpYSXZNVEZjYmlBZ0lDb2djbTkxZEdWeUxtTnlaV0YwWlZWeWJGUnlaV1VvV3ljdmRHVmhiU2NzSURNekxDQjdaWGh3WVc1a09pQjBjblZsZlN3Z0ozVnpaWEluTENBeE1WMHBPMXh1SUNBZ0tseHVJQ0FnS2lBdkx5QjViM1VnWTJGdUlHTnZiR3hoY0hObElITjBZWFJwWXlCbWNtRm5iV1Z1ZEhNZ2JHbHJaU0IwYUdselhHNGdJQ0FxSUhKdmRYUmxjaTVqY21WaGRHVlZjbXhVY21WbEtGc25MM1JsWVcwdk16TXZkWE5sY2ljc0lIVnpaWEpKWkYwcE8xeHVJQ0FnS2x4dUlDQWdLaUF2THlCaGMzTjFiV2x1WnlCMGFHVWdZM1Z5Y21WdWRDQjFjbXdnYVhNZ1lDOTBaV0Z0THpNekwzVnpaWEl2TVRGZ0lHRnVaQ0IwYUdVZ2NtOTFkR1VnY0c5cGJuUnpJSFJ2SUdCMWMyVnlMekV4WUZ4dUlDQWdLbHh1SUNBZ0tpQXZMeUJ1WVhacFoyRjBaU0IwYnlBdmRHVmhiUzh6TXk5MWMyVnlMekV4TDJSbGRHRnBiSE5jYmlBZ0lDb2djbTkxZEdWeUxtTnlaV0YwWlZWeWJGUnlaV1VvV3lka1pYUmhhV3h6SjEwc0lIdHlaV3hoZEdsMlpWUnZPaUJ5YjNWMFpYMHBPMXh1SUNBZ0tseHVJQ0FnS2lBdkx5QnVZWFpwWjJGMFpTQjBieUF2ZEdWaGJTOHpNeTkxYzJWeUx6SXlYRzRnSUNBcUlISnZkWFJsY2k1amNtVmhkR1ZWY214VWNtVmxLRnNuTGk0dk1qSW5YU3dnZTNKbGJHRjBhWFpsVkc4NklISnZkWFJsZlNrN1hHNGdJQ0FxWEc0Z0lDQXFJQzh2SUc1aGRtbG5ZWFJsSUhSdklDOTBaV0Z0THpRMEwzVnpaWEl2TWpKY2JpQWdJQ29nY205MWRHVnlMbU55WldGMFpWVnliRlJ5WldVb1d5Y3VMaTh1TGk5MFpXRnRMelEwTDNWelpYSXZNakluWFN3Z2UzSmxiR0YwYVhabFZHODZJSEp2ZFhSbGZTazdYRzRnSUNBcUlHQmdZRnh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxWWEpzVkhKbFpTaGpiMjF0WVc1a2N6b2dZVzU1VzEwc0lIdHlaV3hoZEdsMlpWUnZMQ0J4ZFdWeWVWQmhjbUZ0Y3l3Z1puSmhaMjFsYm5SOU9pQk9ZWFpwWjJGMGFXOXVSWGgwY21GeklEMGdlMzBwT2x4dUlDQWdJQ0FnVlhKc1ZISmxaU0I3WEc0Z0lDQWdZMjl1YzNRZ1lTQTlJSEpsYkdGMGFYWmxWRzhnUHlCeVpXeGhkR2wyWlZSdklEb2dkR2hwY3k1eWIzVjBaWEpUZEdGMFpTNXliMjkwTzF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWVmNteFVjbVZsS0dFc0lIUm9hWE11WTNWeWNtVnVkRlZ5YkZSeVpXVXNJR052YlcxaGJtUnpMQ0J4ZFdWeWVWQmhjbUZ0Y3l3Z1puSmhaMjFsYm5RcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTVoZG1sbllYUmxJR0poYzJWa0lHOXVJSFJvWlNCd2NtOTJhV1JsWkNCMWNtd3VJRlJvYVhNZ2JtRjJhV2RoZEdsdmJpQnBjeUJoYkhkaGVYTWdZV0p6YjJ4MWRHVXVYRzRnSUNBcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCd2NtOXRhWE5sSUhSb1lYUTZYRzRnSUNBcUlDMGdhWE1nY21WemIyeDJaV1FnZDJsMGFDQW5kSEoxWlNjZ2QyaGxiaUJ1WVhacFoyRjBhVzl1SUhOMVkyTmxaV1J6WEc0Z0lDQXFJQzBnYVhNZ2NtVnpiMngyWldRZ2QybDBhQ0FuWm1Gc2MyVW5JSGRvWlc0Z2JtRjJhV2RoZEdsdmJpQm1ZV2xzYzF4dUlDQWdLaUF0SUdseklISmxhbVZqZEdWa0lIZG9aVzRnWVc0Z1pYSnliM0lnYUdGd2NHVnVjMXh1SUNBZ0tseHVJQ0FnS2lBakl5TWdWWE5oWjJWY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFJSEp2ZFhSbGNpNXVZWFpwWjJGMFpVSjVWWEpzS0Z3aUwzUmxZVzB2TXpNdmRYTmxjaTh4TVZ3aUtUdGNiaUFnSUNvZ1lHQmdYRzRnSUNBcUwxeHVJQ0J1WVhacFoyRjBaVUo1VlhKc0tIVnliRG9nYzNSeWFXNW5mRlZ5YkZSeVpXVXBPaUJRY205dGFYTmxQR0p2YjJ4bFlXNCtJSHRjYmlBZ0lDQnBaaUFvZFhKc0lHbHVjM1JoYm1ObGIyWWdWWEpzVkhKbFpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJOb1pXUjFiR1ZPWVhacFoyRjBhVzl1S0hWeWJDd2dabUZzYzJVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjFjbXhVY21WbElEMGdkR2hwY3k1MWNteFRaWEpwWVd4cGVtVnlMbkJoY25ObEtIVnliQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elkyaGxaSFZzWlU1aGRtbG5ZWFJwYjI0b2RYSnNWSEpsWlN3Z1ptRnNjMlVwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCT1lYWnBaMkYwWlNCaVlYTmxaQ0J2YmlCMGFHVWdjSEp2ZG1sa1pXUWdZWEp5WVhrZ2IyWWdZMjl0YldGdVpITWdZVzVrSUdFZ2MzUmhjblJwYm1jZ2NHOXBiblF1WEc0Z0lDQXFJRWxtSUc1dklITjBZWEowYVc1bklISnZkWFJsSUdseklIQnliM1pwWkdWa0xDQjBhR1VnYm1GMmFXZGhkR2x2YmlCcGN5QmhZbk52YkhWMFpTNWNiaUFnSUNwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUhCeWIyMXBjMlVnZEdoaGREcGNiaUFnSUNvZ0xTQnBjeUJ5WlhOdmJIWmxaQ0IzYVhSb0lDZDBjblZsSnlCM2FHVnVJRzVoZG1sbllYUnBiMjRnYzNWalkyVmxaSE5jYmlBZ0lDb2dMU0JwY3lCeVpYTnZiSFpsWkNCM2FYUm9JQ2RtWVd4elpTY2dkMmhsYmlCdVlYWnBaMkYwYVc5dUlHWmhhV3h6WEc0Z0lDQXFJQzBnYVhNZ2NtVnFaV04wWldRZ2QyaGxiaUJoYmlCbGNuSnZjaUJvWVhCd1pXNXpYRzRnSUNBcVhHNGdJQ0FxSUNNakl5QlZjMkZuWlZ4dUlDQWdLbHh1SUNBZ0tpQmdZR0JjYmlBZ0lDb2djbTkxZEdWeUxtNWhkbWxuWVhSbEtGc25kR1ZoYlNjc0lETXpMQ0FuZEdWaGJTY3NJQ2N4TVYwc0lIdHlaV3hoZEdsMlpWUnZPaUJ5YjNWMFpYMHBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDb3ZYRzRnSUc1aGRtbG5ZWFJsS0dOdmJXMWhibVJ6T2lCaGJubGJYU3dnWlhoMGNtRnpPaUJPWVhacFoyRjBhVzl1UlhoMGNtRnpJRDBnZTMwcE9pQlFjbTl0YVhObFBHSnZiMnhsWVc0K0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpZMmhsWkhWc1pVNWhkbWxuWVhScGIyNG9kR2hwY3k1amNtVmhkR1ZWY214VWNtVmxLR052YlcxaGJtUnpMQ0JsZUhSeVlYTXBMQ0JtWVd4elpTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWeWFXRnNhWHBsY3lCaElIdEFiR2x1YXlCVmNteFVjbVZsZlNCcGJuUnZJR0VnYzNSeWFXNW5MbHh1SUNBZ0tpOWNiaUFnYzJWeWFXRnNhWHBsVlhKc0tIVnliRG9nVlhKc1ZISmxaU2s2SUhOMGNtbHVaeUI3SUhKbGRIVnliaUIwYUdsekxuVnliRk5sY21saGJHbDZaWEl1YzJWeWFXRnNhWHBsS0hWeWJDazdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVR0Z5YzJVZ1lTQnpkSEpwYm1jZ2FXNTBieUJoSUh0QWJHbHVheUJWY214VWNtVmxmUzVjYmlBZ0lDb3ZYRzRnSUhCaGNuTmxWWEpzS0hWeWJEb2djM1J5YVc1bktUb2dWWEpzVkhKbFpTQjdJSEpsZEhWeWJpQjBhR2x6TG5WeWJGTmxjbWxoYkdsNlpYSXVjR0Z5YzJVb2RYSnNLVHNnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdjMk5vWldSMWJHVk9ZWFpwWjJGMGFXOXVLSFZ5YkRvZ1ZYSnNWSEpsWlN3Z2NISmxkbVZ1ZEZCMWMyaFRkR0YwWlRvZ1ltOXZiR1ZoYmlrNklGQnliMjFwYzJVOFltOXZiR1ZoYmo0Z2UxeHVJQ0FnSUdOdmJuTjBJR2xrSUQwZ0t5dDBhR2x6TG01aGRtbG5ZWFJwYjI1SlpEdGNiaUFnSUNCMGFHbHpMbkp2ZFhSbGNrVjJaVzUwY3k1dVpYaDBLRzVsZHlCT1lYWnBaMkYwYVc5dVUzUmhjblFvYVdRc0lIUm9hWE11YzJWeWFXRnNhWHBsVlhKc0tIVnliQ2twS1R0Y2JpQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtDa3VkR2hsYmlnb1h5a2dQVDRnZEdocGN5NXlkVzVPWVhacFoyRjBaU2gxY213c0lIQnlaWFpsYm5SUWRYTm9VM1JoZEdVc0lHbGtLU2s3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUhObGRGVndURzlqWVhScGIyNURhR0Z1WjJWTWFYTjBaVzVsY2lncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxteHZZMkYwYVc5dVUzVmljMk55YVhCMGFXOXVJRDBnUEdGdWVUNTBhR2x6TG14dlkyRjBhVzl1TG5OMVluTmpjbWxpWlNnb1kyaGhibWRsS1NBOVBpQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WTJobFpIVnNaVTVoZG1sbllYUnBiMjRvZEdocGN5NTFjbXhUWlhKcFlXeHBlbVZ5TG5CaGNuTmxLR05vWVc1blpWc25kWEpzSjEwcExDQmphR0Z1WjJWYkozQnZjQ2RkS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ2NuVnVUbUYyYVdkaGRHVW9kWEpzT2lCVmNteFVjbVZsTENCd2NtVjJaVzUwVUhWemFGTjBZWFJsT2lCaWIyOXNaV0Z1TENCcFpEb2diblZ0WW1WeUtUb2dVSEp2YldselpUeGliMjlzWldGdVBpQjdYRzRnSUNBZ2FXWWdLR2xrSUNFOVBTQjBhR2x6TG01aGRtbG5ZWFJwYjI1SlpDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2IyTmhkR2x2Ymk1bmJ5aDBhR2x6TG5WeWJGTmxjbWxoYkdsNlpYSXVjMlZ5YVdGc2FYcGxLSFJvYVhNdVkzVnljbVZ1ZEZWeWJGUnlaV1VwS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjbTkxZEdWeVJYWmxiblJ6TG01bGVIUW9ibVYzSUU1aGRtbG5ZWFJwYjI1RFlXNWpaV3dvYVdRc0lIUm9hWE11YzJWeWFXRnNhWHBsVlhKc0tIVnliQ2twS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9abUZzYzJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlZCeWIyMXBjMlVzSUhKbGFtVmpkRkJ5YjIxcGMyVXBJRDArSUh0Y2JpQWdJQ0FnSUd4bGRDQjFjR1JoZEdWa1ZYSnNPaUJWY214VWNtVmxPMXh1SUNBZ0lDQWdiR1YwSUhOMFlYUmxPaUJTYjNWMFpYSlRkR0YwWlR0Y2JpQWdJQ0FnSUdGd2NHeDVVbVZrYVhKbFkzUnpLSFZ5YkN3Z2RHaHBjeTVqYjI1bWFXY3BYRzRnSUNBZ0lDQWdJQ0FnTG0xbGNtZGxUV0Z3S0hVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYQmtZWFJsWkZWeWJDQTlJSFU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVmpiMmR1YVhwbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRFTnZiWEJ2Ym1WdWRGUjVjR1VzSUhSb2FYTXVZMjl1Wm1sbkxDQjFjR1JoZEdWa1ZYSnNMQ0IwYUdsekxuTmxjbWxoYkdsNlpWVnliQ2gxY0dSaGRHVmtWWEpzS1NrN1hHNGdJQ0FnSUNBZ0lDQWdmU2xjYmx4dUlDQWdJQ0FnSUNBZ0lDNXRaWEpuWlUxaGNDZ29ibVYzVW05MWRHVnlVM1JoZEdWVGJtRndjMmh2ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjNWMFpYSkZkbVZ1ZEhNdWJtVjRkQ2h1WlhjZ1VtOTFkR1Z6VW1WamIyZHVhWHBsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpDd2dkR2hwY3k1elpYSnBZV3hwZW1WVmNtd29kWEpzS1N3Z2RHaHBjeTV6WlhKcFlXeHBlbVZWY213b2RYQmtZWFJsWkZWeWJDa3NJRzVsZDFKdmRYUmxjbE4wWVhSbFUyNWhjSE5vYjNRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLSFJvYVhNdWNtVnpiMngyWlhJc0lHNWxkMUp2ZFhSbGNsTjBZWFJsVTI1aGNITm9iM1FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBdWJXRndLQ2h5YjNWMFpYSlRkR0YwWlZOdVlYQnphRzkwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTNKbFlYUmxVbTkxZEdWeVUzUmhkR1VvY205MWRHVnlVM1JoZEdWVGJtRndjMmh2ZEN3Z2RHaHBjeTVqZFhKeVpXNTBVbTkxZEdWeVUzUmhkR1VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBdWJXRndLQ2h1WlhkVGRHRjBaVG9nVW05MWRHVnlVM1JoZEdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ2JtVjNVM1JoZEdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDNXRaWEpuWlUxaGNDaGZJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUjNWaGNtUkRhR1ZqYTNNb2MzUmhkR1V1YzI1aGNITm9iM1FzSUhSb2FYTXVZM1Z5Y21WdWRGSnZkWFJsY2xOMFlYUmxMbk51WVhCemFHOTBMQ0IwYUdsekxtbHVhbVZqZEc5eUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWphR1ZqYXloMGFHbHpMbTkxZEd4bGRFMWhjQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUM1bWIzSkZZV05vS0NoemFHOTFiR1JCWTNScGRtRjBaVG9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnphRzkxYkdSQlkzUnBkbUYwWlNCOGZDQnBaQ0FoUFQwZ2RHaHBjeTV1WVhacFoyRjBhVzl1U1dRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjNWMFpYSkZkbVZ1ZEhNdWJtVjRkQ2h1WlhjZ1RtRjJhV2RoZEdsdmJrTmhibU5sYkNocFpDd2dkR2hwY3k1elpYSnBZV3hwZW1WVmNtd29kWEpzS1NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFRmpkR2wyWVhSbFVtOTFkR1Z6S0hOMFlYUmxMQ0IwYUdsekxtTjFjbkpsYm5SU2IzVjBaWEpUZEdGMFpTa3VZV04wYVhaaGRHVW9kR2hwY3k1dmRYUnNaWFJOWVhBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUlZjbXhVY21WbElEMGdkWEJrWVhSbFpGVnliRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRkp2ZFhSbGNsTjBZWFJsSUQwZ2MzUmhkR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhCeVpYWmxiblJRZFhOb1UzUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQmhkR2dnUFNCMGFHbHpMblZ5YkZObGNtbGhiR2w2WlhJdWMyVnlhV0ZzYVhwbEtIVndaR0YwWldSVmNtd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXNiMk5oZEdsdmJpNXBjME4xY25KbGJuUlFZWFJvUlhGMVlXeFVieWh3WVhSb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJHOWpZWFJwYjI0dWNtVndiR0ZqWlZOMFlYUmxLSEJoZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViRzlqWVhScGIyNHVaMjhvY0dGMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0F1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTkxZEdWeVJYWmxiblJ6TG01bGVIUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5Qk9ZWFpwWjJGMGFXOXVSVzVrS0dsa0xDQjBhR2x6TG5ObGNtbGhiR2w2WlZWeWJDaDFjbXdwTENCMGFHbHpMbk5sY21saGJHbDZaVlZ5YkNoMWNHUmhkR1ZrVlhKc0tTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVlFjbTl0YVhObEtIUnlkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOTFkR1Z5UlhabGJuUnpMbTVsZUhRb2JtVjNJRTVoZG1sbllYUnBiMjVGY25KdmNpaHBaQ3dnZEdocGN5NXpaWEpwWVd4cGVtVlZjbXdvZFhKc0tTd2daU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkRkJ5YjIxcGMyVW9aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUVOaGJrRmpkR2wyWVhSbElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2NIVmliR2xqSUhKdmRYUmxPaUJCWTNScGRtRjBaV1JTYjNWMFpWTnVZWEJ6YUc5MEtTQjdmVnh1ZlZ4dVkyeGhjM01nUTJGdVJHVmhZM1JwZG1GMFpTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtIQjFZbXhwWXlCamIyMXdiMjVsYm5RNklFOWlhbVZqZEN3Z2NIVmliR2xqSUhKdmRYUmxPaUJCWTNScGRtRjBaV1JTYjNWMFpWTnVZWEJ6YUc5MEtTQjdmVnh1ZlZ4dVhHNWpiR0Z6Y3lCSGRXRnlaRU5vWldOcmN5QjdYRzRnSUhCeWFYWmhkR1VnWTJobFkydHpPaUJCY25KaGVUeERZVzVCWTNScGRtRjBaWHhEWVc1RVpXRmpkR2wyWVhSbFBpQTlJRnRkTzF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJSEJ5YVhaaGRHVWdablYwZFhKbE9pQlNiM1YwWlhKVGRHRjBaVk51WVhCemFHOTBMQ0J3Y21sMllYUmxJR04xY25JNklGSnZkWFJsY2xOMFlYUmxVMjVoY0hOb2IzUXNYRzRnSUNBZ0lDQndjbWwyWVhSbElHbHVhbVZqZEc5eU9pQkpibXBsWTNSdmNpa2dlMzFjYmx4dUlDQmphR1ZqYXlod1lYSmxiblJQZFhSc1pYUk5ZWEE2SUZKdmRYUmxjazkxZEd4bGRFMWhjQ2s2SUU5aWMyVnlkbUZpYkdVOFltOXZiR1ZoYmo0Z2UxeHVJQ0FnSUdOdmJuTjBJR1oxZEhWeVpWSnZiM1FnUFNCMGFHbHpMbVoxZEhWeVpTNWZjbTl2ZER0Y2JpQWdJQ0JqYjI1emRDQmpkWEp5VW05dmRDQTlJSFJvYVhNdVkzVnljaUEvSUhSb2FYTXVZM1Z5Y2k1ZmNtOXZkQ0E2SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTUwY21GMlpYSnpaVU5vYVd4a1VtOTFkR1Z6S0daMWRIVnlaVkp2YjNRc0lHTjFjbkpTYjI5MExDQndZWEpsYm5SUGRYUnNaWFJOWVhBcE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG1Ob1pXTnJjeTVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5YmlCdlppQW9kSEoxWlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnVDJKelpYSjJZV0pzWlM1bWNtOXRLSFJvYVhNdVkyaGxZMnR6S1Z4dUlDQWdJQ0FnSUNBdWJXRndLSE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeklHbHVjM1JoYm1ObGIyWWdRMkZ1UVdOMGFYWmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KMWJrTmhia0ZqZEdsMllYUmxLSE11Y205MWRHVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2N5QnBibk4wWVc1alpXOW1JRU5oYmtSbFlXTjBhWFpoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSjFia05oYmtSbFlXTjBhWFpoZEdVb2N5NWpiMjF3YjI1bGJuUXNJSE11Y205MWRHVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTmhibTV2ZENCaVpTQnlaV0ZqYUdWa0p5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXViV1Z5WjJWQmJHd29LVnh1SUNBZ0lDQWdJQ0F1WlhabGNua29jbVZ6ZFd4MElEMCtJSEpsYzNWc2RDQTlQVDBnZEhKMVpTazdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJSFJ5WVhabGNuTmxRMmhwYkdSU2IzVjBaWE1vWEc0Z0lDQWdJQ0JtZFhSMWNtVk9iMlJsT2lCVWNtVmxUbTlrWlR4QlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBQaXdnWTNWeWNrNXZaR1U2SUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStMRnh1SUNBZ0lDQWdiM1YwYkdWMFRXRndPaUJTYjNWMFpYSlBkWFJzWlhSTllYQXBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0J3Y21WMlEyaHBiR1J5Wlc0NklIdGJhMlY1T2lCemRISnBibWRkT2lCaGJubDlJRDBnYm05a1pVTm9hV3hrY21WdVFYTk5ZWEFvWTNWeWNrNXZaR1VwTzF4dUlDQWdJR1oxZEhWeVpVNXZaR1V1WTJocGJHUnlaVzR1Wm05eVJXRmphQ2hqSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11ZEhKaGRtVnljMlZTYjNWMFpYTW9ZeXdnY0hKbGRrTm9hV3hrY21WdVcyTXVkbUZzZFdVdWIzVjBiR1YwWFN3Z2IzVjBiR1YwVFdGd0tUdGNiaUFnSUNBZ0lHUmxiR1YwWlNCd2NtVjJRMmhwYkdSeVpXNWJZeTUyWVd4MVpTNXZkWFJzWlhSZE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdadmNrVmhZMmdvWEc0Z0lDQWdJQ0FnSUhCeVpYWkRhR2xzWkhKbGJpeGNiaUFnSUNBZ0lDQWdLSFk2SUdGdWVTd2dhem9nYzNSeWFXNW5LU0E5UGlCMGFHbHpMbVJsWVdOMGFYWmhkR1ZQZFhSc1pYUkJibVJKZEVOb2FXeGtjbVZ1S0hZc0lHOTFkR3hsZEUxaGNDNWZiM1YwYkdWMGMxdHJYU2twTzF4dUlDQjlYRzVjYmlBZ2RISmhkbVZ5YzJWU2IzVjBaWE1vWEc0Z0lDQWdJQ0JtZFhSMWNtVk9iMlJsT2lCVWNtVmxUbTlrWlR4QlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBQaXdnWTNWeWNrNXZaR1U2SUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStMRnh1SUNBZ0lDQWdjR0Z5Wlc1MFQzVjBiR1YwVFdGd09pQlNiM1YwWlhKUGRYUnNaWFJOWVhBcE9pQjJiMmxrSUh0Y2JpQWdJQ0JqYjI1emRDQm1kWFIxY21VZ1BTQm1kWFIxY21WT2IyUmxMblpoYkhWbE8xeHVJQ0FnSUdOdmJuTjBJR04xY25JZ1BTQmpkWEp5VG05a1pTQS9JR04xY25KT2IyUmxMblpoYkhWbElEb2diblZzYkR0Y2JpQWdJQ0JqYjI1emRDQnZkWFJzWlhRZ1BTQndZWEpsYm5SUGRYUnNaWFJOWVhBZ1B5QndZWEpsYm5SUGRYUnNaWFJOWVhBdVgyOTFkR3hsZEhOYlpuVjBkWEpsVG05a1pTNTJZV3gxWlM1dmRYUnNaWFJkSURvZ2JuVnNiRHRjYmx4dUlDQWdJR2xtSUNoamRYSnlJQ1ltSUdaMWRIVnlaUzVmY205MWRHVkRiMjVtYVdjZ1BUMDlJR04xY25JdVgzSnZkWFJsUTI5dVptbG5LU0I3WEc0Z0lDQWdJQ0JwWmlBb0lYTm9ZV3hzYjNkRmNYVmhiQ2htZFhSMWNtVXVjR0Z5WVcxekxDQmpkWEp5TG5CaGNtRnRjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdWamEzTXVjSFZ6YUNodVpYY2dRMkZ1UkdWaFkzUnBkbUYwWlNodmRYUnNaWFF1WTI5dGNHOXVaVzUwTENCamRYSnlLU3dnYm1WM0lFTmhia0ZqZEdsMllYUmxLR1oxZEhWeVpTa3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1MGNtRjJaWEp6WlVOb2FXeGtVbTkxZEdWektHWjFkSFZ5WlU1dlpHVXNJR04xY25KT2IyUmxMQ0J2ZFhSc1pYUWdQeUJ2ZFhSc1pYUXViM1YwYkdWMFRXRndJRG9nYm5Wc2JDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVaR1ZoWTNScGRtRjBaVTkxZEd4bGRFRnVaRWwwUTJocGJHUnlaVzRvWTNWeWNpd2diM1YwYkdWMEtUdGNiaUFnSUNBZ0lIUm9hWE11WTJobFkydHpMbkIxYzJnb2JtVjNJRU5oYmtGamRHbDJZWFJsS0daMWRIVnlaU2twTzF4dUlDQWdJQ0FnZEdocGN5NTBjbUYyWlhKelpVTm9hV3hrVW05MWRHVnpLR1oxZEhWeVpVNXZaR1VzSUc1MWJHd3NJRzkxZEd4bGRDQS9JRzkxZEd4bGRDNXZkWFJzWlhSTllYQWdPaUJ1ZFd4c0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElHUmxZV04wYVhaaGRHVlBkWFJzWlhSQmJtUkpkRU5vYVd4a2NtVnVLSEp2ZFhSbE9pQkJZM1JwZG1GMFpXUlNiM1YwWlZOdVlYQnphRzkwTENCdmRYUnNaWFE2SUZKdmRYUmxjazkxZEd4bGRDazZJSFp2YVdRZ2UxeHVJQ0FnSUdsbUlDaHZkWFJzWlhRZ0ppWWdiM1YwYkdWMExtbHpRV04wYVhaaGRHVmtLU0I3WEc0Z0lDQWdJQ0JtYjNKRllXTm9LRzkxZEd4bGRDNXZkWFJzWlhSTllYQXVYMjkxZEd4bGRITXNJQ2gyT2lCU2IzVjBaWEpQZFhSc1pYUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFl1YVhOQlkzUnBkbUYwWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtUmxZV04wYVhaaGRHVlBkWFJzWlhSQmJtUkpkRU5vYVd4a2NtVnVLSFl1WVdOMGFYWmhkR1ZrVW05MWRHVXVjMjVoY0hOb2IzUXNJSFlwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIUm9hWE11WTJobFkydHpMbkIxYzJnb2JtVjNJRU5oYmtSbFlXTjBhWFpoZEdVb2IzVjBiR1YwTG1OdmJYQnZibVZ1ZEN3Z2NtOTFkR1VwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUhKMWJrTmhia0ZqZEdsMllYUmxLR1oxZEhWeVpUb2dRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZENrNklFOWljMlZ5ZG1GaWJHVThZbTl2YkdWaGJqNGdlMXh1SUNBZ0lHTnZibk4wSUdOaGJrRmpkR2wyWVhSbElEMGdablYwZFhKbExsOXliM1YwWlVOdmJtWnBaeUEvSUdaMWRIVnlaUzVmY205MWRHVkRiMjVtYVdjdVkyRnVRV04wYVhaaGRHVWdPaUJ1ZFd4c08xeHVJQ0FnSUdsbUlDZ2hZMkZ1UVdOMGFYWmhkR1VnZkh3Z1kyRnVRV04wYVhaaGRHVXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnYjJZZ0tIUnlkV1VwTzF4dUlDQWdJSEpsZEhWeWJpQlBZbk5sY25aaFlteGxMbVp5YjIwb1kyRnVRV04wYVhaaGRHVXBYRzRnSUNBZ0lDQWdJQzV0WVhBb1l5QTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWjNWaGNtUWdQU0IwYUdsekxtbHVhbVZqZEc5eUxtZGxkQ2hqS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWjNWaGNtUXVZMkZ1UVdOMGFYWmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjNjbUZ3U1c1MGIwOWljMlZ5ZG1GaWJHVW9aM1ZoY21RdVkyRnVRV04wYVhaaGRHVW9ablYwZFhKbExDQjBhR2x6TG1aMWRIVnlaU2twTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkM0poY0VsdWRHOVBZbk5sY25aaFlteGxLR2QxWVhKa0tHWjFkSFZ5WlN3Z2RHaHBjeTVtZFhSMWNtVXBLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzV0WlhKblpVRnNiQ2dwWEc0Z0lDQWdJQ0FnSUM1bGRtVnllU2h5WlhOMWJIUWdQVDRnY21WemRXeDBJRDA5UFNCMGNuVmxLVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnY25WdVEyRnVSR1ZoWTNScGRtRjBaU2hqYjIxd2IyNWxiblE2SUU5aWFtVmpkQ3dnWTNWeWNqb2dRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZENrNklFOWljMlZ5ZG1GaWJHVThZbTl2YkdWaGJqNGdlMXh1SUNBZ0lHTnZibk4wSUdOaGJrUmxZV04wYVhaaGRHVWdQU0JqZFhKeUxsOXliM1YwWlVOdmJtWnBaeUEvSUdOMWNuSXVYM0p2ZFhSbFEyOXVabWxuTG1OaGJrUmxZV04wYVhaaGRHVWdPaUJ1ZFd4c08xeHVJQ0FnSUdsbUlDZ2hZMkZ1UkdWaFkzUnBkbUYwWlNCOGZDQmpZVzVFWldGamRHbDJZWFJsTG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlHOW1JQ2gwY25WbEtUdGNiaUFnSUNCeVpYUjFjbTRnVDJKelpYSjJZV0pzWlM1bWNtOXRLR05oYmtSbFlXTjBhWFpoZEdVcFhHNGdJQ0FnSUNBZ0lDNXRZWEFvWXlBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaM1ZoY21RZ1BTQjBhR2x6TG1sdWFtVmpkRzl5TG1kbGRDaGpLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aM1ZoY21RdVkyRnVSR1ZoWTNScGRtRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZHlZWEJKYm5SdlQySnpaWEoyWVdKc1pTaG5kV0Z5WkM1allXNUVaV0ZqZEdsMllYUmxLR052YlhCdmJtVnVkQ3dnWTNWeWNpd2dkR2hwY3k1amRYSnlLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjNjbUZ3U1c1MGIwOWljMlZ5ZG1GaWJHVW9aM1ZoY21Rb1kyOXRjRzl1Wlc1MExDQmpkWEp5TENCMGFHbHpMbU4xY25JcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNXRaWEpuWlVGc2JDZ3BYRzRnSUNBZ0lDQWdJQzVsZG1WeWVTaHlaWE4xYkhRZ1BUNGdjbVZ6ZFd4MElEMDlQU0IwY25WbEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIzY21Gd1NXNTBiMDlpYzJWeWRtRmliR1U4VkQ0b2RtRnNkV1U2SUZRZ2ZDQlBZbk5sY25aaFlteGxQRlErS1RvZ1QySnpaWEoyWVdKc1pUeFVQaUI3WEc0Z0lHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRTlpYzJWeWRtRmliR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5bUlDaDJZV3gxWlNrN1hHNGdJSDFjYm4xY2JseHVZMnhoYzNNZ1FXTjBhWFpoZEdWU2IzVjBaWE1nZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y21sMllYUmxJR1oxZEhWeVpWTjBZWFJsT2lCU2IzVjBaWEpUZEdGMFpTd2djSEpwZG1GMFpTQmpkWEp5VTNSaGRHVTZJRkp2ZFhSbGNsTjBZWFJsS1NCN2ZWeHVYRzRnSUdGamRHbDJZWFJsS0hCaGNtVnVkRTkxZEd4bGRFMWhjRG9nVW05MWRHVnlUM1YwYkdWMFRXRndLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjM1FnWm5WMGRYSmxVbTl2ZENBOUlIUm9hWE11Wm5WMGRYSmxVM1JoZEdVdVgzSnZiM1E3WEc0Z0lDQWdZMjl1YzNRZ1kzVnljbEp2YjNRZ1BTQjBhR2x6TG1OMWNuSlRkR0YwWlNBL0lIUm9hWE11WTNWeWNsTjBZWFJsTGw5eWIyOTBJRG9nYm5Wc2JEdGNibHh1SUNBZ0lIQjFjMmhSZFdWeWVWQmhjbUZ0YzBGdVpFWnlZV2R0Wlc1MEtIUm9hWE11Wm5WMGRYSmxVM1JoZEdVcE8xeHVJQ0FnSUhSb2FYTXVZV04wYVhaaGRHVkRhR2xzWkZKdmRYUmxjeWhtZFhSMWNtVlNiMjkwTENCamRYSnlVbTl2ZEN3Z2NHRnlaVzUwVDNWMGJHVjBUV0Z3S1R0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1lXTjBhWFpoZEdWRGFHbHNaRkp2ZFhSbGN5aGNiaUFnSUNBZ0lHWjFkSFZ5WlU1dlpHVTZJRlJ5WldWT2IyUmxQRUZqZEdsMllYUmxaRkp2ZFhSbFBpd2dZM1Z5Y2s1dlpHVTZJRlJ5WldWT2IyUmxQRUZqZEdsMllYUmxaRkp2ZFhSbFBpeGNiaUFnSUNBZ0lHOTFkR3hsZEUxaGNEb2dVbTkxZEdWeVQzVjBiR1YwVFdGd0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdjSEpsZGtOb2FXeGtjbVZ1T2lCN1cydGxlVG9nYzNSeWFXNW5YVG9nWVc1NWZTQTlJRzV2WkdWRGFHbHNaSEpsYmtGelRXRndLR04xY25KT2IyUmxLVHRjYmlBZ0lDQm1kWFIxY21WT2IyUmxMbU5vYVd4a2NtVnVMbVp2Y2tWaFkyZ29ZeUE5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbUZqZEdsMllYUmxVbTkxZEdWektHTXNJSEJ5WlhaRGFHbHNaSEpsYmx0akxuWmhiSFZsTG05MWRHeGxkRjBzSUc5MWRHeGxkRTFoY0NrN1hHNGdJQ0FnSUNCa1pXeGxkR1VnY0hKbGRrTm9hV3hrY21WdVcyTXVkbUZzZFdVdWIzVjBiR1YwWFR0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JtYjNKRllXTm9LRnh1SUNBZ0lDQWdJQ0J3Y21WMlEyaHBiR1J5Wlc0c1hHNGdJQ0FnSUNBZ0lDaDJPaUJoYm5rc0lHczZJSE4wY21sdVp5a2dQVDRnZEdocGN5NWtaV0ZqZEdsMllYUmxUM1YwYkdWMFFXNWtTWFJEYUdsc1pISmxiaWh2ZFhSc1pYUk5ZWEF1WDI5MWRHeGxkSE5iYTEwcEtUdGNiaUFnZlZ4dVhHNGdJR0ZqZEdsMllYUmxVbTkxZEdWektGeHVJQ0FnSUNBZ1puVjBkWEpsVG05a1pUb2dWSEpsWlU1dlpHVThRV04wYVhaaGRHVmtVbTkxZEdVK0xDQmpkWEp5VG05a1pUb2dWSEpsWlU1dlpHVThRV04wYVhaaGRHVmtVbTkxZEdVK0xGeHVJQ0FnSUNBZ2NHRnlaVzUwVDNWMGJHVjBUV0Z3T2lCU2IzVjBaWEpQZFhSc1pYUk5ZWEFwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCbWRYUjFjbVVnUFNCbWRYUjFjbVZPYjJSbExuWmhiSFZsTzF4dUlDQWdJR052Ym5OMElHTjFjbklnUFNCamRYSnlUbTlrWlNBL0lHTjFjbkpPYjJSbExuWmhiSFZsSURvZ2JuVnNiRHRjYmx4dUlDQWdJR052Ym5OMElHOTFkR3hsZENBOUlHZGxkRTkxZEd4bGRDaHdZWEpsYm5SUGRYUnNaWFJOWVhBc0lHWjFkSFZ5WlU1dlpHVXVkbUZzZFdVcE8xeHVYRzRnSUNBZ2FXWWdLR1oxZEhWeVpTQTlQVDBnWTNWeWNpa2dlMXh1SUNBZ0lDQWdZV1IyWVc1alpVRmpkR2wyWVhSbFpGSnZkWFJsS0daMWRIVnlaU2s3WEc0Z0lDQWdJQ0IwYUdsekxtRmpkR2wyWVhSbFEyaHBiR1JTYjNWMFpYTW9ablYwZFhKbFRtOWtaU3dnWTNWeWNrNXZaR1VzSUc5MWRHeGxkQzV2ZFhSc1pYUk5ZWEFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG1SbFlXTjBhWFpoZEdWUGRYUnNaWFJCYm1SSmRFTm9hV3hrY21WdUtHOTFkR3hsZENrN1hHNGdJQ0FnSUNCamIyNXpkQ0J2ZFhSc1pYUk5ZWEFnUFNCdVpYY2dVbTkxZEdWeVQzVjBiR1YwVFdGd0tDazdYRzRnSUNBZ0lDQjBhR2x6TG1GamRHbDJZWFJsVG1WM1VtOTFkR1Z6S0c5MWRHeGxkRTFoY0N3Z1puVjBkWEpsTENCdmRYUnNaWFFwTzF4dUlDQWdJQ0FnZEdocGN5NWhZM1JwZG1GMFpVTm9hV3hrVW05MWRHVnpLR1oxZEhWeVpVNXZaR1VzSUc1MWJHd3NJRzkxZEd4bGRFMWhjQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JoWTNScGRtRjBaVTVsZDFKdmRYUmxjeWhjYmlBZ0lDQWdJRzkxZEd4bGRFMWhjRG9nVW05MWRHVnlUM1YwYkdWMFRXRndMQ0JtZFhSMWNtVTZJRUZqZEdsMllYUmxaRkp2ZFhSbExDQnZkWFJzWlhRNklGSnZkWFJsY2s5MWRHeGxkQ2s2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhKbGMyOXNkbVZrSUQwZ1VtVm1iR1ZqZEdsMlpVbHVhbVZqZEc5eUxuSmxjMjlzZG1Vb1cxeHVJQ0FnSUNBZ2UzQnliM1pwWkdVNklFRmpkR2wyWVhSbFpGSnZkWFJsTENCMWMyVldZV3gxWlRvZ1puVjBkWEpsZlN4Y2JpQWdJQ0FnSUh0d2NtOTJhV1JsT2lCU2IzVjBaWEpQZFhSc1pYUk5ZWEFzSUhWelpWWmhiSFZsT2lCdmRYUnNaWFJOWVhCOVhHNGdJQ0FnWFNrN1hHNGdJQ0FnWVdSMllXNWpaVUZqZEdsMllYUmxaRkp2ZFhSbEtHWjFkSFZ5WlNrN1hHNGdJQ0FnYjNWMGJHVjBMbUZqZEdsMllYUmxLR1oxZEhWeVpTNWZablYwZFhKbFUyNWhjSE5vYjNRdVgzSmxjMjlzZG1Wa1EyOXRjRzl1Wlc1MFJtRmpkRzl5ZVN3Z1puVjBkWEpsTENCeVpYTnZiSFpsWkN3Z2IzVjBiR1YwVFdGd0tUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdaR1ZoWTNScGRtRjBaVTkxZEd4bGRFRnVaRWwwUTJocGJHUnlaVzRvYjNWMGJHVjBPaUJTYjNWMFpYSlBkWFJzWlhRcE9pQjJiMmxrSUh0Y2JpQWdJQ0JwWmlBb2IzVjBiR1YwSUNZbUlHOTFkR3hsZEM1cGMwRmpkR2wyWVhSbFpDa2dlMXh1SUNBZ0lDQWdabTl5UldGamFDaGNiaUFnSUNBZ0lDQWdJQ0J2ZFhSc1pYUXViM1YwYkdWMFRXRndMbDl2ZFhSc1pYUnpMQ0FvZGpvZ1VtOTFkR1Z5VDNWMGJHVjBLU0E5UGlCMGFHbHpMbVJsWVdOMGFYWmhkR1ZQZFhSc1pYUkJibVJKZEVOb2FXeGtjbVZ1S0hZcEtUdGNiaUFnSUNBZ0lHOTFkR3hsZEM1a1pXRmpkR2wyWVhSbEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEIxYzJoUmRXVnllVkJoY21GdGMwRnVaRVp5WVdkdFpXNTBLSE4wWVhSbE9pQlNiM1YwWlhKVGRHRjBaU2s2SUhadmFXUWdlMXh1SUNCcFppQW9JWE5vWVd4c2IzZEZjWFZoYkNoemRHRjBaUzV6Ym1Gd2MyaHZkQzV4ZFdWeWVWQmhjbUZ0Y3l3Z0tEeGhibmsrYzNSaGRHVXVjWFZsY25sUVlYSmhiWE1wTG5aaGJIVmxLU2tnZTF4dUlDQWdJQ2c4WVc1NVBuTjBZWFJsTG5GMVpYSjVVR0Z5WVcxektTNXVaWGgwS0hOMFlYUmxMbk51WVhCemFHOTBMbkYxWlhKNVVHRnlZVzF6S1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h6ZEdGMFpTNXpibUZ3YzJodmRDNW1jbUZuYldWdWRDQWhQVDBnS0R4aGJuaytjM1JoZEdVdVpuSmhaMjFsYm5RcExuWmhiSFZsS1NCN1hHNGdJQ0FnS0R4aGJuaytjM1JoZEdVdVpuSmhaMjFsYm5RcExtNWxlSFFvYzNSaGRHVXVjMjVoY0hOb2IzUXVabkpoWjIxbGJuUXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUc1dlpHVkRhR2xzWkhKbGJrRnpUV0Z3S0c1dlpHVTZJRlJ5WldWT2IyUmxQR0Z1ZVQ0cElIdGNiaUFnY21WMGRYSnVJRzV2WkdVZ1B5QnViMlJsTG1Ob2FXeGtjbVZ1TG5KbFpIVmpaU2dvYlRvZ1lXNTVMQ0JqT2lCVWNtVmxUbTlrWlR4aGJuaytLU0E5UGlCN1hHNGdJQ0FnYlZ0akxuWmhiSFZsTG05MWRHeGxkRjBnUFNCak8xeHVJQ0FnSUhKbGRIVnliaUJ0TzF4dUlDQjlMQ0I3ZlNrZ09pQjdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwVDNWMGJHVjBLRzkxZEd4bGRFMWhjRG9nVW05MWRHVnlUM1YwYkdWMFRXRndMQ0J5YjNWMFpUb2dRV04wYVhaaGRHVmtVbTkxZEdVcE9pQlNiM1YwWlhKUGRYUnNaWFFnZTF4dUlDQnNaWFFnYjNWMGJHVjBJRDBnYjNWMGJHVjBUV0Z3TGw5dmRYUnNaWFJ6VzNKdmRYUmxMbTkxZEd4bGRGMDdYRzRnSUdsbUlDZ2hiM1YwYkdWMEtTQjdYRzRnSUNBZ1kyOXVjM1FnWTI5dGNHOXVaVzUwVG1GdFpTQTlJQ2c4WVc1NVBuSnZkWFJsTG1OdmJYQnZibVZ1ZENrdWJtRnRaVHRjYmlBZ0lDQnBaaUFvY205MWRHVXViM1YwYkdWMElEMDlQU0JRVWtsTlFWSlpYMDlWVkV4RlZDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQkRZVzV1YjNRZ1ptbHVaQ0J3Y21sdFlYSjVJRzkxZEd4bGRDQjBieUJzYjJGa0lDY2tlMk52YlhCdmJtVnVkRTVoYldWOUoyQXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJtNXZkQ0JtYVc1a0lIUm9aU0J2ZFhSc1pYUWdKSHR5YjNWMFpTNXZkWFJzWlhSOUlIUnZJR3h2WVdRZ0p5UjdZMjl0Y0c5dVpXNTBUbUZ0WlgwbllDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUnNaWFE3WEc1OVhHNGlYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3JvdXRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDM4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHNjYW5fMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3NjYW4nKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5zY2FuID0gc2Nhbl8xLnNjYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL3NjYW4uanNcbiAqKiBtb2R1bGUgaWQgPSAzODFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2NvbmNhdCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmNvbmNhdCA9IGNvbmNhdF8xLmNvbmNhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9jb25jYXQuanNcbiAqKiBtb2R1bGUgaWQgPSAzODVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKCcuL21lcmdlQWxsJyk7XG4vKipcbiAqIENyZWF0ZXMgYW4gb3V0cHV0IE9ic2VydmFibGUgd2hpY2ggc2VxdWVudGlhbGx5IGVtaXRzIGFsbCB2YWx1ZXMgZnJvbSBldmVyeVxuICogZ2l2ZW4gaW5wdXQgT2JzZXJ2YWJsZSBhZnRlciB0aGUgY3VycmVudCBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Db25jYXRlbmF0ZXMgbXVsdGlwbGUgT2JzZXJ2YWJsZXMgdG9nZXRoZXIgYnlcbiAqIHNlcXVlbnRpYWxseSBlbWl0dGluZyB0aGVpciB2YWx1ZXMsIG9uZSBPYnNlcnZhYmxlIGFmdGVyIHRoZSBvdGhlci48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9jb25jYXQucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogSm9pbnMgdGhpcyBPYnNlcnZhYmxlIHdpdGggbXVsdGlwbGUgb3RoZXIgT2JzZXJ2YWJsZXMgYnkgc3Vic2NyaWJpbmcgdG8gdGhlbVxuICogb25lIGF0IGEgdGltZSwgc3RhcnRpbmcgd2l0aCB0aGUgc291cmNlLCBhbmQgbWVyZ2luZyB0aGVpciByZXN1bHRzIGludG8gdGhlXG4gKiBvdXRwdXQgT2JzZXJ2YWJsZS4gV2lsbCB3YWl0IGZvciBlYWNoIE9ic2VydmFibGUgdG8gY29tcGxldGUgYmVmb3JlIG1vdmluZ1xuICogb24gdG8gdGhlIG5leHQuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Q29uY2F0ZW5hdGUgYSB0aW1lciBjb3VudGluZyBmcm9tIDAgdG8gMyB3aXRoIGEgc3luY2hyb25vdXMgc2VxdWVuY2UgZnJvbSAxIHRvIDEwPC9jYXB0aW9uPlxuICogdmFyIHRpbWVyID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDQpO1xuICogdmFyIHNlcXVlbmNlID0gUnguT2JzZXJ2YWJsZS5yYW5nZSgxLCAxMCk7XG4gKiB2YXIgcmVzdWx0ID0gdGltZXIuY29uY2F0KHNlcXVlbmNlKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Q29uY2F0ZW5hdGUgMyBPYnNlcnZhYmxlczwvY2FwdGlvbj5cbiAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcbiAqIHZhciB0aW1lcjMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkudGFrZSgxMCk7XG4gKiB2YXIgcmVzdWx0ID0gdGltZXIxLmNvbmNhdCh0aW1lcjIsIHRpbWVyMyk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcFRvfVxuICpcbiAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gb3RoZXIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb25jYXRlbmF0ZSBhZnRlciB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBNb3JlIHRoYW4gb25lIGlucHV0IE9ic2VydmFibGVzIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPW51bGxdIEFuIG9wdGlvbmFsIFNjaGVkdWxlciB0byBzY2hlZHVsZSBlYWNoXG4gKiBPYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFsbCB2YWx1ZXMgb2YgZWFjaCBwYXNzZWQgT2JzZXJ2YWJsZSBtZXJnZWQgaW50byBhXG4gKiBzaW5nbGUgT2JzZXJ2YWJsZSwgaW4gb3JkZXIsIGluIHNlcmlhbCBmYXNoaW9uLlxuICogQG1ldGhvZCBjb25jYXRcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdFN0YXRpYy5hcHBseSh2b2lkIDAsIFt0aGlzXS5jb25jYXQob2JzZXJ2YWJsZXMpKTtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBvdXRwdXQgT2JzZXJ2YWJsZSB3aGljaCBzZXF1ZW50aWFsbHkgZW1pdHMgYWxsIHZhbHVlcyBmcm9tIGV2ZXJ5XG4gKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlIGFmdGVyIHRoZSBjdXJyZW50IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbmNhdGVuYXRlcyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieVxuICogc2VxdWVudGlhbGx5IGVtaXR0aW5nIHRoZWlyIHZhbHVlcywgb25lIE9ic2VydmFibGUgYWZ0ZXIgdGhlIG90aGVyLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBKb2lucyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieSBzdWJzY3JpYmluZyB0byB0aGVtIG9uZSBhdCBhIHRpbWUgYW5kXG4gKiBtZXJnaW5nIHRoZWlyIHJlc3VsdHMgaW50byB0aGUgb3V0cHV0IE9ic2VydmFibGUuIFdpbGwgd2FpdCBmb3IgZWFjaFxuICogT2JzZXJ2YWJsZSB0byBjb21wbGV0ZSBiZWZvcmUgbW92aW5nIG9uIHRvIHRoZSBuZXh0LlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIGEgdGltZXIgY291bnRpbmcgZnJvbSAwIHRvIDMgd2l0aCBhIHN5bmNocm9ub3VzIHNlcXVlbmNlIGZyb20gMSB0byAxMDwvY2FwdGlvbj5cbiAqIHZhciB0aW1lciA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkudGFrZSg0KTtcbiAqIHZhciBzZXF1ZW5jZSA9IFJ4Lk9ic2VydmFibGUucmFuZ2UoMSwgMTApO1xuICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuY29uY2F0KHRpbWVyLCBzZXF1ZW5jZSk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNvbmNhdGVuYXRlIDMgT2JzZXJ2YWJsZXM8L2NhcHRpb24+XG4gKiB2YXIgdGltZXIxID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS50YWtlKDEwKTtcbiAqIHZhciB0aW1lcjIgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDIwMDApLnRha2UoNik7XG4gKiB2YXIgdGltZXIzID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCg1MDApLnRha2UoMTApO1xuICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuY29uY2F0KHRpbWVyMSwgdGltZXIyLCB0aW1lcjMpO1xuICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb25jYXRBbGx9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXBUb31cbiAqXG4gKiBAcGFyYW0ge09ic2VydmFibGV9IGlucHV0MSBBbiBpbnB1dCBPYnNlcnZhYmxlIHRvIGNvbmNhdGVuYXRlIHdpdGggb3RoZXJzLlxuICogQHBhcmFtIHtPYnNlcnZhYmxlfSBpbnB1dDIgQW4gaW5wdXQgT2JzZXJ2YWJsZSB0byBjb25jYXRlbmF0ZSB3aXRoIG90aGVycy5cbiAqIE1vcmUgdGhhbiBvbmUgaW5wdXQgT2JzZXJ2YWJsZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXI9bnVsbF0gQW4gb3B0aW9uYWwgU2NoZWR1bGVyIHRvIHNjaGVkdWxlIGVhY2hcbiAqIE9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG9uLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQWxsIHZhbHVlcyBvZiBlYWNoIHBhc3NlZCBPYnNlcnZhYmxlIG1lcmdlZCBpbnRvIGFcbiAqIHNpbmdsZSBPYnNlcnZhYmxlLCBpbiBvcmRlciwgaW4gc2VyaWFsIGZhc2hpb24uXG4gKiBAc3RhdGljIHRydWVcbiAqIEBuYW1lIGNvbmNhdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gY29uY2F0U3RhdGljKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gbnVsbDtcbiAgICB2YXIgYXJncyA9IG9ic2VydmFibGVzO1xuICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGFyZ3Nbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFyZ3MucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlPYnNlcnZhYmxlXzEuQXJyYXlPYnNlcnZhYmxlKG9ic2VydmFibGVzLCBzY2hlZHVsZXIpLmxpZnQobmV3IG1lcmdlQWxsXzEuTWVyZ2VBbGxPcGVyYXRvcigxKSk7XG59XG5leHBvcnRzLmNvbmNhdFN0YXRpYyA9IGNvbmNhdFN0YXRpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29wZXJhdG9yL2NvbmNhdC5qc1xuICoqIG1vZHVsZSBpZCA9IDM4NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGNvbmNhdE1hcF8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvY29uY2F0TWFwJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29uY2F0TWFwID0gY29uY2F0TWFwXzEuY29uY2F0TWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL2NvbmNhdE1hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDM4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoJy4vbWVyZ2VNYXAnKTtcbi8qKlxuICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgaW4gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZSwgaW4gYSBzZXJpYWxpemVkIGZhc2hpb24gd2FpdGluZyBmb3IgZWFjaCBvbmUgdG8gY29tcGxldGUgYmVmb3JlXG4gKiBtZXJnaW5nIHRoZSBuZXh0LlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5NYXBzIGVhY2ggdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSwgdGhlbiBmbGF0dGVucyBhbGwgb2ZcbiAqIHRoZXNlIGlubmVyIE9ic2VydmFibGVzIHVzaW5nIHtAbGluayBjb25jYXRBbGx9Ljwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2NvbmNhdE1hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyBiYXNlZCBvbiBhcHBseWluZyBhIGZ1bmN0aW9uIHRoYXQgeW91XG4gKiBzdXBwbHkgdG8gZWFjaCBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGVyZSB0aGF0IGZ1bmN0aW9uXG4gKiByZXR1cm5zIGFuIChzby1jYWxsZWQgXCJpbm5lclwiKSBPYnNlcnZhYmxlLiBFYWNoIG5ldyBpbm5lciBPYnNlcnZhYmxlIGlzXG4gKiBjb25jYXRlbmF0ZWQgd2l0aCB0aGUgcHJldmlvdXMgaW5uZXIgT2JzZXJ2YWJsZS5cbiAqXG4gKiBfX1dhcm5pbmc6X18gaWYgc291cmNlIHZhbHVlcyBhcnJpdmUgZW5kbGVzc2x5IGFuZCBmYXN0ZXIgdGhhbiB0aGVpclxuICogY29ycmVzcG9uZGluZyBpbm5lciBPYnNlcnZhYmxlcyBjYW4gY29tcGxldGUsIGl0IHdpbGwgcmVzdWx0IGluIG1lbW9yeSBpc3N1ZXNcbiAqIGFzIGlubmVyIE9ic2VydmFibGVzIGFtYXNzIGluIGFuIHVuYm91bmRlZCBidWZmZXIgd2FpdGluZyBmb3IgdGhlaXIgdHVybiB0b1xuICogYmUgc3Vic2NyaWJlZCB0by5cbiAqXG4gKiBOb3RlOiBgY29uY2F0TWFwYCBpcyBlcXVpdmFsZW50IHRvIGBtZXJnZU1hcGAgd2l0aCBjb25jdXJyZW5jeSBwYXJhbWV0ZXIgc2V0XG4gKiB0byBgMWAuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Rm9yIGVhY2ggY2xpY2sgZXZlbnQsIHRpY2sgZXZlcnkgc2Vjb25kIGZyb20gMCB0byAzLCB3aXRoIG5vIGNvbmN1cnJlbmN5PC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3MuY29uY2F0TWFwKGV2ID0+IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkudGFrZSg0KSk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdEFsbH1cbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcFRvfVxuICogQHNlZSB7QGxpbmsgZXhoYXVzdE1hcH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuICogQHNlZSB7QGxpbmsgc3dpdGNoTWFwfVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsID9pbmRleDogbnVtYmVyKTogT2JzZXJ2YWJsZX0gcHJvamVjdCBBIGZ1bmN0aW9uXG4gKiB0aGF0LCB3aGVuIGFwcGxpZWQgdG8gYW4gaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcmV0dXJucyBhblxuICogT2JzZXJ2YWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cbiAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcbiAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIChvdXRlcikgZW1pc3Npb24gYW5kIHRoZSBpbm5lciBPYnNlcnZhYmxlXG4gKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG4gKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhbiBvYnNlcnZhYmxlIG9mIHZhbHVlcyBtZXJnZWQgZnJvbSB0aGUgcHJvamVjdGVkXG4gKiBPYnNlcnZhYmxlcyBhcyB0aGV5IHdlcmUgc3Vic2NyaWJlZCB0bywgb25lIGF0IGEgdGltZS4gT3B0aW9uYWxseSwgdGhlc2VcbiAqIHZhbHVlcyBtYXkgaGF2ZSBiZWVuIHByb2plY3RlZCBmcm9tIGEgcGFzc2VkIGBwcm9qZWN0UmVzdWx0YCBhcmd1bWVudC5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZVxuICogcHJvamVjdGlvbiBmdW5jdGlvbiAoYW5kIHRoZSBvcHRpb25hbCBgcmVzdWx0U2VsZWN0b3JgKSB0byBlYWNoIGl0ZW0gZW1pdHRlZFxuICogYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCB0YWtpbmcgdmFsdWVzIGZyb20gZWFjaCBwcm9qZWN0ZWQgaW5uZXJcbiAqIE9ic2VydmFibGUgc2VxdWVudGlhbGx5LlxuICogQG1ldGhvZCBjb25jYXRNYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IG1lcmdlTWFwXzEuTWVyZ2VNYXBPcGVyYXRvcihwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgMSkpO1xufVxuZXhwb3J0cy5jb25jYXRNYXAgPSBjb25jYXRNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9jb25jYXRNYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAzODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciBldmVyeV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvZXZlcnknKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5ldmVyeSA9IGV2ZXJ5XzEuZXZlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVyeS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci9ldmVyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDM4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHdoZXRoZXIgb3Igbm90IGV2ZXJ5IGl0ZW0gb2YgdGhlIHNvdXJjZSBzYXRpc2ZpZXMgdGhlIGNvbmRpdGlvbiBzcGVjaWZpZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcmVkaWNhdGUgYSBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgaWYgYW4gaXRlbSBtZWV0cyBhIHNwZWNpZmllZCBjb25kaXRpb24uXG4gKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIG9wdGlvbmFsIG9iamVjdCB0byB1c2UgZm9yIGB0aGlzYCBpbiB0aGUgY2FsbGJhY2tcbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgb2YgYm9vbGVhbnMgdGhhdCBkZXRlcm1pbmVzIGlmIGFsbCBpdGVtcyBvZiB0aGUgc291cmNlIE9ic2VydmFibGUgbWVldCB0aGUgY29uZGl0aW9uIHNwZWNpZmllZC5cbiAqIEBtZXRob2QgZXZlcnlcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGV2ZXJ5KHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IEV2ZXJ5T3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnLCB0aGlzKSk7XG59XG5leHBvcnRzLmV2ZXJ5ID0gZXZlcnk7XG52YXIgRXZlcnlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlcnlPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIEV2ZXJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEV2ZXJ5U3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMudGhpc0FyZywgdGhpcy5zb3VyY2UpKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVyeU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgRXZlcnlTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRXZlcnlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV2ZXJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnLCBzb3VyY2UpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG4gICAgfVxuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoZXZlcnlWYWx1ZU1hdGNoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChldmVyeVZhbHVlTWF0Y2gpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5pbmRleCsrLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlcnlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlcnkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vcGVyYXRvci9ldmVyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDM5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tZXJnZUFsbCcpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLm1lcmdlQWxsID0gbWVyZ2VBbGxfMS5tZXJnZUFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29wZXJhdG9yL21lcmdlQWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMzkxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZnJvbV8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9mcm9tJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tID0gZnJvbV8xLmZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3J4anMvYWRkL29ic2VydmFibGUvZnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDM5MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgRnJvbU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vRnJvbU9ic2VydmFibGUnKTtcbmV4cG9ydHMuZnJvbSA9IEZyb21PYnNlcnZhYmxlXzEuRnJvbU9ic2VydmFibGUuY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvZnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDM5M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKCcuLi91dGlsL2lzQXJyYXknKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzRnVuY3Rpb24nKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNQcm9taXNlJyk7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoJy4uL3V0aWwvaXNTY2hlZHVsZXInKTtcbnZhciBQcm9taXNlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9Qcm9taXNlT2JzZXJ2YWJsZScpO1xudmFyIEl0ZXJhdG9yT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9JdGVyYXRvck9ic2VydmFibGUnKTtcbnZhciBBcnJheU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vQXJyYXlPYnNlcnZhYmxlJyk7XG52YXIgQXJyYXlMaWtlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9BcnJheUxpa2VPYnNlcnZhYmxlJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBvYnNlcnZlT25fMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9yL29ic2VydmVPbicpO1xudmFyICQkb2JzZXJ2YWJsZSA9IHJlcXVpcmUoJ3N5bWJvbC1vYnNlcnZhYmxlJyk7XG52YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEZyb21PYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRnJvbU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRnJvbU9ic2VydmFibGUoaXNoLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbnVsbCk7XG4gICAgICAgIHRoaXMuaXNoID0gaXNoO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIGZyb20gYW4gQXJyYXksIGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBhIFByb21pc2UsIGFuXG4gICAgICogaXRlcmFibGUgb2JqZWN0LCBvciBhbiBPYnNlcnZhYmxlLWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbnZlcnRzIGFsbW9zdCBhbnl0aGluZyB0byBhbiBPYnNlcnZhYmxlLjwvc3Bhbj5cbiAgICAgKlxuICAgICAqIDxpbWcgc3JjPVwiLi9pbWcvZnJvbS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgKlxuICAgICAqIENvbnZlcnQgdmFyaW91cyBvdGhlciBvYmplY3RzIGFuZCBkYXRhIHR5cGVzIGludG8gT2JzZXJ2YWJsZXMuIGBmcm9tYFxuICAgICAqIGNvbnZlcnRzIGEgUHJvbWlzZSBvciBhbiBhcnJheS1saWtlIG9yIGFuXG4gICAgICogW2l0ZXJhYmxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9JdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhYmxlKVxuICAgICAqIG9iamVjdCBpbnRvIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgaXRlbXMgaW4gdGhhdCBwcm9taXNlIG9yIGFycmF5IG9yXG4gICAgICogaXRlcmFibGUuIEEgU3RyaW5nLCBpbiB0aGlzIGNvbnRleHQsIGlzIHRyZWF0ZWQgYXMgYW4gYXJyYXkgb2YgY2hhcmFjdGVycy5cbiAgICAgKiBPYnNlcnZhYmxlLWxpa2Ugb2JqZWN0cyAoY29udGFpbnMgYSBmdW5jdGlvbiBuYW1lZCB3aXRoIHRoZSBFUzIwMTUgU3ltYm9sXG4gICAgICogZm9yIE9ic2VydmFibGUpIGNhbiBhbHNvIGJlIGNvbnZlcnRlZCB0aHJvdWdoIHRoaXMgb3BlcmF0b3IuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Db252ZXJ0cyBhbiBhcnJheSB0byBhbiBPYnNlcnZhYmxlPC9jYXB0aW9uPlxuICAgICAqIHZhciBhcnJheSA9IFsxMCwgMjAsIDMwXTtcbiAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS5mcm9tKGFycmF5KTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q29udmVydCBhbiBpbmZpbml0ZSBpdGVyYWJsZSAoZnJvbSBhIGdlbmVyYXRvcikgdG8gYW4gT2JzZXJ2YWJsZTwvY2FwdGlvbj5cbiAgICAgKiBmdW5jdGlvbiogZ2VuZXJhdGVEb3VibGVzKHNlZWQpIHtcbiAgICAgKiAgIHZhciBpID0gc2VlZDtcbiAgICAgKiAgIHdoaWxlICh0cnVlKSB7XG4gICAgICogICAgIHlpZWxkIGk7XG4gICAgICogICAgIGkgPSAyICogaTsgLy8gZG91YmxlIGl0XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGl0ZXJhdG9yID0gZ2VuZXJhdGVEb3VibGVzKDMpO1xuICAgICAqIHZhciByZXN1bHQgPSBSeC5PYnNlcnZhYmxlLmZyb20oaXRlcmF0b3IpLnRha2UoMTApO1xuICAgICAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBjcmVhdGV9XG4gICAgICogQHNlZSB7QGxpbmsgZnJvbUV2ZW50fVxuICAgICAqIEBzZWUge0BsaW5rIGZyb21FdmVudFBhdHRlcm59XG4gICAgICogQHNlZSB7QGxpbmsgZnJvbVByb21pc2V9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09ic2VydmFibGVJbnB1dDxUPn0gaXNoIEEgc3Vic2NyaWJhYmxlIG9iamVjdCwgYSBQcm9taXNlLCBhblxuICAgICAqIE9ic2VydmFibGUtbGlrZSwgYW4gQXJyYXksIGFuIGl0ZXJhYmxlIG9yIGFuIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGJlXG4gICAgICogY29udmVydGVkLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogYW55LCBpOiBudW1iZXIpOiBUfSBbbWFwRm5dIEEgXCJtYXBcIiBmdW5jdGlvbiB0byBjYWxsXG4gICAgICogd2hlbiBjb252ZXJ0aW5nIGFycmF5LWxpa2Ugb2JqZWN0cywgd2hlcmUgYHhgIGlzIGEgdmFsdWUgZnJvbSB0aGVcbiAgICAgKiBhcnJheS1saWtlIGFuZCBgaWAgaXMgdGhlIGluZGV4IG9mIHRoYXQgdmFsdWUgaW4gdGhlIHNlcXVlbmNlLlxuICAgICAqIEBwYXJhbSB7YW55fSBbdGhpc0FyZ10gVGhlIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGNhbGxpbmcgdGhlIGBtYXBGbmAsXG4gICAgICogaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIFRoZSBzY2hlZHVsZXIgb24gd2hpY2ggdG8gc2NoZWR1bGUgdGhlXG4gICAgICogZW1pc3Npb25zIG9mIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBUaGUgT2JzZXJ2YWJsZSB3aG9zZSB2YWx1ZXMgYXJlIG9yaWdpbmFsbHkgZnJvbSB0aGVcbiAgICAgKiBpbnB1dCBvYmplY3QgdGhhdCB3YXMgY29udmVydGVkLlxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBuYW1lIGZyb21cbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIEZyb21PYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpc2gsIG1hcEZuT3JTY2hlZHVsZXIsIHRoaXNBcmcsIGxhc3RTY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIHZhciBtYXBGbiA9IG51bGw7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihtYXBGbk9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gbGFzdFNjaGVkdWxlciB8fCBudWxsO1xuICAgICAgICAgICAgbWFwRm4gPSBtYXBGbk9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gbWFwRm5PclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXNoWyQkb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNoIGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUgJiYgIXNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZyb21PYnNlcnZhYmxlKGlzaCwgc2NoZWR1bGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlfMS5pc0FycmF5KGlzaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZV8xLkFycmF5T2JzZXJ2YWJsZShpc2gsIHNjaGVkdWxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UoaXNoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZU9ic2VydmFibGVfMS5Qcm9taXNlT2JzZXJ2YWJsZShpc2gsIHNjaGVkdWxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaXNoW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGlzaCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yT2JzZXJ2YWJsZV8xLkl0ZXJhdG9yT2JzZXJ2YWJsZShpc2gsIG51bGwsIG51bGwsIHNjaGVkdWxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZShpc2gpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheUxpa2VPYnNlcnZhYmxlXzEuQXJyYXlMaWtlT2JzZXJ2YWJsZShpc2gsIG1hcEZuLCB0aGlzQXJnLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKGlzaCAhPT0gbnVsbCAmJiB0eXBlb2YgaXNoIHx8IGlzaCkgKyAnIGlzIG5vdCBvYnNlcnZhYmxlJyk7XG4gICAgfTtcbiAgICBGcm9tT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpc2ggPSB0aGlzLmlzaDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoc2NoZWR1bGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBpc2hbJCRvYnNlcnZhYmxlXSgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc2hbJCRvYnNlcnZhYmxlXSgpLnN1YnNjcmliZShuZXcgb2JzZXJ2ZU9uXzEuT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIDApKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEZyb21PYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Gcm9tT2JzZXJ2YWJsZSA9IEZyb21PYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RnJvbU9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0Zyb21PYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMzk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2lzT2JqZWN0Jyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4uL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc0Z1bmN0aW9uJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEl0ZXJhdG9yT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEl0ZXJhdG9yT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJdGVyYXRvck9ic2VydmFibGUoaXRlcmF0b3IsIHByb2plY3QsIHRoaXNBcmcsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaXRlcmF0b3IgY2Fubm90IGJlIG51bGwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0XzEuaXNPYmplY3QocHJvamVjdCkpIHtcbiAgICAgICAgICAgIHRoaXMudGhpc0FyZyA9IHByb2plY3Q7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHRoaXNBcmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ocHJvamVjdCkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvamVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1doZW4gcHJvdmlkZWQsIGBwcm9qZWN0YCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB9XG4gICAgSXRlcmF0b3JPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRvciwgcHJvamVjdCwgdGhpc0FyZywgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JPYnNlcnZhYmxlKGl0ZXJhdG9yLCBwcm9qZWN0LCB0aGlzQXJnLCBzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgSXRlcmF0b3JPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmluZGV4LCBoYXNFcnJvciA9IHN0YXRlLmhhc0Vycm9yLCB0aGlzQXJnID0gc3RhdGUudGhpc0FyZywgcHJvamVjdCA9IHN0YXRlLnByb2plY3QsIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3IsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioc3RhdGUuZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHByb2plY3QpLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG4gICAgICAgICAgICAgICAgc3RhdGUuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICBJdGVyYXRvck9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBpdGVyYXRvciA9IF9hLml0ZXJhdG9yLCBwcm9qZWN0ID0gX2EucHJvamVjdCwgdGhpc0FyZyA9IF9hLnRoaXNBcmcsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShJdGVyYXRvck9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsIHRoaXNBcmc6IHRoaXNBcmcsIHByb2plY3Q6IHByb2plY3QsIGl0ZXJhdG9yOiBpdGVyYXRvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKHByb2plY3QpLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCBpbmRleCsrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJdGVyYXRvck9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkl0ZXJhdG9yT2JzZXJ2YWJsZSA9IEl0ZXJhdG9yT2JzZXJ2YWJsZTtcbnZhciBTdHJpbmdJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyaW5nSXRlcmF0b3Ioc3RyLCBpZHgsIGxlbikge1xuICAgICAgICBpZiAoaWR4ID09PSB2b2lkIDApIHsgaWR4ID0gMDsgfVxuICAgICAgICBpZiAobGVuID09PSB2b2lkIDApIHsgbGVuID0gc3RyLmxlbmd0aDsgfVxuICAgICAgICB0aGlzLnN0ciA9IHN0cjtcbiAgICAgICAgdGhpcy5pZHggPSBpZHg7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzKTsgfTtcbiAgICBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWR4IDwgdGhpcy5sZW4gPyB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0ci5jaGFyQXQodGhpcy5pZHgrKylcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gU3RyaW5nSXRlcmF0b3I7XG59KCkpO1xudmFyIEFycmF5SXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFycmF5SXRlcmF0b3IoYXJyLCBpZHgsIGxlbikge1xuICAgICAgICBpZiAoaWR4ID09PSB2b2lkIDApIHsgaWR4ID0gMDsgfVxuICAgICAgICBpZiAobGVuID09PSB2b2lkIDApIHsgbGVuID0gdG9MZW5ndGgoYXJyKTsgfVxuICAgICAgICB0aGlzLmFyciA9IGFycjtcbiAgICAgICAgdGhpcy5pZHggPSBpZHg7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvcl8xLiQkaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuYXJyW3RoaXMuaWR4KytdXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFycmF5SXRlcmF0b3I7XG59KCkpO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3Iob2JqKSB7XG4gICAgdmFyIGkgPSBvYmpbaXRlcmF0b3JfMS4kJGl0ZXJhdG9yXTtcbiAgICBpZiAoIWkgJiYgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdJdGVyYXRvcihvYmopO1xuICAgIH1cbiAgICBpZiAoIWkgJiYgb2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcihvYmopO1xuICAgIH1cbiAgICBpZiAoIWkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2l0ZXJhdG9yXzEuJCRpdGVyYXRvcl0oKTtcbn1cbnZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG5mdW5jdGlvbiB0b0xlbmd0aChvKSB7XG4gICAgdmFyIGxlbiA9ICtvLmxlbmd0aDtcbiAgICBpZiAoaXNOYU4obGVuKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGxlbiA9PT0gMCB8fCAhbnVtYmVySXNGaW5pdGUobGVuKSkge1xuICAgICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgICBsZW4gPSBzaWduKGxlbikgKiBNYXRoLmZsb29yKE1hdGguYWJzKGxlbikpO1xuICAgIGlmIChsZW4gPD0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGxlbiA+IG1heFNhZmVJbnRlZ2VyKSB7XG4gICAgICAgIHJldHVybiBtYXhTYWZlSW50ZWdlcjtcbiAgICB9XG4gICAgcmV0dXJuIGxlbjtcbn1cbmZ1bmN0aW9uIG51bWJlcklzRmluaXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgcm9vdF8xLnJvb3QuaXNGaW5pdGUodmFsdWUpO1xufVxuZnVuY3Rpb24gc2lnbih2YWx1ZSkge1xuICAgIHZhciB2YWx1ZUFzTnVtYmVyID0gK3ZhbHVlO1xuICAgIGlmICh2YWx1ZUFzTnVtYmVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyO1xuICAgIH1cbiAgICBpZiAoaXNOYU4odmFsdWVBc051bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlQXNOdW1iZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyIDwgMCA/IC0xIDogMTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUl0ZXJhdG9yT2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvSXRlcmF0b3JPYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMzk1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL09ic2VydmFibGUnKTtcbnZhciBTY2FsYXJPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL1NjYWxhck9ic2VydmFibGUnKTtcbnZhciBFbXB0eU9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vRW1wdHlPYnNlcnZhYmxlJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEFycmF5TGlrZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcnJheUxpa2VPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFycmF5TGlrZU9ic2VydmFibGUoYXJyYXlMaWtlLCBtYXBGbiwgdGhpc0FyZywgc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmFycmF5TGlrZSA9IGFycmF5TGlrZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIGlmICghbWFwRm4gJiYgIXNjaGVkdWxlciAmJiBhcnJheUxpa2UubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NjYWxhciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gYXJyYXlMaWtlWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBGbikge1xuICAgICAgICAgICAgdGhpcy5tYXBGbiA9IG1hcEZuLmJpbmQodGhpc0FyZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQXJyYXlMaWtlT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoYXJyYXlMaWtlLCBtYXBGbiwgdGhpc0FyZywgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA9PT0gMSAmJiAhbWFwRm4pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyT2JzZXJ2YWJsZV8xLlNjYWxhck9ic2VydmFibGUoYXJyYXlMaWtlWzBdLCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheUxpa2VPYnNlcnZhYmxlKGFycmF5TGlrZSwgbWFwRm4sIHRoaXNBcmcsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFycmF5TGlrZU9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGFycmF5TGlrZSA9IHN0YXRlLmFycmF5TGlrZSwgaW5kZXggPSBzdGF0ZS5pbmRleCwgbGVuZ3RoID0gc3RhdGUubGVuZ3RoLCBtYXBGbiA9IHN0YXRlLm1hcEZuLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICAgICAgaWYgKHN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IG1hcEZuID8gbWFwRm4oYXJyYXlMaWtlW2luZGV4XSwgaW5kZXgpIDogYXJyYXlMaWtlW2luZGV4XTtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbiAgICB9O1xuICAgIEFycmF5TGlrZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBhcnJheUxpa2UgPSBfYS5hcnJheUxpa2UsIG1hcEZuID0gX2EubWFwRm4sIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoQXJyYXlMaWtlT2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGFycmF5TGlrZTogYXJyYXlMaWtlLCBpbmRleDogaW5kZXgsIGxlbmd0aDogbGVuZ3RoLCBtYXBGbjogbWFwRm4sIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGggJiYgIXN1YnNjcmliZXIuaXNVbnN1YnNjcmliZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBtYXBGbiA/IG1hcEZuKGFycmF5TGlrZVtpXSwgaSkgOiBhcnJheUxpa2VbaV07XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBcnJheUxpa2VPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5BcnJheUxpa2VPYnNlcnZhYmxlID0gQXJyYXlMaWtlT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFycmF5TGlrZU9ic2VydmFibGUuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9vYnNlcnZhYmxlL0FycmF5TGlrZU9ic2VydmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzOTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJ3J4anMvT2JzZXJ2YWJsZScpO1xudmFyIG9mXzEgPSByZXF1aXJlKCdyeGpzL29ic2VydmFibGUvb2YnKTtcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG52YXIgdXJsX3RyZWVfMSA9IHJlcXVpcmUoJy4vdXJsX3RyZWUnKTtcbnZhciBOb01hdGNoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb01hdGNoKHNlZ21lbnQpIHtcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09IHZvaWQgMCkgeyBzZWdtZW50ID0gbnVsbDsgfVxuICAgICAgICB0aGlzLnNlZ21lbnQgPSBzZWdtZW50O1xuICAgIH1cbiAgICByZXR1cm4gTm9NYXRjaDtcbn0oKSk7XG52YXIgR2xvYmFsUmVkaXJlY3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdsb2JhbFJlZGlyZWN0KHBhdGhzKSB7XG4gICAgICAgIHRoaXMucGF0aHMgPSBwYXRocztcbiAgICB9XG4gICAgcmV0dXJuIEdsb2JhbFJlZGlyZWN0O1xufSgpKTtcbmZ1bmN0aW9uIGFwcGx5UmVkaXJlY3RzKHVybFRyZWUsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVVcmxUcmVlKHVybFRyZWUsIGV4cGFuZFNlZ21lbnQoY29uZmlnLCB1cmxUcmVlLnJvb3QsIHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgR2xvYmFsUmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVVcmxUcmVlKHVybFRyZWUsIG5ldyB1cmxfdHJlZV8xLlVybFNlZ21lbnQoW10sIChfYSA9IHt9LCBfYVtzaGFyZWRfMS5QUklNQVJZX09VVExFVF0gPSBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KGUucGF0aHMsIHt9KSwgX2EpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZSBpbnN0YW5jZW9mIE5vTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKG9icykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYnMuZXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IG1hdGNoIGFueSByb3V0ZXM6ICdcIiArIGUuc2VnbWVudCArIFwiJ1wiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKG9icykgeyByZXR1cm4gb2JzLmVycm9yKGUpOyB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgX2E7XG59XG5leHBvcnRzLmFwcGx5UmVkaXJlY3RzID0gYXBwbHlSZWRpcmVjdHM7XG5mdW5jdGlvbiBjcmVhdGVVcmxUcmVlKHVybFRyZWUsIHJvb3QpIHtcbiAgICByZXR1cm4gb2ZfMS5vZihuZXcgdXJsX3RyZWVfMS5VcmxUcmVlKHJvb3QsIHVybFRyZWUucXVlcnlQYXJhbXMsIHVybFRyZWUuZnJhZ21lbnQpKTtcbn1cbmZ1bmN0aW9uIGV4cGFuZFNlZ21lbnQocm91dGVzLCBzZWdtZW50LCBvdXRsZXQpIHtcbiAgICBpZiAoc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyB1cmxfdHJlZV8xLlVybFNlZ21lbnQoW10sIGV4cGFuZFNlZ21lbnRDaGlsZHJlbihyb3V0ZXMsIHNlZ21lbnQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBleHBhbmRQYXRoc1dpdGhQYXJhbXMoc2VnbWVudCwgcm91dGVzLCBzZWdtZW50LnBhdGhzV2l0aFBhcmFtcywgb3V0bGV0LCB0cnVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleHBhbmRTZWdtZW50Q2hpbGRyZW4ocm91dGVzLCBzZWdtZW50KSB7XG4gICAgcmV0dXJuIHVybF90cmVlXzEubWFwQ2hpbGRyZW4oc2VnbWVudCwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkgeyByZXR1cm4gZXhwYW5kU2VnbWVudChyb3V0ZXMsIGNoaWxkLCBjaGlsZE91dGxldCk7IH0pO1xufVxuZnVuY3Rpb24gZXhwYW5kUGF0aHNXaXRoUGFyYW1zKHNlZ21lbnQsIHJvdXRlcywgcGF0aHMsIG91dGxldCwgYWxsb3dSZWRpcmVjdHMpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHJvdXRlc18xID0gcm91dGVzOyBfaSA8IHJvdXRlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgciA9IHJvdXRlc18xW19pXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBleHBhbmRQYXRoc1dpdGhQYXJhbXNBZ2FpbnN0Um91dGUoc2VnbWVudCwgcm91dGVzLCByLCBwYXRocywgb3V0bGV0LCBhbGxvd1JlZGlyZWN0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBOb01hdGNoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBOb01hdGNoKHNlZ21lbnQpO1xufVxuZnVuY3Rpb24gZXhwYW5kUGF0aHNXaXRoUGFyYW1zQWdhaW5zdFJvdXRlKHNlZ21lbnQsIHJvdXRlcywgcm91dGUsIHBhdGhzLCBvdXRsZXQsIGFsbG93UmVkaXJlY3RzKSB7XG4gICAgaWYgKChyb3V0ZS5vdXRsZXQgPyByb3V0ZS5vdXRsZXQgOiBzaGFyZWRfMS5QUklNQVJZX09VVExFVCkgIT09IG91dGxldClcbiAgICAgICAgdGhyb3cgbmV3IE5vTWF0Y2goKTtcbiAgICBpZiAocm91dGUucmVkaXJlY3RUbyAmJiAhYWxsb3dSZWRpcmVjdHMpXG4gICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgaWYgKHJvdXRlLnJlZGlyZWN0VG8pIHtcbiAgICAgICAgcmV0dXJuIGV4cGFuZFBhdGhzV2l0aFBhcmFtc0FnYWluc3RSb3V0ZVVzaW5nUmVkaXJlY3Qoc2VnbWVudCwgcm91dGVzLCByb3V0ZSwgcGF0aHMsIG91dGxldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbWF0Y2hQYXRoc1dpdGhQYXJhbXNBZ2FpbnN0Um91dGUoc2VnbWVudCwgcm91dGUsIHBhdGhzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleHBhbmRQYXRoc1dpdGhQYXJhbXNBZ2FpbnN0Um91dGVVc2luZ1JlZGlyZWN0KHNlZ21lbnQsIHJvdXRlcywgcm91dGUsIHBhdGhzLCBvdXRsZXQpIHtcbiAgICBpZiAocm91dGUucGF0aCA9PT0gJyoqJykge1xuICAgICAgICByZXR1cm4gZXhwYW5kV2lsZENhcmRXaXRoUGFyYW1zQWdhaW5zdFJvdXRlVXNpbmdSZWRpcmVjdChyb3V0ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZXhwYW5kUmVndWxhclBhdGhXaXRoUGFyYW1zQWdhaW5zdFJvdXRlVXNpbmdSZWRpcmVjdChzZWdtZW50LCByb3V0ZXMsIHJvdXRlLCBwYXRocywgb3V0bGV0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBleHBhbmRXaWxkQ2FyZFdpdGhQYXJhbXNBZ2FpbnN0Um91dGVVc2luZ1JlZGlyZWN0KHJvdXRlKSB7XG4gICAgdmFyIG5ld1BhdGhzID0gYXBwbHlSZWRpcmVjdENvbW1hbmRzKFtdLCByb3V0ZS5yZWRpcmVjdFRvLCB7fSk7XG4gICAgaWYgKHJvdXRlLnJlZGlyZWN0VG8uc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgIHRocm93IG5ldyBHbG9iYWxSZWRpcmVjdChuZXdQYXRocyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChuZXdQYXRocywge30pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGV4cGFuZFJlZ3VsYXJQYXRoV2l0aFBhcmFtc0FnYWluc3RSb3V0ZVVzaW5nUmVkaXJlY3Qoc2VnbWVudCwgcm91dGVzLCByb3V0ZSwgcGF0aHMsIG91dGxldCkge1xuICAgIHZhciBfYSA9IG1hdGNoKHNlZ21lbnQsIHJvdXRlLCBwYXRocyksIGNvbnN1bWVkUGF0aHMgPSBfYS5jb25zdW1lZFBhdGhzLCBsYXN0Q2hpbGQgPSBfYS5sYXN0Q2hpbGQsIHBvc2l0aW9uYWxQYXJhbVNlZ21lbnRzID0gX2EucG9zaXRpb25hbFBhcmFtU2VnbWVudHM7XG4gICAgdmFyIG5ld1BhdGhzID0gYXBwbHlSZWRpcmVjdENvbW1hbmRzKGNvbnN1bWVkUGF0aHMsIHJvdXRlLnJlZGlyZWN0VG8sIHBvc2l0aW9uYWxQYXJhbVNlZ21lbnRzKTtcbiAgICBpZiAocm91dGUucmVkaXJlY3RUby5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEdsb2JhbFJlZGlyZWN0KG5ld1BhdGhzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBleHBhbmRQYXRoc1dpdGhQYXJhbXMoc2VnbWVudCwgcm91dGVzLCBuZXdQYXRocy5jb25jYXQocGF0aHMuc2xpY2UobGFzdENoaWxkKSksIG91dGxldCwgZmFsc2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hdGNoUGF0aHNXaXRoUGFyYW1zQWdhaW5zdFJvdXRlKHNlZ21lbnQsIHJvdXRlLCBwYXRocykge1xuICAgIGlmIChyb3V0ZS5wYXRoID09PSAnKionKSB7XG4gICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KHBhdGhzLCB7fSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgX2EgPSBtYXRjaChzZWdtZW50LCByb3V0ZSwgcGF0aHMpLCBjb25zdW1lZFBhdGhzID0gX2EuY29uc3VtZWRQYXRocywgbGFzdENoaWxkID0gX2EubGFzdENoaWxkO1xuICAgICAgICB2YXIgY2hpbGRDb25maWcgPSByb3V0ZS5jaGlsZHJlbiA/IHJvdXRlLmNoaWxkcmVuIDogW107XG4gICAgICAgIHZhciBzbGljZWRQYXRoID0gcGF0aHMuc2xpY2UobGFzdENoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkQ29uZmlnLmxlbmd0aCA9PT0gMCAmJiBzbGljZWRQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB1cmxfdHJlZV8xLlVybFNlZ21lbnQoY29uc3VtZWRQYXRocywge30pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNsaWNlZFBhdGgubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGV4cGFuZFNlZ21lbnRDaGlsZHJlbihjaGlsZENvbmZpZywgc2VnbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChjb25zdW1lZFBhdGhzLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3MgPSBleHBhbmRQYXRoc1dpdGhQYXJhbXMoc2VnbWVudCwgY2hpbGRDb25maWcsIHNsaWNlZFBhdGgsIHNoYXJlZF8xLlBSSU1BUllfT1VUTEVULCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KGNvbnN1bWVkUGF0aHMuY29uY2F0KGNzLnBhdGhzV2l0aFBhcmFtcyksIGNzLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG1hdGNoKHNlZ21lbnQsIHJvdXRlLCBwYXRocykge1xuICAgIGlmIChyb3V0ZS5wYXRoID09PSAnJykge1xuICAgICAgICBpZiAocm91dGUudGVybWluYWwgJiYgKE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDAgfHwgcGF0aHMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBjb25zdW1lZFBhdGhzOiBbXSwgbGFzdENoaWxkOiAwLCBwb3NpdGlvbmFsUGFyYW1TZWdtZW50czoge30gfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xuICAgIHZhciBwb3NpdGlvbmFsUGFyYW1TZWdtZW50cyA9IHt9O1xuICAgIHZhciBjb25zdW1lZFBhdGhzID0gW107XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID49IHBhdGhzLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gcGF0aHNbY3VycmVudEluZGV4XTtcbiAgICAgICAgdmFyIHAgPSBwYXJ0c1tpXTtcbiAgICAgICAgdmFyIGlzUG9zUGFyYW0gPSBwLnN0YXJ0c1dpdGgoJzonKTtcbiAgICAgICAgaWYgKCFpc1Bvc1BhcmFtICYmIHAgIT09IGN1cnJlbnQucGF0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgICAgIGlmIChpc1Bvc1BhcmFtKSB7XG4gICAgICAgICAgICBwb3NpdGlvbmFsUGFyYW1TZWdtZW50c1twLnN1YnN0cmluZygxKV0gPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN1bWVkUGF0aHMucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgfVxuICAgIGlmIChyb3V0ZS50ZXJtaW5hbCAmJiAoT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID4gMCB8fCBjdXJyZW50SW5kZXggPCBwYXRocy5sZW5ndGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgfVxuICAgIHJldHVybiB7IGNvbnN1bWVkUGF0aHM6IGNvbnN1bWVkUGF0aHMsIGxhc3RDaGlsZDogY3VycmVudEluZGV4LCBwb3NpdGlvbmFsUGFyYW1TZWdtZW50czogcG9zaXRpb25hbFBhcmFtU2VnbWVudHMgfTtcbn1cbmZ1bmN0aW9uIGFwcGx5UmVkaXJlY3RDb21tYW5kcyhwYXRocywgcmVkaXJlY3RUbywgcG9zUGFyYW1zKSB7XG4gICAgaWYgKHJlZGlyZWN0VG8uc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IHJlZGlyZWN0VG8uc3Vic3RyaW5nKDEpLnNwbGl0KCcvJyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVQYXRocyhyZWRpcmVjdFRvLCBwYXJ0cywgcGF0aHMsIHBvc1BhcmFtcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcGFydHMgPSByZWRpcmVjdFRvLnNwbGl0KCcvJyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVQYXRocyhyZWRpcmVjdFRvLCBwYXJ0cywgcGF0aHMsIHBvc1BhcmFtcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUGF0aHMocmVkaXJlY3RUbywgcGFydHMsIHNlZ21lbnRzLCBwb3NQYXJhbXMpIHtcbiAgICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLnN0YXJ0c1dpdGgoJzonKSA/IGZpbmRQb3NQYXJhbShwLCBwb3NQYXJhbXMsIHJlZGlyZWN0VG8pIDpcbiAgICAgICAgZmluZE9yQ3JlYXRlUGF0aChwLCBzZWdtZW50cyk7IH0pO1xufVxuZnVuY3Rpb24gZmluZFBvc1BhcmFtKHBhcnQsIHBvc1BhcmFtcywgcmVkaXJlY3RUbykge1xuICAgIHZhciBwYXJhbU5hbWUgPSBwYXJ0LnN1YnN0cmluZygxKTtcbiAgICB2YXIgcG9zID0gcG9zUGFyYW1zW3BhcmFtTmFtZV07XG4gICAgaWYgKCFwb3MpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZWRpcmVjdCB0byAnXCIgKyByZWRpcmVjdFRvICsgXCInLiBDYW5ub3QgZmluZCAnXCIgKyBwYXJ0ICsgXCInLlwiKTtcbiAgICByZXR1cm4gcG9zO1xufVxuZnVuY3Rpb24gZmluZE9yQ3JlYXRlUGF0aChwYXJ0LCBwYXRocykge1xuICAgIHZhciBtYXRjaGluZ0luZGV4ID0gcGF0aHMuZmluZEluZGV4KGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnBhdGggPT09IHBhcnQ7IH0pO1xuICAgIGlmIChtYXRjaGluZ0luZGV4ID4gLTEpIHtcbiAgICAgICAgdmFyIHIgPSBwYXRoc1ttYXRjaGluZ0luZGV4XTtcbiAgICAgICAgcGF0aHMuc3BsaWNlKG1hdGNoaW5nSW5kZXgpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxQYXRoV2l0aFBhcmFtcyhwYXJ0LCB7fSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhCd2JIbGZjbVZrYVhKbFkzUnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJGd2NHeDVYM0psWkdseVpXTjBjeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRXNNa0pCUVhsQ0xHbENRVUZwUWl4RFFVRkRMRU5CUVVFN1FVRkZNME1zYlVKQlFXdENMRzlDUVVGdlFpeERRVUZETEVOQlFVRTdRVUZIZGtNc2RVSkJRVFpDTEZWQlFWVXNRMEZCUXl4RFFVRkJPMEZCUTNoRExIbENRVUZyUlN4WlFVRlpMRU5CUVVNc1EwRkJRVHRCUVVVdlJUdEpRVU5GTEdsQ1FVRnRRaXhQUVVFd1FqdFJRVUZxUXl4MVFrRkJhVU1zUjBGQmFrTXNZMEZCYVVNN1VVRkJNVUlzV1VGQlR5eEhRVUZRTEU5QlFVOHNRMEZCYlVJN1NVRkJSeXhEUVVGRE8wbEJRMjVFTEdOQlFVTTdRVUZCUkN4RFFVRkRMRUZCUmtRc1NVRkZRenRCUVVORU8wbEJRMFVzZDBKQlFXMUNMRXRCUVRCQ08xRkJRVEZDTEZWQlFVc3NSMEZCVEN4TFFVRkxMRU5CUVhGQ08wbEJRVWNzUTBGQlF6dEpRVU51UkN4eFFrRkJRenRCUVVGRUxFTkJRVU1zUVVGR1JDeEpRVVZETzBGQlJVUXNkMEpCUVN0Q0xFOUJRV2RDTEVWQlFVVXNUVUZCYjBJN1NVRkRia1VzU1VGQlNTeERRVUZETzFGQlEwZ3NUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXhQUVVGUExFVkJRVVVzWVVGQllTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxIVkNRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNKR0xFTkJRVVU3U1VGQlFTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMWdzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WlFVRlpMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkRhRUlzVDBGQlR5eEZRVUZGTEVsQlFVa3NjVUpCUVZVc1EwRkJReXhGUVVGRkxFVkJRVVVzVlVGQlF5eEhRVUZETEhWQ1FVRmpMRU5CUVVNc1IwRkJSU3hKUVVGSkxIRkNRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUzBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTndSaXhEUVVGRE8xRkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1dVRkJXU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaERMRTFCUVUwc1EwRkJReXhKUVVGSkxIVkNRVUZWTEVOQlEycENMRlZCUVVNc1IwRkJjMEk3WjBKQlEyNUNMRTlCUVVFc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl3clFrRkJOa0lzUTBGQlF5eERRVUZETEU5QlFVOHNUVUZCUnl4RFFVRkRMRU5CUVVNN1dVRkJMMFFzUTBGQkswUXNRMEZCUXl4RFFVRkRPMUZCUXpORkxFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTk9MRTFCUVUwc1EwRkJReXhKUVVGSkxIVkNRVUZWTEVOQlFWVXNWVUZCUXl4SFFVRnpRaXhKUVVGTExFOUJRVUVzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJXaXhEUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU16UlN4RFFVRkRPMGxCUTBnc1EwRkJRenM3UVVGRFNDeERRVUZETzBGQlptVXNjMEpCUVdNc2FVSkJaVGRDTEVOQlFVRTdRVUZGUkN4MVFrRkJkVUlzVDBGQlowSXNSVUZCUlN4SlFVRm5RanRKUVVOMlJDeE5RVUZOTEVOQlFVTXNUMEZCUlN4RFFVRkZMRWxCUVVrc2EwSkJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjJSU3hEUVVGRE8wRkJSVVFzZFVKQlFYVkNMRTFCUVdVc1JVRkJSU3hQUVVGdFFpeEZRVUZGTEUxQlFXTTdTVUZEZWtVc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhKUVVGSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKR0xFMUJRVTBzUTBGQlF5eEpRVUZKTEhGQ1FVRlZMRU5CUVVNc1JVRkJSU3hGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzQkZMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5PTEUxQlFVMHNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJReXhsUVVGbExFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNaR0xFTkJRVU03UVVGRFNDeERRVUZETzBGQlJVUXNLMEpCUVN0Q0xFMUJRV1VzUlVGQlJTeFBRVUZ0UWp0SlFVTnFSU3hOUVVGTkxFTkJRVU1zYzBKQlFWY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJReXhMUVVGTExFVkJRVVVzVjBGQlZ5eEpRVUZMTEU5QlFVRXNZVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eERRVUZETEVWQlFYcERMRU5CUVhsRExFTkJRVU1zUTBGQlF6dEJRVU5xUnl4RFFVRkRPMEZCUlVRc0swSkJRMGtzVDBGQmJVSXNSVUZCUlN4TlFVRmxMRVZCUVVVc1MwRkJNRUlzUlVGQlJTeE5RVUZqTEVWQlEyaEdMR05CUVhWQ08wbEJRM3BDTEVkQlFVY3NRMEZCUXl4RFFVRlZMRlZCUVUwc1JVRkJUaXhwUWtGQlRTeEZRVUZPTEc5Q1FVRk5MRVZCUVU0c1NVRkJUU3hEUVVGRE8xRkJRV2hDTEVsQlFVa3NRMEZCUXl4bFFVRkJPMUZCUTFJc1NVRkJTU3hEUVVGRE8xbEJRMGdzVFVGQlRTeERRVUZETEdsRFFVRnBReXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVTTdVVUZET1VZc1EwRkJSVHRSUVVGQkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRXQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4WlFVRlpMRTlCUVU4c1EwRkJReXhEUVVGRE8yZENRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNaRExFTkJRVU03UzBGRFJqdEpRVU5FTEUxQlFVMHNTVUZCU1N4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRE4wSXNRMEZCUXp0QlFVVkVMREpEUVVOSkxFOUJRVzFDTEVWQlFVVXNUVUZCWlN4RlFVRkZMRXRCUVZrc1JVRkJSU3hMUVVFd1FpeEZRVUZGTEUxQlFXTXNSVUZET1VZc1kwRkJkVUk3U1VGRGVrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc2RVSkJRV01zUTBGQlF5eExRVUZMTEUxQlFVMHNRMEZCUXp0UlFVRkRMRTFCUVUwc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU51Uml4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRPMUZCUVVNc1RVRkJUU3hKUVVGSkxFOUJRVThzUlVGQlJTeERRVUZETzBsQlJUZEVMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKQ0xFMUJRVTBzUTBGQlF5dzRRMEZCT0VNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGREwwWXNRMEZCUXp0SlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMDRzVFVGQlRTeERRVUZETEdkRFFVRm5ReXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRha1VzUTBGQlF6dEJRVU5JTEVOQlFVTTdRVUZGUkN4M1JFRkRTU3hQUVVGdFFpeEZRVUZGTEUxQlFXVXNSVUZCUlN4TFFVRlpMRVZCUVVVc1MwRkJNRUlzUlVGRE9VVXNUVUZCWXp0SlFVTm9RaXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGVFSXNUVUZCVFN4RFFVRkRMR2xFUVVGcFJDeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTJ4RkxFTkJRVU03U1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTk9MRTFCUVUwc1EwRkJReXh2UkVGQmIwUXNRMEZEZGtRc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRemRETEVOQlFVTTdRVUZEU0N4RFFVRkRPMEZCUlVRc01rUkJRVEpFTEV0QlFWazdTVUZEY2tVc1NVRkJUU3hSUVVGUkxFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRha1VzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKRExFMUJRVTBzU1VGQlNTeGpRVUZqTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTA0c1RVRkJUU3hEUVVGRExFbEJRVWtzY1VKQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGRFTXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3c0UkVGRFNTeFBRVUZ0UWl4RlFVRkZMRTFCUVdVc1JVRkJSU3hMUVVGWkxFVkJRVVVzUzBGQk1FSXNSVUZET1VVc1RVRkJZenRKUVVOb1FpeEpRVUZCTEdsRFFVRjNSaXhGUVVGcVJpeG5RMEZCWVN4RlFVRkZMSGRDUVVGVExFVkJRVVVzYjBSQlFYVkNMRU5CUVdsRE8wbEJRM3BHTEVsQlFVMHNVVUZCVVN4SFFVTldMSEZDUVVGeFFpeERRVUZETEdGQlFXRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGUExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1NVRkRla1lzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKRExFMUJRVTBzU1VGQlNTeGpRVUZqTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTA0c1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVTjRRaXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU12UlN4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVWRUxEQkRRVU5KTEU5QlFXMUNMRVZCUVVVc1MwRkJXU3hGUVVGRkxFdEJRVEJDTzBsQlF5OUVMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVONFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4eFFrRkJWU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnVReXhEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4SlFVRkJMR2xEUVVFclJDeEZRVUY0UkN4blEwRkJZU3hGUVVGRkxIZENRVUZUTEVOQlFXbERPMUZCUTJoRkxFbEJRVTBzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEZWtRc1NVRkJUU3hWUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVVeFF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zU1VGQlNTeFZRVUZWTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVFUXNUVUZCVFN4RFFVRkRMRWxCUVVrc2NVSkJRVlVzUTBGQlF5eGhRVUZoTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkhNME1zUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU12UlN4SlFVRk5MRkZCUVZFc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRE4wUXNUVUZCVFN4RFFVRkRMRWxCUVVrc2NVSkJRVlVzUTBGQlF5eGhRVUZoTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkZha1FzUTBGQlF6dFJRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTA0c1NVRkJUU3hGUVVGRkxFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1QwRkJUeXhGUVVGRkxGZEJRVmNzUlVGQlJTeFZRVUZWTEVWQlFVVXNkVUpCUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU42Uml4TlFVRk5MRU5CUVVNc1NVRkJTU3h4UWtGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVNdlJTeERRVUZETzBsQlEwZ3NRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3hsUVVGbExFOUJRVzFDTEVWQlFVVXNTMEZCV1N4RlFVRkZMRXRCUVRCQ08wbEJTekZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjBRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU55Uml4TlFVRk5MRWxCUVVrc1QwRkJUeXhGUVVGRkxFTkJRVU03VVVGRGRFSXNRMEZCUXp0UlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMDRzVFVGQlRTeERRVUZETEVWQlFVTXNZVUZCWVN4RlFVRkZMRVZCUVVVc1JVRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF5eEZRVUZGTEhWQ1FVRjFRaXhGUVVGRkxFVkJRVVVzUlVGQlF5eERRVUZETzFGQlEzaEZMRU5CUVVNN1NVRkRTQ3hEUVVGRE8wbEJSVVFzU1VGQlRTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVONFFpeEpRVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6bENMRWxCUVUwc2RVSkJRWFZDTEVkQlFYRkRMRVZCUVVVc1EwRkJRenRKUVVOeVJTeEpRVUZOTEdGQlFXRXNSMEZCZDBJc1JVRkJSU3hEUVVGRE8wbEJSVGxETEVsQlFVa3NXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVWeVFpeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU4wUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhaUVVGWkxFbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0WlFVRkRMRTFCUVUwc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU4wUkN4SlFVRk5MRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZGY0VNc1NVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTI1Q0xFbEJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRmNrTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhWUVVGVkxFbEJRVWtzUTBGQlF5eExRVUZMTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkJReXhOUVVGTkxFbEJRVWtzVDBGQlR5eEZRVUZGTEVOQlFVTTdVVUZETTBRc1JVRkJSU3hEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm1MSFZDUVVGMVFpeERRVUZETEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdVVUZEY0VRc1EwRkJRenRSUVVORUxHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkROVUlzV1VGQldTeEZRVUZGTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyaEhMRTFCUVUwc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU4wUWl4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExFVkJRVU1zWlVGQlFTeGhRVUZoTEVWQlFVVXNVMEZCVXl4RlFVRkZMRmxCUVZrc1JVRkJSU3g1UWtGQlFTeDFRa0ZCZFVJc1JVRkJReXhEUVVGRE8wRkJRek5GTEVOQlFVTTdRVUZGUkN3clFrRkRTU3hMUVVFd1FpeEZRVUZGTEZWQlFXdENMRVZCUXpsRExGTkJRVEpETzBsQlF6ZERMRVZCUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJReTlDTEVsQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMnBFTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1NVRkRNVVFzUTBGQlF6dEpRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTA0c1NVRkJUU3hMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOd1F5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxFTkJRVU03UVVGRFNDeERRVUZETzBGQlJVUXNjVUpCUTBrc1ZVRkJhMElzUlVGQlJTeExRVUZsTEVWQlFVVXNVVUZCTmtJc1JVRkRiRVVzVTBGQk1rTTdTVUZETjBNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExb3NWVUZCUVN4RFFVRkRMRWxCUVVrc1QwRkJRU3hEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRmxCUVZrc1EwRkJReXhEUVVGRExFVkJRVVVzVTBGQlV5eEZRVUZGTEZWQlFWVXNRMEZCUXp0UlFVTjBReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hEUVVGRExFVkJSR3BFTEVOQlEybEVMRU5CUVVNc1EwRkJRenRCUVVNNVJDeERRVUZETzBGQlJVUXNjMEpCUTBrc1NVRkJXU3hGUVVGRkxGTkJRVEpETEVWQlEzcEVMRlZCUVd0Q08wbEJRM0JDTEVsQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY0VNc1NVRkJUU3hIUVVGSExFZEJRVWNzVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTJwRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eDVRa0ZCZFVJc1ZVRkJWU3gzUWtGQmJVSXNTVUZCU1N4UFFVRkpMRU5CUVVNc1EwRkJRenRKUVVONFJpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTJJc1EwRkJRenRCUVVWRUxEQkNRVUV3UWl4SlFVRlpMRVZCUVVVc1MwRkJNRUk3U1VGRGFFVXNTVUZCVFN4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZCTEVOQlFVTXNTVUZCU1N4UFFVRkJMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzU1VGQlNTeEZRVUZtTEVOQlFXVXNRMEZCUXl4RFFVRkRPMGxCUXpWRUxFVkJRVVVzUTBGQlF5eERRVUZETEdGQlFXRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRrSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFGQlF5OUNMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZETlVJc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5ZTEVOQlFVTTdTVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOT0xFMUJRVTBzUTBGQlF5eEpRVUZKTERSQ1FVRnBRaXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjZReXhEUVVGRE8wRkJRMGdzUTBGQlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdUMkp6WlhKMllXSnNaWDBnWm5KdmJTQW5jbmhxY3k5UFluTmxjblpoWW14bEp6dGNibWx0Y0c5eWRDQjdUMkp6WlhKMlpYSjlJR1p5YjIwZ0ozSjRhbk12VDJKelpYSjJaWEluTzF4dWFXMXdiM0owSUh0dlppQjlJR1p5YjIwZ0ozSjRhbk12YjJKelpYSjJZV0pzWlM5dlppYzdYRzVjYm1sdGNHOXlkQ0I3VW05MWRHVXNJRkp2ZFhSbGNrTnZibVpwWjMwZ1puSnZiU0FuTGk5amIyNW1hV2NuTzF4dWFXMXdiM0owSUh0UVVrbE5RVkpaWDA5VlZFeEZWSDBnWm5KdmJTQW5MaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJSHRWY214UVlYUm9WMmwwYUZCaGNtRnRjeXdnVlhKc1UyVm5iV1Z1ZEN3Z1ZYSnNWSEpsWlN3Z2JXRndRMmhwYkdSeVpXNTlJR1p5YjIwZ0p5NHZkWEpzWDNSeVpXVW5PMXh1WEc1amJHRnpjeUJPYjAxaGRHTm9JSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSFZpYkdsaklITmxaMjFsYm5RNklGVnliRk5sWjIxbGJuUWdQU0J1ZFd4c0tTQjdmVnh1ZlZ4dVkyeGhjM01nUjJ4dlltRnNVbVZrYVhKbFkzUWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdkV0pzYVdNZ2NHRjBhSE02SUZWeWJGQmhkR2hYYVhSb1VHRnlZVzF6VzEwcElIdDlYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaGNIQnNlVkpsWkdseVpXTjBjeWgxY214VWNtVmxPaUJWY214VWNtVmxMQ0JqYjI1bWFXYzZJRkp2ZFhSbGNrTnZibVpwWnlrNklFOWljMlZ5ZG1GaWJHVThWWEpzVkhKbFpUNGdlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZWY214VWNtVmxLSFZ5YkZSeVpXVXNJR1Y0Y0dGdVpGTmxaMjFsYm5Rb1kyOXVabWxuTENCMWNteFVjbVZsTG5KdmIzUXNJRkJTU1UxQlVsbGZUMVZVVEVWVUtTazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCcFppQW9aU0JwYm5OMFlXNWpaVzltSUVkc2IySmhiRkpsWkdseVpXTjBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFZYSnNWSEpsWlNoY2JpQWdJQ0FnSUNBZ0lDQjFjbXhVY21WbExDQnVaWGNnVlhKc1UyVm5iV1Z1ZENoYlhTd2dlMXRRVWtsTlFWSlpYMDlWVkV4RlZGMDZJRzVsZHlCVmNteFRaV2R0Wlc1MEtHVXVjR0YwYUhNc0lIdDlLWDBwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dVZ2FXNXpkR0Z1WTJWdlppQk9iMDFoZEdOb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTlpYzJWeWRtRmliR1U4VlhKc1ZISmxaVDRvWEc0Z0lDQWdJQ0FnSUNBZ0tHOWljem9nVDJKelpYSjJaWEk4VlhKc1ZISmxaVDRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWN5NWxjbkp2Y2lodVpYY2dSWEp5YjNJb1lFTmhibTV2ZENCdFlYUmphQ0JoYm5rZ2NtOTFkR1Z6T2lBbkpIdGxMbk5sWjIxbGJuUjlKMkFwS1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVDJKelpYSjJZV0pzWlR4VmNteFVjbVZsUGlnb2IySnpPaUJQWW5ObGNuWmxjanhWY214VWNtVmxQaWtnUFQ0Z2IySnpMbVZ5Y205eUtHVXBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxWWEpzVkhKbFpTaDFjbXhVY21WbE9pQlZjbXhVY21WbExDQnliMjkwT2lCVmNteFRaV2R0Wlc1MEtUb2dUMkp6WlhKMllXSnNaVHhWY214VWNtVmxQaUI3WEc0Z0lISmxkSFZ5YmlCdlppQW9ibVYzSUZWeWJGUnlaV1VvY205dmRDd2dkWEpzVkhKbFpTNXhkV1Z5ZVZCaGNtRnRjeXdnZFhKc1ZISmxaUzVtY21GbmJXVnVkQ2twTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsZUhCaGJtUlRaV2R0Wlc1MEtISnZkWFJsY3pvZ1VtOTFkR1ZiWFN3Z2MyVm5iV1Z1ZERvZ1ZYSnNVMlZuYldWdWRDd2diM1YwYkdWME9pQnpkSEpwYm1jcE9pQlZjbXhUWldkdFpXNTBJSHRjYmlBZ2FXWWdLSE5sWjIxbGJuUXVjR0YwYUhOWGFYUm9VR0Z5WVcxekxteGxibWQwYUNBOVBUMGdNQ0FtSmlCUFltcGxZM1F1YTJWNWN5aHpaV2R0Wlc1MExtTm9hV3hrY21WdUtTNXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJWY214VFpXZHRaVzUwS0Z0ZExDQmxlSEJoYm1SVFpXZHRaVzUwUTJocGJHUnlaVzRvY205MWRHVnpMQ0J6WldkdFpXNTBLU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJR1Y0Y0dGdVpGQmhkR2h6VjJsMGFGQmhjbUZ0Y3loelpXZHRaVzUwTENCeWIzVjBaWE1zSUhObFoyMWxiblF1Y0dGMGFITlhhWFJvVUdGeVlXMXpMQ0J2ZFhSc1pYUXNJSFJ5ZFdVcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Y0Y0dGdVpGTmxaMjFsYm5SRGFHbHNaSEpsYmloeWIzVjBaWE02SUZKdmRYUmxXMTBzSUhObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5RcE9pQjdXMjVoYldVNklITjBjbWx1WjEwNklGVnliRk5sWjIxbGJuUjlJSHRjYmlBZ2NtVjBkWEp1SUcxaGNFTm9hV3hrY21WdUtITmxaMjFsYm5Rc0lDaGphR2xzWkN3Z1kyaHBiR1JQZFhSc1pYUXBJRDArSUdWNGNHRnVaRk5sWjIxbGJuUW9jbTkxZEdWekxDQmphR2xzWkN3Z1kyaHBiR1JQZFhSc1pYUXBLVHRjYm4xY2JseHVablZ1WTNScGIyNGdaWGh3WVc1a1VHRjBhSE5YYVhSb1VHRnlZVzF6S0Z4dUlDQWdJSE5sWjIxbGJuUTZJRlZ5YkZObFoyMWxiblFzSUhKdmRYUmxjem9nVW05MWRHVmJYU3dnY0dGMGFITTZJRlZ5YkZCaGRHaFhhWFJvVUdGeVlXMXpXMTBzSUc5MWRHeGxkRG9nYzNSeWFXNW5MRnh1SUNBZ0lHRnNiRzkzVW1Wa2FYSmxZM1J6T2lCaWIyOXNaV0Z1S1RvZ1ZYSnNVMlZuYldWdWRDQjdYRzRnSUdadmNpQW9iR1YwSUhJZ2IyWWdjbTkxZEdWektTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmxlSEJoYm1SUVlYUm9jMWRwZEdoUVlYSmhiWE5CWjJGcGJuTjBVbTkxZEdVb2MyVm5iV1Z1ZEN3Z2NtOTFkR1Z6TENCeUxDQndZWFJvY3l3Z2IzVjBiR1YwTENCaGJHeHZkMUpsWkdseVpXTjBjeWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRW9aU0JwYm5OMFlXNWpaVzltSUU1dlRXRjBZMmdwS1NCMGFISnZkeUJsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IwYUhKdmR5QnVaWGNnVG05TllYUmphQ2h6WldkdFpXNTBLVHRjYm4xY2JseHVablZ1WTNScGIyNGdaWGh3WVc1a1VHRjBhSE5YYVhSb1VHRnlZVzF6UVdkaGFXNXpkRkp2ZFhSbEtGeHVJQ0FnSUhObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5Rc0lISnZkWFJsY3pvZ1VtOTFkR1ZiWFN3Z2NtOTFkR1U2SUZKdmRYUmxMQ0J3WVhSb2N6b2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTmJYU3dnYjNWMGJHVjBPaUJ6ZEhKcGJtY3NYRzRnSUNBZ1lXeHNiM2RTWldScGNtVmpkSE02SUdKdmIyeGxZVzRwT2lCVmNteFRaV2R0Wlc1MElIdGNiaUFnYVdZZ0tDaHliM1YwWlM1dmRYUnNaWFFnUHlCeWIzVjBaUzV2ZFhSc1pYUWdPaUJRVWtsTlFWSlpYMDlWVkV4RlZDa2dJVDA5SUc5MWRHeGxkQ2tnZEdoeWIzY2dibVYzSUU1dlRXRjBZMmdvS1R0Y2JpQWdhV1lnS0hKdmRYUmxMbkpsWkdseVpXTjBWRzhnSmlZZ0lXRnNiRzkzVW1Wa2FYSmxZM1J6S1NCMGFISnZkeUJ1WlhjZ1RtOU5ZWFJqYUNncE8xeHVYRzRnSUdsbUlDaHliM1YwWlM1eVpXUnBjbVZqZEZSdktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWNGNHRnVaRkJoZEdoelYybDBhRkJoY21GdGMwRm5ZV2x1YzNSU2IzVjBaVlZ6YVc1blVtVmthWEpsWTNRb2MyVm5iV1Z1ZEN3Z2NtOTFkR1Z6TENCeWIzVjBaU3dnY0dGMGFITXNJRzkxZEd4bGRDazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHMWhkR05vVUdGMGFITlhhWFJvVUdGeVlXMXpRV2RoYVc1emRGSnZkWFJsS0hObFoyMWxiblFzSUhKdmRYUmxMQ0J3WVhSb2N5azdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWlhod1lXNWtVR0YwYUhOWGFYUm9VR0Z5WVcxelFXZGhhVzV6ZEZKdmRYUmxWWE5wYm1kU1pXUnBjbVZqZENoY2JpQWdJQ0J6WldkdFpXNTBPaUJWY214VFpXZHRaVzUwTENCeWIzVjBaWE02SUZKdmRYUmxXMTBzSUhKdmRYUmxPaUJTYjNWMFpTd2djR0YwYUhNNklGVnliRkJoZEdoWGFYUm9VR0Z5WVcxelcxMHNYRzRnSUNBZ2IzVjBiR1YwT2lCemRISnBibWNwT2lCVmNteFRaV2R0Wlc1MElIdGNiaUFnYVdZZ0tISnZkWFJsTG5CaGRHZ2dQVDA5SUNjcUtpY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pYaHdZVzVrVjJsc1pFTmhjbVJYYVhSb1VHRnlZVzF6UVdkaGFXNXpkRkp2ZFhSbFZYTnBibWRTWldScGNtVmpkQ2h5YjNWMFpTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVjRjR0Z1WkZKbFozVnNZWEpRWVhSb1YybDBhRkJoY21GdGMwRm5ZV2x1YzNSU2IzVjBaVlZ6YVc1blVtVmthWEpsWTNRb1hHNGdJQ0FnSUNBZ0lITmxaMjFsYm5Rc0lISnZkWFJsY3l3Z2NtOTFkR1VzSUhCaGRHaHpMQ0J2ZFhSc1pYUXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWNGNHRnVaRmRwYkdSRFlYSmtWMmwwYUZCaGNtRnRjMEZuWVdsdWMzUlNiM1YwWlZWemFXNW5VbVZrYVhKbFkzUW9jbTkxZEdVNklGSnZkWFJsS1RvZ1ZYSnNVMlZuYldWdWRDQjdYRzRnSUdOdmJuTjBJRzVsZDFCaGRHaHpJRDBnWVhCd2JIbFNaV1JwY21WamRFTnZiVzFoYm1SektGdGRMQ0J5YjNWMFpTNXlaV1JwY21WamRGUnZMQ0I3ZlNrN1hHNGdJR2xtSUNoeWIzVjBaUzV5WldScGNtVmpkRlJ2TG5OMFlYSjBjMWRwZEdnb0p5OG5LU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJIYkc5aVlXeFNaV1JwY21WamRDaHVaWGRRWVhSb2N5azdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJWY214VFpXZHRaVzUwS0c1bGQxQmhkR2h6TENCN2ZTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWlhod1lXNWtVbVZuZFd4aGNsQmhkR2hYYVhSb1VHRnlZVzF6UVdkaGFXNXpkRkp2ZFhSbFZYTnBibWRTWldScGNtVmpkQ2hjYmlBZ0lDQnpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J5YjNWMFpYTTZJRkp2ZFhSbFcxMHNJSEp2ZFhSbE9pQlNiM1YwWlN3Z2NHRjBhSE02SUZWeWJGQmhkR2hYYVhSb1VHRnlZVzF6VzEwc1hHNGdJQ0FnYjNWMGJHVjBPaUJ6ZEhKcGJtY3BPaUJWY214VFpXZHRaVzUwSUh0Y2JpQWdZMjl1YzNRZ2UyTnZibk4xYldWa1VHRjBhSE1zSUd4aGMzUkRhR2xzWkN3Z2NHOXphWFJwYjI1aGJGQmhjbUZ0VTJWbmJXVnVkSE45SUQwZ2JXRjBZMmdvYzJWbmJXVnVkQ3dnY205MWRHVXNJSEJoZEdoektUdGNiaUFnWTI5dWMzUWdibVYzVUdGMGFITWdQVnh1SUNBZ0lDQWdZWEJ3YkhsU1pXUnBjbVZqZEVOdmJXMWhibVJ6S0dOdmJuTjFiV1ZrVUdGMGFITXNJSEp2ZFhSbExuSmxaR2x5WldOMFZHOHNJRHhoYm5rK2NHOXphWFJwYjI1aGJGQmhjbUZ0VTJWbmJXVnVkSE1wTzF4dUlDQnBaaUFvY205MWRHVXVjbVZrYVhKbFkzUlVieTV6ZEdGeWRITlhhWFJvS0Njdkp5a3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSMnh2WW1Gc1VtVmthWEpsWTNRb2JtVjNVR0YwYUhNcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCbGVIQmhibVJRWVhSb2MxZHBkR2hRWVhKaGJYTW9YRzRnSUNBZ0lDQWdJSE5sWjIxbGJuUXNJSEp2ZFhSbGN5d2dibVYzVUdGMGFITXVZMjl1WTJGMEtIQmhkR2h6TG5Oc2FXTmxLR3hoYzNSRGFHbHNaQ2twTENCdmRYUnNaWFFzSUdaaGJITmxLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYUmphRkJoZEdoelYybDBhRkJoY21GdGMwRm5ZV2x1YzNSU2IzVjBaU2hjYmlBZ0lDQnpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J5YjNWMFpUb2dVbTkxZEdVc0lIQmhkR2h6T2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZEtUb2dWWEpzVTJWbmJXVnVkQ0I3WEc0Z0lHbG1JQ2h5YjNWMFpTNXdZWFJvSUQwOVBTQW5LaW9uS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVmNteFRaV2R0Wlc1MEtIQmhkR2h6TENCN2ZTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdZMjl1YzNRZ2UyTnZibk4xYldWa1VHRjBhSE1zSUd4aGMzUkRhR2xzWkgwZ1BTQnRZWFJqYUNoelpXZHRaVzUwTENCeWIzVjBaU3dnY0dGMGFITXBPMXh1SUNBZ0lHTnZibk4wSUdOb2FXeGtRMjl1Wm1sbklEMGdjbTkxZEdVdVkyaHBiR1J5Wlc0Z1B5QnliM1YwWlM1amFHbHNaSEpsYmlBNklGdGRPMXh1SUNBZ0lHTnZibk4wSUhOc2FXTmxaRkJoZEdnZ1BTQndZWFJvY3k1emJHbGpaU2hzWVhOMFEyaHBiR1FwTzF4dVhHNGdJQ0FnYVdZZ0tHTm9hV3hrUTI5dVptbG5MbXhsYm1kMGFDQTlQVDBnTUNBbUppQnpiR2xqWldSUVlYUm9MbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlZjbXhUWldkdFpXNTBLR052Ym5OMWJXVmtVR0YwYUhNc0lIdDlLVHRjYmx4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nWTJobFkyc2dkR2hoZENCMGFHVWdjbWxuYUhRZ2MyVm5iV1Z1ZENCcGN5QndjbVZ6Wlc1MFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoemJHbGpaV1JRWVhSb0xteGxibWQwYUNBOVBUMGdNQ0FtSmlCUFltcGxZM1F1YTJWNWN5aHpaV2R0Wlc1MExtTm9hV3hrY21WdUtTNXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmphR2xzWkhKbGJpQTlJR1Y0Y0dGdVpGTmxaMjFsYm5SRGFHbHNaSEpsYmloamFHbHNaRU52Ym1acFp5d2djMlZuYldWdWRDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRlZ5YkZObFoyMWxiblFvWTI5dWMzVnRaV1JRWVhSb2N5d2dZMmhwYkdSeVpXNHBPMXh1WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHTnZibk4wSUdOeklEMGdaWGh3WVc1a1VHRjBhSE5YYVhSb1VHRnlZVzF6S0hObFoyMWxiblFzSUdOb2FXeGtRMjl1Wm1sbkxDQnpiR2xqWldSUVlYUm9MQ0JRVWtsTlFWSlpYMDlWVkV4RlZDd2dkSEoxWlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGVnliRk5sWjIxbGJuUW9ZMjl1YzNWdFpXUlFZWFJvY3k1amIyNWpZWFFvWTNNdWNHRjBhSE5YYVhSb1VHRnlZVzF6S1N3Z1kzTXVZMmhwYkdSeVpXNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ0WVhSamFDaHpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J5YjNWMFpUb2dVbTkxZEdVc0lIQmhkR2h6T2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZEtUb2dlMXh1SUNCamIyNXpkVzFsWkZCaGRHaHpPaUJWY214UVlYUm9WMmwwYUZCaGNtRnRjMXRkTEZ4dUlDQnNZWE4wUTJocGJHUTZJRzUxYldKbGNpeGNiaUFnY0c5emFYUnBiMjVoYkZCaGNtRnRVMlZuYldWdWRITTZJSHRiYXpvZ2MzUnlhVzVuWFRvZ1ZYSnNVR0YwYUZkcGRHaFFZWEpoYlhOOVhHNTlJSHRjYmlBZ2FXWWdLSEp2ZFhSbExuQmhkR2dnUFQwOUlDY25LU0I3WEc0Z0lDQWdhV1lnS0hKdmRYUmxMblJsY20xcGJtRnNJQ1ltSUNoUFltcGxZM1F1YTJWNWN5aHpaV2R0Wlc1MExtTm9hV3hrY21WdUtTNXNaVzVuZEdnZ1BpQXdJSHg4SUhCaGRHaHpMbXhsYm1kMGFDQStJREFwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1RtOU5ZWFJqYUNncE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMk52Ym5OMWJXVmtVR0YwYUhNNklGdGRMQ0JzWVhOMFEyaHBiR1E2SURBc0lIQnZjMmwwYVc5dVlXeFFZWEpoYlZObFoyMWxiblJ6T2lCN2ZYMDdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2NHRjBhQ0E5SUhKdmRYUmxMbkJoZEdnN1hHNGdJR052Ym5OMElIQmhjblJ6SUQwZ2NHRjBhQzV6Y0d4cGRDZ25MeWNwTzF4dUlDQmpiMjV6ZENCd2IzTnBkR2x2Ym1Gc1VHRnlZVzFUWldkdFpXNTBjem9nZTF0ck9pQnpkSEpwYm1kZE9pQlZjbXhRWVhSb1YybDBhRkJoY21GdGMzMGdQU0I3ZlR0Y2JpQWdZMjl1YzNRZ1kyOXVjM1Z0WldSUVlYUm9jem9nVlhKc1VHRjBhRmRwZEdoUVlYSmhiWE5iWFNBOUlGdGRPMXh1WEc0Z0lHeGxkQ0JqZFhKeVpXNTBTVzVrWlhnZ1BTQXdPMXh1WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2djR0Z5ZEhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQnBaaUFvWTNWeWNtVnVkRWx1WkdWNElENDlJSEJoZEdoekxteGxibWQwYUNrZ2RHaHliM2NnYm1WM0lFNXZUV0YwWTJnb0tUdGNiaUFnSUNCamIyNXpkQ0JqZFhKeVpXNTBJRDBnY0dGMGFITmJZM1Z5Y21WdWRFbHVaR1Y0WFR0Y2JseHVJQ0FnSUdOdmJuTjBJSEFnUFNCd1lYSjBjMXRwWFR0Y2JpQWdJQ0JqYjI1emRDQnBjMUJ2YzFCaGNtRnRJRDBnY0M1emRHRnlkSE5YYVhSb0tDYzZKeWs3WEc1Y2JpQWdJQ0JwWmlBb0lXbHpVRzl6VUdGeVlXMGdKaVlnY0NBaFBUMGdZM1Z5Y21WdWRDNXdZWFJvS1NCMGFISnZkeUJ1WlhjZ1RtOU5ZWFJqYUNncE8xeHVJQ0FnSUdsbUlDaHBjMUJ2YzFCaGNtRnRLU0I3WEc0Z0lDQWdJQ0J3YjNOcGRHbHZibUZzVUdGeVlXMVRaV2R0Wlc1MGMxdHdMbk4xWW5OMGNtbHVaeWd4S1YwZ1BTQmpkWEp5Wlc1ME8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRXMWxaRkJoZEdoekxuQjFjMmdvWTNWeWNtVnVkQ2s3WEc0Z0lDQWdZM1Z5Y21WdWRFbHVaR1Y0S3lzN1hHNGdJSDFjYmx4dUlDQnBaaUFvY205MWRHVXVkR1Z5YldsdVlXd2dKaVlnS0U5aWFtVmpkQzVyWlhsektITmxaMjFsYm5RdVkyaHBiR1J5Wlc0cExteGxibWQwYUNBK0lEQWdmSHdnWTNWeWNtVnVkRWx1WkdWNElEd2djR0YwYUhNdWJHVnVaM1JvS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCT2IwMWhkR05vS0NrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2UyTnZibk4xYldWa1VHRjBhSE1zSUd4aGMzUkRhR2xzWkRvZ1kzVnljbVZ1ZEVsdVpHVjRMQ0J3YjNOcGRHbHZibUZzVUdGeVlXMVRaV2R0Wlc1MGMzMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRndjR3g1VW1Wa2FYSmxZM1JEYjIxdFlXNWtjeWhjYmlBZ0lDQndZWFJvY3pvZ1ZYSnNVR0YwYUZkcGRHaFFZWEpoYlhOYlhTd2djbVZrYVhKbFkzUlViem9nYzNSeWFXNW5MRnh1SUNBZ0lIQnZjMUJoY21GdGN6b2dlMXRyT2lCemRISnBibWRkT2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzMwcE9pQlZjbXhRWVhSb1YybDBhRkJoY21GdGMxdGRJSHRjYmlBZ2FXWWdLSEpsWkdseVpXTjBWRzh1YzNSaGNuUnpWMmwwYUNnbkx5Y3BLU0I3WEc0Z0lDQWdZMjl1YzNRZ2NHRnlkSE1nUFNCeVpXUnBjbVZqZEZSdkxuTjFZbk4wY21sdVp5Z3hLUzV6Y0d4cGRDZ25MeWNwTzF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWUVlYUm9jeWh5WldScGNtVmpkRlJ2TENCd1lYSjBjeXdnY0dGMGFITXNJSEJ2YzFCaGNtRnRjeWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWTI5dWMzUWdjR0Z5ZEhNZ1BTQnlaV1JwY21WamRGUnZMbk53YkdsMEtDY3ZKeWs3WEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlZCaGRHaHpLSEpsWkdseVpXTjBWRzhzSUhCaGNuUnpMQ0J3WVhSb2N5d2djRzl6VUdGeVlXMXpLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZRWVhSb2N5aGNiaUFnSUNCeVpXUnBjbVZqZEZSdk9pQnpkSEpwYm1jc0lIQmhjblJ6T2lCemRISnBibWRiWFN3Z2MyVm5iV1Z1ZEhNNklGVnliRkJoZEdoWGFYUm9VR0Z5WVcxelcxMHNYRzRnSUNBZ2NHOXpVR0Z5WVcxek9pQjdXMnM2SUhOMGNtbHVaMTA2SUZWeWJGQmhkR2hYYVhSb1VHRnlZVzF6ZlNrNklGVnliRkJoZEdoWGFYUm9VR0Z5WVcxelcxMGdlMXh1SUNCeVpYUjFjbTRnY0dGeWRITXViV0Z3S0Z4dUlDQWdJQ0FnY0NBOVBpQndMbk4wWVhKMGMxZHBkR2dvSnpvbktTQS9JR1pwYm1SUWIzTlFZWEpoYlNod0xDQndiM05RWVhKaGJYTXNJSEpsWkdseVpXTjBWRzhwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1a1QzSkRjbVZoZEdWUVlYUm9LSEFzSUhObFoyMWxiblJ6S1NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdacGJtUlFiM05RWVhKaGJTaGNiaUFnSUNCd1lYSjBPaUJ6ZEhKcGJtY3NJSEJ2YzFCaGNtRnRjem9nZTF0ck9pQnpkSEpwYm1kZE9pQlZjbXhRWVhSb1YybDBhRkJoY21GdGMzMHNYRzRnSUNBZ2NtVmthWEpsWTNSVWJ6b2djM1J5YVc1bktUb2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTWdlMXh1SUNCamIyNXpkQ0J3WVhKaGJVNWhiV1VnUFNCd1lYSjBMbk4xWW5OMGNtbHVaeWd4S1R0Y2JpQWdZMjl1YzNRZ2NHOXpJRDBnY0c5elVHRnlZVzF6VzNCaGNtRnRUbUZ0WlYwN1hHNGdJR2xtSUNnaGNHOXpLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRU5oYm01dmRDQnlaV1JwY21WamRDQjBieUFuSkh0eVpXUnBjbVZqZEZSdmZTY3VJRU5oYm01dmRDQm1hVzVrSUNja2UzQmhjblI5Snk1Z0tUdGNiaUFnY21WMGRYSnVJSEJ2Y3p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sdVpFOXlRM0psWVhSbFVHRjBhQ2h3WVhKME9pQnpkSEpwYm1jc0lIQmhkR2h6T2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZEtUb2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTWdlMXh1SUNCamIyNXpkQ0J0WVhSamFHbHVaMGx1WkdWNElEMGdjR0YwYUhNdVptbHVaRWx1WkdWNEtITWdQVDRnY3k1d1lYUm9JRDA5UFNCd1lYSjBLVHRjYmlBZ2FXWWdLRzFoZEdOb2FXNW5TVzVrWlhnZ1BpQXRNU2tnZTF4dUlDQWdJR052Ym5OMElISWdQU0J3WVhSb2MxdHRZWFJqYUdsdVowbHVaR1Y0WFR0Y2JpQWdJQ0J3WVhSb2N5NXpjR3hwWTJVb2JXRjBZMmhwYm1kSmJtUmxlQ2s3WEc0Z0lDQWdjbVYwZFhKdUlISTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJWY214UVlYUm9WMmwwYUZCaGNtRnRjeWh3WVhKMExDQjdmU2s3WEc0Z0lIMWNibjFjYmlKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvYXBwbHlfcmVkaXJlY3RzLmpzXG4gKiogbW9kdWxlIGlkID0gMzk5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuUFJJTUFSWV9PVVRMRVQgPSAnUFJJTUFSWV9PVVRMRVQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJoaGNtVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDNOb1lYSmxaQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlNXRXNjMEpCUVdNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1RtRnRaU0J2WmlCMGFHVWdjSEpwYldGeWVTQnZkWFJzWlhRdVhHNGdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdVRkpKVFVGU1dWOVBWVlJNUlZRZ1BTQW5VRkpKVFVGU1dWOVBWVlJNUlZRbk8xeHVYRzR2S2lwY2JpQXFJRUVnWTI5c2JHVmpkR2x2YmlCdlppQndZWEpoYldWMFpYSnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ2RIbHdaU0JRWVhKaGJYTWdQU0I3WEc0Z0lGdHJaWGs2SUhOMGNtbHVaMTA2SUdGdWVWeHVmVHRjYmlKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvc2hhcmVkLmpzXG4gKiogbW9kdWxlIGlkID0gNDAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG52YXIgdXJsX3NlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoJy4vdXJsX3NlcmlhbGl6ZXInKTtcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWxzL2NvbGxlY3Rpb24nKTtcbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5VXJsVHJlZSgpIHtcbiAgICByZXR1cm4gbmV3IFVybFRyZWUobmV3IFVybFNlZ21lbnQoW10sIHt9KSwge30sIG51bGwpO1xufVxuZXhwb3J0cy5jcmVhdGVFbXB0eVVybFRyZWUgPSBjcmVhdGVFbXB0eVVybFRyZWU7XG5mdW5jdGlvbiBjb250YWluc1RyZWUoY29udGFpbmVyLCBjb250YWluZWUsIGV4YWN0KSB7XG4gICAgaWYgKGV4YWN0KSB7XG4gICAgICAgIHJldHVybiBlcXVhbFNlZ21lbnRzKGNvbnRhaW5lci5yb290LCBjb250YWluZWUucm9vdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGFpbnNTZWdtZW50KGNvbnRhaW5lci5yb290LCBjb250YWluZWUucm9vdCk7XG4gICAgfVxufVxuZXhwb3J0cy5jb250YWluc1RyZWUgPSBjb250YWluc1RyZWU7XG5mdW5jdGlvbiBlcXVhbFNlZ21lbnRzKGNvbnRhaW5lciwgY29udGFpbmVlKSB7XG4gICAgaWYgKCFlcXVhbFBhdGgoY29udGFpbmVyLnBhdGhzV2l0aFBhcmFtcywgY29udGFpbmVlLnBhdGhzV2l0aFBhcmFtcykpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoT2JqZWN0LmtleXMoY29udGFpbmVyLmNoaWxkcmVuKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGNvbnRhaW5lZS5jaGlsZHJlbikubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgYyBpbiBjb250YWluZWUuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFjb250YWluZXIuY2hpbGRyZW5bY10pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghZXF1YWxTZWdtZW50cyhjb250YWluZXIuY2hpbGRyZW5bY10sIGNvbnRhaW5lZS5jaGlsZHJlbltjXSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY29udGFpbnNTZWdtZW50KGNvbnRhaW5lciwgY29udGFpbmVlKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zU2VnbWVudEhlbHBlcihjb250YWluZXIsIGNvbnRhaW5lZSwgY29udGFpbmVlLnBhdGhzV2l0aFBhcmFtcyk7XG59XG5mdW5jdGlvbiBjb250YWluc1NlZ21lbnRIZWxwZXIoY29udGFpbmVyLCBjb250YWluZWUsIGNvbnRhaW5lZVBhdGhzKSB7XG4gICAgaWYgKGNvbnRhaW5lci5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoID4gY29udGFpbmVlUGF0aHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gY29udGFpbmVyLnBhdGhzV2l0aFBhcmFtcy5zbGljZSgwLCBjb250YWluZWVQYXRocy5sZW5ndGgpO1xuICAgICAgICBpZiAoIWVxdWFsUGF0aChjdXJyZW50LCBjb250YWluZWVQYXRocykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhjb250YWluZWUuY2hpbGRyZW4pLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250YWluZXIucGF0aHNXaXRoUGFyYW1zLmxlbmd0aCA9PT0gY29udGFpbmVlUGF0aHMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghZXF1YWxQYXRoKGNvbnRhaW5lci5wYXRoc1dpdGhQYXJhbXMsIGNvbnRhaW5lZVBhdGhzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgYyBpbiBjb250YWluZWUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyLmNoaWxkcmVuW2NdKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghY29udGFpbnNTZWdtZW50KGNvbnRhaW5lci5jaGlsZHJlbltjXSwgY29udGFpbmVlLmNoaWxkcmVuW2NdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY3VycmVudCA9IGNvbnRhaW5lZVBhdGhzLnNsaWNlKDAsIGNvbnRhaW5lci5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoKTtcbiAgICAgICAgdmFyIG5leHQgPSBjb250YWluZWVQYXRocy5zbGljZShjb250YWluZXIucGF0aHNXaXRoUGFyYW1zLmxlbmd0aCk7XG4gICAgICAgIGlmICghZXF1YWxQYXRoKGNvbnRhaW5lci5wYXRoc1dpdGhQYXJhbXMsIGN1cnJlbnQpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gY29udGFpbnNTZWdtZW50SGVscGVyKGNvbnRhaW5lci5jaGlsZHJlbltzaGFyZWRfMS5QUklNQVJZX09VVExFVF0sIGNvbnRhaW5lZSwgbmV4dCk7XG4gICAgfVxufVxudmFyIFVybFRyZWUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVybFRyZWUocm9vdCwgcXVlcnlQYXJhbXMsIGZyYWdtZW50KSB7XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgICAgIHRoaXMucXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcztcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuICAgIH1cbiAgICBVcmxUcmVlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyB1cmxfc2VyaWFsaXplcl8xLkRlZmF1bHRVcmxTZXJpYWxpemVyKCkuc2VyaWFsaXplKHRoaXMpOyB9O1xuICAgIHJldHVybiBVcmxUcmVlO1xufSgpKTtcbmV4cG9ydHMuVXJsVHJlZSA9IFVybFRyZWU7XG52YXIgVXJsU2VnbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXJsU2VnbWVudChwYXRoc1dpdGhQYXJhbXMsIGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucGF0aHNXaXRoUGFyYW1zID0gcGF0aHNXaXRoUGFyYW1zO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgY29sbGVjdGlvbl8xLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiB2LnBhcmVudCA9IF90aGlzOyB9KTtcbiAgICB9XG4gICAgVXJsU2VnbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1cmxfc2VyaWFsaXplcl8xLnNlcmlhbGl6ZVBhdGhzKHRoaXMpOyB9O1xuICAgIHJldHVybiBVcmxTZWdtZW50O1xufSgpKTtcbmV4cG9ydHMuVXJsU2VnbWVudCA9IFVybFNlZ21lbnQ7XG52YXIgVXJsUGF0aFdpdGhQYXJhbXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVybFBhdGhXaXRoUGFyYW1zKHBhdGgsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9XG4gICAgVXJsUGF0aFdpdGhQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdXJsX3NlcmlhbGl6ZXJfMS5zZXJpYWxpemVQYXRoKHRoaXMpOyB9O1xuICAgIHJldHVybiBVcmxQYXRoV2l0aFBhcmFtcztcbn0oKSk7XG5leHBvcnRzLlVybFBhdGhXaXRoUGFyYW1zID0gVXJsUGF0aFdpdGhQYXJhbXM7XG5mdW5jdGlvbiBlcXVhbFBhdGhzV2l0aFBhcmFtcyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYVtpXS5wYXRoICE9PSBiW2ldLnBhdGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghY29sbGVjdGlvbl8xLnNoYWxsb3dFcXVhbChhW2ldLnBhcmFtZXRlcnMsIGJbaV0ucGFyYW1ldGVycykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5lcXVhbFBhdGhzV2l0aFBhcmFtcyA9IGVxdWFsUGF0aHNXaXRoUGFyYW1zO1xuZnVuY3Rpb24gZXF1YWxQYXRoKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldLnBhdGggIT09IGJbaV0ucGF0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmVxdWFsUGF0aCA9IGVxdWFsUGF0aDtcbmZ1bmN0aW9uIG1hcENoaWxkcmVuKHNlZ21lbnQsIGZuKSB7XG4gICAgdmFyIG5ld0NoaWxkcmVuID0ge307XG4gICAgY29sbGVjdGlvbl8xLmZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkge1xuICAgICAgICBpZiAoY2hpbGRPdXRsZXQgPT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICBuZXdDaGlsZHJlbltjaGlsZE91dGxldF0gPSBmbihjaGlsZCwgY2hpbGRPdXRsZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29sbGVjdGlvbl8xLmZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkge1xuICAgICAgICBpZiAoY2hpbGRPdXRsZXQgIT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICBuZXdDaGlsZHJlbltjaGlsZE91dGxldF0gPSBmbihjaGlsZCwgY2hpbGRPdXRsZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0NoaWxkcmVuO1xufVxuZXhwb3J0cy5tYXBDaGlsZHJlbiA9IG1hcENoaWxkcmVuO1xuZnVuY3Rpb24gbWFwQ2hpbGRyZW5JbnRvQXJyYXkoc2VnbWVudCwgZm4pIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgY29sbGVjdGlvbl8xLmZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkge1xuICAgICAgICBpZiAoY2hpbGRPdXRsZXQgPT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KGZuKGNoaWxkLCBjaGlsZE91dGxldCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29sbGVjdGlvbl8xLmZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkge1xuICAgICAgICBpZiAoY2hpbGRPdXRsZXQgIT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KGZuKGNoaWxkLCBjaGlsZE91dGxldCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMubWFwQ2hpbGRyZW5JbnRvQXJyYXkgPSBtYXBDaGlsZHJlbkludG9BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRYSnNYM1J5WldVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZkWEpzWDNSeVpXVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxIVkNRVUUyUWl4VlFVRlZMRU5CUVVNc1EwRkJRVHRCUVVONFF5d3JRa0ZCYTBVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVR0QlFVTnlSaXd5UWtGQmIwTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlFUdEJRVVY2UkR0SlFVTkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEZWQlFWVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNaRUxFTkJRVU03UVVGR1pTd3dRa0ZCYTBJc2NVSkJSV3BETEVOQlFVRTdRVUZGUkN4elFrRkJOa0lzVTBGQmEwSXNSVUZCUlN4VFFVRnJRaXhGUVVGRkxFdEJRV003U1VGRGFrWXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5XTEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRka1FzUTBGQlF6dEpRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTA0c1RVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU42UkN4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVU1bExHOUNRVUZaTEdWQlRUTkNMRU5CUVVFN1FVRkZSQ3gxUWtGQmRVSXNVMEZCY1VJc1JVRkJSU3hUUVVGeFFqdEpRVU5xUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNaVUZCWlN4RlFVRkZMRk5CUVZNc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dFJRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRia1lzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4TFFVRkxMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOd1JpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTJZc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFrTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU42UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEYWtZc1EwRkJRenRKUVVORUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEWkN4RFFVRkRPMEZCUlVRc2VVSkJRWGxDTEZOQlFYRkNMRVZCUVVVc1UwRkJjVUk3U1VGRGJrVXNUVUZCVFN4RFFVRkRMSEZDUVVGeFFpeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzBGQlEyaEdMRU5CUVVNN1FVRkZSQ3dyUWtGRFNTeFRRVUZ4UWl4RlFVRkZMRk5CUVhGQ0xFVkJRVVVzWTBGQmJVTTdTVUZEYmtZc1JVRkJSU3hEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRWRCUVVjc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETjBRc1NVRkJUU3hQUVVGUExFZEJRVWNzVTBGQlV5eERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTXhSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03V1VGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTNSRUxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlF6ZEVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRlpDeERRVUZETzBsQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4TFFVRkxMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzUkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4bFFVRmxMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03V1VGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTNoRkxFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycERMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMWxCUTNwRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGJrWXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRlpDeERRVUZETzBsQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRUaXhKUVVGTkxFOUJRVThzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hUUVVGVExFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpGRkxFbEJRVTBzU1VGQlNTeEhRVUZITEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTndSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1pVRkJaU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFsQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVOcVJTeE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4MVFrRkJZeXhEUVVGRExFVkJRVVVzVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNCR0xFTkJRVU03UVVGRFNDeERRVUZETzBGQlMwUTdTVUZKUlN4cFFrRkRWeXhKUVVGblFpeEZRVUZUTEZkQlFXOURMRVZCUXpkRUxGRkJRV2RDTzFGQlJHaENMRk5CUVVrc1IwRkJTaXhKUVVGSkxFTkJRVms3VVVGQlV5eG5Ra0ZCVnl4SFFVRllMRmRCUVZjc1EwRkJlVUk3VVVGRE4wUXNZVUZCVVN4SFFVRlNMRkZCUVZFc1EwRkJVVHRKUVVGSExFTkJRVU03U1VGRkwwSXNNRUpCUVZFc1IwRkJVaXhqUVVGeFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4eFEwRkJiMElzUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE0wVXNZMEZCUXp0QlFVRkVMRU5CUVVNc1FVRlVSQ3hKUVZORE8wRkJWRmtzWlVGQlR5eFZRVk51UWl4RFFVRkJPMEZCUlVRN1NVRkZSU3h2UWtGRFZ5eGxRVUZ2UXl4RlFVRlRMRkZCUVhGRE8xRkJTQzlHTEdsQ1FWRkRPMUZCVEZrc2IwSkJRV1VzUjBGQlppeGxRVUZsTEVOQlFYRkNPMUZCUVZNc1lVRkJVU3hIUVVGU0xGRkJRVkVzUTBGQk5rSTdVVUZHZEVZc1YwRkJUU3hIUVVGbExFbEJRVWtzUTBGQlF6dFJRVWN2UWl4dlFrRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeFZRVUZETEVOQlFVMHNSVUZCUlN4RFFVRk5MRWxCUVVzc1QwRkJRU3hEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVa3NSVUZCWml4RFFVRmxMRU5CUVVNc1EwRkJRenRKUVVONlJDeERRVUZETzBsQlJVUXNOa0pCUVZFc1IwRkJVaXhqUVVGeFFpeE5RVUZOTEVOQlFVTXNLMEpCUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY2tRc2FVSkJRVU03UVVGQlJDeERRVUZETEVGQlVrUXNTVUZSUXp0QlFWSlpMR3RDUVVGVkxHRkJVWFJDTEVOQlFVRTdRVUZGUkR0SlFVTkZMREpDUVVGdFFpeEpRVUZaTEVWQlFWTXNWVUZCYlVNN1VVRkJlRVFzVTBGQlNTeEhRVUZLTEVsQlFVa3NRMEZCVVR0UlFVRlRMR1ZCUVZVc1IwRkJWaXhWUVVGVkxFTkJRWGxDTzBsQlFVY3NRMEZCUXp0SlFVTXZSU3h2UTBGQlVTeEhRVUZTTEdOQlFYRkNMRTFCUVUwc1EwRkJReXc0UWtGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOd1JDeDNRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRklSQ3hKUVVkRE8wRkJTRmtzZVVKQlFXbENMRzlDUVVjM1FpeERRVUZCTzBGQlJVUXNPRUpCUVhGRExFTkJRWE5DTEVWQlFVVXNRMEZCYzBJN1NVRkRha1lzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzFGQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVONFF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU5zUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRekZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc2VVSkJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRaUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEY0VVc1EwRkJRenRKUVVORUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEWkN4RFFVRkRPMEZCVUdVc05FSkJRVzlDTEhWQ1FVOXVReXhEUVVGQk8wRkJSVVFzYlVKQlFUQkNMRU5CUVhOQ0xFVkJRVVVzUTBGQmMwSTdTVUZEZEVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTjRReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVOc1F5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUXpWRExFTkJRVU03U1VGRFJDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTJRc1EwRkJRenRCUVU1bExHbENRVUZUTEZsQlRYaENMRU5CUVVFN1FVRkZSQ3h4UWtGQk5FSXNUMEZCYlVJc1JVRkJSU3hGUVVFMFF6dEpRVVV6Uml4SlFVRk5MRmRCUVZjc1IwRkJhVU1zUlVGQlJTeERRVUZETzBsQlEzSkVMRzlDUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRkRMRXRCUVdsQ0xFVkJRVVVzVjBGQmJVSTdVVUZETDBRc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eExRVUZMTEhWQ1FVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVETEZkQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUTNCRUxFTkJRVU03U1VGRFNDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTklMRzlDUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRkRMRXRCUVdsQ0xFVkJRVVVzVjBGQmJVSTdVVUZETDBRc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eExRVUZMTEhWQ1FVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVETEZkQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUTNCRUxFTkJRVU03U1VGRFNDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTklMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU03UVVGRGNrSXNRMEZCUXp0QlFXUmxMRzFDUVVGWExHTkJZekZDTEVOQlFVRTdRVUZGUkN3NFFrRkRTU3hQUVVGdFFpeEZRVUZGTEVWQlFYRkRPMGxCUXpWRUxFbEJRVWtzUjBGQlJ5eEhRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTnNRaXh2UWtGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJReXhMUVVGcFFpeEZRVUZGTEZkQlFXMUNPMUZCUXk5RUxFVkJRVVVzUTBGQlF5eERRVUZETEZkQlFWY3NTMEZCU3l4MVFrRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wTXNRMEZCUXp0SlFVTklMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMGdzYjBKQlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVU1zUzBGQmFVSXNSVUZCUlN4WFFVRnRRanRSUVVNdlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4WFFVRlhMRXRCUVVzc2RVSkJRV01zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYmtNc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6TkRMRU5CUVVNN1NVRkRTQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRZaXhEUVVGRE8wRkJaR1VzTkVKQlFXOUNMSFZDUVdOdVF5eERRVUZCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0UVVrbE5RVkpaWDA5VlZFeEZWSDBnWm5KdmJTQW5MaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJSHRFWldaaGRXeDBWWEpzVTJWeWFXRnNhWHBsY2l3Z2MyVnlhV0ZzYVhwbFVHRjBhQ3dnYzJWeWFXRnNhWHBsVUdGMGFITjlJR1p5YjIwZ0p5NHZkWEpzWDNObGNtbGhiR2w2WlhJbk8xeHVhVzF3YjNKMElIdG1iM0pGWVdOb0xDQnphR0ZzYkc5M1JYRjFZV3g5SUdaeWIyMGdKeTR2ZFhScGJITXZZMjlzYkdWamRHbHZiaWM3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZGYlhCMGVWVnliRlJ5WldVb0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1ZYSnNWSEpsWlNodVpYY2dWWEpzVTJWbmJXVnVkQ2hiWFN3Z2UzMHBMQ0I3ZlN3Z2JuVnNiQ2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpiMjUwWVdsdWMxUnlaV1VvWTI5dWRHRnBibVZ5T2lCVmNteFVjbVZsTENCamIyNTBZV2x1WldVNklGVnliRlJ5WldVc0lHVjRZV04wT2lCaWIyOXNaV0Z1S1RvZ1ltOXZiR1ZoYmlCN1hHNGdJR2xtSUNobGVHRmpkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxjWFZoYkZObFoyMWxiblJ6S0dOdmJuUmhhVzVsY2k1eWIyOTBMQ0JqYjI1MFlXbHVaV1V1Y205dmRDazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiblJoYVc1elUyVm5iV1Z1ZENoamIyNTBZV2x1WlhJdWNtOXZkQ3dnWTI5dWRHRnBibVZsTG5KdmIzUXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWeGRXRnNVMlZuYldWdWRITW9ZMjl1ZEdGcGJtVnlPaUJWY214VFpXZHRaVzUwTENCamIyNTBZV2x1WldVNklGVnliRk5sWjIxbGJuUXBPaUJpYjI5c1pXRnVJSHRjYmlBZ2FXWWdLQ0ZsY1hWaGJGQmhkR2dvWTI5dWRHRnBibVZ5TG5CaGRHaHpWMmwwYUZCaGNtRnRjeXdnWTI5dWRHRnBibVZsTG5CaGRHaHpWMmwwYUZCaGNtRnRjeWtwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnYVdZZ0tFOWlhbVZqZEM1clpYbHpLR052Ym5SaGFXNWxjaTVqYUdsc1pISmxiaWt1YkdWdVozUm9JQ0U5UFNCUFltcGxZM1F1YTJWNWN5aGpiMjUwWVdsdVpXVXVZMmhwYkdSeVpXNHBMbXhsYm1kMGFDbGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUdadmNpQW9iR1YwSUdNZ2FXNGdZMjl1ZEdGcGJtVmxMbU5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdhV1lnS0NGamIyNTBZV2x1WlhJdVkyaHBiR1J5Wlc1YlkxMHBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb0lXVnhkV0ZzVTJWbmJXVnVkSE1vWTI5dWRHRnBibVZ5TG1Ob2FXeGtjbVZ1VzJOZExDQmpiMjUwWVdsdVpXVXVZMmhwYkdSeVpXNWJZMTBwS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIUnlkV1U3WEc1OVhHNWNibVoxYm1OMGFXOXVJR052Ym5SaGFXNXpVMlZuYldWdWRDaGpiMjUwWVdsdVpYSTZJRlZ5YkZObFoyMWxiblFzSUdOdmJuUmhhVzVsWlRvZ1ZYSnNVMlZuYldWdWRDazZJR0p2YjJ4bFlXNGdlMXh1SUNCeVpYUjFjbTRnWTI5dWRHRnBibk5UWldkdFpXNTBTR1ZzY0dWeUtHTnZiblJoYVc1bGNpd2dZMjl1ZEdGcGJtVmxMQ0JqYjI1MFlXbHVaV1V1Y0dGMGFITlhhWFJvVUdGeVlXMXpLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMjl1ZEdGcGJuTlRaV2R0Wlc1MFNHVnNjR1Z5S0Z4dUlDQWdJR052Ym5SaGFXNWxjam9nVlhKc1UyVm5iV1Z1ZEN3Z1kyOXVkR0ZwYm1WbE9pQlZjbXhUWldkdFpXNTBMQ0JqYjI1MFlXbHVaV1ZRWVhSb2N6b2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTmJYU2s2SUdKdmIyeGxZVzRnZTF4dUlDQnBaaUFvWTI5dWRHRnBibVZ5TG5CaGRHaHpWMmwwYUZCaGNtRnRjeTVzWlc1bmRHZ2dQaUJqYjI1MFlXbHVaV1ZRWVhSb2N5NXNaVzVuZEdncElIdGNiaUFnSUNCamIyNXpkQ0JqZFhKeVpXNTBJRDBnWTI5dWRHRnBibVZ5TG5CaGRHaHpWMmwwYUZCaGNtRnRjeTV6YkdsalpTZ3dMQ0JqYjI1MFlXbHVaV1ZRWVhSb2N5NXNaVzVuZEdncE8xeHVJQ0FnSUdsbUlDZ2haWEYxWVd4UVlYUm9LR04xY25KbGJuUXNJR052Ym5SaGFXNWxaVkJoZEdoektTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoUFltcGxZM1F1YTJWNWN5aGpiMjUwWVdsdVpXVXVZMmhwYkdSeVpXNHBMbXhsYm1kMGFDQStJREFwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCOUlHVnNjMlVnYVdZZ0tHTnZiblJoYVc1bGNpNXdZWFJvYzFkcGRHaFFZWEpoYlhNdWJHVnVaM1JvSUQwOVBTQmpiMjUwWVdsdVpXVlFZWFJvY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0JwWmlBb0lXVnhkV0ZzVUdGMGFDaGpiMjUwWVdsdVpYSXVjR0YwYUhOWGFYUm9VR0Z5WVcxekxDQmpiMjUwWVdsdVpXVlFZWFJvY3lrcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQm1iM0lnS0d4bGRDQmpJR2x1SUdOdmJuUmhhVzVsWlM1amFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZqYjI1MFlXbHVaWEl1WTJocGJHUnlaVzViWTEwcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJR2xtSUNnaFkyOXVkR0ZwYm5OVFpXZHRaVzUwS0dOdmJuUmhhVzVsY2k1amFHbHNaSEpsYmx0alhTd2dZMjl1ZEdGcGJtVmxMbU5vYVd4a2NtVnVXMk5kS1NrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR052Ym5OMElHTjFjbkpsYm5RZ1BTQmpiMjUwWVdsdVpXVlFZWFJvY3k1emJHbGpaU2d3TENCamIyNTBZV2x1WlhJdWNHRjBhSE5YYVhSb1VHRnlZVzF6TG14bGJtZDBhQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JtVjRkQ0E5SUdOdmJuUmhhVzVsWlZCaGRHaHpMbk5zYVdObEtHTnZiblJoYVc1bGNpNXdZWFJvYzFkcGRHaFFZWEpoYlhNdWJHVnVaM1JvS1R0Y2JpQWdJQ0JwWmlBb0lXVnhkV0ZzVUdGMGFDaGpiMjUwWVdsdVpYSXVjR0YwYUhOWGFYUm9VR0Z5WVcxekxDQmpkWEp5Wlc1MEtTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSEpsZEhWeWJpQmpiMjUwWVdsdWMxTmxaMjFsYm5SSVpXeHdaWElvWTI5dWRHRnBibVZ5TG1Ob2FXeGtjbVZ1VzFCU1NVMUJVbGxmVDFWVVRFVlVYU3dnWTI5dWRHRnBibVZsTENCdVpYaDBLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVFZ1ZWSk1JR2x1SUhSb1pTQjBjbVZsSUdadmNtMHVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJWY214VWNtVmxJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0J3ZFdKc2FXTWdjbTl2ZERvZ1ZYSnNVMlZuYldWdWRDd2djSFZpYkdsaklIRjFaWEo1VUdGeVlXMXpPaUI3VzJ0bGVUb2djM1J5YVc1blhUb2djM1J5YVc1bmZTeGNiaUFnSUNBZ0lIQjFZbXhwWXlCbWNtRm5iV1Z1ZERvZ2MzUnlhVzVuS1NCN2ZWeHVYRzRnSUhSdlUzUnlhVzVuS0NrNklITjBjbWx1WnlCN0lISmxkSFZ5YmlCdVpYY2dSR1ZtWVhWc2RGVnliRk5sY21saGJHbDZaWElvS1M1elpYSnBZV3hwZW1Vb2RHaHBjeWs3SUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGVnliRk5sWjIxbGJuUWdlMXh1SUNCd2RXSnNhV01nY0dGeVpXNTBPaUJWY214VFpXZHRaVzUwSUQwZ2JuVnNiRHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQndkV0pzYVdNZ2NHRjBhSE5YYVhSb1VHRnlZVzF6T2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZExDQndkV0pzYVdNZ1kyaHBiR1J5Wlc0NklIdGJhMlY1T2lCemRISnBibWRkT2lCVmNteFRaV2R0Wlc1MGZTa2dlMXh1SUNBZ0lHWnZja1ZoWTJnb1kyaHBiR1J5Wlc0c0lDaDJPaUJoYm5rc0lHczZJR0Z1ZVNrZ1BUNGdkaTV3WVhKbGJuUWdQU0IwYUdsektUdGNiaUFnZlZ4dVhHNGdJSFJ2VTNSeWFXNW5LQ2s2SUhOMGNtbHVaeUI3SUhKbGRIVnliaUJ6WlhKcFlXeHBlbVZRWVhSb2N5aDBhR2x6S1RzZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdkV0pzYVdNZ2NHRjBhRG9nYzNSeWFXNW5MQ0J3ZFdKc2FXTWdjR0Z5WVcxbGRHVnljem9nZTF0clpYazZJSE4wY21sdVoxMDZJSE4wY21sdVozMHBJSHQ5WEc0Z0lIUnZVM1J5YVc1bktDazZJSE4wY21sdVp5QjdJSEpsZEhWeWJpQnpaWEpwWVd4cGVtVlFZWFJvS0hSb2FYTXBPeUI5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmxjWFZoYkZCaGRHaHpWMmwwYUZCaGNtRnRjeWhoT2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZExDQmlPaUJWY214UVlYUm9WMmwwYUZCaGNtRnRjMXRkS1RvZ1ltOXZiR1ZoYmlCN1hHNGdJR2xtSUNoaExteGxibWQwYUNBaFBUMGdZaTVzWlc1bmRHZ3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JoTG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ2FXWWdLR0ZiYVYwdWNHRjBhQ0FoUFQwZ1lsdHBYUzV3WVhSb0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdhV1lnS0NGemFHRnNiRzkzUlhGMVlXd29ZVnRwWFM1d1lYSmhiV1YwWlhKekxDQmlXMmxkTG5CaGNtRnRaWFJsY25NcEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJsY1hWaGJGQmhkR2dvWVRvZ1ZYSnNVR0YwYUZkcGRHaFFZWEpoYlhOYlhTd2dZam9nVlhKc1VHRjBhRmRwZEdoUVlYSmhiWE5iWFNrNklHSnZiMnhsWVc0Z2UxeHVJQ0JwWmlBb1lTNXNaVzVuZEdnZ0lUMDlJR0l1YkdWdVozUm9LU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWVM1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHbG1JQ2hoVzJsZExuQmhkR2dnSVQwOUlHSmJhVjB1Y0dGMGFDa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhKbGRIVnliaUIwY25WbE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYldGd1EyaHBiR1J5Wlc0b2MyVm5iV1Z1ZERvZ1ZYSnNVMlZuYldWdWRDd2dabTQ2SUNoMk9pQlZjbXhUWldkdFpXNTBMQ0JyT2lCemRISnBibWNwSUQwK0lGVnliRk5sWjIxbGJuUXBPbHh1SUNBZ0lIdGJibUZ0WlRvZ2MzUnlhVzVuWFRvZ1ZYSnNVMlZuYldWdWRIMGdlMXh1SUNCamIyNXpkQ0J1WlhkRGFHbHNaSEpsYmpvZ2UxdHVZVzFsT2lCemRISnBibWRkT2lCVmNteFRaV2R0Wlc1MGZTQTlJSHQ5TzF4dUlDQm1iM0pGWVdOb0tITmxaMjFsYm5RdVkyaHBiR1J5Wlc0c0lDaGphR2xzWkRvZ1ZYSnNVMlZuYldWdWRDd2dZMmhwYkdSUGRYUnNaWFE2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUdsbUlDaGphR2xzWkU5MWRHeGxkQ0E5UFQwZ1VGSkpUVUZTV1Y5UFZWUk1SVlFwSUh0Y2JpQWdJQ0FnSUc1bGQwTm9hV3hrY21WdVcyTm9hV3hrVDNWMGJHVjBYU0E5SUdadUtHTm9hV3hrTENCamFHbHNaRTkxZEd4bGRDazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdabTl5UldGamFDaHpaV2R0Wlc1MExtTm9hV3hrY21WdUxDQW9ZMmhwYkdRNklGVnliRk5sWjIxbGJuUXNJR05vYVd4a1QzVjBiR1YwT2lCemRISnBibWNwSUQwK0lIdGNiaUFnSUNCcFppQW9ZMmhwYkdSUGRYUnNaWFFnSVQwOUlGQlNTVTFCVWxsZlQxVlVURVZVS1NCN1hHNGdJQ0FnSUNCdVpYZERhR2xzWkhKbGJsdGphR2xzWkU5MWRHeGxkRjBnUFNCbWJpaGphR2xzWkN3Z1kyaHBiR1JQZFhSc1pYUXBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQnVaWGREYUdsc1pISmxianRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHMWhjRU5vYVd4a2NtVnVTVzUwYjBGeWNtRjVQRlErS0Z4dUlDQWdJSE5sWjIxbGJuUTZJRlZ5YkZObFoyMWxiblFzSUdadU9pQW9kam9nVlhKc1UyVm5iV1Z1ZEN3Z2F6b2djM1J5YVc1bktTQTlQaUJVVzEwcE9pQlVXMTBnZTF4dUlDQnNaWFFnY21Wek9pQlVXMTBnUFNCYlhUdGNiaUFnWm05eVJXRmphQ2h6WldkdFpXNTBMbU5vYVd4a2NtVnVMQ0FvWTJocGJHUTZJRlZ5YkZObFoyMWxiblFzSUdOb2FXeGtUM1YwYkdWME9pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQnBaaUFvWTJocGJHUlBkWFJzWlhRZ1BUMDlJRkJTU1UxQlVsbGZUMVZVVEVWVUtTQjdYRzRnSUNBZ0lDQnlaWE1nUFNCeVpYTXVZMjl1WTJGMEtHWnVLR05vYVd4a0xDQmphR2xzWkU5MWRHeGxkQ2twTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzRnSUdadmNrVmhZMmdvYzJWbmJXVnVkQzVqYUdsc1pISmxiaXdnS0dOb2FXeGtPaUJWY214VFpXZHRaVzUwTENCamFHbHNaRTkxZEd4bGREb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdhV1lnS0dOb2FXeGtUM1YwYkdWMElDRTlQU0JRVWtsTlFWSlpYMDlWVkV4RlZDa2dlMXh1SUNBZ0lDQWdjbVZ6SUQwZ2NtVnpMbU52Ym1OaGRDaG1iaWhqYUdsc1pDd2dZMmhwYkdSUGRYUnNaWFFwS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci91cmxfdHJlZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQwMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xudmFyIHVybF90cmVlXzEgPSByZXF1aXJlKCcuL3VybF90cmVlJyk7XG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnLi91dGlscy9jb2xsZWN0aW9uJyk7XG52YXIgVXJsU2VyaWFsaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXJsU2VyaWFsaXplcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFVybFNlcmlhbGl6ZXI7XG59KCkpO1xuZXhwb3J0cy5VcmxTZXJpYWxpemVyID0gVXJsU2VyaWFsaXplcjtcbnZhciBEZWZhdWx0VXJsU2VyaWFsaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdFVybFNlcmlhbGl6ZXIoKSB7XG4gICAgfVxuICAgIERlZmF1bHRVcmxTZXJpYWxpemVyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIHAgPSBuZXcgVXJsUGFyc2VyKHVybCk7XG4gICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxUcmVlKHAucGFyc2VSb290U2VnbWVudCgpLCBwLnBhcnNlUXVlcnlQYXJhbXMoKSwgcC5wYXJzZUZyYWdtZW50KCkpO1xuICAgIH07XG4gICAgRGVmYXVsdFVybFNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gXCIvXCIgKyBzZXJpYWxpemVTZWdtZW50KHRyZWUucm9vdCwgdHJ1ZSk7XG4gICAgICAgIHZhciBxdWVyeSA9IHNlcmlhbGl6ZVF1ZXJ5UGFyYW1zKHRyZWUucXVlcnlQYXJhbXMpO1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSB0cmVlLmZyYWdtZW50ICE9PSBudWxsID8gXCIjXCIgKyB0cmVlLmZyYWdtZW50IDogJyc7XG4gICAgICAgIHJldHVybiBcIlwiICsgc2VnbWVudCArIHF1ZXJ5ICsgZnJhZ21lbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdFVybFNlcmlhbGl6ZXI7XG59KCkpO1xuZXhwb3J0cy5EZWZhdWx0VXJsU2VyaWFsaXplciA9IERlZmF1bHRVcmxTZXJpYWxpemVyO1xuZnVuY3Rpb24gc2VyaWFsaXplUGF0aHMoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50LnBhdGhzV2l0aFBhcmFtcy5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHNlcmlhbGl6ZVBhdGgocCk7IH0pLmpvaW4oJy8nKTtcbn1cbmV4cG9ydHMuc2VyaWFsaXplUGF0aHMgPSBzZXJpYWxpemVQYXRocztcbmZ1bmN0aW9uIHNlcmlhbGl6ZVNlZ21lbnQoc2VnbWVudCwgcm9vdCkge1xuICAgIGlmIChzZWdtZW50LmNoaWxkcmVuW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSAmJiByb290KSB7XG4gICAgICAgIHZhciBwcmltYXJ5ID0gc2VyaWFsaXplU2VnbWVudChzZWdtZW50LmNoaWxkcmVuW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSwgZmFsc2UpO1xuICAgICAgICB2YXIgY2hpbGRyZW5fMSA9IFtdO1xuICAgICAgICBjb2xsZWN0aW9uXzEuZm9yRWFjaChzZWdtZW50LmNoaWxkcmVuLCBmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgaWYgKGsgIT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5fMS5wdXNoKGsgKyBcIjpcIiArIHNlcmlhbGl6ZVNlZ21lbnQodiwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjaGlsZHJlbl8xLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwcmltYXJ5ICsgXCIoXCIgKyBjaGlsZHJlbl8xLmpvaW4oJy8vJykgKyBcIilcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgcHJpbWFyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChzZWdtZW50LmNoaWxkcmVuW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSAmJiAhcm9vdCkge1xuICAgICAgICB2YXIgY2hpbGRyZW5fMiA9IFtzZXJpYWxpemVTZWdtZW50KHNlZ21lbnQuY2hpbGRyZW5bc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVRdLCBmYWxzZSldO1xuICAgICAgICBjb2xsZWN0aW9uXzEuZm9yRWFjaChzZWdtZW50LmNoaWxkcmVuLCBmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgaWYgKGsgIT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5fMi5wdXNoKGsgKyBcIjpcIiArIHNlcmlhbGl6ZVNlZ21lbnQodiwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVQYXRocyhzZWdtZW50KSArIFwiLyhcIiArIGNoaWxkcmVuXzIuam9pbignLy8nKSArIFwiKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVBhdGhzKHNlZ21lbnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUNoaWxkcmVuKHNlZ21lbnQpIHtcbiAgICBpZiAoc2VnbWVudC5jaGlsZHJlbltzaGFyZWRfMS5QUklNQVJZX09VVExFVF0pIHtcbiAgICAgICAgdmFyIHByaW1hcnkgPSBzZXJpYWxpemVQYXRocyhzZWdtZW50LmNoaWxkcmVuW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSk7XG4gICAgICAgIHZhciBzZWNvbmRhcnlfMSA9IFtdO1xuICAgICAgICBjb2xsZWN0aW9uXzEuZm9yRWFjaChzZWdtZW50LmNoaWxkcmVuLCBmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgaWYgKGsgIT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKSB7XG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5XzEucHVzaChrICsgXCI6XCIgKyBzZXJpYWxpemVQYXRocyh2KSArIHNlcmlhbGl6ZUNoaWxkcmVuKHYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzZWNvbmRhcnlTdHIgPSBzZWNvbmRhcnlfMS5sZW5ndGggPiAwID8gXCIoXCIgKyBzZWNvbmRhcnlfMS5qb2luKCcvLycpICsgXCIpXCIgOiAnJztcbiAgICAgICAgdmFyIHByaW1hcnlDaGlsZHJlbiA9IHNlcmlhbGl6ZUNoaWxkcmVuKHNlZ21lbnQuY2hpbGRyZW5bc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVRdKTtcbiAgICAgICAgdmFyIHByaW1hcnlDaGlsZHJlblN0ciA9IHByaW1hcnlDaGlsZHJlbiA/IFwiL1wiICsgcHJpbWFyeUNoaWxkcmVuIDogJyc7XG4gICAgICAgIHJldHVybiBcIlwiICsgcHJpbWFyeSArIHNlY29uZGFyeVN0ciArIHByaW1hcnlDaGlsZHJlblN0cjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5mdW5jdGlvbiBzZXJpYWxpemVQYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gXCJcIiArIHBhdGgucGF0aCArIHNlcmlhbGl6ZVBhcmFtcyhwYXRoLnBhcmFtZXRlcnMpO1xufVxuZXhwb3J0cy5zZXJpYWxpemVQYXRoID0gc2VyaWFsaXplUGF0aDtcbmZ1bmN0aW9uIHNlcmlhbGl6ZVBhcmFtcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFpcnMocGFyYW1zKS5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIChcIjtcIiArIHAuZmlyc3QgKyBcIj1cIiArIHAuc2Vjb25kKTsgfSkuam9pbignJyk7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVRdWVyeVBhcmFtcyhwYXJhbXMpIHtcbiAgICB2YXIgc3RycyA9IHBhaXJzKHBhcmFtcykubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiAocC5maXJzdCArIFwiPVwiICsgcC5zZWNvbmQpOyB9KTtcbiAgICByZXR1cm4gc3Rycy5sZW5ndGggPiAwID8gXCI/XCIgKyBzdHJzLmpvaW4oXCImXCIpIDogJyc7XG59XG52YXIgUGFpciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFpcihmaXJzdCwgc2Vjb25kKSB7XG4gICAgICAgIHRoaXMuZmlyc3QgPSBmaXJzdDtcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBzZWNvbmQ7XG4gICAgfVxuICAgIHJldHVybiBQYWlyO1xufSgpKTtcbmZ1bmN0aW9uIHBhaXJzKG9iaikge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICByZXMucHVzaChuZXcgUGFpcihwcm9wLCBvYmpbcHJvcF0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxudmFyIFNFR01FTlRfUkUgPSAvXlteXFwvXFwoXFwpXFw/Oz0mI10rLztcbmZ1bmN0aW9uIG1hdGNoUGF0aFdpdGhQYXJhbXMoc3RyKSB7XG4gICAgU0VHTUVOVF9SRS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBtYXRjaCA9IFNFR01FTlRfUkUuZXhlYyhzdHIpO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG59XG52YXIgUVVFUllfUEFSQU1fUkUgPSAvXltePVxcPyYjXSsvO1xuZnVuY3Rpb24gbWF0Y2hRdWVyeVBhcmFtcyhzdHIpIHtcbiAgICBRVUVSWV9QQVJBTV9SRS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBtYXRjaCA9IFNFR01FTlRfUkUuZXhlYyhzdHIpO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG59XG52YXIgUVVFUllfUEFSQU1fVkFMVUVfUkUgPSAvXlteXFw/JiNdKy87XG5mdW5jdGlvbiBtYXRjaFVybFF1ZXJ5UGFyYW1WYWx1ZShzdHIpIHtcbiAgICBRVUVSWV9QQVJBTV9WQUxVRV9SRS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBtYXRjaCA9IFFVRVJZX1BBUkFNX1ZBTFVFX1JFLmV4ZWMoc3RyKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xufVxudmFyIFVybFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXJsUGFyc2VyKHJlbWFpbmluZykge1xuICAgICAgICB0aGlzLnJlbWFpbmluZyA9IHJlbWFpbmluZztcbiAgICB9XG4gICAgVXJsUGFyc2VyLnByb3RvdHlwZS5wZWVrU3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHRoaXMucmVtYWluaW5nLnN0YXJ0c1dpdGgoc3RyKTsgfTtcbiAgICBVcmxQYXJzZXIucHJvdG90eXBlLmNhcHR1cmUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghdGhpcy5yZW1haW5pbmcuc3RhcnRzV2l0aChzdHIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcXFwiXCIgKyBzdHIgKyBcIlxcXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtYWluaW5nID0gdGhpcy5yZW1haW5pbmcuc3Vic3RyaW5nKHN0ci5sZW5ndGgpO1xuICAgIH07XG4gICAgVXJsUGFyc2VyLnByb3RvdHlwZS5wYXJzZVJvb3RTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5yZW1haW5pbmcgPT09ICcnIHx8IHRoaXMucmVtYWluaW5nID09PSAnLycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KFtdLCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChbXSwgdGhpcy5wYXJzZVNlZ21lbnRDaGlsZHJlbigpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVXJsUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNlZ21lbnRDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVtYWluaW5nLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgdGhpcy5jYXB0dXJlKCcvJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhdGhzID0gW3RoaXMucGFyc2VQYXRoV2l0aFBhcmFtcygpXTtcbiAgICAgICAgd2hpbGUgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8nKSAmJiAhdGhpcy5wZWVrU3RhcnRzV2l0aCgnLy8nKSAmJiAhdGhpcy5wZWVrU3RhcnRzV2l0aCgnLygnKSkge1xuICAgICAgICAgICAgdGhpcy5jYXB0dXJlKCcvJyk7XG4gICAgICAgICAgICBwYXRocy5wdXNoKHRoaXMucGFyc2VQYXRoV2l0aFBhcmFtcygpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRyZW4gPSB7fTtcbiAgICAgICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8oJykpIHtcbiAgICAgICAgICAgIHRoaXMuY2FwdHVyZSgnLycpO1xuICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLnBhcnNlUGFyZW5zKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJygnKSkge1xuICAgICAgICAgICAgcmVzID0gdGhpcy5wYXJzZVBhcmVucyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSA9IG5ldyB1cmxfdHJlZV8xLlVybFNlZ21lbnQocGF0aHMsIGNoaWxkcmVuKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIFVybFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXRoV2l0aFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICAgICAgdGhpcy5jYXB0dXJlKHBhdGgpO1xuICAgICAgICB2YXIgbWF0cml4UGFyYW1zID0ge307XG4gICAgICAgIGlmICh0aGlzLnBlZWtTdGFydHNXaXRoKCc7JykpIHtcbiAgICAgICAgICAgIG1hdHJpeFBhcmFtcyA9IHRoaXMucGFyc2VNYXRyaXhQYXJhbXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsUGF0aFdpdGhQYXJhbXMocGF0aCwgbWF0cml4UGFyYW1zKTtcbiAgICB9O1xuICAgIFVybFBhcnNlci5wcm90b3R5cGUucGFyc2VRdWVyeVBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5wZWVrU3RhcnRzV2l0aCgnPycpKSB7XG4gICAgICAgICAgICB0aGlzLmNhcHR1cmUoJz8nKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VRdWVyeVBhcmFtKHBhcmFtcyk7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5yZW1haW5pbmcubGVuZ3RoID4gMCAmJiB0aGlzLnBlZWtTdGFydHNXaXRoKCcmJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcHR1cmUoJyYnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlUXVlcnlQYXJhbShwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfTtcbiAgICBVcmxQYXJzZXIucHJvdG90eXBlLnBhcnNlRnJhZ21lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlZWtTdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbWFpbmluZy5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVXJsUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1hdHJpeFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICB3aGlsZSAodGhpcy5yZW1haW5pbmcubGVuZ3RoID4gMCAmJiB0aGlzLnBlZWtTdGFydHNXaXRoKCc7JykpIHtcbiAgICAgICAgICAgIHRoaXMuY2FwdHVyZSgnOycpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVBhcmFtKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9O1xuICAgIFVybFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXJhbSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIGtleSA9IG1hdGNoUGF0aFdpdGhQYXJhbXModGhpcy5yZW1haW5pbmcpO1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FwdHVyZShrZXkpO1xuICAgICAgICB2YXIgdmFsdWUgPSAndHJ1ZSc7XG4gICAgICAgIGlmICh0aGlzLnBlZWtTdGFydHNXaXRoKCc9JykpIHtcbiAgICAgICAgICAgIHRoaXMuY2FwdHVyZSgnPScpO1xuICAgICAgICAgICAgdmFyIHZhbHVlTWF0Y2ggPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZU1hdGNoO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIFVybFBhcnNlci5wcm90b3R5cGUucGFyc2VRdWVyeVBhcmFtID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIga2V5ID0gbWF0Y2hRdWVyeVBhcmFtcyh0aGlzLnJlbWFpbmluZyk7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYXB0dXJlKGtleSk7XG4gICAgICAgIHZhciB2YWx1ZSA9ICd0cnVlJztcbiAgICAgICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJz0nKSkge1xuICAgICAgICAgICAgdGhpcy5jYXB0dXJlKCc9Jyk7XG4gICAgICAgICAgICB2YXIgdmFsdWVNYXRjaCA9IG1hdGNoVXJsUXVlcnlQYXJhbVZhbHVlKHRoaXMucmVtYWluaW5nKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZU1hdGNoO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIFVybFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXJlbnMgPSBmdW5jdGlvbiAoYWxsb3dQcmltYXJ5KSB7XG4gICAgICAgIHZhciBzZWdtZW50cyA9IHt9O1xuICAgICAgICB0aGlzLmNhcHR1cmUoJygnKTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLnBlZWtTdGFydHNXaXRoKCcpJykgJiYgdGhpcy5yZW1haW5pbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBtYXRjaFBhdGhXaXRoUGFyYW1zKHRoaXMucmVtYWluaW5nKTtcbiAgICAgICAgICAgIHZhciBvdXRsZXROYW1lID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHBhdGguaW5kZXhPZignOicpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBvdXRsZXROYW1lID0gcGF0aC5zdWJzdHIoMCwgcGF0aC5pbmRleE9mKCc6JykpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZShvdXRsZXROYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcHR1cmUoJzonKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFsbG93UHJpbWFyeSkge1xuICAgICAgICAgICAgICAgIG91dGxldE5hbWUgPSBzaGFyZWRfMS5QUklNQVJZX09VVExFVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucGFyc2VTZWdtZW50Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHNlZ21lbnRzW291dGxldE5hbWVdID0gT2JqZWN0LmtleXMoY2hpbGRyZW4pLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuW3NoYXJlZF8xLlBSSU1BUllfT1VUTEVUXSA6XG4gICAgICAgICAgICAgICAgbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChbXSwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMucGVla1N0YXJ0c1dpdGgoJy8vJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcHR1cmUoJy8vJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYXB0dXJlKCcpJyk7XG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9O1xuICAgIHJldHVybiBVcmxQYXJzZXI7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZFhKc1gzTmxjbWxoYkdsNlpYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12ZFhKc1gzTmxjbWxoYkdsNlpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxIVkNRVUUyUWl4VlFVRlZMRU5CUVVNc1EwRkJRVHRCUVVONFF5eDVRa0ZCY1VRc1dVRkJXU3hEUVVGRExFTkJRVUU3UVVGRGJFVXNNa0pCUVhOQ0xHOUNRVUZ2UWl4RFFVRkRMRU5CUVVFN1FVRlBNME03U1VGQlFUdEpRVlZCTEVOQlFVTTdTVUZCUkN4dlFrRkJRenRCUVVGRUxFTkJRVU1zUVVGV1JDeEpRVlZETzBGQlZuRkNMSEZDUVVGaExHZENRVlZzUXl4RFFVRkJPMEZCUzBRN1NVRkJRVHRKUVZsQkxFTkJRVU03U1VGWVF5eHZRMEZCU3l4SFFVRk1MRlZCUVUwc1IwRkJWenRSUVVObUxFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRemRDTEUxQlFVMHNRMEZCUXl4SlFVRkpMR3RDUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRjRVlzUTBGQlF6dEpRVVZFTEhkRFFVRlRMRWRCUVZRc1ZVRkJWU3hKUVVGaE8xRkJRM0pDTEVsQlFVMHNUMEZCVHl4SFFVRkhMRTFCUVVrc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVWNzUTBGQlF6dFJRVU40UkN4SlFVRk5MRXRCUVVzc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGNrUXNTVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eEpRVUZKTEVkQlFVY3NUVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJWU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU51UlN4TlFVRk5MRU5CUVVNc1MwRkJSeXhQUVVGUExFZEJRVWNzUzBGQlN5eEhRVUZITEZGQlFWVXNRMEZCUXp0SlFVTjZReXhEUVVGRE8wbEJRMGdzTWtKQlFVTTdRVUZCUkN4RFFVRkRMRUZCV2tRc1NVRlpRenRCUVZwWkxEUkNRVUZ2UWl4MVFrRlphRU1zUTBGQlFUdEJRVVZFTEhkQ1FVRXJRaXhQUVVGdFFqdEpRVU5vUkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUVN4RFFVRkRMRWxCUVVrc1QwRkJRU3hoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFXaENMRU5CUVdkQ0xFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRkRVVzUTBGQlF6dEJRVVpsTEhOQ1FVRmpMR2xDUVVVM1FpeERRVUZCTzBGQlJVUXNNRUpCUVRCQ0xFOUJRVzFDTEVWQlFVVXNTVUZCWVR0SlFVTXhSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMSFZDUVVGakxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpkRExFbEJRVTBzVDBGQlR5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNkVUpCUVdNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlF6RkZMRWxCUVUwc1ZVRkJVU3hIUVVGaExFVkJRVVVzUTBGQlF6dFJRVU01UWl4dlFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVXNWVUZCUXl4RFFVRmhMRVZCUVVVc1EwRkJVenRaUVVOcVJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc2RVSkJRV01zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNwQ0xGVkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVa3NRMEZCUXl4VFFVRkpMR2RDUVVGblFpeERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVjc1EwRkJReXhEUVVGRE8xbEJRM1JFTEVOQlFVTTdVVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eERRVUZETEZWQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UWl4TlFVRk5MRU5CUVVrc1QwRkJUeXhUUVVGSkxGVkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVVjc1EwRkJRenRSUVVNNVF5eERRVUZETzFGQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRUaXhOUVVGTkxFTkJRVU1zUzBGQlJ5eFBRVUZUTEVOQlFVTTdVVUZEZEVJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eDFRa0ZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzSkVMRWxCUVUwc1ZVRkJVU3hIUVVGSExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eDFRa0ZCWXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU0zUlN4dlFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVXNWVUZCUXl4RFFVRmhMRVZCUVVVc1EwRkJVenRaUVVOcVJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc2RVSkJRV01zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNwQ0xGVkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVa3NRMEZCUXl4VFFVRkpMR2RDUVVGblFpeERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVjc1EwRkJReXhEUVVGRE8xbEJRM1JFTEVOQlFVTTdVVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFMUJRVTBzUTBGQlNTeGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVzc1ZVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCUnl4RFFVRkRPMGxCUXk5RUxFTkJRVU03U1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTk9MRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdTVUZEYWtNc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGRlJDd3lRa0ZCTWtJc1QwRkJiVUk3U1VGRE5VTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eDFRa0ZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM0pETEVsQlFVMHNUMEZCVHl4SFFVRkhMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEhWQ1FVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSV3BGTEVsQlFVMHNWMEZCVXl4SFFVRmhMRVZCUVVVc1EwRkJRenRSUVVNdlFpeHZRa0ZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlF5eERRVUZoTEVWQlFVVXNRMEZCVXp0WlFVTnFSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NkVUpCUVdNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzcENMRmRCUVZNc1EwRkJReXhKUVVGSkxFTkJRVWtzUTBGQlF5eFRRVUZKTEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRMRU5CUVVjc1EwRkJReXhEUVVGRE8xbEJRM0pGTEVOQlFVTTdVVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVTBzV1VGQldTeEhRVUZITEZkQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhIUVVGSExFMUJRVWtzVjBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU0zUlN4SlFVRk5MR1ZCUVdVc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExIVkNRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpWRkxFbEJRVTBzYTBKQlFXdENMRWRCUVZjc1pVRkJaU3hIUVVGSExFMUJRVWtzWlVGQmFVSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRhRVlzVFVGQlRTeERRVUZETEV0QlFVY3NUMEZCVHl4SFFVRkhMRmxCUVZrc1IwRkJSeXhyUWtGQmIwSXNRMEZCUXp0SlFVTXhSQ3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJRMW9zUTBGQlF6dEJRVU5JTEVOQlFVTTdRVUZGUkN4MVFrRkJPRUlzU1VGQmRVSTdTVUZEYmtRc1RVRkJUU3hEUVVGRExFdEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlJ5eERRVUZETzBGQlF6TkVMRU5CUVVNN1FVRkdaU3h4UWtGQllTeG5Ra0ZGTlVJc1EwRkJRVHRCUVVWRUxIbENRVUY1UWl4TlFVRXJRanRKUVVOMFJDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZCTEVOQlFVTXNTVUZCU1N4UFFVRkJMRTlCUVVrc1EwRkJReXhEUVVGRExFdEJRVXNzVTBGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkZMRVZCUVhwQ0xFTkJRWGxDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFVXNRMEZCUXp0QlFVVkVMRGhDUVVFNFFpeE5RVUVyUWp0SlFVTXpSQ3hKUVVGTkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVUVzUTBGQlF5eEpRVUZKTEU5QlFVRXNRMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhUUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVVXNSVUZCZUVJc1EwRkJkMElzUTBGQlF5eERRVUZETzBsQlF6bEVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4TlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKRUxFTkJRVU03UVVGRlJEdEpRVU5GTEdOQlFXMUNMRXRCUVZFc1JVRkJVeXhOUVVGVE8xRkJRVEZDTEZWQlFVc3NSMEZCVEN4TFFVRkxMRU5CUVVjN1VVRkJVeXhYUVVGTkxFZEJRVTRzVFVGQlRTeERRVUZITzBsQlFVY3NRMEZCUXp0SlFVTnVSQ3hYUVVGRE8wRkJRVVFzUTBGQlF5eEJRVVpFTEVsQlJVTTdRVUZEUkN4bFFVRnJRaXhIUVVGMVFqdEpRVU4yUXl4SlFVRk5MRWRCUVVjc1IwRkJjMElzUlVGQlJTeERRVUZETzBsQlEyeERMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRja0lzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETjBJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCV1N4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3hEUVVGRE8wbEJRMGdzUTBGQlF6dEpRVU5FTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRZaXhEUVVGRE8wRkJSVVFzU1VGQlRTeFZRVUZWTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03UVVGRGRrTXNOa0pCUVRaQ0xFZEJRVmM3U1VGRGRFTXNWVUZCVlN4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGVrSXNTVUZCVFN4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTnVReXhOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGREwwSXNRMEZCUXp0QlFVVkVMRWxCUVUwc1kwRkJZeXhIUVVGSExGbEJRVmtzUTBGQlF6dEJRVU53UXl3d1FrRkJNRUlzUjBGQlZ6dEpRVU51UXl4alFVRmpMRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU0zUWl4SlFVRk5MRXRCUVVzc1IwRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTI1RExFMUJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU12UWl4RFFVRkRPMEZCUlVRc1NVRkJUU3h2UWtGQmIwSXNSMEZCUnl4WFFVRlhMRU5CUVVNN1FVRkRla01zYVVOQlFXbERMRWRCUVZjN1NVRkRNVU1zYjBKQlFXOUNMRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU51UXl4SlFVRk5MRXRCUVVzc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE4wTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUXk5Q0xFTkJRVU03UVVGRlJEdEpRVU5GTEcxQ1FVRnZRaXhUUVVGcFFqdFJRVUZxUWl4alFVRlRMRWRCUVZRc1UwRkJVeXhEUVVGUk8wbEJRVWNzUTBGQlF6dEpRVVY2UXl4clEwRkJZeXhIUVVGa0xGVkJRV1VzUjBGQlZ5eEpRVUZoTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZMMFVzTWtKQlFVOHNSMEZCVUN4VlFVRlJMRWRCUVZjN1VVRkRha0lzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRjRU1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4blFrRkJZU3hIUVVGSExGRkJRVWtzUTBGQlF5eERRVUZETzFGQlEzaERMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTjRSQ3hEUVVGRE8wbEJSVVFzYjBOQlFXZENMRWRCUVdoQ08xRkJRMFVzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1MwRkJTeXhGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0JFTEUxQlFVMHNRMEZCUXl4SlFVRkpMSEZDUVVGVkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJoRExFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTk9MRTFCUVUwc1EwRkJReXhKUVVGSkxIRkNRVUZWTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla1FzUTBGQlF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4M1EwRkJiMElzUjBGQmNFSTdVVUZEUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJReTlDTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRXaXhEUVVGRE8xRkJSVVFzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETjBJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTndRaXhEUVVGRE8xRkJSVVFzU1VGQlRTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUlRORExFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkROVVlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOc1FpeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla01zUTBGQlF6dFJRVVZFTEVsQlFVa3NVVUZCVVN4SFFVRm5ReXhGUVVGRkxFTkJRVU03VVVGREwwTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRPVUlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOc1FpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU53UXl4RFFVRkRPMUZCUlVRc1NVRkJTU3hIUVVGSExFZEJRV2RETEVWQlFVVXNRMEZCUXp0UlFVTXhReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU0zUWl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTm9ReXhEUVVGRE8xRkJSVVFzUjBGQlJ5eERRVUZETEhWQ1FVRmpMRU5CUVVNc1IwRkJSeXhKUVVGSkxIRkNRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRM1JFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1NVRkRZaXhEUVVGRE8wbEJSVVFzZFVOQlFXMUNMRWRCUVc1Q08xRkJRMFVzU1VGQlNTeEpRVUZKTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXk5RExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRia0lzU1VGQlNTeFpRVUZaTEVkQlFYbENMRVZCUVVVc1EwRkJRenRSUVVNMVF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTNRaXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU03VVVGRE1VTXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhKUVVGSkxEUkNRVUZwUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlF6dEpRVU51UkN4RFFVRkRPMGxCUlVRc2IwTkJRV2RDTEVkQlFXaENPMUZCUTBVc1NVRkJUU3hOUVVGTkxFZEJRWGxDTEVWQlFVVXNRMEZCUXp0UlFVTjRReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU0zUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEyeENMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZETjBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRPMmRDUVVNM1JDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU5zUWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFsQlF5OUNMRU5CUVVNN1VVRkRTQ3hEUVVGRE8xRkJRMFFzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVFzYVVOQlFXRXNSMEZCWWp0UlFVTkZMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRemRDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnlReXhEUVVGRE8xRkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEVGl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRMlFzUTBGQlF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4eFEwRkJhVUlzUjBGQmFrSTdVVUZEUlN4SlFVRk5MRTFCUVUwc1IwRkJlVUlzUlVGQlJTeERRVUZETzFGQlEzaERMRTlCUVU4c1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0WlFVTTNSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJ4Q0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRNVUlzUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFTERoQ1FVRlZMRWRCUVZZc1ZVRkJWeXhOUVVFMFFqdFJRVU55UXl4SlFVRk5MRWRCUVVjc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGFFUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExUXNUVUZCVFN4RFFVRkRPMUZCUTFRc1EwRkJRenRSUVVORUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRiRUlzU1VGQlNTeExRVUZMTEVkQlFWRXNUVUZCVFN4RFFVRkRPMUZCUTNoQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZENMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZEYkVJc1NVRkJUU3hWUVVGVkxFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFsQlEzWkVMRVZCUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJZc1MwRkJTeXhIUVVGSExGVkJRVlVzUTBGQlF6dG5Ra0ZEYmtJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTjBRaXhEUVVGRE8xRkJRMGdzUTBGQlF6dFJRVVZFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMRzFEUVVGbExFZEJRV1lzVlVGQlowSXNUVUZCTkVJN1VVRkRNVU1zU1VGQlRTeEhRVUZITEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXpkRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOVUxFMUJRVTBzUTBGQlF6dFJRVU5VTEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEyeENMRWxCUVVrc1MwRkJTeXhIUVVGUkxFMUJRVTBzUTBGQlF6dFJRVU40UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1FpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMnhDTEVsQlFVa3NWVUZCVlN4SFFVRkhMSFZDUVVGMVFpeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRaUVVONlJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5tTEV0QlFVc3NSMEZCUnl4VlFVRlZMRU5CUVVNN1owSkJRMjVDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRGRFSXNRMEZCUXp0UlFVTklMRU5CUVVNN1VVRkRSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMGxCUTNSQ0xFTkJRVU03U1VGRlJDd3JRa0ZCVnl4SFFVRllMRlZCUVZrc1dVRkJjVUk3VVVGREwwSXNTVUZCVFN4UlFVRlJMRWRCUVdkRExFVkJRVVVzUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlJXeENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRPMWxCUXpsRUxFbEJRVWtzU1VGQlNTeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTXZReXhKUVVGSkxGVkJRVlVzVTBGQlVTeERRVUZETzFsQlEzWkNMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTXpRaXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNdlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8yZENRVU42UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEzQkNMRU5CUVVNN1dVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVFSXNWVUZCVlN4SFFVRkhMSFZDUVVGakxFTkJRVU03V1VGRE9VSXNRMEZCUXp0WlFVVkVMRWxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRE8xbEJRemRETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEhWQ1FVRmpMRU5CUVVNN1owSkJRM2hDTEVsQlFVa3NjVUpCUVZVc1EwRkJReXhGUVVGRkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdXVUZGZWtZc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6bENMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEY2tJc1EwRkJRenRSUVVOSUxFTkJRVU03VVVGRFJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJSV3hDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkRiRUlzUTBGQlF6dEpRVU5JTEdkQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVROS1JDeEpRVEpLUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN1VGSkpUVUZTV1Y5UFZWUk1SVlI5SUdaeWIyMGdKeTR2YzJoaGNtVmtKenRjYm1sdGNHOXlkQ0I3VlhKc1VHRjBhRmRwZEdoUVlYSmhiWE1zSUZWeWJGTmxaMjFsYm5Rc0lGVnliRlJ5WldWOUlHWnliMjBnSnk0dmRYSnNYM1J5WldVbk8xeHVhVzF3YjNKMElIdG1iM0pGWVdOb2ZTQm1jbTl0SUNjdUwzVjBhV3h6TDJOdmJHeGxZM1JwYjI0bk8xeHVYRzVjYmx4dUx5b3FYRzRnS2lCRVpXWnBibVZ6SUdFZ2QyRjVJSFJ2SUhObGNtbGhiR2w2WlM5a1pYTmxjbWxoYkdsNlpTQmhJSFZ5YkNCMGNtVmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1lXSnpkSEpoWTNRZ1kyeGhjM01nVlhKc1UyVnlhV0ZzYVhwbGNpQjdYRzRnSUM4cUtseHVJQ0FnS2lCUVlYSnpaU0JoSUhWeWJDQnBiblJ2SUdFZ2UwQk1hVzVySUZWeWJGUnlaV1Y5WEc0Z0lDQXFMMXh1SUNCaFluTjBjbUZqZENCd1lYSnpaU2gxY213NklITjBjbWx1WnlrNklGVnliRlJ5WldVN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmJuWmxjblJ6SUdFZ2UwQk1hVzVySUZWeWJGUnlaV1Y5SUdsdWRHOGdZU0IxY214Y2JpQWdJQ292WEc0Z0lHRmljM1J5WVdOMElITmxjbWxoYkdsNlpTaDBjbVZsT2lCVmNteFVjbVZsS1RvZ2MzUnlhVzVuTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUVnWkdWbVlYVnNkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUIwYUdVZ2MyVnlhV0ZzYVhwaGRHbHZiaTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVSbFptRjFiSFJWY214VFpYSnBZV3hwZW1WeUlHbHRjR3hsYldWdWRITWdWWEpzVTJWeWFXRnNhWHBsY2lCN1hHNGdJSEJoY25ObEtIVnliRG9nYzNSeWFXNW5LVG9nVlhKc1ZISmxaU0I3WEc0Z0lDQWdZMjl1YzNRZ2NDQTlJRzVsZHlCVmNteFFZWEp6WlhJb2RYSnNLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlZ5YkZSeVpXVW9jQzV3WVhKelpWSnZiM1JUWldkdFpXNTBLQ2tzSUhBdWNHRnljMlZSZFdWeWVWQmhjbUZ0Y3lncExDQndMbkJoY25ObFJuSmhaMjFsYm5Rb0tTazdYRzRnSUgxY2JseHVJQ0J6WlhKcFlXeHBlbVVvZEhKbFpUb2dWWEpzVkhKbFpTazZJSE4wY21sdVp5QjdYRzRnSUNBZ1kyOXVjM1FnYzJWbmJXVnVkQ0E5SUdBdkpIdHpaWEpwWVd4cGVtVlRaV2R0Wlc1MEtIUnlaV1V1Y205dmRDd2dkSEoxWlNsOVlEdGNiaUFnSUNCamIyNXpkQ0J4ZFdWeWVTQTlJSE5sY21saGJHbDZaVkYxWlhKNVVHRnlZVzF6S0hSeVpXVXVjWFZsY25sUVlYSmhiWE1wTzF4dUlDQWdJR052Ym5OMElHWnlZV2R0Wlc1MElEMGdkSEpsWlM1bWNtRm5iV1Z1ZENBaFBUMGdiblZzYkNBL0lHQWpKSHQwY21WbExtWnlZV2R0Wlc1MGZXQWdPaUFuSnp0Y2JpQWdJQ0J5WlhSMWNtNGdZQ1I3YzJWbmJXVnVkSDBrZTNGMVpYSjVmU1I3Wm5KaFoyMWxiblI5WUR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MyVnlhV0ZzYVhwbFVHRjBhSE1vYzJWbmJXVnVkRG9nVlhKc1UyVm5iV1Z1ZENrNklITjBjbWx1WnlCN1hHNGdJSEpsZEhWeWJpQnpaV2R0Wlc1MExuQmhkR2h6VjJsMGFGQmhjbUZ0Y3k1dFlYQW9jQ0E5UGlCelpYSnBZV3hwZW1WUVlYUm9LSEFwS1M1cWIybHVLQ2N2SnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGNtbGhiR2w2WlZObFoyMWxiblFvYzJWbmJXVnVkRG9nVlhKc1UyVm5iV1Z1ZEN3Z2NtOXZkRG9nWW05dmJHVmhiaWs2SUhOMGNtbHVaeUI3WEc0Z0lHbG1JQ2h6WldkdFpXNTBMbU5vYVd4a2NtVnVXMUJTU1UxQlVsbGZUMVZVVEVWVVhTQW1KaUJ5YjI5MEtTQjdYRzRnSUNBZ1kyOXVjM1FnY0hKcGJXRnllU0E5SUhObGNtbGhiR2w2WlZObFoyMWxiblFvYzJWbmJXVnVkQzVqYUdsc1pISmxibHRRVWtsTlFWSlpYMDlWVkV4RlZGMHNJR1poYkhObEtUdGNiaUFnSUNCamIyNXpkQ0JqYUdsc1pISmxiam9nYzNSeWFXNW5XMTBnUFNCYlhUdGNiaUFnSUNCbWIzSkZZV05vS0hObFoyMWxiblF1WTJocGJHUnlaVzRzSUNoMk9pQlZjbXhUWldkdFpXNTBMQ0JyT2lCemRISnBibWNwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hySUNFOVBTQlFVa2xOUVZKWlgwOVZWRXhGVkNrZ2UxeHVJQ0FnSUNBZ0lDQmphR2xzWkhKbGJpNXdkWE5vS0dBa2UydDlPaVI3YzJWeWFXRnNhWHBsVTJWbmJXVnVkQ2gyTENCbVlXeHpaU2w5WUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZZ0tHTm9hV3hrY21WdUxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmdKSHR3Y21sdFlYSjVmU2drZTJOb2FXeGtjbVZ1TG1wdmFXNG9KeTh2SnlsOUtXQTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJnSkh0d2NtbHRZWEo1ZldBN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSE5sWjIxbGJuUXVZMmhwYkdSeVpXNWJVRkpKVFVGU1dWOVBWVlJNUlZSZElDWW1JQ0Z5YjI5MEtTQjdYRzRnSUNBZ1kyOXVjM1FnWTJocGJHUnlaVzRnUFNCYmMyVnlhV0ZzYVhwbFUyVm5iV1Z1ZENoelpXZHRaVzUwTG1Ob2FXeGtjbVZ1VzFCU1NVMUJVbGxmVDFWVVRFVlVYU3dnWm1Gc2MyVXBYVHRjYmlBZ0lDQm1iM0pGWVdOb0tITmxaMjFsYm5RdVkyaHBiR1J5Wlc0c0lDaDJPaUJWY214VFpXZHRaVzUwTENCck9pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNocklDRTlQU0JRVWtsTlFWSlpYMDlWVkV4RlZDa2dlMXh1SUNBZ0lDQWdJQ0JqYUdsc1pISmxiaTV3ZFhOb0tHQWtlMnQ5T2lSN2MyVnlhV0ZzYVhwbFUyVm5iV1Z1ZENoMkxDQm1ZV3h6WlNsOVlDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzTmxjbWxoYkdsNlpWQmhkR2h6S0hObFoyMWxiblFwZlM4b0pIdGphR2xzWkhKbGJpNXFiMmx1S0Njdkx5Y3BmU2xnTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6WlhKcFlXeHBlbVZRWVhSb2N5aHpaV2R0Wlc1MEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhKcFlXeHBlbVZEYUdsc1pISmxiaWh6WldkdFpXNTBPaUJWY214VFpXZHRaVzUwS1NCN1hHNGdJR2xtSUNoelpXZHRaVzUwTG1Ob2FXeGtjbVZ1VzFCU1NVMUJVbGxmVDFWVVRFVlVYU2tnZTF4dUlDQWdJR052Ym5OMElIQnlhVzFoY25rZ1BTQnpaWEpwWVd4cGVtVlFZWFJvY3loelpXZHRaVzUwTG1Ob2FXeGtjbVZ1VzFCU1NVMUJVbGxmVDFWVVRFVlVYU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnpaV052Ym1SaGNuazZJSE4wY21sdVoxdGRJRDBnVzEwN1hHNGdJQ0FnWm05eVJXRmphQ2h6WldkdFpXNTBMbU5vYVd4a2NtVnVMQ0FvZGpvZ1ZYSnNVMlZuYldWdWRDd2dhem9nYzNSeWFXNW5LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9heUFoUFQwZ1VGSkpUVUZTV1Y5UFZWUk1SVlFwSUh0Y2JpQWdJQ0FnSUNBZ2MyVmpiMjVrWVhKNUxuQjFjMmdvWUNSN2EzMDZKSHR6WlhKcFlXeHBlbVZRWVhSb2N5aDJLWDBrZTNObGNtbGhiR2w2WlVOb2FXeGtjbVZ1S0hZcGZXQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHTnZibk4wSUhObFkyOXVaR0Z5ZVZOMGNpQTlJSE5sWTI5dVpHRnllUzVzWlc1bmRHZ2dQaUF3SUQ4Z1lDZ2tlM05sWTI5dVpHRnllUzVxYjJsdUtDY3ZMeWNwZlNsZ0lEb2dKeWM3WEc0Z0lDQWdZMjl1YzNRZ2NISnBiV0Z5ZVVOb2FXeGtjbVZ1SUQwZ2MyVnlhV0ZzYVhwbFEyaHBiR1J5Wlc0b2MyVm5iV1Z1ZEM1amFHbHNaSEpsYmx0UVVrbE5RVkpaWDA5VlZFeEZWRjBwTzF4dUlDQWdJR052Ym5OMElIQnlhVzFoY25sRGFHbHNaSEpsYmxOMGNqb2djM1J5YVc1bklEMGdjSEpwYldGeWVVTm9hV3hrY21WdUlEOGdZQzhrZTNCeWFXMWhjbmxEYUdsc1pISmxibjFnSURvZ0p5YzdYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzQnlhVzFoY25sOUpIdHpaV052Ym1SaGNubFRkSEo5Skh0d2NtbHRZWEo1UTJocGJHUnlaVzVUZEhKOVlEdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE5sY21saGJHbDZaVkJoZEdnb2NHRjBhRG9nVlhKc1VHRjBhRmRwZEdoUVlYSmhiWE1wT2lCemRISnBibWNnZTF4dUlDQnlaWFIxY200Z1lDUjdjR0YwYUM1d1lYUm9mU1I3YzJWeWFXRnNhWHBsVUdGeVlXMXpLSEJoZEdndWNHRnlZVzFsZEdWeWN5bDlZRHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlZ5YVdGc2FYcGxVR0Z5WVcxektIQmhjbUZ0Y3pvZ2UxdHJaWGs2SUhOMGNtbHVaMTA2SUhOMGNtbHVaMzBwT2lCemRISnBibWNnZTF4dUlDQnlaWFIxY200Z2NHRnBjbk1vY0dGeVlXMXpLUzV0WVhBb2NDQTlQaUJnT3lSN2NDNW1hWEp6ZEgwOUpIdHdMbk5sWTI5dVpIMWdLUzVxYjJsdUtDY25LVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlZ5YVdGc2FYcGxVWFZsY25sUVlYSmhiWE1vY0dGeVlXMXpPaUI3VzJ0bGVUb2djM1J5YVc1blhUb2djM1J5YVc1bmZTazZJSE4wY21sdVp5QjdYRzRnSUdOdmJuTjBJSE4wY25NZ1BTQndZV2x5Y3lod1lYSmhiWE1wTG0xaGNDaHdJRDArSUdBa2UzQXVabWx5YzNSOVBTUjdjQzV6WldOdmJtUjlZQ2s3WEc0Z0lISmxkSFZ5YmlCemRISnpMbXhsYm1kMGFDQStJREFnUHlCZ1B5UjdjM1J5Y3k1cWIybHVLRndpSmx3aUtYMWdJRG9nSnljN1hHNTlYRzVjYm1Oc1lYTnpJRkJoYVhJOFFTd2dRajRnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3ZFdKc2FXTWdabWx5YzNRNklFRXNJSEIxWW14cFl5QnpaV052Ym1RNklFSXBJSHQ5WEc1OVhHNW1kVzVqZEdsdmJpQndZV2x5Y3p4VVBpaHZZbW82SUh0YmEyVjVPaUJ6ZEhKcGJtZGRPaUJVZlNrNklGQmhhWEk4YzNSeWFXNW5MQ0JVUGx0ZElIdGNiaUFnWTI5dWMzUWdjbVZ6T2lCUVlXbHlQSE4wY21sdVp5d2dWRDViWFNBOUlGdGRPMXh1SUNCbWIzSWdLR3hsZENCd2NtOXdJR2x1SUc5aWFpa2dlMXh1SUNBZ0lHbG1JQ2h2WW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNDa3BJSHRjYmlBZ0lDQWdJSEpsY3k1d2RYTm9LRzVsZHlCUVlXbHlQSE4wY21sdVp5d2dWRDRvY0hKdmNDd2diMkpxVzNCeWIzQmRLU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE03WEc1OVhHNWNibU52Ym5OMElGTkZSMDFGVGxSZlVrVWdQU0F2WGx0ZVhGd3ZYRndvWEZ3cFhGdy9PejBtSTEwckx6dGNibVoxYm1OMGFXOXVJRzFoZEdOb1VHRjBhRmRwZEdoUVlYSmhiWE1vYzNSeU9pQnpkSEpwYm1jcE9pQnpkSEpwYm1jZ2UxeHVJQ0JUUlVkTlJVNVVYMUpGTG14aGMzUkpibVJsZUNBOUlEQTdYRzRnSUdOdmJuTjBJRzFoZEdOb0lEMGdVMFZIVFVWT1ZGOVNSUzVsZUdWaktITjBjaWs3WEc0Z0lISmxkSFZ5YmlCdFlYUmphQ0EvSUcxaGRHTm9XekJkSURvZ0p5YzdYRzU5WEc1Y2JtTnZibk4wSUZGVlJWSlpYMUJCVWtGTlgxSkZJRDBnTDE1YlhqMWNYRDhtSTEwckx6dGNibVoxYm1OMGFXOXVJRzFoZEdOb1VYVmxjbmxRWVhKaGJYTW9jM1J5T2lCemRISnBibWNwT2lCemRISnBibWNnZTF4dUlDQlJWVVZTV1Y5UVFWSkJUVjlTUlM1c1lYTjBTVzVrWlhnZ1BTQXdPMXh1SUNCamIyNXpkQ0J0WVhSamFDQTlJRk5GUjAxRlRsUmZVa1V1WlhobFl5aHpkSElwTzF4dUlDQnlaWFIxY200Z2JXRjBZMmdnUHlCdFlYUmphRnN3WFNBNklDY25PMXh1ZlZ4dVhHNWpiMjV6ZENCUlZVVlNXVjlRUVZKQlRWOVdRVXhWUlY5U1JTQTlJQzllVzE1Y1hEOG1JMTByTHp0Y2JtWjFibU4wYVc5dUlHMWhkR05vVlhKc1VYVmxjbmxRWVhKaGJWWmhiSFZsS0hOMGNqb2djM1J5YVc1bktUb2djM1J5YVc1bklIdGNiaUFnVVZWRlVsbGZVRUZTUVUxZlZrRk1WVVZmVWtVdWJHRnpkRWx1WkdWNElEMGdNRHRjYmlBZ1kyOXVjM1FnYldGMFkyZ2dQU0JSVlVWU1dWOVFRVkpCVFY5V1FVeFZSVjlTUlM1bGVHVmpLSE4wY2lrN1hHNGdJSEpsZEhWeWJpQnRZWFJqYUNBL0lHMWhkR05vV3pCZElEb2dKeWM3WEc1OVhHNWNibU5zWVhOeklGVnliRkJoY25ObGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtIQnlhWFpoZEdVZ2NtVnRZV2x1YVc1bk9pQnpkSEpwYm1jcElIdDlYRzVjYmlBZ2NHVmxhMU4wWVhKMGMxZHBkR2dvYzNSeU9pQnpkSEpwYm1jcE9pQmliMjlzWldGdUlIc2djbVYwZFhKdUlIUm9hWE11Y21WdFlXbHVhVzVuTG5OMFlYSjBjMWRwZEdnb2MzUnlLVHNnZlZ4dVhHNGdJR05oY0hSMWNtVW9jM1J5T2lCemRISnBibWNwT2lCMmIybGtJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjbVZ0WVdsdWFXNW5Mbk4wWVhKMGMxZHBkR2dvYzNSeUtTa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQkZlSEJsWTNSbFpDQmNJaVI3YzNSeWZWd2lMbUFwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5KbGJXRnBibWx1WnlBOUlIUm9hWE11Y21WdFlXbHVhVzVuTG5OMVluTjBjbWx1WnloemRISXViR1Z1WjNSb0tUdGNiaUFnZlZ4dVhHNGdJSEJoY25ObFVtOXZkRk5sWjIxbGJuUW9LVG9nVlhKc1UyVm5iV1Z1ZENCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y21WdFlXbHVhVzVuSUQwOVBTQW5KeUI4ZkNCMGFHbHpMbkpsYldGcGJtbHVaeUE5UFQwZ0p5OG5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZWeWJGTmxaMjFsYm5Rb1cxMHNJSHQ5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJWY214VFpXZHRaVzUwS0Z0ZExDQjBhR2x6TG5CaGNuTmxVMlZuYldWdWRFTm9hV3hrY21WdUtDa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEJoY25ObFUyVm5iV1Z1ZEVOb2FXeGtjbVZ1S0NrNklIdGJhMlY1T2lCemRISnBibWRkT2lCVmNteFRaV2R0Wlc1MGZTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNtVnRZV2x1YVc1bkxteGxibWQwYUNBOVBTQXdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjR1ZsYTFOMFlYSjBjMWRwZEdnb0p5OG5LU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWpZWEIwZFhKbEtDY3ZKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2NHRjBhSE1nUFNCYmRHaHBjeTV3WVhKelpWQmhkR2hYYVhSb1VHRnlZVzF6S0NsZE8xeHVYRzRnSUNBZ2QyaHBiR1VnS0hSb2FYTXVjR1ZsYTFOMFlYSjBjMWRwZEdnb0p5OG5LU0FtSmlBaGRHaHBjeTV3WldWclUzUmhjblJ6VjJsMGFDZ25MeThuS1NBbUppQWhkR2hwY3k1d1pXVnJVM1JoY25SelYybDBhQ2duTHlnbktTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1allYQjBkWEpsS0Njdkp5azdYRzRnSUNBZ0lDQndZWFJvY3k1d2RYTm9LSFJvYVhNdWNHRnljMlZRWVhSb1YybDBhRkJoY21GdGN5Z3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWTJocGJHUnlaVzQ2SUh0YmEyVjVPaUJ6ZEhKcGJtZGRPaUJWY214VFpXZHRaVzUwZlNBOUlIdDlPMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQmxaV3RUZEdGeWRITlhhWFJvS0NjdktDY3BLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtTmhjSFIxY21Vb0p5OG5LVHRjYmlBZ0lDQWdJR05vYVd4a2NtVnVJRDBnZEdocGN5NXdZWEp6WlZCaGNtVnVjeWgwY25WbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdjbVZ6T2lCN1cydGxlVG9nYzNSeWFXNW5YVG9nVlhKc1UyVm5iV1Z1ZEgwZ1BTQjdmVHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdaV1ZyVTNSaGNuUnpWMmwwYUNnbktDY3BLU0I3WEc0Z0lDQWdJQ0J5WlhNZ1BTQjBhR2x6TG5CaGNuTmxVR0Z5Wlc1ektHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhOYlVGSkpUVUZTV1Y5UFZWUk1SVlJkSUQwZ2JtVjNJRlZ5YkZObFoyMWxiblFvY0dGMGFITXNJR05vYVd4a2NtVnVLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpPMXh1SUNCOVhHNWNiaUFnY0dGeWMyVlFZWFJvVjJsMGFGQmhjbUZ0Y3lncE9pQlZjbXhRWVhSb1YybDBhRkJoY21GdGN5QjdYRzRnSUNBZ2JHVjBJSEJoZEdnZ1BTQnRZWFJqYUZCaGRHaFhhWFJvVUdGeVlXMXpLSFJvYVhNdWNtVnRZV2x1YVc1bktUdGNiaUFnSUNCMGFHbHpMbU5oY0hSMWNtVW9jR0YwYUNrN1hHNGdJQ0FnYkdWMElHMWhkSEpwZUZCaGNtRnRjem9nZTF0clpYazZJSE4wY21sdVoxMDZJR0Z1ZVgwZ1BTQjdmVHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdaV1ZyVTNSaGNuUnpWMmwwYUNnbk95Y3BLU0I3WEc0Z0lDQWdJQ0J0WVhSeWFYaFFZWEpoYlhNZ1BTQjBhR2x6TG5CaGNuTmxUV0YwY21sNFVHRnlZVzF6S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVlhKc1VHRjBhRmRwZEdoUVlYSmhiWE1vY0dGMGFDd2diV0YwY21sNFVHRnlZVzF6S1R0Y2JpQWdmVnh1WEc0Z0lIQmhjbk5sVVhWbGNubFFZWEpoYlhNb0tUb2dlMXRyWlhrNklITjBjbWx1WjEwNklHRnVlWDBnZTF4dUlDQWdJR052Ym5OMElIQmhjbUZ0Y3pvZ2UxdHJaWGs2SUhOMGNtbHVaMTA2SUdGdWVYMGdQU0I3ZlR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV3WldWclUzUmhjblJ6VjJsMGFDZ25QeWNwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbU5oY0hSMWNtVW9KejhuS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjR0Z5YzJWUmRXVnllVkJoY21GdEtIQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NXlaVzFoYVc1cGJtY3ViR1Z1WjNSb0lENGdNQ0FtSmlCMGFHbHpMbkJsWld0VGRHRnlkSE5YYVhSb0tDY21KeWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVhCMGRYSmxLQ2NtSnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGeWMyVlJkV1Z5ZVZCaGNtRnRLSEJoY21GdGN5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzRnSUgxY2JseHVJQ0J3WVhKelpVWnlZV2R0Wlc1MEtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNHVmxhMU4wWVhKMGMxZHBkR2dvSnlNbktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdFlXbHVhVzVuTG5OMVluTjBjbWx1WnlneEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NHRnljMlZOWVhSeWFYaFFZWEpoYlhNb0tUb2dlMXRyWlhrNklITjBjbWx1WjEwNklHRnVlWDBnZTF4dUlDQWdJR052Ym5OMElIQmhjbUZ0Y3pvZ2UxdHJaWGs2SUhOMGNtbHVaMTA2SUdGdWVYMGdQU0I3ZlR0Y2JpQWdJQ0IzYUdsc1pTQW9kR2hwY3k1eVpXMWhhVzVwYm1jdWJHVnVaM1JvSUQ0Z01DQW1KaUIwYUdsekxuQmxaV3RUZEdGeWRITlhhWFJvS0NjN0p5a3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVkyRndkSFZ5WlNnbk95Y3BPMXh1SUNBZ0lDQWdkR2hwY3k1d1lYSnpaVkJoY21GdEtIQmhjbUZ0Y3lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQndZWEpoYlhNN1hHNGdJSDFjYmx4dUlDQndZWEp6WlZCaGNtRnRLSEJoY21GdGN6b2dlMXRyWlhrNklITjBjbWx1WjEwNklHRnVlWDBwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCclpYa2dQU0J0WVhSamFGQmhkR2hYYVhSb1VHRnlZVzF6S0hSb2FYTXVjbVZ0WVdsdWFXNW5LVHRjYmlBZ0lDQnBaaUFvSVd0bGVTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtTmhjSFIxY21Vb2EyVjVLVHRjYmlBZ0lDQnNaWFFnZG1Gc2RXVTZJR0Z1ZVNBOUlDZDBjblZsSnp0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV3WldWclUzUmhjblJ6VjJsMGFDZ25QU2NwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbU5oY0hSMWNtVW9KejBuS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbFRXRjBZMmdnUFNCdFlYUmphRkJoZEdoWGFYUm9VR0Z5WVcxektIUm9hWE11Y21WdFlXbHVhVzVuS1R0Y2JpQWdJQ0FnSUdsbUlDaDJZV3gxWlUxaGRHTm9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnZG1Gc2RXVk5ZWFJqYUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVhCMGRYSmxLSFpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCd1lYSmhiWE5iYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdjR0Z5YzJWUmRXVnllVkJoY21GdEtIQmhjbUZ0Y3pvZ2UxdHJaWGs2SUhOMGNtbHVaMTA2SUdGdWVYMHBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0JyWlhrZ1BTQnRZWFJqYUZGMVpYSjVVR0Z5WVcxektIUm9hWE11Y21WdFlXbHVhVzVuS1R0Y2JpQWdJQ0JwWmlBb0lXdGxlU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbU5oY0hSMWNtVW9hMlY1S1R0Y2JpQWdJQ0JzWlhRZ2RtRnNkV1U2SUdGdWVTQTlJQ2QwY25WbEp6dGNiaUFnSUNCcFppQW9kR2hwY3k1d1pXVnJVM1JoY25SelYybDBhQ2duUFNjcEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1OaGNIUjFjbVVvSnowbktUdGNiaUFnSUNBZ0lIWmhjaUIyWVd4MVpVMWhkR05vSUQwZ2JXRjBZMmhWY214UmRXVnllVkJoY21GdFZtRnNkV1VvZEdocGN5NXlaVzFoYVc1cGJtY3BPMXh1SUNBZ0lDQWdhV1lnS0haaGJIVmxUV0YwWTJncElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjJZV3gxWlUxaGRHTm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTmhjSFIxY21Vb2RtRnNkV1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQndZWEpoYlhOYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnY0dGeWMyVlFZWEpsYm5Nb1lXeHNiM2RRY21sdFlYSjVPaUJpYjI5c1pXRnVLVG9nZTF0clpYazZJSE4wY21sdVoxMDZJRlZ5YkZObFoyMWxiblI5SUh0Y2JpQWdJQ0JqYjI1emRDQnpaV2R0Wlc1MGN6b2dlMXRyWlhrNklITjBjbWx1WjEwNklGVnliRk5sWjIxbGJuUjlJRDBnZTMwN1hHNGdJQ0FnZEdocGN5NWpZWEIwZFhKbEtDY29KeWs3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9JWFJvYVhNdWNHVmxhMU4wWVhKMGMxZHBkR2dvSnlrbktTQW1KaUIwYUdsekxuSmxiV0ZwYm1sdVp5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2NHRjBhQ0E5SUcxaGRHTm9VR0YwYUZkcGRHaFFZWEpoYlhNb2RHaHBjeTV5WlcxaGFXNXBibWNwTzF4dUlDQWdJQ0FnYkdWMElHOTFkR3hsZEU1aGJXVTZJSE4wY21sdVp6dGNiaUFnSUNBZ0lHbG1JQ2h3WVhSb0xtbHVaR1Y0VDJZb0p6b25LU0ErSUMweEtTQjdYRzRnSUNBZ0lDQWdJRzkxZEd4bGRFNWhiV1VnUFNCd1lYUm9Mbk4xWW5OMGNpZ3dMQ0J3WVhSb0xtbHVaR1Y0VDJZb0p6b25LU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZ3ZEhWeVpTaHZkWFJzWlhST1lXMWxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpZWEIwZFhKbEtDYzZKeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGc2JHOTNVSEpwYldGeWVTa2dlMXh1SUNBZ0lDQWdJQ0J2ZFhSc1pYUk9ZVzFsSUQwZ1VGSkpUVUZTV1Y5UFZWUk1SVlE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJR05vYVd4a2NtVnVJRDBnZEdocGN5NXdZWEp6WlZObFoyMWxiblJEYUdsc1pISmxiaWdwTzF4dUlDQWdJQ0FnYzJWbmJXVnVkSE5iYjNWMGJHVjBUbUZ0WlYwZ1BTQlBZbXBsWTNRdWEyVjVjeWhqYUdsc1pISmxiaWt1YkdWdVozUm9JRDA5UFNBeElEOGdZMmhwYkdSeVpXNWJVRkpKVFVGU1dWOVBWVlJNUlZSZElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlZjbXhUWldkdFpXNTBLRnRkTENCamFHbHNaSEpsYmlrN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuQmxaV3RUZEdGeWRITlhhWFJvS0Njdkx5Y3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZ3ZEhWeVpTZ25MeThuS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1allYQjBkWEpsS0NjcEp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2MyVm5iV1Z1ZEhNN1hHNGdJSDFjYm4xY2JpSmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3VybF9zZXJpYWxpemVyLmpzXG4gKiogbW9kdWxlIGlkID0gNDAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChhLCBiKSB7XG4gICAgdmFyIGsxID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGsyID0gT2JqZWN0LmtleXMoYik7XG4gICAgaWYgKGsxLmxlbmd0aCAhPSBrMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIga2V5O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgazEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0gazFbaV07XG4gICAgICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5zaGFsbG93RXF1YWwgPSBzaGFsbG93RXF1YWw7XG5mdW5jdGlvbiBmbGF0dGVuKGEpIHtcbiAgICB2YXIgdGFyZ2V0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYVtpXS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goYVtpXVtqXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG5mdW5jdGlvbiBmaXJzdChhKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID4gMCA/IGFbMF0gOiBudWxsO1xufVxuZXhwb3J0cy5maXJzdCA9IGZpcnN0O1xuZnVuY3Rpb24gbGFzdChhKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID4gMCA/IGFbYS5sZW5ndGggLSAxXSA6IG51bGw7XG59XG5leHBvcnRzLmxhc3QgPSBsYXN0O1xuZnVuY3Rpb24gYW5kKGJvb2xzKSB7XG4gICAgcmV0dXJuIGJvb2xzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAmJiBiOyB9LCB0cnVlKTtcbn1cbmV4cG9ydHMuYW5kID0gYW5kO1xuZnVuY3Rpb24gbWVyZ2UobTEsIG0yKSB7XG4gICAgdmFyIG0gPSB7fTtcbiAgICBmb3IgKHZhciBhdHRyIGluIG0xKSB7XG4gICAgICAgIGlmIChtMS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICAgICAgbVthdHRyXSA9IG0xW2F0dHJdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGF0dHIgaW4gbTIpIHtcbiAgICAgICAgaWYgKG0yLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICAgICAgICBtW2F0dHJdID0gbTJbYXR0cl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG5mdW5jdGlvbiBmb3JFYWNoKG1hcCwgY2FsbGJhY2spIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG1hcCkge1xuICAgICAgICBpZiAobWFwLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhtYXBbcHJvcF0sIHByb3ApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOXNiR1ZqZEdsdmJpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5MWRHbHNjeTlqYjJ4c1pXTjBhVzl1TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRU3h6UWtGQk5rSXNRMEZCY1VJc1JVRkJSU3hEUVVGeFFqdEpRVU4yUlN4SlFVRk5MRVZCUVVVc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpGQ0xFbEJRVTBzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE1VSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNelFpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTJZc1EwRkJRenRKUVVORUxFbEJRVWtzUjBGQlZ5eERRVUZETzBsQlEyaENMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMUZCUTI1RExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRXaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEyWXNRMEZCUXp0SlFVTklMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyUXNRMEZCUXp0QlFXUmxMRzlDUVVGWkxHVkJZek5DTEVOQlFVRTdRVUZGUkN4cFFrRkJNa0lzUTBGQlVUdEpRVU5xUXl4SlFVRk5MRTFCUVUwc1IwRkJVU3hGUVVGRkxFTkJRVU03U1VGRGRrSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTTdVVUZEYkVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU03V1VGRGNrTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMlFpeERRVUZETzBsQlEwZ3NRMEZCUXp0SlFVTkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFWSmxMR1ZCUVU4c1ZVRlJkRUlzUTBGQlFUdEJRVVZFTEdWQlFYbENMRU5CUVUwN1NVRkROMElzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRjRU1zUTBGQlF6dEJRVVpsTEdGQlFVc3NVVUZGY0VJc1EwRkJRVHRCUVVWRUxHTkJRWGRDTEVOQlFVMDdTVUZETlVJc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVNdlF5eERRVUZETzBGQlJtVXNXVUZCU1N4UFFVVnVRaXhEUVVGQk8wRkJSVVFzWVVGQmIwSXNTMEZCWjBJN1NVRkRiRU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZMTEU5QlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJUaXhEUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZET1VNc1EwRkJRenRCUVVabExGZEJRVWNzVFVGRmJFSXNRMEZCUVR0QlFVVkVMR1ZCUVhsQ0xFVkJRWE5DTEVWQlFVVXNSVUZCYzBJN1NVRkRja1VzU1VGQlNTeERRVUZETEVkQlFYVkNMRVZCUVVVc1EwRkJRenRKUVVVdlFpeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkNMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRelZDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEY2tJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRlJDeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkNMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRelZDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEY2tJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTFnc1EwRkJRenRCUVdoQ1pTeGhRVUZMTEZGQlowSndRaXhEUVVGQk8wRkJSVVFzYVVKQlEwa3NSMEZCZFVJc1JVRkJSU3hSUVVGeFF6dEpRVU5vUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZENMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkROVUlzUTBGQlF6dEpRVU5JTEVOQlFVTTdRVUZEU0N4RFFVRkRPMEZCVUdVc1pVRkJUeXhWUVU5MFFpeERRVUZCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdaMWJtTjBhVzl1SUhOb1lXeHNiM2RGY1hWaGJDaGhPaUI3VzNnNklITjBjbWx1WjEwNklHRnVlWDBzSUdJNklIdGJlRG9nYzNSeWFXNW5YVG9nWVc1NWZTazZJR0p2YjJ4bFlXNGdlMXh1SUNCamIyNXpkQ0JyTVNBOUlFOWlhbVZqZEM1clpYbHpLR0VwTzF4dUlDQmpiMjV6ZENCck1pQTlJRTlpYW1WamRDNXJaWGx6S0dJcE8xeHVJQ0JwWmlBb2F6RXViR1Z1WjNSb0lDRTlJR3N5TG14bGJtZDBhQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1SUNCc1pYUWdhMlY1T2lCemRISnBibWM3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhekV1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCclpYa2dQU0JyTVZ0cFhUdGNiaUFnSUNCcFppQW9ZVnRyWlhsZElDRTlQU0JpVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJtYkdGMGRHVnVQRlErS0dFNklGUmJYVnRkS1RvZ1ZGdGRJSHRjYmlBZ1kyOXVjM1FnZEdGeVoyVjBPaUJVVzEwZ1BTQmJYVHRjYmlBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmhMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnWm05eUlDaHNaWFFnYWlBOUlEQTdJR29nUENCaFcybGRMbXhsYm1kMGFEc2dLeXRxS1NCN1hHNGdJQ0FnSUNCMFlYSm5aWFF1Y0hWemFDaGhXMmxkVzJwZEtUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhSaGNtZGxkRHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHWnBjbk4wUEZRK0tHRTZJRlJiWFNrNklGUWdlMXh1SUNCeVpYUjFjbTRnWVM1c1pXNW5kR2dnUGlBd0lEOGdZVnN3WFNBNklHNTFiR3c3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnNZWE4wUEZRK0tHRTZJRlJiWFNrNklGUWdlMXh1SUNCeVpYUjFjbTRnWVM1c1pXNW5kR2dnUGlBd0lEOGdZVnRoTG14bGJtZDBhQ0F0SURGZElEb2diblZzYkR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0Z1WkNoaWIyOXNjem9nWW05dmJHVmhibHRkS1RvZ1ltOXZiR1ZoYmlCN1hHNGdJSEpsZEhWeWJpQmliMjlzY3k1eVpXUjFZMlVvS0dFc0lHSXBJRDArSUdFZ0ppWWdZaXdnZEhKMVpTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCdFpYSm5aVHhXUGlodE1Ub2dlMXRyWlhrNklITjBjbWx1WjEwNklGWjlMQ0J0TWpvZ2UxdHJaWGs2SUhOMGNtbHVaMTA2SUZaOUtUb2dlMXRyWlhrNklITjBjbWx1WjEwNklGWjlJSHRjYmlBZ2RtRnlJRzA2SUh0YmEyVjVPaUJ6ZEhKcGJtZGRPaUJXZlNBOUlIdDlPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHRjBkSElnYVc0Z2JURXBJSHRjYmlBZ0lDQnBaaUFvYlRFdWFHRnpUM2R1VUhKdmNHVnlkSGtvWVhSMGNpa3BJSHRjYmlBZ0lDQWdJRzFiWVhSMGNsMGdQU0J0TVZ0aGRIUnlYVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtYjNJZ0tIWmhjaUJoZEhSeUlHbHVJRzB5S1NCN1hHNGdJQ0FnYVdZZ0tHMHlMbWhoYzA5M2JsQnliM0JsY25SNUtHRjBkSElwS1NCN1hHNGdJQ0FnSUNCdFcyRjBkSEpkSUQwZ2JUSmJZWFIwY2wwN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUcwN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJtYjNKRllXTm9QRXNzSUZZK0tGeHVJQ0FnSUcxaGNEb2dlMXRyWlhrNklITjBjbWx1WjEwNklGWjlMQ0JqWVd4c1ltRmphem9nTHlvb1Zpd2dTeWtnUFQ0Z2RtOXBaQ292SUVaMWJtTjBhVzl1S1RvZ2RtOXBaQ0I3WEc0Z0lHWnZjaUFvZG1GeUlIQnliM0FnYVc0Z2JXRndLU0I3WEc0Z0lDQWdhV1lnS0cxaGNDNW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdLU2tnZTF4dUlDQWdJQ0FnWTJGc2JHSmhZMnNvYldGd1czQnliM0JkTENCd2NtOXdLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMGlYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3V0aWxzL2NvbGxlY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA0MDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gdmFsaWRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnLmZvckVhY2godmFsaWRhdGVOb2RlKTtcbn1cbmV4cG9ydHMudmFsaWRhdGVDb25maWcgPSB2YWxpZGF0ZUNvbmZpZztcbmZ1bmN0aW9uIHZhbGlkYXRlTm9kZShyb3V0ZSkge1xuICAgIGlmICghIXJvdXRlLnJlZGlyZWN0VG8gJiYgISFyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJ1wiICsgcm91dGUucGF0aCArIFwiJzogcmVkaXJlY3RUbyBhbmQgY2hpbGRyZW4gY2Fubm90IGJlIHVzZWQgdG9nZXRoZXJcIik7XG4gICAgfVxuICAgIGlmICghIXJvdXRlLnJlZGlyZWN0VG8gJiYgISFyb3V0ZS5jb21wb25lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb25maWd1cmF0aW9uIG9mIHJvdXRlICdcIiArIHJvdXRlLnBhdGggKyBcIic6IHJlZGlyZWN0VG8gYW5kIGNvbXBvbmVudCBjYW5ub3QgYmUgdXNlZCB0b2dldGhlclwiKTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLnBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdXRlIGNvbmZpZ3VyYXRpb246IHJvdXRlcyBtdXN0IGhhdmUgcGF0aCBzcGVjaWZpZWRcIik7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5wYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdXRlIGNvbmZpZ3VyYXRpb24gb2Ygcm91dGUgJ1wiICsgcm91dGUucGF0aCArIFwiJzogcGF0aCBjYW5ub3Qgc3RhcnQgd2l0aCBhIHNsYXNoXCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOXVabWxuTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwyTnZibVpwWnk1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJaVUVzZDBKQlFTdENMRTFCUVc5Q08wbEJRMnBFTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03UVVGREwwSXNRMEZCUXp0QlFVWmxMSE5DUVVGakxHbENRVVUzUWl4RFFVRkJPMEZCUlVRc2MwSkJRWE5DTEV0QlFWazdTVUZEYUVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRWxCUVVrc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpORExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExZ3NjVU5CUVcxRExFdEJRVXNzUTBGQlF5eEpRVUZKTEhWRVFVRnZSQ3hEUVVGRExFTkJRVU03U1VGRGVrY3NRMEZCUXp0SlFVTkVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SlFVRkpMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTFReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVU5ZTEhGRFFVRnRReXhMUVVGTExFTkJRVU1zU1VGQlNTeDNSRUZCY1VRc1EwRkJReXhEUVVGRE8wbEJRekZITEVOQlFVTTdTVUZEUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROMElzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl3NFJFRkJPRVFzUTBGQlF5eERRVUZETzBsQlEyeEdMRU5CUVVNN1NVRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETDBJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5d3lRMEZCZVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzYzBOQlFXMURMRU5CUVVNc1EwRkJRenRKUVVNeFJ5eERRVUZETzBGQlEwZ3NRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN1ZIbHdaWDBnWm5KdmJTQW5RR0Z1WjNWc1lYSXZZMjl5WlNjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUZKdmRYUmxja052Ym1acFp5QTlJRkp2ZFhSbFcxMDdYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnVW05MWRHVWdlMXh1SUNCd1lYUm9Qem9nYzNSeWFXNW5PMXh1SUNCMFpYSnRhVzVoYkQ4NklHSnZiMnhsWVc0N1hHNGdJR052YlhCdmJtVnVkRDg2SUZSNWNHVjhjM1J5YVc1bk8xeHVJQ0J2ZFhSc1pYUS9PaUJ6ZEhKcGJtYzdYRzRnSUdOaGJrRmpkR2wyWVhSbFB6b2dZVzU1VzEwN1hHNGdJR05oYmtSbFlXTjBhWFpoZEdVL09pQmhibmxiWFR0Y2JpQWdjbVZrYVhKbFkzUlViejg2SUhOMGNtbHVaenRjYmlBZ1kyaHBiR1J5Wlc0L09pQlNiM1YwWlZ0ZE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZEYjI1bWFXY29ZMjl1Wm1sbk9pQlNiM1YwWlhKRGIyNW1hV2NwT2lCMmIybGtJSHRjYmlBZ1kyOXVabWxuTG1admNrVmhZMmdvZG1Gc2FXUmhkR1ZPYjJSbEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWT2IyUmxLSEp2ZFhSbE9pQlNiM1YwWlNrNklIWnZhV1FnZTF4dUlDQnBaaUFvSVNGeWIzVjBaUzV5WldScGNtVmpkRlJ2SUNZbUlDRWhjbTkxZEdVdVkyaHBiR1J5Wlc0cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUdCSmJuWmhiR2xrSUdOdmJtWnBaM1Z5WVhScGIyNGdiMllnY205MWRHVWdKeVI3Y205MWRHVXVjR0YwYUgwbk9pQnlaV1JwY21WamRGUnZJR0Z1WkNCamFHbHNaSEpsYmlCallXNXViM1FnWW1VZ2RYTmxaQ0IwYjJkbGRHaGxjbUFwTzF4dUlDQjlYRzRnSUdsbUlDZ2hJWEp2ZFhSbExuSmxaR2x5WldOMFZHOGdKaVlnSVNGeWIzVjBaUzVqYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJR0JKYm5aaGJHbGtJR052Ym1acFozVnlZWFJwYjI0Z2IyWWdjbTkxZEdVZ0p5UjdjbTkxZEdVdWNHRjBhSDBuT2lCeVpXUnBjbVZqZEZSdklHRnVaQ0JqYjIxd2IyNWxiblFnWTJGdWJtOTBJR0psSUhWelpXUWdkRzluWlhSb1pYSmdLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2NtOTFkR1V1Y0dGMGFDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JKYm5aaGJHbGtJSEp2ZFhSbElHTnZibVpwWjNWeVlYUnBiMjQ2SUhKdmRYUmxjeUJ0ZFhOMElHaGhkbVVnY0dGMGFDQnpjR1ZqYVdacFpXUmdLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2NtOTFkR1V1Y0dGMGFDNXpkR0Z5ZEhOWGFYUm9LQ2N2SnlrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVsdWRtRnNhV1FnY205MWRHVWdZMjl1Wm1sbmRYSmhkR2x2YmlCdlppQnliM1YwWlNBbkpIdHliM1YwWlM1d1lYUm9mU2M2SUhCaGRHZ2dZMkZ1Ym05MElITjBZWEowSUhkcGRHZ2dZU0J6YkdGemFHQXBPMXh1SUNCOVhHNTlJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL2NvbmZpZy5qc1xuICoqIG1vZHVsZSBpZCA9IDQwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKCdyeGpzL0JlaGF2aW9yU3ViamVjdCcpO1xudmFyIHJvdXRlcl9zdGF0ZV8xID0gcmVxdWlyZSgnLi9yb3V0ZXJfc3RhdGUnKTtcbnZhciB0cmVlXzEgPSByZXF1aXJlKCcuL3V0aWxzL3RyZWUnKTtcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlclN0YXRlKGN1cnIsIHByZXZTdGF0ZSkge1xuICAgIHZhciByb290ID0gY3JlYXRlTm9kZShjdXJyLl9yb290LCBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuX3Jvb3QgOiB1bmRlZmluZWQpO1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5xdWVyeVBhcmFtcyA6IG5ldyBCZWhhdmlvclN1YmplY3RfMS5CZWhhdmlvclN1YmplY3QoY3Vyci5xdWVyeVBhcmFtcyk7XG4gICAgdmFyIGZyYWdtZW50ID0gcHJldlN0YXRlID8gcHJldlN0YXRlLmZyYWdtZW50IDogbmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdChjdXJyLmZyYWdtZW50KTtcbiAgICByZXR1cm4gbmV3IHJvdXRlcl9zdGF0ZV8xLlJvdXRlclN0YXRlKHJvb3QsIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCwgY3Vycik7XG59XG5leHBvcnRzLmNyZWF0ZVJvdXRlclN0YXRlID0gY3JlYXRlUm91dGVyU3RhdGU7XG5mdW5jdGlvbiBjcmVhdGVOb2RlKGN1cnIsIHByZXZTdGF0ZSkge1xuICAgIGlmIChwcmV2U3RhdGUgJiYgZXF1YWxSb3V0ZVNuYXBzaG90cyhwcmV2U3RhdGUudmFsdWUuc25hcHNob3QsIGN1cnIudmFsdWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHByZXZTdGF0ZS52YWx1ZTtcbiAgICAgICAgdmFsdWUuX2Z1dHVyZVNuYXBzaG90ID0gY3Vyci52YWx1ZTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gY3JlYXRlT3JSZXVzZUNoaWxkcmVuKGN1cnIsIHByZXZTdGF0ZSk7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZV8xLlRyZWVOb2RlKHZhbHVlLCBjaGlsZHJlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUgPSBjcmVhdGVBY3RpdmF0ZWRSb3V0ZShjdXJyLnZhbHVlKTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gY3Vyci5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGNyZWF0ZU5vZGUoYyk7IH0pO1xuICAgICAgICByZXR1cm4gbmV3IHRyZWVfMS5UcmVlTm9kZSh2YWx1ZSwgY2hpbGRyZW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU9yUmV1c2VDaGlsZHJlbihjdXJyLCBwcmV2U3RhdGUpIHtcbiAgICByZXR1cm4gY3Vyci5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHByZXZTdGF0ZS5jaGlsZHJlbi5maW5kSW5kZXgoZnVuY3Rpb24gKHApIHsgcmV0dXJuIGVxdWFsUm91dGVTbmFwc2hvdHMocC52YWx1ZS5zbmFwc2hvdCwgY2hpbGQudmFsdWUpOyB9KTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVOb2RlKGNoaWxkLCBwcmV2U3RhdGUuY2hpbGRyZW5baW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVOb2RlKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlQWN0aXZhdGVkUm91dGUoYykge1xuICAgIHJldHVybiBuZXcgcm91dGVyX3N0YXRlXzEuQWN0aXZhdGVkUm91dGUobmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdChjLnVybCksIG5ldyBCZWhhdmlvclN1YmplY3RfMS5CZWhhdmlvclN1YmplY3QoYy5wYXJhbXMpLCBjLm91dGxldCwgYy5jb21wb25lbnQsIGMpO1xufVxuZnVuY3Rpb24gZXF1YWxSb3V0ZVNuYXBzaG90cyhhLCBiKSB7XG4gICAgcmV0dXJuIGEuX3JvdXRlQ29uZmlnID09PSBiLl9yb3V0ZUNvbmZpZztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzSmxZWFJsWDNKdmRYUmxjbDl6ZEdGMFpTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqY21WaGRHVmZjbTkxZEdWeVgzTjBZWFJsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRU3huUTBGQk9FSXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEJRVVZ5UkN3MlFrRkJkVVlzWjBKQlFXZENMRU5CUVVNc1EwRkJRVHRCUVVONFJ5eHhRa0ZCZFVJc1kwRkJZeXhEUVVGRExFTkJRVUU3UVVGRmRFTXNNa0pCUVd0RExFbEJRWGxDTEVWQlFVVXNVMEZCYzBJN1NVRkRha1lzU1VGQlRTeEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRE4wVXNTVUZCVFN4WFFVRlhMRWRCUVVjc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4cFEwRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0SlFVTTVSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxHbERRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM0pHTEUxQlFVMHNRMEZCUXl4SlFVRkpMREJDUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEZkQlFWY3NSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE5VUXNRMEZCUXp0QlFVeGxMSGxDUVVGcFFpeHZRa0ZMYUVNc1EwRkJRVHRCUVVWRUxHOUNRVUZ2UWl4SlFVRnpReXhGUVVGRkxGTkJRVzlETzBsQlJUbEdMRVZCUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zU1VGQlNTeHRRa0ZCYlVJc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6TkZMRWxCUVUwc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZET1VJc1MwRkJTeXhEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUlc1RExFbEJRVTBzVVVGQlVTeEhRVUZITEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTjRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeGxRVUZSTEVOQlFXbENMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVVYyUkN4RFFVRkRPMGxCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRFRpeEpRVUZOTEV0QlFVc3NSMEZCUnl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRMME1zU1VGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRV0lzUTBGQllTeERRVUZETEVOQlFVTTdVVUZEZGtRc1RVRkJUU3hEUVVGRExFbEJRVWtzWlVGQlVTeERRVUZwUWl4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRGRrUXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3dyUWtGRFNTeEpRVUZ6UXl4RlFVRkZMRk5CUVcxRE8wbEJRemRGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZCTEV0QlFVczdVVUZETlVJc1NVRkJUU3hMUVVGTExFZEJRMUFzVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJRU3hEUVVGRExFbEJRVWtzVDBGQlFTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRV3hFTEVOQlFXdEVMRU5CUVVNc1EwRkJRenRSUVVNeFJpeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5tTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMFJDeERRVUZETzFGQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRUaXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUXpOQ0xFTkJRVU03U1VGRFNDeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRkZSQ3c0UWtGQk9FSXNRMEZCZVVJN1NVRkRja1FzVFVGQlRTeERRVUZETEVsQlFVa3NOa0pCUVdNc1EwRkRja0lzU1VGQlNTeHBRMEZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeEpRVUZKTEdsRFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXpSaXhEUVVGRE8wRkJSVVFzTmtKQlFUWkNMRU5CUVhsQ0xFVkJRVVVzUTBGQmVVSTdTVUZETDBVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEV0QlFVc3NRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJRenRCUVVNelF5eERRVUZESWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0Q1pXaGhkbWx2Y2xOMVltcGxZM1I5SUdaeWIyMGdKM0o0YW5NdlFtVm9ZWFpwYjNKVGRXSnFaV04wSnp0Y2JseHVhVzF3YjNKMElIdEJZM1JwZG1GMFpXUlNiM1YwWlN3Z1FXTjBhWFpoZEdWa1VtOTFkR1ZUYm1Gd2MyaHZkQ3dnVW05MWRHVnlVM1JoZEdVc0lGSnZkWFJsY2xOMFlYUmxVMjVoY0hOb2IzUjlJR1p5YjIwZ0p5NHZjbTkxZEdWeVgzTjBZWFJsSnp0Y2JtbHRjRzl5ZENCN1ZISmxaVTV2WkdWOUlHWnliMjBnSnk0dmRYUnBiSE12ZEhKbFpTYzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVlNiM1YwWlhKVGRHRjBaU2hqZFhKeU9pQlNiM1YwWlhKVGRHRjBaVk51WVhCemFHOTBMQ0J3Y21WMlUzUmhkR1U2SUZKdmRYUmxjbE4wWVhSbEtUb2dVbTkxZEdWeVUzUmhkR1VnZTF4dUlDQmpiMjV6ZENCeWIyOTBJRDBnWTNKbFlYUmxUbTlrWlNoamRYSnlMbDl5YjI5MExDQndjbVYyVTNSaGRHVWdQeUJ3Y21WMlUzUmhkR1V1WDNKdmIzUWdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQmpiMjV6ZENCeGRXVnllVkJoY21GdGN5QTlJSEJ5WlhaVGRHRjBaU0EvSUhCeVpYWlRkR0YwWlM1eGRXVnllVkJoY21GdGN5QTZJRzVsZHlCQ1pXaGhkbWx2Y2xOMVltcGxZM1FvWTNWeWNpNXhkV1Z5ZVZCaGNtRnRjeWs3WEc0Z0lHTnZibk4wSUdaeVlXZHRaVzUwSUQwZ2NISmxkbE4wWVhSbElEOGdjSEpsZGxOMFlYUmxMbVp5WVdkdFpXNTBJRG9nYm1WM0lFSmxhR0YyYVc5eVUzVmlhbVZqZENoamRYSnlMbVp5WVdkdFpXNTBLVHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlNiM1YwWlhKVGRHRjBaU2h5YjI5MExDQnhkV1Z5ZVZCaGNtRnRjeXdnWm5KaFoyMWxiblFzSUdOMWNuSXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWT2IyUmxLR04xY25JNklGUnlaV1ZPYjJSbFBFRmpkR2wyWVhSbFpGSnZkWFJsVTI1aGNITm9iM1ErTENCd2NtVjJVM1JoZEdVL09pQlVjbVZsVG05a1pUeEJZM1JwZG1GMFpXUlNiM1YwWlQ0cE9seHVJQ0FnSUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxQaUI3WEc0Z0lHbG1JQ2h3Y21WMlUzUmhkR1VnSmlZZ1pYRjFZV3hTYjNWMFpWTnVZWEJ6YUc5MGN5aHdjbVYyVTNSaGRHVXVkbUZzZFdVdWMyNWhjSE5vYjNRc0lHTjFjbkl1ZG1Gc2RXVXBLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCd2NtVjJVM1JoZEdVdWRtRnNkV1U3WEc0Z0lDQWdkbUZzZFdVdVgyWjFkSFZ5WlZOdVlYQnphRzkwSUQwZ1kzVnljaTUyWVd4MVpUdGNibHh1SUNBZ0lHTnZibk4wSUdOb2FXeGtjbVZ1SUQwZ1kzSmxZWFJsVDNKU1pYVnpaVU5vYVd4a2NtVnVLR04xY25Jc0lIQnlaWFpUZEdGMFpTazdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlVjbVZsVG05a1pUeEJZM1JwZG1GMFpXUlNiM1YwWlQ0b2RtRnNkV1VzSUdOb2FXeGtjbVZ1S1R0Y2JseHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHTnZibk4wSUhaaGJIVmxJRDBnWTNKbFlYUmxRV04wYVhaaGRHVmtVbTkxZEdVb1kzVnljaTUyWVd4MVpTazdYRzRnSUNBZ1kyOXVjM1FnWTJocGJHUnlaVzRnUFNCamRYSnlMbU5vYVd4a2NtVnVMbTFoY0NoaklEMCtJR055WldGMFpVNXZaR1VvWXlrcE8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZISmxaVTV2WkdVOFFXTjBhWFpoZEdWa1VtOTFkR1UrS0haaGJIVmxMQ0JqYUdsc1pISmxiaWs3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsVDNKU1pYVnpaVU5vYVd4a2NtVnVLRnh1SUNBZ0lHTjFjbkk2SUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStMQ0J3Y21WMlUzUmhkR1U2SUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxQaWtnZTF4dUlDQnlaWFIxY200Z1kzVnljaTVqYUdsc1pISmxiaTV0WVhBb1kyaHBiR1FnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR2x1WkdWNElEMWNiaUFnSUNBZ0lDQWdjSEpsZGxOMFlYUmxMbU5vYVd4a2NtVnVMbVpwYm1SSmJtUmxlQ2h3SUQwK0lHVnhkV0ZzVW05MWRHVlRibUZ3YzJodmRITW9jQzUyWVd4MVpTNXpibUZ3YzJodmRDd2dZMmhwYkdRdWRtRnNkV1VwS1R0Y2JpQWdJQ0JwWmlBb2FXNWtaWGdnUGowZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlU1dlpHVW9ZMmhwYkdRc0lIQnlaWFpUZEdGMFpTNWphR2xzWkhKbGJsdHBibVJsZUYwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFRtOWtaU2hqYUdsc1pDazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRV04wYVhaaGRHVmtVbTkxZEdVb1l6b2dRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZENrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVGamRHbDJZWFJsWkZKdmRYUmxLRnh1SUNBZ0lDQWdibVYzSUVKbGFHRjJhVzl5VTNWaWFtVmpkQ2hqTG5WeWJDa3NJRzVsZHlCQ1pXaGhkbWx2Y2xOMVltcGxZM1FvWXk1d1lYSmhiWE1wTENCakxtOTFkR3hsZEN3Z1l5NWpiMjF3YjI1bGJuUXNJR01wTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsY1hWaGJGSnZkWFJsVTI1aGNITm9iM1J6S0dFNklFRmpkR2wyWVhSbFpGSnZkWFJsVTI1aGNITm9iM1FzSUdJNklFRmpkR2wyWVhSbFpGSnZkWFJsVTI1aGNITm9iM1FwT2lCaWIyOXNaV0Z1SUh0Y2JpQWdjbVYwZFhKdUlHRXVYM0p2ZFhSbFEyOXVabWxuSUQwOVBTQmlMbDl5YjNWMFpVTnZibVpwWnp0Y2JuMGlYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL2NyZWF0ZV9yb3V0ZXJfc3RhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZSgnLi9TdWJqZWN0Jyk7XG52YXIgdGhyb3dFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL3Rocm93RXJyb3InKTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJyk7XG4vKipcbiAqIEBjbGFzcyBCZWhhdmlvclN1YmplY3Q8VD5cbiAqL1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3JlZCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcl8xLnRocm93RXJyb3IodGhpcy5lcnJvclZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yXzEudGhyb3dFcnJvcihuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB0aGlzLl92YWx1ZSA9IHZhbHVlKTtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmhhc0Vycm9yZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIHRoaXMuZXJyb3JWYWx1ZSA9IGVycik7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0XzEuU3ViamVjdCkpO1xuZXhwb3J0cy5CZWhhdmlvclN1YmplY3QgPSBCZWhhdmlvclN1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CZWhhdmlvclN1YmplY3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9CZWhhdmlvclN1YmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA0MDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKCdyeGpzL0JlaGF2aW9yU3ViamVjdCcpO1xudmFyIHNoYXJlZF8xID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcbnZhciB1cmxfdHJlZV8xID0gcmVxdWlyZSgnLi91cmxfdHJlZScpO1xudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJy4vdXRpbHMvY29sbGVjdGlvbicpO1xudmFyIHRyZWVfMSA9IHJlcXVpcmUoJy4vdXRpbHMvdHJlZScpO1xudmFyIFJvdXRlclN0YXRlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUm91dGVyU3RhdGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUm91dGVyU3RhdGUocm9vdCwgcXVlcnlQYXJhbXMsIGZyYWdtZW50LCBzbmFwc2hvdCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCByb290KTtcbiAgICAgICAgdGhpcy5xdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zO1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICAgIHRoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcbiAgICB9XG4gICAgUm91dGVyU3RhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5zbmFwc2hvdC50b1N0cmluZygpOyB9O1xuICAgIHJldHVybiBSb3V0ZXJTdGF0ZTtcbn0odHJlZV8xLlRyZWUpKTtcbmV4cG9ydHMuUm91dGVyU3RhdGUgPSBSb3V0ZXJTdGF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5U3RhdGUodXJsVHJlZSwgcm9vdENvbXBvbmVudCkge1xuICAgIHZhciBzbmFwc2hvdCA9IGNyZWF0ZUVtcHR5U3RhdGVTbmFwc2hvdCh1cmxUcmVlLCByb290Q29tcG9uZW50KTtcbiAgICB2YXIgZW1wdHlVcmwgPSBuZXcgQmVoYXZpb3JTdWJqZWN0XzEuQmVoYXZpb3JTdWJqZWN0KFtuZXcgdXJsX3RyZWVfMS5VcmxQYXRoV2l0aFBhcmFtcygnJywge30pXSk7XG4gICAgdmFyIGVtcHR5UGFyYW1zID0gbmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdCh7fSk7XG4gICAgdmFyIGVtcHR5UXVlcnlQYXJhbXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0XzEuQmVoYXZpb3JTdWJqZWN0KHt9KTtcbiAgICB2YXIgZnJhZ21lbnQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0XzEuQmVoYXZpb3JTdWJqZWN0KCcnKTtcbiAgICB2YXIgYWN0aXZhdGVkID0gbmV3IEFjdGl2YXRlZFJvdXRlKGVtcHR5VXJsLCBlbXB0eVBhcmFtcywgc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVQsIHJvb3RDb21wb25lbnQsIHNuYXBzaG90LnJvb3QpO1xuICAgIGFjdGl2YXRlZC5zbmFwc2hvdCA9IHNuYXBzaG90LnJvb3Q7XG4gICAgcmV0dXJuIG5ldyBSb3V0ZXJTdGF0ZShuZXcgdHJlZV8xLlRyZWVOb2RlKGFjdGl2YXRlZCwgW10pLCBlbXB0eVF1ZXJ5UGFyYW1zLCBmcmFnbWVudCwgc25hcHNob3QpO1xufVxuZXhwb3J0cy5jcmVhdGVFbXB0eVN0YXRlID0gY3JlYXRlRW1wdHlTdGF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5U3RhdGVTbmFwc2hvdCh1cmxUcmVlLCByb290Q29tcG9uZW50KSB7XG4gICAgdmFyIGVtcHR5UGFyYW1zID0ge307XG4gICAgdmFyIGVtcHR5UXVlcnlQYXJhbXMgPSB7fTtcbiAgICB2YXIgZnJhZ21lbnQgPSAnJztcbiAgICB2YXIgYWN0aXZhdGVkID0gbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QoW10sIGVtcHR5UGFyYW1zLCBzaGFyZWRfMS5QUklNQVJZX09VVExFVCwgcm9vdENvbXBvbmVudCwgbnVsbCwgdXJsVHJlZS5yb290LCAtMSk7XG4gICAgcmV0dXJuIG5ldyBSb3V0ZXJTdGF0ZVNuYXBzaG90KCcnLCBuZXcgdHJlZV8xLlRyZWVOb2RlKGFjdGl2YXRlZCwgW10pLCBlbXB0eVF1ZXJ5UGFyYW1zLCBmcmFnbWVudCk7XG59XG52YXIgQWN0aXZhdGVkUm91dGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFjdGl2YXRlZFJvdXRlKHVybCwgcGFyYW1zLCBvdXRsZXQsIGNvbXBvbmVudCwgZnV0dXJlU25hcHNob3QpIHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLm91dGxldCA9IG91dGxldDtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMuX2Z1dHVyZVNuYXBzaG90ID0gZnV0dXJlU25hcHNob3Q7XG4gICAgfVxuICAgIEFjdGl2YXRlZFJvdXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc25hcHNob3QgPyB0aGlzLnNuYXBzaG90LnRvU3RyaW5nKCkgOiBcIkZ1dHVyZShcIiArIHRoaXMuX2Z1dHVyZVNuYXBzaG90ICsgXCIpXCI7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aXZhdGVkUm91dGU7XG59KCkpO1xuZXhwb3J0cy5BY3RpdmF0ZWRSb3V0ZSA9IEFjdGl2YXRlZFJvdXRlO1xudmFyIEFjdGl2YXRlZFJvdXRlU25hcHNob3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFjdGl2YXRlZFJvdXRlU25hcHNob3QodXJsLCBwYXJhbXMsIG91dGxldCwgY29tcG9uZW50LCByb3V0ZUNvbmZpZywgdXJsU2VnbWVudCwgbGFzdFBhdGhJbmRleCkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICAgIHRoaXMub3V0bGV0ID0gb3V0bGV0O1xuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5fcm91dGVDb25maWcgPSByb3V0ZUNvbmZpZztcbiAgICAgICAgdGhpcy5fdXJsU2VnbWVudCA9IHVybFNlZ21lbnQ7XG4gICAgICAgIHRoaXMuX2xhc3RQYXRoSW5kZXggPSBsYXN0UGF0aEluZGV4O1xuICAgIH1cbiAgICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVybCA9IHRoaXMudXJsLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy50b1N0cmluZygpOyB9KS5qb2luKCcvJyk7XG4gICAgICAgIHZhciBtYXRjaGVkID0gdGhpcy5fcm91dGVDb25maWcgPyB0aGlzLl9yb3V0ZUNvbmZpZy5wYXRoIDogJyc7XG4gICAgICAgIHJldHVybiBcIlJvdXRlKHVybDonXCIgKyB1cmwgKyBcIicsIHBhdGg6J1wiICsgbWF0Y2hlZCArIFwiJylcIjtcbiAgICB9O1xuICAgIHJldHVybiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xufSgpKTtcbmV4cG9ydHMuQWN0aXZhdGVkUm91dGVTbmFwc2hvdCA9IEFjdGl2YXRlZFJvdXRlU25hcHNob3Q7XG52YXIgUm91dGVyU3RhdGVTbmFwc2hvdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJvdXRlclN0YXRlU25hcHNob3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUm91dGVyU3RhdGVTbmFwc2hvdCh1cmwsIHJvb3QsIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCByb290KTtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMucXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcztcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50O1xuICAgIH1cbiAgICBSb3V0ZXJTdGF0ZVNuYXBzaG90LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcmlhbGl6ZU5vZGUodGhpcy5fcm9vdCk7IH07XG4gICAgcmV0dXJuIFJvdXRlclN0YXRlU25hcHNob3Q7XG59KHRyZWVfMS5UcmVlKSk7XG5leHBvcnRzLlJvdXRlclN0YXRlU25hcHNob3QgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90O1xuZnVuY3Rpb24gc2VyaWFsaXplTm9kZShub2RlKSB7XG4gICAgdmFyIGMgPSBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgPyBcIiB7IFwiICsgbm9kZS5jaGlsZHJlbi5tYXAoc2VyaWFsaXplTm9kZSkuam9pbihcIiwgXCIpICsgXCIgfSBcIiA6ICcnO1xuICAgIHJldHVybiBcIlwiICsgbm9kZS52YWx1ZSArIGM7XG59XG5mdW5jdGlvbiBhZHZhbmNlQWN0aXZhdGVkUm91dGUocm91dGUpIHtcbiAgICBpZiAocm91dGUuc25hcHNob3QgJiYgIWNvbGxlY3Rpb25fMS5zaGFsbG93RXF1YWwocm91dGUuc25hcHNob3QucGFyYW1zLCByb3V0ZS5fZnV0dXJlU25hcHNob3QucGFyYW1zKSkge1xuICAgICAgICByb3V0ZS5zbmFwc2hvdCA9IHJvdXRlLl9mdXR1cmVTbmFwc2hvdDtcbiAgICAgICAgcm91dGUudXJsLm5leHQocm91dGUuc25hcHNob3QudXJsKTtcbiAgICAgICAgcm91dGUucGFyYW1zLm5leHQocm91dGUuc25hcHNob3QucGFyYW1zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJvdXRlLnNuYXBzaG90ID0gcm91dGUuX2Z1dHVyZVNuYXBzaG90O1xuICAgIH1cbn1cbmV4cG9ydHMuYWR2YW5jZUFjdGl2YXRlZFJvdXRlID0gYWR2YW5jZUFjdGl2YXRlZFJvdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY205MWRHVnlYM04wWVhSbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMM0p2ZFhSbGNsOXpkR0YwWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGRFFTeG5RMEZCT0VJc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0QlFVbHlSQ3gxUWtGQmNVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRhRVFzZVVKQlFYRkVMRmxCUVZrc1EwRkJReXhEUVVGQk8wRkJRMnhGTERKQ1FVRXlRaXh2UWtGQmIwSXNRMEZCUXl4RFFVRkJPMEZCUTJoRUxIRkNRVUUyUWl4alFVRmpMRU5CUVVNc1EwRkJRVHRCUVd0Q05VTTdTVUZCYVVNc0swSkJRVzlDTzBsQlNXNUVMSEZDUVVOSkxFbEJRVGhDTEVWQlFWTXNWMEZCSzBJc1JVRkRMMFFzVVVGQk5FSXNSVUZCVXl4UlFVRTJRanRSUVVNelJTeHJRa0ZCVFN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVZMlFpeG5Ra0ZCVnl4SFFVRllMRmRCUVZjc1EwRkJiMEk3VVVGREwwUXNZVUZCVVN4SFFVRlNMRkZCUVZFc1EwRkJiMEk3VVVGQlV5eGhRVUZSTEVkQlFWSXNVVUZCVVN4RFFVRnhRanRKUVVVM1JTeERRVUZETzBsQlJVUXNPRUpCUVZFc1IwRkJVaXhqUVVGeFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEZWtRc2EwSkJRVU03UVVGQlJDeERRVUZETEVGQldFUXNRMEZCYVVNc1YwRkJTU3hIUVZkd1F6dEJRVmhaTEcxQ1FVRlhMR05CVjNaQ0xFTkJRVUU3UVVGRlJDd3dRa0ZCYVVNc1QwRkJaMElzUlVGQlJTeGhRVUZ0UWp0SlFVTndSU3hKUVVGTkxGRkJRVkVzUjBGQlJ5eDNRa0ZCZDBJc1EwRkJReXhQUVVGUExFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdTVUZEYkVVc1NVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeHBRMEZCWlN4RFFVRkRMRU5CUVVNc1NVRkJTU3cwUWtGQmFVSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzUkZMRWxCUVUwc1YwRkJWeXhIUVVGSExFbEJRVWtzYVVOQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNMVF5eEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzYVVOQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOcVJDeEpRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMR2xEUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEZWtNc1NVRkJUU3hUUVVGVExFZEJRMWdzU1VGQlNTeGpRVUZqTEVOQlFVTXNVVUZCVVN4RlFVRkZMRmRCUVZjc1JVRkJSU3gxUWtGQll5eEZRVUZGTEdGQlFXRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE5VWXNVMEZCVXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEyNURMRTFCUVUwc1EwRkJReXhKUVVGSkxGZEJRVmNzUTBGRGJFSXNTVUZCU1N4bFFVRlJMRU5CUVdsQ0xGTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4blFrRkJaMElzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRla1lzUTBGQlF6dEJRVmhsTEhkQ1FVRm5RaXh0UWtGWEwwSXNRMEZCUVR0QlFVVkVMR3REUVVGclF5eFBRVUZuUWl4RlFVRkZMR0ZCUVcxQ08wbEJRM0pGTEVsQlFVMHNWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOMlFpeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFVkJRVVVzUTBGQlF6dEpRVU0xUWl4SlFVRk5MRkZCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRGNFSXNTVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3h6UWtGQmMwSXNRMEZEZUVNc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeDFRa0ZCWXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRelZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRzFDUVVGdFFpeERRVU14UWl4RlFVRkZMRVZCUVVVc1NVRkJTU3hsUVVGUkxFTkJRWGxDTEZOQlFWTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNelJpeERRVUZETzBGQmFVSkVPMGxCVVVVc2QwSkJRMWNzUjBGQmIwTXNSVUZCVXl4TlFVRXdRaXhGUVVOMlJTeE5RVUZqTEVWQlFWTXNVMEZCYzBJc1JVRkRjRVFzWTBGQmMwTTdVVUZHTDBJc1VVRkJSeXhIUVVGSUxFZEJRVWNzUTBGQmFVTTdVVUZCVXl4WFFVRk5MRWRCUVU0c1RVRkJUU3hEUVVGdlFqdFJRVU4yUlN4WFFVRk5MRWRCUVU0c1RVRkJUU3hEUVVGUk8xRkJRVk1zWTBGQlV5eEhRVUZVTEZOQlFWTXNRMEZCWVR0UlFVVjBSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEdOQlFXTXNRMEZCUXp0SlFVTjRReXhEUVVGRE8wbEJSVVFzYVVOQlFWRXNSMEZCVWp0UlFVTkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVGRkxFZEJRVWNzV1VGQlZTeEpRVUZKTEVOQlFVTXNaVUZCWlN4TlFVRkhMRU5CUVVNN1NVRkRkRVlzUTBGQlF6dEpRVU5JTEhGQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVd4Q1JDeEpRV3RDUXp0QlFXeENXU3h6UWtGQll5eHBRa0ZyUWpGQ0xFTkJRVUU3UVVGbFJEdEpRV2xDUlN4blEwRkRWeXhIUVVGM1FpeEZRVUZUTEUxQlFXTXNSVUZCVXl4TlFVRmpMRVZCUTNSRkxGTkJRWE5DTEVWQlFVVXNWMEZCYTBJc1JVRkJSU3hWUVVGelFpeEZRVU42UlN4aFFVRnhRanRSUVVaa0xGRkJRVWNzUjBGQlNDeEhRVUZITEVOQlFYRkNPMUZCUVZNc1YwRkJUU3hIUVVGT0xFMUJRVTBzUTBGQlVUdFJRVUZUTEZkQlFVMHNSMEZCVGl4TlFVRk5MRU5CUVZFN1VVRkRkRVVzWTBGQlV5eEhRVUZVTEZOQlFWTXNRMEZCWVR0UlFVVXZRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZkQlFWY3NRMEZCUXp0UlFVTm9ReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZWQlFWVXNRMEZCUXp0UlFVTTVRaXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEdGQlFXRXNRMEZCUXp0SlFVTjBReXhEUVVGRE8wbEJSVVFzZVVOQlFWRXNSMEZCVWp0UlFVTkZMRWxCUVUwc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRmFMRU5CUVZrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTjBSQ3hKUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTm9SU3hOUVVGTkxFTkJRVU1zWjBKQlFXTXNSMEZCUnl4cFFrRkJXU3hQUVVGUExFOUJRVWtzUTBGQlF6dEpRVU5zUkN4RFFVRkRPMGxCUTBnc05rSkJRVU03UVVGQlJDeERRVUZETEVGQkwwSkVMRWxCSzBKRE8wRkJMMEpaTERoQ1FVRnpRaXg1UWtFclFteERMRU5CUVVFN1FVRmxSRHRKUVVGNVF5eDFRMEZCTkVJN1NVRkpia1VzTmtKQlExY3NSMEZCVnl4RlFVRkZMRWxCUVhORExFVkJRVk1zVjBGQmJVSXNSVUZETDBVc1VVRkJaMEk3VVVGRGVrSXNhMEpCUVUwc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGR1NDeFJRVUZITEVkQlFVZ3NSMEZCUnl4RFFVRlJPMUZCUVdsRUxHZENRVUZYTEVkQlFWZ3NWMEZCVnl4RFFVRlJPMUZCUXk5RkxHRkJRVkVzUjBGQlVpeFJRVUZSTEVOQlFWRTdTVUZGTTBJc1EwRkJRenRKUVVWRUxITkRRVUZSTEVkQlFWSXNZMEZCY1VJc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRekZFTERCQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVZoRUxFTkJRWGxETEZkQlFVa3NSMEZYTlVNN1FVRllXU3d5UWtGQmJVSXNjMEpCVnk5Q0xFTkJRVUU3UVVGRlJDeDFRa0ZCZFVJc1NVRkJjME03U1VGRE0wUXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRkZCUVUwc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTJwSExFMUJRVTBzUTBGQlF5eExRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJSeXhEUVVGRE8wRkJRemRDTEVOQlFVTTdRVUZSUkN3clFrRkJjME1zUzBGQmNVSTdTVUZEZWtRc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNTVUZCU1N4RFFVRkRMSGxDUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRla1lzUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRE8xRkJRMnBETEV0QlFVc3NRMEZCUXl4SFFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRjRU1zUzBGQlN5eERRVUZETEUxQlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTnNSQ3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF5eGxRVUZsTEVOQlFVTTdTVUZEZWtNc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGU1pTdzJRa0ZCY1VJc2QwSkJVWEJETEVOQlFVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlME52YlhCdmJtVnVkRVpoWTNSdmNua3NJRlI1Y0dWOUlHWnliMjBnSjBCaGJtZDFiR0Z5TDJOdmNtVW5PMXh1YVcxd2IzSjBJSHRDWldoaGRtbHZjbE4xWW1wbFkzUjlJR1p5YjIwZ0ozSjRhbk12UW1Wb1lYWnBiM0pUZFdKcVpXTjBKenRjYm1sdGNHOXlkQ0I3VDJKelpYSjJZV0pzWlgwZ1puSnZiU0FuY25ocWN5OVBZbk5sY25aaFlteGxKenRjYmx4dWFXMXdiM0owSUh0U2IzVjBaWDBnWm5KdmJTQW5MaTlqYjI1bWFXY25PMXh1YVcxd2IzSjBJSHRRVWtsTlFWSlpYMDlWVkV4RlZDd2dVR0Z5WVcxemZTQm1jbTl0SUNjdUwzTm9ZWEpsWkNjN1hHNXBiWEJ2Y25RZ2UxVnliRkJoZEdoWGFYUm9VR0Z5WVcxekxDQlZjbXhUWldkdFpXNTBMQ0JWY214VWNtVmxmU0JtY205dElDY3VMM1Z5YkY5MGNtVmxKenRjYm1sdGNHOXlkQ0I3YzJoaGJHeHZkMFZ4ZFdGc2ZTQm1jbTl0SUNjdUwzVjBhV3h6TDJOdmJHeGxZM1JwYjI0bk8xeHVhVzF3YjNKMElIdFVjbVZsTENCVWNtVmxUbTlrWlgwZ1puSnZiU0FuTGk5MWRHbHNjeTkwY21WbEp6dGNibHh1WEc0dktpcGNiaUFxSUZSb1pTQnpkR0YwWlNCdlppQjBhR1VnY205MWRHVnlMbHh1SUNwY2JpQXFJQ01qSXlCVmMyRm5aVnh1SUNwY2JpQXFJR0JnWUZ4dUlDb2dZMnhoYzNNZ1RYbERiMjF3YjI1bGJuUWdlMXh1SUNvZ0lDQmpiMjV6ZEhKMVkzUnZjaWh5YjNWMFpYSTZJRkp2ZFhSbGNpa2dlMXh1SUNvZ0lDQWdJR052Ym5OMElITjBZWFJsSUQwZ2NtOTFkR1Z5TG5KdmRYUmxjbE4wWVhSbE8xeHVJQ29nSUNBZ0lHTnZibk4wSUdsa09pQlBZbk5sY25aaFlteGxQSE4wY21sdVp6NGdQU0J6ZEdGMFpTNW1hWEp6ZEVOb2FXeGtLSE4wWVhSbExuSnZiM1FwTG5CaGNtRnRjeTV0WVhBb2NDQTlQaUJ3TG1sa0tUdGNiaUFxSUNBZ0lDQmpiMjV6ZENCcGMwUmxZblZuT2lCUFluTmxjblpoWW14bFBITjBjbWx1Wno0Z1BTQnpkR0YwWlM1eGRXVnllVkJoY21GdGN5NXRZWEFvY1NBOVBpQnhMbVJsWW5WbktUdGNiaUFxSUNBZ2ZWeHVJQ29nZlZ4dUlDb2dZR0JnWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCU2IzVjBaWEpUZEdGMFpTQmxlSFJsYm1SeklGUnlaV1U4UVdOMGFYWmhkR1ZrVW05MWRHVStJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0J5YjI5ME9pQlVjbVZsVG05a1pUeEJZM1JwZG1GMFpXUlNiM1YwWlQ0c0lIQjFZbXhwWXlCeGRXVnllVkJoY21GdGN6b2dUMkp6WlhKMllXSnNaVHhRWVhKaGJYTStMRnh1SUNBZ0lDQWdjSFZpYkdsaklHWnlZV2R0Wlc1ME9pQlBZbk5sY25aaFlteGxQSE4wY21sdVp6NHNJSEIxWW14cFl5QnpibUZ3YzJodmREb2dVbTkxZEdWeVUzUmhkR1ZUYm1Gd2MyaHZkQ2tnZTF4dUlDQWdJSE4xY0dWeUtISnZiM1FwTzF4dUlDQjlYRzVjYmlBZ2RHOVRkSEpwYm1jb0tUb2djM1J5YVc1bklIc2djbVYwZFhKdUlIUm9hWE11YzI1aGNITm9iM1F1ZEc5VGRISnBibWNvS1RzZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTNKbFlYUmxSVzF3ZEhsVGRHRjBaU2gxY214VWNtVmxPaUJWY214VWNtVmxMQ0J5YjI5MFEyOXRjRzl1Wlc1ME9pQlVlWEJsS1RvZ1VtOTFkR1Z5VTNSaGRHVWdlMXh1SUNCamIyNXpkQ0J6Ym1Gd2MyaHZkQ0E5SUdOeVpXRjBaVVZ0Y0hSNVUzUmhkR1ZUYm1Gd2MyaHZkQ2gxY214VWNtVmxMQ0J5YjI5MFEyOXRjRzl1Wlc1MEtUdGNiaUFnWTI5dWMzUWdaVzF3ZEhsVmNtd2dQU0J1WlhjZ1FtVm9ZWFpwYjNKVGRXSnFaV04wS0Z0dVpYY2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTW9KeWNzSUh0OUtWMHBPMXh1SUNCamIyNXpkQ0JsYlhCMGVWQmhjbUZ0Y3lBOUlHNWxkeUJDWldoaGRtbHZjbE4xWW1wbFkzUW9lMzBwTzF4dUlDQmpiMjV6ZENCbGJYQjBlVkYxWlhKNVVHRnlZVzF6SUQwZ2JtVjNJRUpsYUdGMmFXOXlVM1ZpYW1WamRDaDdmU2s3WEc0Z0lHTnZibk4wSUdaeVlXZHRaVzUwSUQwZ2JtVjNJRUpsYUdGMmFXOXlVM1ZpYW1WamRDZ25KeWs3WEc0Z0lHTnZibk4wSUdGamRHbDJZWFJsWkNBOVhHNGdJQ0FnSUNCdVpYY2dRV04wYVhaaGRHVmtVbTkxZEdVb1pXMXdkSGxWY213c0lHVnRjSFI1VUdGeVlXMXpMQ0JRVWtsTlFWSlpYMDlWVkV4RlZDd2djbTl2ZEVOdmJYQnZibVZ1ZEN3Z2MyNWhjSE5vYjNRdWNtOXZkQ2s3WEc0Z0lHRmpkR2wyWVhSbFpDNXpibUZ3YzJodmRDQTlJSE51WVhCemFHOTBMbkp2YjNRN1hHNGdJSEpsZEhWeWJpQnVaWGNnVW05MWRHVnlVM1JoZEdVb1hHNGdJQ0FnSUNCdVpYY2dWSEpsWlU1dlpHVThRV04wYVhaaGRHVmtVbTkxZEdVK0tHRmpkR2wyWVhSbFpDd2dXMTBwTENCbGJYQjBlVkYxWlhKNVVHRnlZVzF6TENCbWNtRm5iV1Z1ZEN3Z2MyNWhjSE5vYjNRcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZGYlhCMGVWTjBZWFJsVTI1aGNITm9iM1FvZFhKc1ZISmxaVG9nVlhKc1ZISmxaU3dnY205dmRFTnZiWEJ2Ym1WdWREb2dWSGx3WlNrNklGSnZkWFJsY2xOMFlYUmxVMjVoY0hOb2IzUWdlMXh1SUNCamIyNXpkQ0JsYlhCMGVWQmhjbUZ0Y3lBOUlIdDlPMXh1SUNCamIyNXpkQ0JsYlhCMGVWRjFaWEo1VUdGeVlXMXpJRDBnZTMwN1hHNGdJR052Ym5OMElHWnlZV2R0Wlc1MElEMGdKeWM3WEc0Z0lHTnZibk4wSUdGamRHbDJZWFJsWkNBOUlHNWxkeUJCWTNScGRtRjBaV1JTYjNWMFpWTnVZWEJ6YUc5MEtGeHVJQ0FnSUNBZ1cxMHNJR1Z0Y0hSNVVHRnlZVzF6TENCUVVrbE5RVkpaWDA5VlZFeEZWQ3dnY205dmRFTnZiWEJ2Ym1WdWRDd2diblZzYkN3Z2RYSnNWSEpsWlM1eWIyOTBMQ0F0TVNrN1hHNGdJSEpsZEhWeWJpQnVaWGNnVW05MWRHVnlVM1JoZEdWVGJtRndjMmh2ZENoY2JpQWdJQ0FnSUNjbkxDQnVaWGNnVkhKbFpVNXZaR1U4UVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRENG9ZV04wYVhaaGRHVmtMQ0JiWFNrc0lHVnRjSFI1VVhWbGNubFFZWEpoYlhNc0lHWnlZV2R0Wlc1MEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNTBZV2x1Y3lCMGFHVWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdZU0JqYjIxd2IyNWxiblFnYkc5aFpHVmtJR2x1SUdGdUlHOTFkR3hsZEM0Z1ZHaGxJR2x1Wm05eWJXRjBhVzl1SUdseklIQnliM1pwWkdWa1hHNGdLaUIwYUhKdmRXZG9YRzRnS2lCMGFHVWdjR0Z5WVcxeklHRnVaQ0IxY214VFpXZHRaVzUwY3lCdlluTmxjblpoWW14bGN5NWNiaUFxWEc0Z0tpQWpJeU1nVlhOaFoyVmNiaUFxWEc0Z0tpQmdZR0JjYmlBcUlHTnNZWE56SUUxNVEyOXRjRzl1Wlc1MElIdGNiaUFxSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jbTkxZEdVNklFRmpkR2wyWVhSbFpGSnZkWFJsS1NCN1hHNGdLaUFnSUNBZ1kyOXVjM1FnYVdRNklFOWljMlZ5ZG1GaWJHVThjM1J5YVc1blBpQTlJSEp2ZFhSbExuQmhjbUZ0Y3k1dFlYQW9jQ0E5UGlCd0xtbGtLVHRjYmlBcUlDQWdmVnh1SUNvZ2ZWeHVJQ29nWUdCZ1hHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkJZM1JwZG1GMFpXUlNiM1YwWlNCN1hHNGdJQzhxS2lCQWFXNTBaWEp1WVd3Z0tpOWNiaUFnWDJaMWRIVnlaVk51WVhCemFHOTBPaUJCWTNScGRtRjBaV1JTYjNWMFpWTnVZWEJ6YUc5ME8xeHVJQ0J6Ym1Gd2MyaHZkRG9nUVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmREdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJSEIxWW14cFl5QjFjbXc2SUU5aWMyVnlkbUZpYkdVOFZYSnNVR0YwYUZkcGRHaFFZWEpoYlhOYlhUNHNJSEIxWW14cFl5QndZWEpoYlhNNklFOWljMlZ5ZG1GaWJHVThVR0Z5WVcxelBpeGNiaUFnSUNBZ0lIQjFZbXhwWXlCdmRYUnNaWFE2SUhOMGNtbHVaeXdnY0hWaWJHbGpJR052YlhCdmJtVnVkRG9nVkhsd1pYeHpkSEpwYm1jc1hHNGdJQ0FnSUNCbWRYUjFjbVZUYm1Gd2MyaHZkRG9nUVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRDa2dlMXh1SUNBZ0lIUm9hWE11WDJaMWRIVnlaVk51WVhCemFHOTBJRDBnWm5WMGRYSmxVMjVoY0hOb2IzUTdYRzRnSUgxY2JseHVJQ0IwYjFOMGNtbHVaeWdwT2lCemRISnBibWNnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OdVlYQnphRzkwSUQ4Z2RHaHBjeTV6Ym1Gd2MyaHZkQzUwYjFOMGNtbHVaeWdwSURvZ1lFWjFkSFZ5WlNna2UzUm9hWE11WDJaMWRIVnlaVk51WVhCemFHOTBmU2xnTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkR0ZwYm5NZ2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0VnWTI5dGNHOXVaVzUwSUd4dllXUmxaQ0JwYmlCaGJpQnZkWFJzWlhRZ1lYUWdZU0J3WVhKMGFXTjFiR0Z5SUcxdmJXVnVkQ0JwYmlCMGFXMWxMbHh1SUNwY2JpQXFJQ01qSXlCVmMyRm5aVnh1SUNwY2JpQXFJR0JnWUZ4dUlDb2dZMnhoYzNNZ1RYbERiMjF3YjI1bGJuUWdlMXh1SUNvZ0lDQmpiMjV6ZEhKMVkzUnZjaWh5YjNWMFpUb2dRV04wYVhaaGRHVmtVbTkxZEdVcElIdGNiaUFxSUNBZ0lDQmpiMjV6ZENCcFpEb2djM1J5YVc1bklEMGdjbTkxZEdVdWMyNWhjSE5vYjNRdWNHRnlZVzF6TG1sa08xeHVJQ29nSUNCOVhHNGdLaUI5WEc0Z0tpQmdZR0JjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUWdlMXh1SUNBdktpcGNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmZjbVZ6YjJ4MlpXUkRiMjF3YjI1bGJuUkdZV04wYjNKNU9pQkRiMjF3YjI1bGJuUkdZV04wYjNKNVBHRnVlVDQ3WEc1Y2JpQWdMeW9xSUVCcGJuUmxjbTVoYkNBcUtpOWNiaUFnWDNKdmRYUmxRMjl1Wm1sbk9pQlNiM1YwWlR0Y2JseHVJQ0F2S2lvZ1FHbHVkR1Z5Ym1Gc0lDb3FMMXh1SUNCZmRYSnNVMlZuYldWdWREb2dWWEpzVTJWbmJXVnVkRHRjYmx4dUlDQmZiR0Z6ZEZCaGRHaEpibVJsZURvZ2JuVnRZbVZ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ2NIVmliR2xqSUhWeWJEb2dWWEpzVUdGMGFGZHBkR2hRWVhKaGJYTmJYU3dnY0hWaWJHbGpJSEJoY21GdGN6b2dVR0Z5WVcxekxDQndkV0pzYVdNZ2IzVjBiR1YwT2lCemRISnBibWNzWEc0Z0lDQWdJQ0J3ZFdKc2FXTWdZMjl0Y0c5dVpXNTBPaUJVZVhCbGZITjBjbWx1Wnl3Z2NtOTFkR1ZEYjI1bWFXYzZJRkp2ZFhSbExDQjFjbXhUWldkdFpXNTBPaUJWY214VFpXZHRaVzUwTEZ4dUlDQWdJQ0FnYkdGemRGQmhkR2hKYm1SbGVEb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTVmY205MWRHVkRiMjVtYVdjZ1BTQnliM1YwWlVOdmJtWnBaenRjYmlBZ0lDQjBhR2x6TGw5MWNteFRaV2R0Wlc1MElEMGdkWEpzVTJWbmJXVnVkRHRjYmlBZ0lDQjBhR2x6TGw5c1lYTjBVR0YwYUVsdVpHVjRJRDBnYkdGemRGQmhkR2hKYm1SbGVEdGNiaUFnZlZ4dVhHNGdJSFJ2VTNSeWFXNW5LQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdZMjl1YzNRZ2RYSnNJRDBnZEdocGN5NTFjbXd1YldGd0tITWdQVDRnY3k1MGIxTjBjbWx1WnlncEtTNXFiMmx1S0Njdkp5azdYRzRnSUNBZ1kyOXVjM1FnYldGMFkyaGxaQ0E5SUhSb2FYTXVYM0p2ZFhSbFEyOXVabWxuSUQ4Z2RHaHBjeTVmY205MWRHVkRiMjVtYVdjdWNHRjBhQ0E2SUNjbk8xeHVJQ0FnSUhKbGRIVnliaUJnVW05MWRHVW9kWEpzT2lja2UzVnliSDBuTENCd1lYUm9PaWNrZTIxaGRHTm9aV1I5SnlsZ08xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dWR2hsSUhOMFlYUmxJRzltSUhSb1pTQnliM1YwWlhJZ1lYUWdZU0J3WVhKMGFXTjFiR0Z5SUcxdmJXVnVkQ0JwYmlCMGFXMWxMbHh1SUNwY2JpQXFJQ01qSXlCVmMyRm5aVnh1SUNwY2JpQXFJR0JnWUZ4dUlDb2dZMnhoYzNNZ1RYbERiMjF3YjI1bGJuUWdlMXh1SUNvZ0lDQmpiMjV6ZEhKMVkzUnZjaWh5YjNWMFpYSTZJRkp2ZFhSbGNpa2dlMXh1SUNvZ0lDQWdJR052Ym5OMElITnVZWEJ6YUc5MElEMGdjbTkxZEdWeUxuSnZkWFJsY2xOMFlYUmxMbk51WVhCemFHOTBPMXh1SUNvZ0lDQjlYRzRnS2lCOVhHNGdLaUJnWUdCY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGSnZkWFJsY2xOMFlYUmxVMjVoY0hOb2IzUWdaWGgwWlc1a2N5QlVjbVZsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0J3ZFdKc2FXTWdkWEpzT2lCemRISnBibWNzSUhKdmIzUTZJRlJ5WldWT2IyUmxQRUZqZEdsMllYUmxaRkp2ZFhSbFUyNWhjSE5vYjNRK0xDQndkV0pzYVdNZ2NYVmxjbmxRWVhKaGJYTTZJRkJoY21GdGN5eGNiaUFnSUNBZ0lIQjFZbXhwWXlCbWNtRm5iV1Z1ZERvZ2MzUnlhVzVuS1NCN1hHNGdJQ0FnYzNWd1pYSW9jbTl2ZENrN1hHNGdJSDFjYmx4dUlDQjBiMU4wY21sdVp5Z3BPaUJ6ZEhKcGJtY2dleUJ5WlhSMWNtNGdjMlZ5YVdGc2FYcGxUbTlrWlNoMGFHbHpMbDl5YjI5MEtUc2dmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWEpwWVd4cGVtVk9iMlJsS0c1dlpHVTZJRlJ5WldWT2IyUmxQRUZqZEdsMllYUmxaRkp2ZFhSbFUyNWhjSE5vYjNRK0tUb2djM1J5YVc1bklIdGNiaUFnWTI5dWMzUWdZeUE5SUc1dlpHVXVZMmhwYkdSeVpXNHViR1Z1WjNSb0lENGdNQ0EvSUdBZ2V5QWtlMjV2WkdVdVkyaHBiR1J5Wlc0dWJXRndLSE5sY21saGJHbDZaVTV2WkdVcExtcHZhVzRvWENJc0lGd2lLWDBnZlNCZ0lEb2dKeWM3WEc0Z0lISmxkSFZ5YmlCZ0pIdHViMlJsTG5aaGJIVmxmU1I3WTMxZ08xeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR1Y0Y0dWamRHRjBhVzl1SUdseklIUm9ZWFFnZEdobElHRmpkR2wyWVhSbElISnZkWFJsSUdseklHTnlaV0YwWldRZ2QybDBhQ0IwYUdVZ2NtbG5hSFFnYzJWMElHOW1JSEJoY21GdFpYUmxjbk11WEc0Z0tpQlRieUIzWlNCd2RYTm9JRzVsZHlCMllXeDFaWE1nYVc1MGJ5QjBhR1VnYjJKelpYSjJZV0pzWlhNZ2IyNXNlU0IzYUdWdUlIUm9aWGtnWVhKbElHNXZkQ0IwYUdVZ2FXNXBkR2xoYkNCMllXeDFaWE11WEc0Z0tpQkJibVFnZDJVZ1pHVjBaV04wSUhSb1lYUWdZbmtnWTJobFkydHBibWNnYVdZZ2RHaGxJSE51WVhCemFHOTBJR1pwWld4a0lHbHpJSE5sZEM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0ZrZG1GdVkyVkJZM1JwZG1GMFpXUlNiM1YwWlNoeWIzVjBaVG9nUVdOMGFYWmhkR1ZrVW05MWRHVXBPaUIyYjJsa0lIdGNiaUFnYVdZZ0tISnZkWFJsTG5OdVlYQnphRzkwSUNZbUlDRnphR0ZzYkc5M1JYRjFZV3dvY205MWRHVXVjMjVoY0hOb2IzUXVjR0Z5WVcxekxDQnliM1YwWlM1ZlpuVjBkWEpsVTI1aGNITm9iM1F1Y0dGeVlXMXpLU2tnZTF4dUlDQWdJSEp2ZFhSbExuTnVZWEJ6YUc5MElEMGdjbTkxZEdVdVgyWjFkSFZ5WlZOdVlYQnphRzkwTzF4dUlDQWdJQ2c4WVc1NVBuSnZkWFJsTG5WeWJDa3VibVY0ZENoeWIzVjBaUzV6Ym1Gd2MyaHZkQzUxY213cE8xeHVJQ0FnSUNnOFlXNTVQbkp2ZFhSbExuQmhjbUZ0Y3lrdWJtVjRkQ2h5YjNWMFpTNXpibUZ3YzJodmRDNXdZWEpoYlhNcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISnZkWFJsTG5OdVlYQnphRzkwSUQwZ2NtOTFkR1V1WDJaMWRIVnlaVk51WVhCemFHOTBPMXh1SUNCOVhHNTlJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3JvdXRlcl9zdGF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgVHJlZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJlZShyb290KSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSByb290O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJlZS5wcm90b3R5cGUsIFwicm9vdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcm9vdC52YWx1ZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVHJlZS5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLnBhdGhGcm9tUm9vdCh0KTtcbiAgICAgICAgcmV0dXJuIHAubGVuZ3RoID4gMSA/IHBbcC5sZW5ndGggLSAyXSA6IG51bGw7XG4gICAgfTtcbiAgICBUcmVlLnByb3RvdHlwZS5jaGlsZHJlbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBuID0gZmluZE5vZGUodCwgdGhpcy5fcm9vdCk7XG4gICAgICAgIHJldHVybiBuID8gbi5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQudmFsdWU7IH0pIDogW107XG4gICAgfTtcbiAgICBUcmVlLnByb3RvdHlwZS5maXJzdENoaWxkID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIG4gPSBmaW5kTm9kZSh0LCB0aGlzLl9yb290KTtcbiAgICAgICAgcmV0dXJuIG4gJiYgbi5jaGlsZHJlbi5sZW5ndGggPiAwID8gbi5jaGlsZHJlblswXS52YWx1ZSA6IG51bGw7XG4gICAgfTtcbiAgICBUcmVlLnByb3RvdHlwZS5zaWJsaW5ncyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBwID0gZmluZFBhdGgodCwgdGhpcy5fcm9vdCwgW10pO1xuICAgICAgICBpZiAocC5sZW5ndGggPCAyKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB2YXIgYyA9IHBbcC5sZW5ndGggLSAyXS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudmFsdWU7IH0pO1xuICAgICAgICByZXR1cm4gYy5maWx0ZXIoZnVuY3Rpb24gKGNjKSB7IHJldHVybiBjYyAhPT0gdDsgfSk7XG4gICAgfTtcbiAgICBUcmVlLnByb3RvdHlwZS5wYXRoRnJvbVJvb3QgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gZmluZFBhdGgodCwgdGhpcy5fcm9vdCwgW10pLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy52YWx1ZTsgfSk7IH07XG4gICAgVHJlZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAodHJlZSkgeyByZXR1cm4gY29udGFpbnModGhpcy5fcm9vdCwgdHJlZS5fcm9vdCk7IH07XG4gICAgcmV0dXJuIFRyZWU7XG59KCkpO1xuZXhwb3J0cy5UcmVlID0gVHJlZTtcbmZ1bmN0aW9uIGZpbmROb2RlKGV4cGVjdGVkLCBjKSB7XG4gICAgaWYgKGV4cGVjdGVkID09PSBjLnZhbHVlKVxuICAgICAgICByZXR1cm4gYztcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYy5jaGlsZHJlbjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGNjID0gX2FbX2ldO1xuICAgICAgICB2YXIgciA9IGZpbmROb2RlKGV4cGVjdGVkLCBjYyk7XG4gICAgICAgIGlmIChyKVxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZmluZFBhdGgoZXhwZWN0ZWQsIGMsIGNvbGxlY3RlZCkge1xuICAgIGNvbGxlY3RlZC5wdXNoKGMpO1xuICAgIGlmIChleHBlY3RlZCA9PT0gYy52YWx1ZSlcbiAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYy5jaGlsZHJlbjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGNjID0gX2FbX2ldO1xuICAgICAgICB2YXIgY2xvbmVkID0gY29sbGVjdGVkLnNsaWNlKDApO1xuICAgICAgICB2YXIgciA9IGZpbmRQYXRoKGV4cGVjdGVkLCBjYywgY2xvbmVkKTtcbiAgICAgICAgaWYgKHIpXG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuZnVuY3Rpb24gY29udGFpbnModHJlZSwgc3VidHJlZSkge1xuICAgIGlmICh0cmVlLnZhbHVlICE9PSBzdWJ0cmVlLnZhbHVlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbihzdWJ0cmVlTm9kZSkge1xuICAgICAgICB2YXIgcyA9IHRyZWUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gY2hpbGQudmFsdWUgPT09IHN1YnRyZWVOb2RlLnZhbHVlOyB9KTtcbiAgICAgICAgaWYgKHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGZhbHNlIH07XG4gICAgICAgIGlmICghY29udGFpbnMoc1swXSwgc3VidHJlZU5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGZhbHNlIH07XG4gICAgfTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc3VidHJlZS5jaGlsZHJlbjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHN1YnRyZWVOb2RlID0gX2FbX2ldO1xuICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEoc3VidHJlZU5vZGUpO1xuICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbnZhciBUcmVlTm9kZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJlZU5vZGUodmFsdWUsIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBUcmVlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlRyZWVOb2RlKFwiICsgdGhpcy52YWx1ZSArIFwiKVwiOyB9O1xuICAgIHJldHVybiBUcmVlTm9kZTtcbn0oKSk7XG5leHBvcnRzLlRyZWVOb2RlID0gVHJlZU5vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkSEpsWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTkxZEdsc2N5OTBjbVZsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRKUVVsRkxHTkJRVmtzU1VGQmFVSTdVVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dEpRVUZETEVOQlFVTTdTVUZGY2tRc2MwSkJRVWtzYzBKQlFVazdZVUZCVWl4alFVRm5RaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE96czdUMEZCUVR0SlFVVXhReXh4UWtGQlRTeEhRVUZPTEZWQlFVOHNRMEZCU1R0UlFVTlVMRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRMMElzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU12UXl4RFFVRkRPMGxCUlVRc2RVSkJRVkVzUjBGQlVpeFZRVUZUTEVOQlFVazdVVUZEV0N4SlFVRk5MRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOc1F5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFVRXNRMEZCUXl4SlFVRkpMRTlCUVVFc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlVDeERRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRMME1zUTBGQlF6dEpRVVZFTEhsQ1FVRlZMRWRCUVZZc1ZVRkJWeXhEUVVGSk8xRkJRMklzU1VGQlRTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEYkVNc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETzBsQlEycEZMRU5CUVVNN1NVRkZSQ3gxUWtGQlVTeEhRVUZTTEZWQlFWTXNRMEZCU1R0UlFVTllMRWxCUVUwc1EwRkJReXhIUVVGSExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU4wUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRk5VSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZCTEVOQlFVTXNTVUZCU1N4UFFVRkJMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVkFzUTBGQlR5eERRVUZETEVOQlFVTTdVVUZEY2tRc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCUVN4RlFVRkZMRWxCUVVrc1QwRkJRU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEZRVUZTTEVOQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTJ4RExFTkJRVU03U1VGRlJDd3lRa0ZCV1N4SFFVRmFMRlZCUVdFc1EwRkJTU3hKUVVGVExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCVUN4RFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRmFrWXNkVUpCUVZFc1IwRkJVaXhWUVVGVExFbEJRV0VzU1VGQllTeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNdlJTeFhRVUZETzBGQlFVUXNRMEZCUXl4QlFXeERSQ3hKUVd0RFF6dEJRV3hEV1N4WlFVRkpMRTlCYTBOb1FpeERRVUZCTzBGQlJVUXNhMEpCUVhGQ0xGRkJRVmNzUlVGQlJTeERRVUZqTzBsQlF6bERMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUzBGQlN5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU51UXl4SFFVRkhMRU5CUVVNc1EwRkJWeXhWUVVGVkxFVkJRVllzUzBGQlFTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRldMR05CUVZVc1JVRkJWaXhKUVVGVkxFTkJRVU03VVVGQmNrSXNTVUZCU1N4RlFVRkZMRk5CUVVFN1VVRkRWQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMnBETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEYWtJN1NVRkRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyUXNRMEZCUXp0QlFVVkVMR3RDUVVGeFFpeFJRVUZYTEVWQlFVVXNRMEZCWXl4RlFVRkZMRk5CUVhkQ08wbEJRM2hGTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGJFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8wbEJSVE5ETEVkQlFVY3NRMEZCUXl4RFFVRlhMRlZCUVZVc1JVRkJWaXhMUVVGQkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFWWXNZMEZCVlN4RlFVRldMRWxCUVZVc1EwRkJRenRSUVVGeVFpeEpRVUZKTEVWQlFVVXNVMEZCUVR0UlFVTlVMRWxCUVUwc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRiRU1zU1VGQlRTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZWtNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOcVFqdEpRVVZFTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRXaXhEUVVGRE8wRkJSVVFzYTBKQlFYRkNMRWxCUVdsQ0xFVkJRVVVzVDBGQmIwSTdTVUZETVVRc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVVXZRenRSUVVORkxFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVUVzUzBGQlN5eEpRVUZKTEU5QlFVRXNTMEZCU3l4RFFVRkRMRXRCUVVzc1MwRkJTeXhYUVVGWExFTkJRVU1zUzBGQlN5eEZRVUZxUXl4RFFVRnBReXhEUVVGRExFTkJRVU03VVVGRE0wVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTTdXVUZCUXl4blFrRkJUeXhMUVVGTExFZEJRVU03VVVGRGFrTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRVU1zWjBKQlFVOHNTMEZCU3l4SFFVRkRPenRKUVVocVJDeEhRVUZITEVOQlFVTXNRMEZCYjBJc1ZVRkJaMElzUlVGQmFFSXNTMEZCUVN4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGb1FpeGpRVUZuUWl4RlFVRm9RaXhKUVVGblFpeERRVUZETzFGQlFYQkRMRWxCUVVrc1YwRkJWeXhUUVVGQk96czdTMEZKYmtJN1NVRkZSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyUXNRMEZCUXp0QlFVVkVPMGxCUTBVc2EwSkJRVzFDTEV0QlFWRXNSVUZCVXl4UlFVRjFRanRSUVVGNFF5eFZRVUZMTEVkQlFVd3NTMEZCU3l4RFFVRkhPMUZCUVZNc1lVRkJVU3hIUVVGU0xGRkJRVkVzUTBGQlpUdEpRVUZITEVOQlFVTTdTVUZGTDBRc01rSkJRVkVzUjBGQlVpeGpRVUZ4UWl4TlFVRk5MRU5CUVVNc1kwRkJXU3hKUVVGSkxFTkJRVU1zUzBGQlN5eE5RVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpGRUxHVkJRVU03UVVGQlJDeERRVUZETEVGQlNrUXNTVUZKUXp0QlFVcFpMR2RDUVVGUkxGZEJTWEJDTEVOQlFVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdZMnhoYzNNZ1ZISmxaVHhVUGlCN1hHNGdJQzhxS2lCQWFXNTBaWEp1WVd3Z0tpOWNiaUFnWDNKdmIzUTZJRlJ5WldWT2IyUmxQRlErTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKdmIzUTZJRlJ5WldWT2IyUmxQRlErS1NCN0lIUm9hWE11WDNKdmIzUWdQU0J5YjI5ME95QjlYRzVjYmlBZ1oyVjBJSEp2YjNRb0tUb2dWQ0I3SUhKbGRIVnliaUIwYUdsekxsOXliMjkwTG5aaGJIVmxPeUI5WEc1Y2JpQWdjR0Z5Wlc1MEtIUTZJRlFwT2lCVUlIdGNiaUFnSUNCamIyNXpkQ0J3SUQwZ2RHaHBjeTV3WVhSb1JuSnZiVkp2YjNRb2RDazdYRzRnSUNBZ2NtVjBkWEp1SUhBdWJHVnVaM1JvSUQ0Z01TQS9JSEJiY0M1c1pXNW5kR2dnTFNBeVhTQTZJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQmphR2xzWkhKbGJpaDBPaUJVS1RvZ1ZGdGRJSHRjYmlBZ0lDQmpiMjV6ZENCdUlEMGdabWx1WkU1dlpHVW9kQ3dnZEdocGN5NWZjbTl2ZENrN1hHNGdJQ0FnY21WMGRYSnVJRzRnUHlCdUxtTm9hV3hrY21WdUxtMWhjQ2gwSUQwK0lIUXVkbUZzZFdVcElEb2dXMTA3WEc0Z0lIMWNibHh1SUNCbWFYSnpkRU5vYVd4a0tIUTZJRlFwT2lCVUlIdGNiaUFnSUNCamIyNXpkQ0J1SUQwZ1ptbHVaRTV2WkdVb2RDd2dkR2hwY3k1ZmNtOXZkQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHNGdKaVlnYmk1amFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBd0lEOGdiaTVqYUdsc1pISmxibHN3WFM1MllXeDFaU0E2SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0J6YVdKc2FXNW5jeWgwT2lCVUtUb2dWRnRkSUh0Y2JpQWdJQ0JqYjI1emRDQndJRDBnWm1sdVpGQmhkR2dvZEN3Z2RHaHBjeTVmY205dmRDd2dXMTBwTzF4dUlDQWdJR2xtSUNod0xteGxibWQwYUNBOElESXBJSEpsZEhWeWJpQmJYVHRjYmx4dUlDQWdJR052Ym5OMElHTWdQU0J3VzNBdWJHVnVaM1JvSUMwZ01sMHVZMmhwYkdSeVpXNHViV0Z3S0dNZ1BUNGdZeTUyWVd4MVpTazdYRzRnSUNBZ2NtVjBkWEp1SUdNdVptbHNkR1Z5S0dOaklEMCtJR05qSUNFOVBTQjBLVHRjYmlBZ2ZWeHVYRzRnSUhCaGRHaEdjbTl0VW05dmRDaDBPaUJVS1RvZ1ZGdGRJSHNnY21WMGRYSnVJR1pwYm1SUVlYUm9LSFFzSUhSb2FYTXVYM0p2YjNRc0lGdGRLUzV0WVhBb2N5QTlQaUJ6TG5aaGJIVmxLVHNnZlZ4dVhHNGdJR052Ym5SaGFXNXpLSFJ5WldVNklGUnlaV1U4VkQ0cE9pQmliMjlzWldGdUlIc2djbVYwZFhKdUlHTnZiblJoYVc1ektIUm9hWE11WDNKdmIzUXNJSFJ5WldVdVgzSnZiM1FwT3lCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdacGJtUk9iMlJsUEZRK0tHVjRjR1ZqZEdWa09pQlVMQ0JqT2lCVWNtVmxUbTlrWlR4VVBpazZJRlJ5WldWT2IyUmxQRlErSUh0Y2JpQWdhV1lnS0dWNGNHVmpkR1ZrSUQwOVBTQmpMblpoYkhWbEtTQnlaWFIxY200Z1l6dGNiaUFnWm05eUlDaHNaWFFnWTJNZ2IyWWdZeTVqYUdsc1pISmxiaWtnZTF4dUlDQWdJR052Ym5OMElISWdQU0JtYVc1a1RtOWtaU2hsZUhCbFkzUmxaQ3dnWTJNcE8xeHVJQ0FnSUdsbUlDaHlLU0J5WlhSMWNtNGdjanRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sdVpGQmhkR2c4VkQ0b1pYaHdaV04wWldRNklGUXNJR002SUZSeVpXVk9iMlJsUEZRK0xDQmpiMnhzWldOMFpXUTZJRlJ5WldWT2IyUmxQRlErVzEwcE9pQlVjbVZsVG05a1pUeFVQbHRkSUh0Y2JpQWdZMjlzYkdWamRHVmtMbkIxYzJnb1l5azdYRzRnSUdsbUlDaGxlSEJsWTNSbFpDQTlQVDBnWXk1MllXeDFaU2tnY21WMGRYSnVJR052Ykd4bFkzUmxaRHRjYmx4dUlDQm1iM0lnS0d4bGRDQmpZeUJ2WmlCakxtTm9hV3hrY21WdUtTQjdYRzRnSUNBZ1kyOXVjM1FnWTJ4dmJtVmtJRDBnWTI5c2JHVmpkR1ZrTG5Oc2FXTmxLREFwTzF4dUlDQWdJR052Ym5OMElISWdQU0JtYVc1a1VHRjBhQ2hsZUhCbFkzUmxaQ3dnWTJNc0lHTnNiMjVsWkNrN1hHNGdJQ0FnYVdZZ0tISXBJSEpsZEhWeWJpQnlPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRnRkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqYjI1MFlXbHVjenhVUGloMGNtVmxPaUJVY21WbFRtOWtaVHhVUGl3Z2MzVmlkSEpsWlRvZ1ZISmxaVTV2WkdVOFZENHBPaUJpYjI5c1pXRnVJSHRjYmlBZ2FXWWdLSFJ5WldVdWRtRnNkV1VnSVQwOUlITjFZblJ5WldVdWRtRnNkV1VwSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNCbWIzSWdLR3hsZENCemRXSjBjbVZsVG05a1pTQnZaaUJ6ZFdKMGNtVmxMbU5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2N5QTlJSFJ5WldVdVkyaHBiR1J5Wlc0dVptbHNkR1Z5S0dOb2FXeGtJRDArSUdOb2FXeGtMblpoYkhWbElEMDlQU0J6ZFdKMGNtVmxUbTlrWlM1MllXeDFaU2s3WEc0Z0lDQWdhV1lnS0hNdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tDRmpiMjUwWVdsdWN5aHpXekJkTENCemRXSjBjbVZsVG05a1pTa3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVkhKbFpVNXZaR1U4VkQ0Z2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lod2RXSnNhV01nZG1Gc2RXVTZJRlFzSUhCMVlteHBZeUJqYUdsc1pISmxiam9nVkhKbFpVNXZaR1U4VkQ1YlhTa2dlMzFjYmx4dUlDQjBiMU4wY21sdVp5Z3BPaUJ6ZEhKcGJtY2dleUJ5WlhSMWNtNGdZRlJ5WldWT2IyUmxLQ1I3ZEdocGN5NTJZV3gxWlgwcFlEc2dmVnh1ZlNKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvdXRpbHMvdHJlZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQwOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xudmFyIHVybF90cmVlXzEgPSByZXF1aXJlKCcuL3VybF90cmVlJyk7XG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnLi91dGlscy9jb2xsZWN0aW9uJyk7XG5mdW5jdGlvbiBjcmVhdGVVcmxUcmVlKHJvdXRlLCB1cmxUcmVlLCBjb21tYW5kcywgcXVlcnlQYXJhbXMsIGZyYWdtZW50KSB7XG4gICAgaWYgKGNvbW1hbmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJlZSh1cmxUcmVlLnJvb3QsIHVybFRyZWUucm9vdCwgdXJsVHJlZSwgcXVlcnlQYXJhbXMsIGZyYWdtZW50KTtcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWRDb21tYW5kcyA9IG5vcm1hbGl6ZUNvbW1hbmRzKGNvbW1hbmRzKTtcbiAgICBpZiAobmF2aWdhdGVUb1Jvb3Qobm9ybWFsaXplZENvbW1hbmRzKSkge1xuICAgICAgICByZXR1cm4gdHJlZSh1cmxUcmVlLnJvb3QsIG5ldyB1cmxfdHJlZV8xLlVybFNlZ21lbnQoW10sIHt9KSwgdXJsVHJlZSwgcXVlcnlQYXJhbXMsIGZyYWdtZW50KTtcbiAgICB9XG4gICAgdmFyIHN0YXJ0aW5nUG9zaXRpb24gPSBmaW5kU3RhcnRpbmdQb3NpdGlvbihub3JtYWxpemVkQ29tbWFuZHMsIHVybFRyZWUsIHJvdXRlKTtcbiAgICB2YXIgc2VnbWVudCA9IHN0YXJ0aW5nUG9zaXRpb24ucHJvY2Vzc0NoaWxkcmVuID9cbiAgICAgICAgdXBkYXRlU2VnbWVudENoaWxkcmVuKHN0YXJ0aW5nUG9zaXRpb24uc2VnbWVudCwgc3RhcnRpbmdQb3NpdGlvbi5pbmRleCwgbm9ybWFsaXplZENvbW1hbmRzLmNvbW1hbmRzKSA6XG4gICAgICAgIHVwZGF0ZVNlZ21lbnQoc3RhcnRpbmdQb3NpdGlvbi5zZWdtZW50LCBzdGFydGluZ1Bvc2l0aW9uLmluZGV4LCBub3JtYWxpemVkQ29tbWFuZHMuY29tbWFuZHMpO1xuICAgIHJldHVybiB0cmVlKHN0YXJ0aW5nUG9zaXRpb24uc2VnbWVudCwgc2VnbWVudCwgdXJsVHJlZSwgcXVlcnlQYXJhbXMsIGZyYWdtZW50KTtcbn1cbmV4cG9ydHMuY3JlYXRlVXJsVHJlZSA9IGNyZWF0ZVVybFRyZWU7XG5mdW5jdGlvbiB0cmVlKG9sZFNlZ21lbnQsIG5ld1NlZ21lbnQsIHVybFRyZWUsIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCkge1xuICAgIHZhciBxID0gcXVlcnlQYXJhbXMgPyBzdHJpbmdpZnkocXVlcnlQYXJhbXMpIDogdXJsVHJlZS5xdWVyeVBhcmFtcztcbiAgICB2YXIgZiA9IGZyYWdtZW50ID8gZnJhZ21lbnQgOiB1cmxUcmVlLmZyYWdtZW50O1xuICAgIGlmICh1cmxUcmVlLnJvb3QgPT09IG9sZFNlZ21lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB1cmxfdHJlZV8xLlVybFRyZWUobmV3U2VnbWVudCwgcSwgZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsVHJlZShyZXBsYWNlU2VnbWVudCh1cmxUcmVlLnJvb3QsIG9sZFNlZ21lbnQsIG5ld1NlZ21lbnQpLCBxLCBmKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXBsYWNlU2VnbWVudChjdXJyZW50LCBvbGRTZWdtZW50LCBuZXdTZWdtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0ge307XG4gICAgY29sbGVjdGlvbl8xLmZvckVhY2goY3VycmVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGMsIG91dGxldE5hbWUpIHtcbiAgICAgICAgaWYgKGMgPT09IG9sZFNlZ21lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW291dGxldE5hbWVdID0gbmV3U2VnbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW291dGxldE5hbWVdID0gcmVwbGFjZVNlZ21lbnQoYywgb2xkU2VnbWVudCwgbmV3U2VnbWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChjdXJyZW50LnBhdGhzV2l0aFBhcmFtcywgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbmF2aWdhdGVUb1Jvb3Qobm9ybWFsaXplZENoYW5nZSkge1xuICAgIHJldHVybiBub3JtYWxpemVkQ2hhbmdlLmlzQWJzb2x1dGUgJiYgbm9ybWFsaXplZENoYW5nZS5jb21tYW5kcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgbm9ybWFsaXplZENoYW5nZS5jb21tYW5kc1swXSA9PSAnLyc7XG59XG52YXIgTm9ybWFsaXplZE5hdmlnYXRpb25Db21tYW5kcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9ybWFsaXplZE5hdmlnYXRpb25Db21tYW5kcyhpc0Fic29sdXRlLCBudW1iZXJPZkRvdWJsZURvdHMsIGNvbW1hbmRzKSB7XG4gICAgICAgIHRoaXMuaXNBYnNvbHV0ZSA9IGlzQWJzb2x1dGU7XG4gICAgICAgIHRoaXMubnVtYmVyT2ZEb3VibGVEb3RzID0gbnVtYmVyT2ZEb3VibGVEb3RzO1xuICAgICAgICB0aGlzLmNvbW1hbmRzID0gY29tbWFuZHM7XG4gICAgfVxuICAgIHJldHVybiBOb3JtYWxpemVkTmF2aWdhdGlvbkNvbW1hbmRzO1xufSgpKTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbW1hbmRzKGNvbW1hbmRzKSB7XG4gICAgaWYgKCh0eXBlb2YgY29tbWFuZHNbMF0gPT09ICdzdHJpbmcnKSAmJiBjb21tYW5kcy5sZW5ndGggPT09IDEgJiYgY29tbWFuZHNbMF0gPT0gJy8nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZE5hdmlnYXRpb25Db21tYW5kcyh0cnVlLCAwLCBjb21tYW5kcyk7XG4gICAgfVxuICAgIHZhciBudW1iZXJPZkRvdWJsZURvdHMgPSAwO1xuICAgIHZhciBpc0Fic29sdXRlID0gZmFsc2U7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBjb21tYW5kc1tpXTtcbiAgICAgICAgaWYgKCEodHlwZW9mIGMgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydHMgPSBjLnNwbGl0KCcvJyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBjYyA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChqID09IDAgJiYgY2MgPT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPT0gMCAmJiBjYyA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2MgPT0gJy4uJykge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkRvdWJsZURvdHMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2MgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goY2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjYyAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChjYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTm9ybWFsaXplZE5hdmlnYXRpb25Db21tYW5kcyhpc0Fic29sdXRlLCBudW1iZXJPZkRvdWJsZURvdHMsIHJlcyk7XG59XG52YXIgUG9zaXRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvc2l0aW9uKHNlZ21lbnQsIHByb2Nlc3NDaGlsZHJlbiwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50ID0gc2VnbWVudDtcbiAgICAgICAgdGhpcy5wcm9jZXNzQ2hpbGRyZW4gPSBwcm9jZXNzQ2hpbGRyZW47XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIFBvc2l0aW9uO1xufSgpKTtcbmZ1bmN0aW9uIGZpbmRTdGFydGluZ1Bvc2l0aW9uKG5vcm1hbGl6ZWRDaGFuZ2UsIHVybFRyZWUsIHJvdXRlKSB7XG4gICAgaWYgKG5vcm1hbGl6ZWRDaGFuZ2UuaXNBYnNvbHV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHVybFRyZWUucm9vdCwgdHJ1ZSwgMCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJvdXRlLnNuYXBzaG90Ll9sYXN0UGF0aEluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHJvdXRlLnNuYXBzaG90Ll91cmxTZWdtZW50LCB0cnVlLCAwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocm91dGUuc25hcHNob3QuX2xhc3RQYXRoSW5kZXggKyAxIC0gbm9ybWFsaXplZENoYW5nZS5udW1iZXJPZkRvdWJsZURvdHMgPj0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHJvdXRlLnNuYXBzaG90Ll91cmxTZWdtZW50LCBmYWxzZSwgcm91dGUuc25hcHNob3QuX2xhc3RQYXRoSW5kZXggKyAxIC0gbm9ybWFsaXplZENoYW5nZS5udW1iZXJPZkRvdWJsZURvdHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBcXCcuLi9cXCcnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRQYXRoKGNvbW1hbmQpIHtcbiAgICBpZiAoISh0eXBlb2YgY29tbWFuZCA9PT0gJ3N0cmluZycpKVxuICAgICAgICByZXR1cm4gY29tbWFuZC50b1N0cmluZygpO1xuICAgIHZhciBwYXJ0cyA9IGNvbW1hbmQudG9TdHJpbmcoKS5zcGxpdCgnOicpO1xuICAgIHJldHVybiBwYXJ0cy5sZW5ndGggPiAxID8gcGFydHNbMV0gOiBjb21tYW5kO1xufVxuZnVuY3Rpb24gZ2V0T3V0bGV0KGNvbW1hbmRzKSB7XG4gICAgaWYgKCEodHlwZW9mIGNvbW1hbmRzWzBdID09PSAnc3RyaW5nJykpXG4gICAgICAgIHJldHVybiBzaGFyZWRfMS5QUklNQVJZX09VVExFVDtcbiAgICB2YXIgcGFydHMgPSBjb21tYW5kc1swXS50b1N0cmluZygpLnNwbGl0KCc6Jyk7XG4gICAgcmV0dXJuIHBhcnRzLmxlbmd0aCA+IDEgPyBwYXJ0c1swXSA6IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUO1xufVxuZnVuY3Rpb24gdXBkYXRlU2VnbWVudChzZWdtZW50LCBzdGFydEluZGV4LCBjb21tYW5kcykge1xuICAgIGlmICghc2VnbWVudCkge1xuICAgICAgICBzZWdtZW50ID0gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChbXSwge30pO1xuICAgIH1cbiAgICBpZiAoc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNlZ21lbnRDaGlsZHJlbihzZWdtZW50LCBzdGFydEluZGV4LCBjb21tYW5kcyk7XG4gICAgfVxuICAgIHZhciBtID0gcHJlZml4ZWRXaXRoKHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgICB2YXIgc2xpY2VkQ29tbWFuZHMgPSBjb21tYW5kcy5zbGljZShtLmxhc3RJbmRleCk7XG4gICAgaWYgKG0ubWF0Y2ggJiYgc2xpY2VkQ29tbWFuZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLCB7fSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG0ubWF0Y2ggJiYgT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVOZXdTZWdtZW50KHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobS5tYXRjaCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlU2VnbWVudENoaWxkcmVuKHNlZ21lbnQsIDAsIHNsaWNlZENvbW1hbmRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVOZXdTZWdtZW50KHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVTZWdtZW50Q2hpbGRyZW4oc2VnbWVudCwgc3RhcnRJbmRleCwgY29tbWFuZHMpIHtcbiAgICBpZiAoY29tbWFuZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgdXJsX3RyZWVfMS5VcmxTZWdtZW50KHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLCB7fSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgb3V0bGV0XzEgPSBnZXRPdXRsZXQoY29tbWFuZHMpO1xuICAgICAgICB2YXIgY2hpbGRyZW5fMSA9IHt9O1xuICAgICAgICBjaGlsZHJlbl8xW291dGxldF8xXSA9IHVwZGF0ZVNlZ21lbnQoc2VnbWVudC5jaGlsZHJlbltvdXRsZXRfMV0sIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKTtcbiAgICAgICAgY29sbGVjdGlvbl8xLmZvckVhY2goc2VnbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBjaGlsZE91dGxldCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkT3V0bGV0ICE9PSBvdXRsZXRfMSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuXzFbY2hpbGRPdXRsZXRdID0gY2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChzZWdtZW50LnBhdGhzV2l0aFBhcmFtcywgY2hpbGRyZW5fMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJlZml4ZWRXaXRoKHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKSB7XG4gICAgdmFyIGN1cnJlbnRDb21tYW5kSW5kZXggPSAwO1xuICAgIHZhciBjdXJyZW50UGF0aEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB2YXIgbm9NYXRjaCA9IHsgbWF0Y2g6IGZhbHNlLCBsYXN0SW5kZXg6IDAgfTtcbiAgICB3aGlsZSAoY3VycmVudFBhdGhJbmRleCA8IHNlZ21lbnQucGF0aHNXaXRoUGFyYW1zLmxlbmd0aCkge1xuICAgICAgICBpZiAoY3VycmVudENvbW1hbmRJbmRleCA+PSBjb21tYW5kcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbm9NYXRjaDtcbiAgICAgICAgdmFyIHBhdGggPSBzZWdtZW50LnBhdGhzV2l0aFBhcmFtc1tjdXJyZW50UGF0aEluZGV4XTtcbiAgICAgICAgdmFyIGN1cnIgPSBnZXRQYXRoKGNvbW1hbmRzW2N1cnJlbnRDb21tYW5kSW5kZXhdKTtcbiAgICAgICAgdmFyIG5leHQgPSBjdXJyZW50Q29tbWFuZEluZGV4IDwgY29tbWFuZHMubGVuZ3RoIC0gMSA/IGNvbW1hbmRzW2N1cnJlbnRDb21tYW5kSW5kZXggKyAxXSA6IG51bGw7XG4gICAgICAgIGlmIChjdXJyICYmIG5leHQgJiYgKHR5cGVvZiBuZXh0ID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgIGlmICghY29tcGFyZShjdXJyLCBuZXh0LCBwYXRoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9NYXRjaDtcbiAgICAgICAgICAgIGN1cnJlbnRDb21tYW5kSW5kZXggKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghY29tcGFyZShjdXJyLCB7fSwgcGF0aCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vTWF0Y2g7XG4gICAgICAgICAgICBjdXJyZW50Q29tbWFuZEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFBhdGhJbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4geyBtYXRjaDogdHJ1ZSwgbGFzdEluZGV4OiBjdXJyZW50Q29tbWFuZEluZGV4IH07XG59XG5mdW5jdGlvbiBjcmVhdGVOZXdTZWdtZW50KHNlZ21lbnQsIHN0YXJ0SW5kZXgsIGNvbW1hbmRzKSB7XG4gICAgdmFyIHBhdGhzID0gc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMuc2xpY2UoMCwgc3RhcnRJbmRleCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgY29tbWFuZHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpID09PSAwICYmICh0eXBlb2YgY29tbWFuZHNbMF0gPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgdmFyIHAgPSBzZWdtZW50LnBhdGhzV2l0aFBhcmFtc1tzdGFydEluZGV4XTtcbiAgICAgICAgICAgIHBhdGhzLnB1c2gobmV3IHVybF90cmVlXzEuVXJsUGF0aFdpdGhQYXJhbXMocC5wYXRoLCBjb21tYW5kc1swXSkpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnIgPSBnZXRQYXRoKGNvbW1hbmRzW2ldKTtcbiAgICAgICAgdmFyIG5leHQgPSAoaSA8IGNvbW1hbmRzLmxlbmd0aCAtIDEpID8gY29tbWFuZHNbaSArIDFdIDogbnVsbDtcbiAgICAgICAgaWYgKGN1cnIgJiYgbmV4dCAmJiAodHlwZW9mIG5leHQgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgcGF0aHMucHVzaChuZXcgdXJsX3RyZWVfMS5VcmxQYXRoV2l0aFBhcmFtcyhjdXJyLCBzdHJpbmdpZnkobmV4dCkpKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGhzLnB1c2gobmV3IHVybF90cmVlXzEuVXJsUGF0aFdpdGhQYXJhbXMoY3Vyciwge30pKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IHVybF90cmVlXzEuVXJsU2VnbWVudChwYXRocywge30pO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KHBhcmFtcykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBjb2xsZWN0aW9uXzEuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiByZXNba10gPSBcIlwiICsgdjsgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNvbXBhcmUocGF0aCwgcGFyYW1zLCBwYXRoV2l0aFBhcmFtcykge1xuICAgIHJldHVybiBwYXRoID09IHBhdGhXaXRoUGFyYW1zLnBhdGggJiYgY29sbGVjdGlvbl8xLnNoYWxsb3dFcXVhbChwYXJhbXMsIHBhdGhXaXRoUGFyYW1zLnBhcmFtZXRlcnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNKbFlYUmxYM1Z5YkY5MGNtVmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJOeVpXRjBaVjkxY214ZmRISmxaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlEwRXNkVUpCUVhGRExGVkJRVlVzUTBGQlF5eERRVUZCTzBGQlEyaEVMSGxDUVVGeFJDeFpRVUZaTEVOQlFVTXNRMEZCUVR0QlFVTnNSU3d5UWtGQmIwTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlFUdEJRVVY2UkN4MVFrRkRTU3hMUVVGeFFpeEZRVUZGTEU5QlFXZENMRVZCUVVVc1VVRkJaU3hGUVVGRkxGZEJRVzFDTEVWQlF6ZEZMRkZCUVdkQ08wbEJRMnhDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRekZGTEVOQlFVTTdTVUZGUkN4SlFVRk5MR3RDUVVGclFpeEhRVUZITEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzWkVMRVZCUVVVc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU4yUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4eFFrRkJWU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1YwRkJWeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzQkdMRU5CUVVNN1NVRkZSQ3hKUVVGTkxHZENRVUZuUWl4SFFVRkhMRzlDUVVGdlFpeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnNSaXhKUVVGTkxFOUJRVThzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhsUVVGbE8xRkJRelZETEhGQ1FVRnhRaXhEUVVOcVFpeG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhGUVVGRkxHdENRVUZyUWl4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOc1JpeGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU5xUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVOcVJpeERRVUZETzBGQmJFSmxMSEZDUVVGaExHZENRV3RDTlVJc1EwRkJRVHRCUVVWRUxHTkJRMGtzVlVGQmMwSXNSVUZCUlN4VlFVRnpRaXhGUVVGRkxFOUJRV2RDTEVWQlFVVXNWMEZCYlVJc1JVRkRja1lzVVVGQlowSTdTVUZEYkVJc1NVRkJUU3hEUVVGRExFZEJRVWNzVjBGQlZ5eEhRVUZITEZOQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETzBsQlEzSkZMRWxCUVUwc1EwRkJReXhIUVVGSExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVWcVJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hMUVVGTExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVNc1RVRkJUU3hEUVVGRExFbEJRVWtzYTBKQlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzWkRMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5PTEUxQlFVMHNRMEZCUXl4SlFVRkpMR3RDUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOcVJpeERRVUZETzBGQlEwZ3NRMEZCUXp0QlFVVkVMSGRDUVVOSkxFOUJRVzFDTEVWQlFVVXNWVUZCYzBJc1JVRkJSU3hWUVVGelFqdEpRVU55UlN4SlFVRk5MRkZCUVZFc1IwRkJaME1zUlVGQlJTeERRVUZETzBsQlEycEVMRzlDUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRkRMRU5CUVdFc1JVRkJSU3hWUVVGclFqdFJRVU14UkN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlRaXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRPMUZCUTNCRExFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTk9MRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RlFVRkZMRlZCUVZVc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU51UlN4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFNDeE5RVUZOTEVOQlFVTXNTVUZCU1N4eFFrRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRNMFFzUTBGQlF6dEJRVVZFTEhkQ1FVRjNRaXhuUWtGQk9FTTdTVUZEY0VVc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU03VVVGRGVFVXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJRenRCUVVNeFF5eERRVUZETzBGQlJVUTdTVUZEUlN4elEwRkRWeXhWUVVGdFFpeEZRVUZUTEd0Q1FVRXdRaXhGUVVGVExGRkJRV1U3VVVGQk9VVXNaVUZCVlN4SFFVRldMRlZCUVZVc1EwRkJVenRSUVVGVExIVkNRVUZyUWl4SFFVRnNRaXhyUWtGQmEwSXNRMEZCVVR0UlFVRlRMR0ZCUVZFc1IwRkJVaXhSUVVGUkxFTkJRVTg3U1VGQlJ5eERRVUZETzBsQlF5OUdMRzFEUVVGRE8wRkJRVVFzUTBGQlF5eEJRVWhFTEVsQlIwTTdRVUZGUkN3eVFrRkJNa0lzVVVGQlpUdEpRVU40UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRkZCUVZFc1EwRkJReXhKUVVGSkxGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4SlFVRkpMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKR0xFMUJRVTBzUTBGQlF5eEpRVUZKTERSQ1FVRTBRaXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkROMFFzUTBGQlF6dEpRVVZFTEVsQlFVa3NhMEpCUVd0Q0xFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6TkNMRWxCUVVrc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF6dEpRVU4yUWl4SlFVRk5MRWRCUVVjc1IwRkJWU3hGUVVGRkxFTkJRVU03U1VGRmRFSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTTdVVUZEZWtNc1NVRkJUU3hEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhSQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETjBJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTmFMRkZCUVZFc1EwRkJRenRSUVVOWUxFTkJRVU03VVVGRlJDeEpRVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlF6TkNMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRPMWxCUTNSRExFbEJRVWtzUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVkc1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEV0N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVVV4UWl4RFFVRkRPMmRDUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNNVFpeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmRDUVVOd1FpeERRVUZETzJkQ1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGRFSXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dG5Ra0ZEZGtJc1EwRkJRenRuUWtGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTNCQ0xFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRMllzUTBGQlF6dFpRVVZJTEVOQlFVTTdXVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRuUWtGRFRpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEWWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVTm1MRU5CUVVNN1dVRkRTQ3hEUVVGRE8xRkJRMGdzUTBGQlF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3cwUWtGQk5FSXNRMEZCUXl4VlFVRlZMRVZCUVVVc2EwSkJRV3RDTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRMMFVzUTBGQlF6dEJRVVZFTzBsQlEwVXNhMEpCUVcxQ0xFOUJRVzFDTEVWQlFWTXNaVUZCZDBJc1JVRkJVeXhMUVVGaE8xRkJRVEZGTEZsQlFVOHNSMEZCVUN4UFFVRlBMRU5CUVZrN1VVRkJVeXh2UWtGQlpTeEhRVUZtTEdWQlFXVXNRMEZCVXp0UlFVRlRMRlZCUVVzc1IwRkJUQ3hMUVVGTExFTkJRVkU3U1VGQlJ5eERRVUZETzBsQlEyNUhMR1ZCUVVNN1FVRkJSQ3hEUVVGRExFRkJSa1FzU1VGRlF6dEJRVVZFTERoQ1FVTkpMR2RDUVVFNFF5eEZRVUZGTEU5QlFXZENMRVZCUTJoRkxFdEJRWEZDTzBsQlEzWkNMRVZCUVVVc1EwRkJReXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFFTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRemRETEVOQlFVTTdTVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyaEVMRTFCUVUwc1EwRkJReXhKUVVGSkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETTBRc1EwRkJRenRKUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUjBGQlJ5eERRVUZETEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zYTBKQlFXdENMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40Uml4TlFVRk5MRU5CUVVNc1NVRkJTU3hSUVVGUkxFTkJRMllzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhGUVVOcVF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGRExFZEJRVWNzWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0SlFVTXZSU3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RFFVRkRMRU5CUVVNN1NVRkRMME1zUTBGQlF6dEJRVU5JTEVOQlFVTTdRVUZGUkN4cFFrRkJhVUlzVDBGQldUdEpRVU16UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUXpsRUxFbEJRVTBzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZETlVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZETDBNc1EwRkJRenRCUVVWRUxHMUNRVUZ0UWl4UlFVRmxPMGxCUTJoRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVRkRMRTFCUVUwc1EwRkJReXgxUWtGQll5eERRVUZETzBsQlF6bEVMRWxCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYUVRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eDFRa0ZCWXl4RFFVRkRPMEZCUTNSRUxFTkJRVU03UVVGRlJDeDFRa0ZCZFVJc1QwRkJiVUlzUlVGQlJTeFZRVUZyUWl4RlFVRkZMRkZCUVdVN1NVRkROMFVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMklzVDBGQlR5eEhRVUZITEVsQlFVa3NjVUpCUVZVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVORUxFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOeVJpeE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNNVJDeERRVUZETzBsQlEwUXNTVUZCVFN4RFFVRkRMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRkRVFzU1VGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdTVUZGYmtRc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NTVUZCU1N4alFVRmpMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETTBNc1RVRkJUU3hEUVVGRExFbEJRVWtzY1VKQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEzSkVMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSU3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTjZSQ3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyNUNMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzBsQlF6TkVMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5PTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM3BFTEVOQlFVTTdRVUZEU0N4RFFVRkRPMEZCUlVRc0swSkJRMGtzVDBGQmJVSXNSVUZCUlN4VlFVRnJRaXhGUVVGRkxGRkJRV1U3U1VGRE1VUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpGQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEhGQ1FVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnlSQ3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4SlFVRk5MRkZCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEYmtNc1NVRkJUU3hWUVVGUkxFZEJRV2RETEVWQlFVVXNRMEZCUXp0UlFVTnFSQ3hWUVVGUkxFTkJRVU1zVVVGQlRTeERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlRTeERRVUZETEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRMnBHTEc5Q1FVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeFZRVUZETEV0QlFXbENMRVZCUVVVc1YwRkJiVUk3V1VGREwwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhMUVVGTExGRkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpOQ0xGVkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkRhRU1zUTBGQlF6dFJRVU5JTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1RVRkJUU3hEUVVGRExFbEJRVWtzY1VKQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxGVkJRVkVzUTBGQlF5eERRVUZETzBsQlF6TkVMRU5CUVVNN1FVRkRTQ3hEUVVGRE8wRkJSVVFzYzBKQlFYTkNMRTlCUVcxQ0xFVkJRVVVzVlVGQmEwSXNSVUZCUlN4UlFVRmxPMGxCUXpWRkxFbEJRVWtzYlVKQlFXMUNMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRelZDTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzVlVGQlZTeERRVUZETzBsQlJXeERMRWxCUVUwc1QwRkJUeXhIUVVGSExFVkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhGUVVGRExFTkJRVU03U1VGRE4wTXNUMEZCVHl4blFrRkJaMElzUjBGQlJ5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJRM3BFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeEpRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzFGQlF6TkVMRWxCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU4yUkN4SlFVRk5MRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53UkN4SlFVRk5MRWxCUVVrc1IwRkRUaXh0UWtGQmJVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUlhwR0xFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzUzBGQlN5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRMME1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzFsQlF5OURMRzFDUVVGdFFpeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTXpRaXhEUVVGRE8xRkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEVGl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1dVRkROME1zYlVKQlFXMUNMRVZCUVVVc1EwRkJRenRSUVVONFFpeERRVUZETzFGQlEwUXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dEpRVU55UWl4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExFVkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc2JVSkJRVzFDTEVWQlFVTXNRMEZCUXp0QlFVTjJSQ3hEUVVGRE8wRkJSVVFzTUVKQlFUQkNMRTlCUVcxQ0xFVkJRVVVzVlVGQmEwSXNSVUZCUlN4UlFVRmxPMGxCUTJoR0xFbEJRVTBzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVTXpSQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEVml4UFFVRlBMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdVVUZGTTBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOcVJDeEpRVUZOTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFsQlF6bERMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTdzBRa0ZCYVVJc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrUXNRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkRTaXhSUVVGUkxFTkJRVU03VVVGRFdDeERRVUZETzFGQlJVUXNTVUZCVFN4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJ4RExFbEJRVTBzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYUVVc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hMUVVGTExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXZReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NORUpCUVdsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVrUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOVUxFTkJRVU03VVVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTk9MRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTdzBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTFReXhEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU5PTEVOQlFVTTdTVUZEU0N4RFFVRkRPMGxCUTBRc1RVRkJUU3hEUVVGRExFbEJRVWtzY1VKQlFWVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGJrTXNRMEZCUXp0QlFVVkVMRzFDUVVGdFFpeE5RVUUwUWp0SlFVTTNReXhKUVVGTkxFZEJRVWNzUjBGQk5FSXNSVUZCUlN4RFFVRkRPMGxCUTNoRExHOUNRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVVNc1EwRkJUU3hGUVVGRkxFTkJRVk1zU1VGQlN5eFBRVUZCTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGSExFTkJRVWNzUlVGQlppeERRVUZsTEVOQlFVTXNRMEZCUXp0SlFVTjRSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlEySXNRMEZCUXp0QlFVVkVMR2xDUVVOSkxFbEJRVmtzUlVGQlJTeE5RVUUwUWl4RlFVRkZMR05CUVdsRE8wbEJReTlGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWxCUVVrc1kwRkJZeXhEUVVGRExFbEJRVWtzU1VGQlNTeDVRa0ZCV1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hqUVVGakxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZUVZc1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3UVdOMGFYWmhkR1ZrVW05MWRHVjlJR1p5YjIwZ0p5NHZjbTkxZEdWeVgzTjBZWFJsSnp0Y2JtbHRjRzl5ZENCN1VGSkpUVUZTV1Y5UFZWUk1SVlFzSUZCaGNtRnRjMzBnWm5KdmJTQW5MaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJSHRWY214UVlYUm9WMmwwYUZCaGNtRnRjeXdnVlhKc1UyVm5iV1Z1ZEN3Z1ZYSnNWSEpsWlgwZ1puSnZiU0FuTGk5MWNteGZkSEpsWlNjN1hHNXBiWEJ2Y25RZ2UyWnZja1ZoWTJnc0lITm9ZV3hzYjNkRmNYVmhiSDBnWm5KdmJTQW5MaTkxZEdsc2N5OWpiMnhzWldOMGFXOXVKenRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVlZ5YkZSeVpXVW9YRzRnSUNBZ2NtOTFkR1U2SUVGamRHbDJZWFJsWkZKdmRYUmxMQ0IxY214VWNtVmxPaUJWY214VWNtVmxMQ0JqYjIxdFlXNWtjem9nWVc1NVcxMHNJSEYxWlhKNVVHRnlZVzF6T2lCUVlYSmhiWE1zWEc0Z0lDQWdabkpoWjIxbGJuUTZJSE4wY21sdVp5azZJRlZ5YkZSeVpXVWdlMXh1SUNCcFppQW9ZMjl0YldGdVpITXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJ5WldVb2RYSnNWSEpsWlM1eWIyOTBMQ0IxY214VWNtVmxMbkp2YjNRc0lIVnliRlJ5WldVc0lIRjFaWEo1VUdGeVlXMXpMQ0JtY21GbmJXVnVkQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0J1YjNKdFlXeHBlbVZrUTI5dGJXRnVaSE1nUFNCdWIzSnRZV3hwZW1WRGIyMXRZVzVrY3loamIyMXRZVzVrY3lrN1hHNGdJR2xtSUNodVlYWnBaMkYwWlZSdlVtOXZkQ2h1YjNKdFlXeHBlbVZrUTI5dGJXRnVaSE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJ5WldVb2RYSnNWSEpsWlM1eWIyOTBMQ0J1WlhjZ1ZYSnNVMlZuYldWdWRDaGJYU3dnZTMwcExDQjFjbXhVY21WbExDQnhkV1Z5ZVZCaGNtRnRjeXdnWm5KaFoyMWxiblFwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYzNSaGNuUnBibWRRYjNOcGRHbHZiaUE5SUdacGJtUlRkR0Z5ZEdsdVoxQnZjMmwwYVc5dUtHNXZjbTFoYkdsNlpXUkRiMjF0WVc1a2N5d2dkWEpzVkhKbFpTd2djbTkxZEdVcE8xeHVJQ0JqYjI1emRDQnpaV2R0Wlc1MElEMGdjM1JoY25ScGJtZFFiM05wZEdsdmJpNXdjbTlqWlhOelEyaHBiR1J5Wlc0Z1AxeHVJQ0FnSUNBZ2RYQmtZWFJsVTJWbmJXVnVkRU5vYVd4a2NtVnVLRnh1SUNBZ0lDQWdJQ0FnSUhOMFlYSjBhVzVuVUc5emFYUnBiMjR1YzJWbmJXVnVkQ3dnYzNSaGNuUnBibWRRYjNOcGRHbHZiaTVwYm1SbGVDd2dibTl5YldGc2FYcGxaRU52YlcxaGJtUnpMbU52YlcxaGJtUnpLU0E2WEc0Z0lDQWdJQ0IxY0dSaGRHVlRaV2R0Wlc1MEtITjBZWEowYVc1blVHOXphWFJwYjI0dWMyVm5iV1Z1ZEN3Z2MzUmhjblJwYm1kUWIzTnBkR2x2Ymk1cGJtUmxlQ3dnYm05eWJXRnNhWHBsWkVOdmJXMWhibVJ6TG1OdmJXMWhibVJ6S1R0Y2JpQWdjbVYwZFhKdUlIUnlaV1VvYzNSaGNuUnBibWRRYjNOcGRHbHZiaTV6WldkdFpXNTBMQ0J6WldkdFpXNTBMQ0IxY214VWNtVmxMQ0J4ZFdWeWVWQmhjbUZ0Y3l3Z1puSmhaMjFsYm5RcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCMGNtVmxLRnh1SUNBZ0lHOXNaRk5sWjIxbGJuUTZJRlZ5YkZObFoyMWxiblFzSUc1bGQxTmxaMjFsYm5RNklGVnliRk5sWjIxbGJuUXNJSFZ5YkZSeVpXVTZJRlZ5YkZSeVpXVXNJSEYxWlhKNVVHRnlZVzF6T2lCUVlYSmhiWE1zWEc0Z0lDQWdabkpoWjIxbGJuUTZJSE4wY21sdVp5azZJRlZ5YkZSeVpXVWdlMXh1SUNCamIyNXpkQ0J4SUQwZ2NYVmxjbmxRWVhKaGJYTWdQeUJ6ZEhKcGJtZHBabmtvY1hWbGNubFFZWEpoYlhNcElEb2dkWEpzVkhKbFpTNXhkV1Z5ZVZCaGNtRnRjenRjYmlBZ1kyOXVjM1FnWmlBOUlHWnlZV2R0Wlc1MElEOGdabkpoWjIxbGJuUWdPaUIxY214VWNtVmxMbVp5WVdkdFpXNTBPMXh1WEc0Z0lHbG1JQ2gxY214VWNtVmxMbkp2YjNRZ1BUMDlJRzlzWkZObFoyMWxiblFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZWeWJGUnlaV1VvYm1WM1UyVm5iV1Z1ZEN3Z2NTd2daaWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVmNteFVjbVZsS0hKbGNHeGhZMlZUWldkdFpXNTBLSFZ5YkZSeVpXVXVjbTl2ZEN3Z2IyeGtVMlZuYldWdWRDd2dibVYzVTJWbmJXVnVkQ2tzSUhFc0lHWXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGNHeGhZMlZUWldkdFpXNTBLRnh1SUNBZ0lHTjFjbkpsYm5RNklGVnliRk5sWjIxbGJuUXNJRzlzWkZObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5Rc0lHNWxkMU5sWjIxbGJuUTZJRlZ5YkZObFoyMWxiblFwT2lCVmNteFRaV2R0Wlc1MElIdGNiaUFnWTI5dWMzUWdZMmhwYkdSeVpXNDZJSHRiYTJWNU9pQnpkSEpwYm1kZE9pQlZjbXhUWldkdFpXNTBmU0E5SUh0OU8xeHVJQ0JtYjNKRllXTm9LR04xY25KbGJuUXVZMmhwYkdSeVpXNHNJQ2hqT2lCVmNteFRaV2R0Wlc1MExDQnZkWFJzWlhST1lXMWxPaUJ6ZEhKcGJtY3BJRDArSUh0Y2JpQWdJQ0JwWmlBb1l5QTlQVDBnYjJ4a1UyVm5iV1Z1ZENrZ2UxeHVJQ0FnSUNBZ1kyaHBiR1J5Wlc1YmIzVjBiR1YwVG1GdFpWMGdQU0J1WlhkVFpXZHRaVzUwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmphR2xzWkhKbGJsdHZkWFJzWlhST1lXMWxYU0E5SUhKbGNHeGhZMlZUWldkdFpXNTBLR01zSUc5c1pGTmxaMjFsYm5Rc0lHNWxkMU5sWjIxbGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQnVaWGNnVlhKc1UyVm5iV1Z1ZENoamRYSnlaVzUwTG5CaGRHaHpWMmwwYUZCaGNtRnRjeXdnWTJocGJHUnlaVzRwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ1WVhacFoyRjBaVlJ2VW05dmRDaHViM0p0WVd4cGVtVmtRMmhoYm1kbE9pQk9iM0p0WVd4cGVtVmtUbUYyYVdkaGRHbHZia052YlcxaGJtUnpLVG9nWW05dmJHVmhiaUI3WEc0Z0lISmxkSFZ5YmlCdWIzSnRZV3hwZW1Wa1EyaGhibWRsTG1selFXSnpiMngxZEdVZ0ppWWdibTl5YldGc2FYcGxaRU5vWVc1blpTNWpiMjF0WVc1a2N5NXNaVzVuZEdnZ1BUMDlJREVnSmlaY2JpQWdJQ0FnSUc1dmNtMWhiR2w2WldSRGFHRnVaMlV1WTI5dGJXRnVaSE5iTUYwZ1BUMGdKeThuTzF4dWZWeHVYRzVqYkdGemN5Qk9iM0p0WVd4cGVtVmtUbUYyYVdkaGRHbHZia052YlcxaGJtUnpJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQndkV0pzYVdNZ2FYTkJZbk52YkhWMFpUb2dZbTl2YkdWaGJpd2djSFZpYkdsaklHNTFiV0psY2s5bVJHOTFZbXhsUkc5MGN6b2diblZ0WW1WeUxDQndkV0pzYVdNZ1kyOXRiV0Z1WkhNNklHRnVlVnRkS1NCN2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WRGIyMXRZVzVrY3loamIyMXRZVzVrY3pvZ1lXNTVXMTBwT2lCT2IzSnRZV3hwZW1Wa1RtRjJhV2RoZEdsdmJrTnZiVzFoYm1SeklIdGNiaUFnYVdZZ0tDaDBlWEJsYjJZZ1kyOXRiV0Z1WkhOYk1GMGdQVDA5SUNkemRISnBibWNuS1NBbUppQmpiMjF0WVc1a2N5NXNaVzVuZEdnZ1BUMDlJREVnSmlZZ1kyOXRiV0Z1WkhOYk1GMGdQVDBnSnk4bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5Qk9iM0p0WVd4cGVtVmtUbUYyYVdkaGRHbHZia052YlcxaGJtUnpLSFJ5ZFdVc0lEQXNJR052YlcxaGJtUnpLVHRjYmlBZ2ZWeHVYRzRnSUd4bGRDQnVkVzFpWlhKUFprUnZkV0pzWlVSdmRITWdQU0F3TzF4dUlDQnNaWFFnYVhOQlluTnZiSFYwWlNBOUlHWmhiSE5sTzF4dUlDQmpiMjV6ZENCeVpYTTZJR0Z1ZVZ0ZElEMGdXMTA3WEc1Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JqYjIxdFlXNWtjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUdOdmJuTjBJR01nUFNCamIyMXRZVzVrYzF0cFhUdGNibHh1SUNBZ0lHbG1JQ2doS0hSNWNHVnZaaUJqSUQwOVBTQW5jM1J5YVc1bkp5a3BJSHRjYmlBZ0lDQWdJSEpsY3k1d2RYTm9LR01wTzF4dUlDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2NHRnlkSE1nUFNCakxuTndiR2wwS0Njdkp5azdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQndZWEowY3k1c1pXNW5kR2c3SUNzcmFpa2dlMXh1SUNBZ0lDQWdiR1YwSUdOaklEMGdjR0Z5ZEhOYmFsMDdYRzVjYmlBZ0lDQWdJQzh2SUdacGNuTjBJR1Y0Y0NCcGN5QjBjbVZoZEdWa0lHbHVJR0VnYzNCbFkybGhiQ0IzWVhsY2JpQWdJQ0FnSUdsbUlDaHBJRDA5SURBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dvZ1BUMGdNQ0FtSmlCall5QTlQU0FuTGljcElIc2dJQzh2SUNBbkxpOWhKMXh1SUNBZ0lDQWdJQ0FnSUM4dklITnJhWEFnYVhSY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHFJRDA5SURBZ0ppWWdZMk1nUFQwZ0p5Y3BJSHNnSUM4dklDQW5MMkVuWEc0Z0lDQWdJQ0FnSUNBZ2FYTkJZbk52YkhWMFpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMk1nUFQwZ0p5NHVKeWtnZXlBZ0x5OGdJQ2N1TGk5aEoxeHVJQ0FnSUNBZ0lDQWdJRzUxYldKbGNrOW1SRzkxWW14bFJHOTBjeXNyTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTmpJQ0U5SUNjbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WekxuQjFjMmdvWTJNcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoall5QWhQU0FuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsY3k1d2RYTm9LR05qS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdVpYY2dUbTl5YldGc2FYcGxaRTVoZG1sbllYUnBiMjVEYjIxdFlXNWtjeWhwYzBGaWMyOXNkWFJsTENCdWRXMWlaWEpQWmtSdmRXSnNaVVJ2ZEhNc0lISmxjeWs3WEc1OVhHNWNibU5zWVhOeklGQnZjMmwwYVc5dUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2NIVmliR2xqSUhObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5Rc0lIQjFZbXhwWXlCd2NtOWpaWE56UTJocGJHUnlaVzQ2SUdKdmIyeGxZVzRzSUhCMVlteHBZeUJwYm1SbGVEb2diblZ0WW1WeUtTQjdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1hVzVrVTNSaGNuUnBibWRRYjNOcGRHbHZiaWhjYmlBZ0lDQnViM0p0WVd4cGVtVmtRMmhoYm1kbE9pQk9iM0p0WVd4cGVtVmtUbUYyYVdkaGRHbHZia052YlcxaGJtUnpMQ0IxY214VWNtVmxPaUJWY214VWNtVmxMRnh1SUNBZ0lISnZkWFJsT2lCQlkzUnBkbUYwWldSU2IzVjBaU2s2SUZCdmMybDBhVzl1SUh0Y2JpQWdhV1lnS0c1dmNtMWhiR2w2WldSRGFHRnVaMlV1YVhOQlluTnZiSFYwWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VHOXphWFJwYjI0b2RYSnNWSEpsWlM1eWIyOTBMQ0IwY25WbExDQXdLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHliM1YwWlM1emJtRndjMmh2ZEM1ZmJHRnpkRkJoZEdoSmJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ2YzJsMGFXOXVLSEp2ZFhSbExuTnVZWEJ6YUc5MExsOTFjbXhUWldkdFpXNTBMQ0IwY25WbExDQXdLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHliM1YwWlM1emJtRndjMmh2ZEM1ZmJHRnpkRkJoZEdoSmJtUmxlQ0FySURFZ0xTQnViM0p0WVd4cGVtVmtRMmhoYm1kbExtNTFiV0psY2s5bVJHOTFZbXhsUkc5MGN5QStQU0F3S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWIzTnBkR2x2YmloY2JpQWdJQ0FnSUNBZ2NtOTFkR1V1YzI1aGNITm9iM1F1WDNWeWJGTmxaMjFsYm5Rc0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCeWIzVjBaUzV6Ym1Gd2MyaHZkQzVmYkdGemRGQmhkR2hKYm1SbGVDQXJJREVnTFNCdWIzSnRZV3hwZW1Wa1EyaGhibWRsTG01MWJXSmxjazltUkc5MVlteGxSRzkwY3lrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkSmJuWmhiR2xrSUc1MWJXSmxjaUJ2WmlCY1hDY3VMaTljWENjbktUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSUVlYUm9LR052YlcxaGJtUTZJR0Z1ZVNrNklHRnVlU0I3WEc0Z0lHbG1JQ2doS0hSNWNHVnZaaUJqYjIxdFlXNWtJRDA5UFNBbmMzUnlhVzVuSnlrcElISmxkSFZ5YmlCamIyMXRZVzVrTG5SdlUzUnlhVzVuS0NrN1hHNGdJR052Ym5OMElIQmhjblJ6SUQwZ1kyOXRiV0Z1WkM1MGIxTjBjbWx1WnlncExuTndiR2wwS0NjNkp5azdYRzRnSUhKbGRIVnliaUJ3WVhKMGN5NXNaVzVuZEdnZ1BpQXhJRDhnY0dGeWRITmJNVjBnT2lCamIyMXRZVzVrTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSUGRYUnNaWFFvWTI5dGJXRnVaSE02SUdGdWVWdGRLVG9nYzNSeWFXNW5JSHRjYmlBZ2FXWWdLQ0VvZEhsd1pXOW1JR052YlcxaGJtUnpXekJkSUQwOVBTQW5jM1J5YVc1bkp5a3BJSEpsZEhWeWJpQlFVa2xOUVZKWlgwOVZWRXhGVkR0Y2JpQWdZMjl1YzNRZ2NHRnlkSE1nUFNCamIyMXRZVzVrYzFzd1hTNTBiMU4wY21sdVp5Z3BMbk53YkdsMEtDYzZKeWs3WEc0Z0lISmxkSFZ5YmlCd1lYSjBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z2NHRnlkSE5iTUYwZ09pQlFVa2xOUVZKWlgwOVZWRXhGVkR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhCa1lYUmxVMlZuYldWdWRDaHpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J6ZEdGeWRFbHVaR1Y0T2lCdWRXMWlaWElzSUdOdmJXMWhibVJ6T2lCaGJubGJYU2s2SUZWeWJGTmxaMjFsYm5RZ2UxeHVJQ0JwWmlBb0lYTmxaMjFsYm5RcElIdGNiaUFnSUNCelpXZHRaVzUwSUQwZ2JtVjNJRlZ5YkZObFoyMWxiblFvVzEwc0lIdDlLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2MyVm5iV1Z1ZEM1d1lYUm9jMWRwZEdoUVlYSmhiWE11YkdWdVozUm9JRDA5UFNBd0lDWW1JRTlpYW1WamRDNXJaWGx6S0hObFoyMWxiblF1WTJocGJHUnlaVzRwTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNCeVpYUjFjbTRnZFhCa1lYUmxVMlZuYldWdWRFTm9hV3hrY21WdUtITmxaMjFsYm5Rc0lITjBZWEowU1c1a1pYZ3NJR052YlcxaGJtUnpLVHRjYmlBZ2ZWeHVJQ0JqYjI1emRDQnRJRDBnY0hKbFptbDRaV1JYYVhSb0tITmxaMjFsYm5Rc0lITjBZWEowU1c1a1pYZ3NJR052YlcxaGJtUnpLVHRjYmlBZ1kyOXVjM1FnYzJ4cFkyVmtRMjl0YldGdVpITWdQU0JqYjIxdFlXNWtjeTV6YkdsalpTaHRMbXhoYzNSSmJtUmxlQ2s3WEc1Y2JpQWdhV1lnS0cwdWJXRjBZMmdnSmlZZ2MyeHBZMlZrUTI5dGJXRnVaSE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlZjbXhUWldkdFpXNTBLSE5sWjIxbGJuUXVjR0YwYUhOWGFYUm9VR0Z5WVcxekxDQjdmU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9iUzV0WVhSamFDQW1KaUJQWW1wbFkzUXVhMlY1Y3loelpXZHRaVzUwTG1Ob2FXeGtjbVZ1S1M1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsVG1WM1UyVm5iV1Z1ZENoelpXZHRaVzUwTENCemRHRnlkRWx1WkdWNExDQmpiMjF0WVc1a2N5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2JTNXRZWFJqYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIxY0dSaGRHVlRaV2R0Wlc1MFEyaHBiR1J5Wlc0b2MyVm5iV1Z1ZEN3Z01Dd2djMnhwWTJWa1EyOXRiV0Z1WkhNcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZPWlhkVFpXZHRaVzUwS0hObFoyMWxiblFzSUhOMFlYSjBTVzVrWlhnc0lHTnZiVzFoYm1SektUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVlRaV2R0Wlc1MFEyaHBiR1J5Wlc0b1hHNGdJQ0FnYzJWbmJXVnVkRG9nVlhKc1UyVm5iV1Z1ZEN3Z2MzUmhjblJKYm1SbGVEb2diblZ0WW1WeUxDQmpiMjF0WVc1a2N6b2dZVzU1VzEwcE9pQlZjbXhUWldkdFpXNTBJSHRjYmlBZ2FXWWdLR052YlcxaGJtUnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZYSnNVMlZuYldWdWRDaHpaV2R0Wlc1MExuQmhkR2h6VjJsMGFGQmhjbUZ0Y3l3Z2UzMHBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR052Ym5OMElHOTFkR3hsZENBOUlHZGxkRTkxZEd4bGRDaGpiMjF0WVc1a2N5azdYRzRnSUNBZ1kyOXVjM1FnWTJocGJHUnlaVzQ2SUh0YmEyVjVPaUJ6ZEhKcGJtZGRPaUJWY214VFpXZHRaVzUwZlNBOUlIdDlPMXh1SUNBZ0lHTm9hV3hrY21WdVcyOTFkR3hsZEYwZ1BTQjFjR1JoZEdWVFpXZHRaVzUwS0hObFoyMWxiblF1WTJocGJHUnlaVzViYjNWMGJHVjBYU3dnYzNSaGNuUkpibVJsZUN3Z1kyOXRiV0Z1WkhNcE8xeHVJQ0FnSUdadmNrVmhZMmdvYzJWbmJXVnVkQzVqYUdsc1pISmxiaXdnS0dOb2FXeGtPaUJWY214VFpXZHRaVzUwTENCamFHbHNaRTkxZEd4bGREb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1kyaHBiR1JQZFhSc1pYUWdJVDA5SUc5MWRHeGxkQ2tnZTF4dUlDQWdJQ0FnSUNCamFHbHNaSEpsYmx0amFHbHNaRTkxZEd4bGRGMGdQU0JqYUdsc1pEdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGVnliRk5sWjIxbGJuUW9jMlZuYldWdWRDNXdZWFJvYzFkcGRHaFFZWEpoYlhNc0lHTm9hV3hrY21WdUtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y21WbWFYaGxaRmRwZEdnb2MyVm5iV1Z1ZERvZ1ZYSnNVMlZuYldWdWRDd2djM1JoY25SSmJtUmxlRG9nYm5WdFltVnlMQ0JqYjIxdFlXNWtjem9nWVc1NVcxMHBJSHRjYmlBZ2JHVjBJR04xY25KbGJuUkRiMjF0WVc1a1NXNWtaWGdnUFNBd08xeHVJQ0JzWlhRZ1kzVnljbVZ1ZEZCaGRHaEpibVJsZUNBOUlITjBZWEowU1c1a1pYZzdYRzVjYmlBZ1kyOXVjM1FnYm05TllYUmphQ0E5SUh0dFlYUmphRG9nWm1Gc2MyVXNJR3hoYzNSSmJtUmxlRG9nTUgwN1hHNGdJSGRvYVd4bElDaGpkWEp5Wlc1MFVHRjBhRWx1WkdWNElEd2djMlZuYldWdWRDNXdZWFJvYzFkcGRHaFFZWEpoYlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYVdZZ0tHTjFjbkpsYm5SRGIyMXRZVzVrU1c1a1pYZ2dQajBnWTI5dGJXRnVaSE11YkdWdVozUm9LU0J5WlhSMWNtNGdibTlOWVhSamFEdGNiaUFnSUNCamIyNXpkQ0J3WVhSb0lEMGdjMlZuYldWdWRDNXdZWFJvYzFkcGRHaFFZWEpoYlhOYlkzVnljbVZ1ZEZCaGRHaEpibVJsZUYwN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y2lBOUlHZGxkRkJoZEdnb1kyOXRiV0Z1WkhOYlkzVnljbVZ1ZEVOdmJXMWhibVJKYm1SbGVGMHBPMXh1SUNBZ0lHTnZibk4wSUc1bGVIUWdQVnh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBRMjl0YldGdVpFbHVaR1Y0SUR3Z1kyOXRiV0Z1WkhNdWJHVnVaM1JvSUMwZ01TQS9JR052YlcxaGJtUnpXMk4xY25KbGJuUkRiMjF0WVc1a1NXNWtaWGdnS3lBeFhTQTZJRzUxYkd3N1hHNWNiaUFnSUNCcFppQW9ZM1Z5Y2lBbUppQnVaWGgwSUNZbUlDaDBlWEJsYjJZZ2JtVjRkQ0E5UFQwZ0oyOWlhbVZqZENjcEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVdOdmJYQmhjbVVvWTNWeWNpd2dibVY0ZEN3Z2NHRjBhQ2twSUhKbGRIVnliaUJ1YjAxaGRHTm9PMXh1SUNBZ0lDQWdZM1Z5Y21WdWRFTnZiVzFoYm1SSmJtUmxlQ0FyUFNBeU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXTnZiWEJoY21Vb1kzVnljaXdnZTMwc0lIQmhkR2dwS1NCeVpYUjFjbTRnYm05TllYUmphRHRjYmlBZ0lDQWdJR04xY25KbGJuUkRiMjF0WVc1a1NXNWtaWGdyS3p0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGQmhkR2hKYm1SbGVDc3JPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSHR0WVhSamFEb2dkSEoxWlN3Z2JHRnpkRWx1WkdWNE9pQmpkWEp5Wlc1MFEyOXRiV0Z1WkVsdVpHVjRmVHRjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFRtVjNVMlZuYldWdWRDaHpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J6ZEdGeWRFbHVaR1Y0T2lCdWRXMWlaWElzSUdOdmJXMWhibVJ6T2lCaGJubGJYU2s2SUZWeWJGTmxaMjFsYm5RZ2UxeHVJQ0JqYjI1emRDQndZWFJvY3lBOUlITmxaMjFsYm5RdWNHRjBhSE5YYVhSb1VHRnlZVzF6TG5Oc2FXTmxLREFzSUhOMFlYSjBTVzVrWlhncE8xeHVJQ0JzWlhRZ2FTQTlJREE3WEc0Z0lIZG9hV3hsSUNocElEd2dZMjl0YldGdVpITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0x5OGdhV1lnZDJVZ2MzUmhjblFnZDJsMGFDQmhiaUJ2WW1wbFkzUWdiR2wwWlhKaGJDd2dkMlVnYm1WbFpDQjBieUJ5WlhWelpTQjBhR1VnY0dGMGFDQndZWEowSUdaeWIyMGdkR2hsSUhObFoyMWxiblJjYmlBZ0lDQnBaaUFvYVNBOVBUMGdNQ0FtSmlBb2RIbHdaVzltSUdOdmJXMWhibVJ6V3pCZElEMDlQU0FuYjJKcVpXTjBKeWtwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSEFnUFNCelpXZHRaVzUwTG5CaGRHaHpWMmwwYUZCaGNtRnRjMXR6ZEdGeWRFbHVaR1Y0WFR0Y2JpQWdJQ0FnSUhCaGRHaHpMbkIxYzJnb2JtVjNJRlZ5YkZCaGRHaFhhWFJvVUdGeVlXMXpLSEF1Y0dGMGFDd2dZMjl0YldGdVpITmJNRjBwS1R0Y2JpQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR04xY25JZ1BTQm5aWFJRWVhSb0tHTnZiVzFoYm1SelcybGRLVHRjYmlBZ0lDQmpiMjV6ZENCdVpYaDBJRDBnS0drZ1BDQmpiMjF0WVc1a2N5NXNaVzVuZEdnZ0xTQXhLU0EvSUdOdmJXMWhibVJ6VzJrZ0t5QXhYU0E2SUc1MWJHdzdYRzRnSUNBZ2FXWWdLR04xY25JZ0ppWWdibVY0ZENBbUppQW9kSGx3Wlc5bUlHNWxlSFFnUFQwOUlDZHZZbXBsWTNRbktTa2dlMXh1SUNBZ0lDQWdjR0YwYUhNdWNIVnphQ2h1WlhjZ1ZYSnNVR0YwYUZkcGRHaFFZWEpoYlhNb1kzVnljaXdnYzNSeWFXNW5hV1o1S0c1bGVIUXBLU2s3WEc0Z0lDQWdJQ0JwSUNzOUlESTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhCaGRHaHpMbkIxYzJnb2JtVjNJRlZ5YkZCaGRHaFhhWFJvVUdGeVlXMXpLR04xY25Jc0lIdDlLU2s3WEc0Z0lDQWdJQ0JwS3lzN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ1ZYSnNVMlZuYldWdWRDaHdZWFJvY3l3Z2UzMHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpkSEpwYm1kcFpua29jR0Z5WVcxek9pQjdXMnRsZVRvZ2MzUnlhVzVuWFRvZ1lXNTVmU2s2SUh0YmEyVjVPaUJ6ZEhKcGJtZGRPaUJ6ZEhKcGJtZDlJSHRjYmlBZ1kyOXVjM1FnY21Wek9pQjdXMnRsZVRvZ2MzUnlhVzVuWFRvZ2MzUnlhVzVuZlNBOUlIdDlPMXh1SUNCbWIzSkZZV05vS0hCaGNtRnRjeXdnS0hZNklHRnVlU3dnYXpvZ2MzUnlhVzVuS1NBOVBpQnlaWE5iYTEwZ1BTQmdKSHQyZldBcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqYjIxd1lYSmxLRnh1SUNBZ0lIQmhkR2c2SUhOMGNtbHVaeXdnY0dGeVlXMXpPaUI3VzJ0bGVUb2djM1J5YVc1blhUb2dZVzU1ZlN3Z2NHRjBhRmRwZEdoUVlYSmhiWE02SUZWeWJGQmhkR2hYYVhSb1VHRnlZVzF6S1RvZ1ltOXZiR1ZoYmlCN1hHNGdJSEpsZEhWeWJpQndZWFJvSUQwOUlIQmhkR2hYYVhSb1VHRnlZVzF6TG5CaGRHZ2dKaVlnYzJoaGJHeHZkMFZ4ZFdGc0tIQmhjbUZ0Y3l3Z2NHRjBhRmRwZEdoUVlYSmhiWE11Y0dGeVlXMWxkR1Z5Y3lrN1hHNTlJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL2NyZWF0ZV91cmxfdHJlZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQwOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgncnhqcy9PYnNlcnZhYmxlJyk7XG52YXIgb2ZfMSA9IHJlcXVpcmUoJ3J4anMvb2JzZXJ2YWJsZS9vZicpO1xudmFyIHJvdXRlcl9zdGF0ZV8xID0gcmVxdWlyZSgnLi9yb3V0ZXJfc3RhdGUnKTtcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG52YXIgdXJsX3RyZWVfMSA9IHJlcXVpcmUoJy4vdXJsX3RyZWUnKTtcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWxzL2NvbGxlY3Rpb24nKTtcbnZhciB0cmVlXzEgPSByZXF1aXJlKCcuL3V0aWxzL3RyZWUnKTtcbnZhciBOb01hdGNoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb01hdGNoKHNlZ21lbnQpIHtcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09IHZvaWQgMCkgeyBzZWdtZW50ID0gbnVsbDsgfVxuICAgICAgICB0aGlzLnNlZ21lbnQgPSBzZWdtZW50O1xuICAgIH1cbiAgICByZXR1cm4gTm9NYXRjaDtcbn0oKSk7XG5mdW5jdGlvbiByZWNvZ25pemUocm9vdENvbXBvbmVudFR5cGUsIGNvbmZpZywgdXJsVHJlZSwgdXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcHJvY2Vzc1NlZ21lbnQoY29uZmlnLCB1cmxUcmVlLnJvb3QsIHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKTtcbiAgICAgICAgdmFyIHJvb3QgPSBuZXcgcm91dGVyX3N0YXRlXzEuQWN0aXZhdGVkUm91dGVTbmFwc2hvdChbXSwge30sIHNoYXJlZF8xLlBSSU1BUllfT1VUTEVULCByb290Q29tcG9uZW50VHlwZSwgbnVsbCwgdXJsVHJlZS5yb290LCAtMSk7XG4gICAgICAgIHZhciByb290Tm9kZSA9IG5ldyB0cmVlXzEuVHJlZU5vZGUocm9vdCwgY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4gb2ZfMS5vZihuZXcgcm91dGVyX3N0YXRlXzEuUm91dGVyU3RhdGVTbmFwc2hvdCh1cmwsIHJvb3ROb2RlLCB1cmxUcmVlLnF1ZXJ5UGFyYW1zLCB1cmxUcmVlLmZyYWdtZW50KSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgTm9NYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9icy5lcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgbWF0Y2ggYW55IHJvdXRlczogJ1wiICsgZS5zZWdtZW50ICsgXCInXCIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnMuZXJyb3IoZSk7IH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZWNvZ25pemUgPSByZWNvZ25pemU7XG5mdW5jdGlvbiBwcm9jZXNzU2VnbWVudChjb25maWcsIHNlZ21lbnQsIG91dGxldCkge1xuICAgIGlmIChzZWdtZW50LnBhdGhzV2l0aFBhcmFtcy5sZW5ndGggPT09IDAgJiYgT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1NlZ21lbnRDaGlsZHJlbihjb25maWcsIHNlZ21lbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtwcm9jZXNzUGF0aHNXaXRoUGFyYW1zKGNvbmZpZywgc2VnbWVudCwgMCwgc2VnbWVudC5wYXRoc1dpdGhQYXJhbXMsIG91dGxldCldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NTZWdtZW50Q2hpbGRyZW4oY29uZmlnLCBzZWdtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdXJsX3RyZWVfMS5tYXBDaGlsZHJlbkludG9BcnJheShzZWdtZW50LCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkT3V0bGV0KSB7IHJldHVybiBwcm9jZXNzU2VnbWVudChjb25maWcsIGNoaWxkLCBjaGlsZE91dGxldCk7IH0pO1xuICAgIGNoZWNrT3V0bGV0TmFtZVVuaXF1ZW5lc3MoY2hpbGRyZW4pO1xuICAgIHNvcnRBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90cyhjaGlsZHJlbik7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuZnVuY3Rpb24gc29ydEFjdGl2YXRlZFJvdXRlU25hcHNob3RzKG5vZGVzKSB7XG4gICAgbm9kZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoYS52YWx1ZS5vdXRsZXQgPT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYi52YWx1ZS5vdXRsZXQgPT09IHNoYXJlZF8xLlBSSU1BUllfT1VUTEVUKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBhLnZhbHVlLm91dGxldC5sb2NhbGVDb21wYXJlKGIudmFsdWUub3V0bGV0KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NQYXRoc1dpdGhQYXJhbXMoY29uZmlnLCBzZWdtZW50LCBwYXRoSW5kZXgsIHBhdGhzLCBvdXRsZXQpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGNvbmZpZ18xID0gY29uZmlnOyBfaSA8IGNvbmZpZ18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgciA9IGNvbmZpZ18xW19pXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzUGF0aHNXaXRoUGFyYW1zQWdhaW5zdFJvdXRlKHIsIHNlZ21lbnQsIHBhdGhJbmRleCwgcGF0aHMsIG91dGxldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBOb01hdGNoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBOb01hdGNoKHNlZ21lbnQpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1BhdGhzV2l0aFBhcmFtc0FnYWluc3RSb3V0ZShyb3V0ZSwgc2VnbWVudCwgcGF0aEluZGV4LCBwYXRocywgb3V0bGV0KSB7XG4gICAgaWYgKHJvdXRlLnJlZGlyZWN0VG8pXG4gICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgaWYgKChyb3V0ZS5vdXRsZXQgPyByb3V0ZS5vdXRsZXQgOiBzaGFyZWRfMS5QUklNQVJZX09VVExFVCkgIT09IG91dGxldClcbiAgICAgICAgdGhyb3cgbmV3IE5vTWF0Y2goKTtcbiAgICBpZiAocm91dGUucGF0aCA9PT0gJyoqJykge1xuICAgICAgICB2YXIgcGFyYW1zID0gcGF0aHMubGVuZ3RoID4gMCA/IGNvbGxlY3Rpb25fMS5sYXN0KHBhdGhzKS5wYXJhbWV0ZXJzIDoge307XG4gICAgICAgIHZhciBzbmFwc2hvdF8xID0gbmV3IHJvdXRlcl9zdGF0ZV8xLkFjdGl2YXRlZFJvdXRlU25hcHNob3QocGF0aHMsIHBhcmFtcywgb3V0bGV0LCByb3V0ZS5jb21wb25lbnQsIHJvdXRlLCBzZWdtZW50LCAtMSk7XG4gICAgICAgIHJldHVybiBuZXcgdHJlZV8xLlRyZWVOb2RlKHNuYXBzaG90XzEsIFtdKTtcbiAgICB9XG4gICAgdmFyIF9hID0gbWF0Y2goc2VnbWVudCwgcm91dGUsIHBhdGhzKSwgY29uc3VtZWRQYXRocyA9IF9hLmNvbnN1bWVkUGF0aHMsIHBhcmFtZXRlcnMgPSBfYS5wYXJhbWV0ZXJzLCBsYXN0Q2hpbGQgPSBfYS5sYXN0Q2hpbGQ7XG4gICAgdmFyIHNuYXBzaG90ID0gbmV3IHJvdXRlcl9zdGF0ZV8xLkFjdGl2YXRlZFJvdXRlU25hcHNob3QoY29uc3VtZWRQYXRocywgcGFyYW1ldGVycywgb3V0bGV0LCByb3V0ZS5jb21wb25lbnQsIHJvdXRlLCBzZWdtZW50LCBwYXRoSW5kZXggKyBsYXN0Q2hpbGQgLSAxKTtcbiAgICB2YXIgc2xpY2VkUGF0aCA9IHBhdGhzLnNsaWNlKGxhc3RDaGlsZCk7XG4gICAgdmFyIGNoaWxkQ29uZmlnID0gcm91dGUuY2hpbGRyZW4gPyByb3V0ZS5jaGlsZHJlbiA6IFtdO1xuICAgIGlmIChjaGlsZENvbmZpZy5sZW5ndGggPT09IDAgJiYgc2xpY2VkUGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlXzEuVHJlZU5vZGUoc25hcHNob3QsIFtdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2xpY2VkUGF0aC5sZW5ndGggPT09IDAgJiYgT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBwcm9jZXNzU2VnbWVudENoaWxkcmVuKGNoaWxkQ29uZmlnLCBzZWdtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmVlXzEuVHJlZU5vZGUoc25hcHNob3QsIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBjaGlsZCA9IHByb2Nlc3NQYXRoc1dpdGhQYXJhbXMoY2hpbGRDb25maWcsIHNlZ21lbnQsIHBhdGhJbmRleCArIGxhc3RDaGlsZCwgc2xpY2VkUGF0aCwgc2hhcmVkXzEuUFJJTUFSWV9PVVRMRVQpO1xuICAgICAgICByZXR1cm4gbmV3IHRyZWVfMS5UcmVlTm9kZShzbmFwc2hvdCwgW2NoaWxkXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWF0Y2goc2VnbWVudCwgcm91dGUsIHBhdGhzKSB7XG4gICAgaWYgKHJvdXRlLnBhdGggPT09ICcnKSB7XG4gICAgICAgIGlmIChyb3V0ZS50ZXJtaW5hbCAmJiAoT2JqZWN0LmtleXMoc2VnbWVudC5jaGlsZHJlbikubGVuZ3RoID4gMCB8fCBwYXRocy5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vTWF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNvbnN1bWVkUGF0aHM6IFtdLCBsYXN0Q2hpbGQ6IDAsIHBhcmFtZXRlcnM6IHt9IH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHBhdGggPSByb3V0ZS5wYXRoO1xuICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcbiAgICB2YXIgcG9zUGFyYW1ldGVycyA9IHt9O1xuICAgIHZhciBjb25zdW1lZFBhdGhzID0gW107XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID49IHBhdGhzLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gcGF0aHNbY3VycmVudEluZGV4XTtcbiAgICAgICAgdmFyIHAgPSBwYXJ0c1tpXTtcbiAgICAgICAgdmFyIGlzUG9zUGFyYW0gPSBwLnN0YXJ0c1dpdGgoJzonKTtcbiAgICAgICAgaWYgKCFpc1Bvc1BhcmFtICYmIHAgIT09IGN1cnJlbnQucGF0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBOb01hdGNoKCk7XG4gICAgICAgIGlmIChpc1Bvc1BhcmFtKSB7XG4gICAgICAgICAgICBwb3NQYXJhbWV0ZXJzW3Auc3Vic3RyaW5nKDEpXSA9IGN1cnJlbnQucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdW1lZFBhdGhzLnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgIH1cbiAgICBpZiAocm91dGUudGVybWluYWwgJiYgKE9iamVjdC5rZXlzKHNlZ21lbnQuY2hpbGRyZW4pLmxlbmd0aCA+IDAgfHwgY3VycmVudEluZGV4IDwgcGF0aHMubGVuZ3RoKSkge1xuICAgICAgICB0aHJvdyBuZXcgTm9NYXRjaCgpO1xuICAgIH1cbiAgICB2YXIgcGFyYW1ldGVycyA9IGNvbGxlY3Rpb25fMS5tZXJnZShwb3NQYXJhbWV0ZXJzLCBjb25zdW1lZFBhdGhzW2NvbnN1bWVkUGF0aHMubGVuZ3RoIC0gMV0ucGFyYW1ldGVycyk7XG4gICAgcmV0dXJuIHsgY29uc3VtZWRQYXRoczogY29uc3VtZWRQYXRocywgbGFzdENoaWxkOiBjdXJyZW50SW5kZXgsIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrT3V0bGV0TmFtZVVuaXF1ZW5lc3Mobm9kZXMpIHtcbiAgICB2YXIgbmFtZXMgPSB7fTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHZhciByb3V0ZVdpdGhTYW1lT3V0bGV0TmFtZSA9IG5hbWVzW24udmFsdWUub3V0bGV0XTtcbiAgICAgICAgaWYgKHJvdXRlV2l0aFNhbWVPdXRsZXROYW1lKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHJvdXRlV2l0aFNhbWVPdXRsZXROYW1lLnVybC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudG9TdHJpbmcoKTsgfSkuam9pbignLycpO1xuICAgICAgICAgICAgdmFyIGMgPSBuLnZhbHVlLnVybC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudG9TdHJpbmcoKTsgfSkuam9pbignLycpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHdvIHNlZ21lbnRzIGNhbm5vdCBoYXZlIHRoZSBzYW1lIG91dGxldCBuYW1lOiAnXCIgKyBwICsgXCInIGFuZCAnXCIgKyBjICsgXCInLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lc1tuLnZhbHVlLm91dGxldF0gPSBuLnZhbHVlO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY21WamIyZHVhWHBsTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwzSmxZMjluYm1sNlpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUTBFc01rSkJRWGxDTEdsQ1FVRnBRaXhEUVVGRExFTkJRVUU3UVVGRk0wTXNiVUpCUVd0Q0xHOUNRVUZ2UWl4RFFVRkRMRU5CUVVFN1FVRkhka01zTmtKQlFUQkVMR2RDUVVGblFpeERRVUZETEVOQlFVRTdRVUZETTBVc2RVSkJRVFpDTEZWQlFWVXNRMEZCUXl4RFFVRkJPMEZCUTNoRExIbENRVUV5UlN4WlFVRlpMRU5CUVVNc1EwRkJRVHRCUVVONFJpd3lRa0ZCTUVJc2IwSkJRVzlDTEVOQlFVTXNRMEZCUVR0QlFVTXZReXh4UWtGQmRVSXNZMEZCWXl4RFFVRkRMRU5CUVVFN1FVRkZkRU03U1VGRFJTeHBRa0ZCYlVJc1QwRkJNRUk3VVVGQmFrTXNkVUpCUVdsRExFZEJRV3BETEdOQlFXbERPMUZCUVRGQ0xGbEJRVThzUjBGQlVDeFBRVUZQTEVOQlFXMUNPMGxCUVVjc1EwRkJRenRKUVVOdVJDeGpRVUZETzBGQlFVUXNRMEZCUXl4QlFVWkVMRWxCUlVNN1FVRkZSQ3h0UWtGRFNTeHBRa0ZCZFVJc1JVRkJSU3hOUVVGdlFpeEZRVUZGTEU5QlFXZENMRVZCUXk5RUxFZEJRVmM3U1VGRFlpeEpRVUZKTEVOQlFVTTdVVUZEU0N4SlFVRk5MRkZCUVZFc1IwRkJSeXhqUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc2RVSkJRV01zUTBGQlF5eERRVUZETzFGQlEzUkZMRWxCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzY1VOQlFYTkNMRU5CUTI1RExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNkVUpCUVdNc1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNaRkxFbEJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NaVUZCVVN4RFFVRjVRaXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEZEVVc1RVRkJUU3hEUVVGRExFOUJRVVVzUTBGQlJTeEpRVUZKTEd0RFFVRnRRaXhEUVVGRExFZEJRVWNzUlVGQlJTeFJRVUZSTEVWQlFVVXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTFSaXhEUVVGRk8wbEJRVUVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOWUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1N4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM3BDTEUxQlFVMHNRMEZCUXl4SlFVRkpMSFZDUVVGVkxFTkJRMnBDTEZWQlFVTXNSMEZCYTBNN1owSkJReTlDTEU5QlFVRXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5d3JRa0ZCTmtJc1EwRkJReXhEUVVGRExFOUJRVThzVFVGQlJ5eERRVUZETEVOQlFVTTdXVUZCTDBRc1EwRkJLMFFzUTBGQlF5eERRVUZETzFGQlF6TkZMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5PTEUxQlFVMHNRMEZCUXl4SlFVRkpMSFZDUVVGVkxFTkJRMnBDTEZWQlFVTXNSMEZCYTBNc1NVRkJTeXhQUVVGQkxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVZvc1EwRkJXU3hEUVVGRExFTkJRVU03VVVGRE5VUXNRMEZCUXp0SlFVTklMRU5CUVVNN1FVRkRTQ3hEUVVGRE8wRkJia0psTEdsQ1FVRlRMRmxCYlVKNFFpeERRVUZCTzBGQlJVUXNkMEpCUTBrc1RVRkJaU3hGUVVGRkxFOUJRVzFDTEVWQlFVVXNUVUZCWXp0SlFVTjBSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRja1lzVFVGQlRTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTnFSQ3hEUVVGRE8wbEJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEVGl4TlFVRk5MRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNaVUZCWlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGRrWXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3huUTBGRFNTeE5RVUZsTEVWQlFVVXNUMEZCYlVJN1NVRkRkRU1zU1VGQlRTeFJRVUZSTEVkQlFVY3NLMEpCUVc5Q0xFTkJRMnBETEU5QlFVOHNSVUZCUlN4VlFVRkRMRXRCUVVzc1JVRkJSU3hYUVVGWExFbEJRVXNzVDBGQlFTeGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSU3hYUVVGWExFTkJRVU1zUlVGQk1VTXNRMEZCTUVNc1EwRkJReXhEUVVGRE8wbEJRMnBHTEhsQ1FVRjVRaXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzQkRMREpDUVVFeVFpeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTNSRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdRVUZEYkVJc1EwRkJRenRCUVVWRUxIRkRRVUZ4UXl4TFFVRjVRenRKUVVNMVJTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRFpDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUzBGQlN5eDFRa0ZCWXl4RFFVRkRPMWxCUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMSFZDUVVGakxFTkJRVU03V1VGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJoRUxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVOMFJDeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRkZSQ3huUTBGRFNTeE5RVUZsTEVWQlFVVXNUMEZCYlVJc1JVRkJSU3hUUVVGcFFpeEZRVUZGTEV0QlFUQkNMRVZCUTI1R0xFMUJRV003U1VGRGFFSXNSMEZCUnl4RFFVRkRMRU5CUVZVc1ZVRkJUU3hGUVVGT0xHbENRVUZOTEVWQlFVNHNiMEpCUVUwc1JVRkJUaXhKUVVGTkxFTkJRVU03VVVGQmFFSXNTVUZCU1N4RFFVRkRMR1ZCUVVFN1VVRkRVaXhKUVVGSkxFTkJRVU03V1VGRFNDeE5RVUZOTEVOQlFVTXNhME5CUVd0RExFTkJRVU1zUTBGQlF5eEZRVUZGTEU5QlFVOHNSVUZCUlN4VFFVRlRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEyeEdMRU5CUVVVN1VVRkJRU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFnc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1N4UFFVRlBMRU5CUVVNc1EwRkJRenRuUWtGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTjJReXhEUVVGRE8wdEJRMFk3U1VGRFJDeE5RVUZOTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRemRDTEVOQlFVTTdRVUZGUkN3MFEwRkRTU3hMUVVGWkxFVkJRVVVzVDBGQmJVSXNSVUZCUlN4VFFVRnBRaXhGUVVGRkxFdEJRVEJDTEVWQlEyaEdMRTFCUVdNN1NVRkRhRUlzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJRenRSUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVWQlFVVXNRMEZCUXp0SlFVTXhReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eDFRa0ZCWXl4RFFVRkRMRXRCUVVzc1RVRkJUU3hEUVVGRE8xRkJRVU1zVFVGQlRTeEpRVUZKTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUlc1R0xFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40UWl4SlFVRk5MRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4cFFrRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRPVVFzU1VGQlRTeFZRVUZSTEVkQlExWXNTVUZCU1N4eFEwRkJjMElzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16Uml4TlFVRk5MRU5CUVVNc1NVRkJTU3hsUVVGUkxFTkJRWGxDTEZWQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNMVJDeERRVUZETzBsQlJVUXNTVUZCUVN4cFEwRkJNa1VzUlVGQmNFVXNaME5CUVdFc1JVRkJSU3d3UWtGQlZTeEZRVUZGTEhkQ1FVRlRMRU5CUVdsRE8wbEJSVFZGTEVsQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc2NVTkJRWE5DTEVOQlEzWkRMR0ZCUVdFc1JVRkJSU3hWUVVGVkxFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGRGJFVXNVMEZCVXl4SFFVRkhMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU12UWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUXpGRExFbEJRVTBzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZGZWtRc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRWxCUVVrc1ZVRkJWU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNoRUxFMUJRVTBzUTBGQlF5eEpRVUZKTEdWQlFWRXNRMEZCZVVJc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlJ6VkVMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRMMFVzU1VGQlRTeFJRVUZSTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFMUJRVTBzUTBGQlF5eEpRVUZKTEdWQlFWRXNRMEZCZVVJc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBsQlJXeEZMRU5CUVVNN1NVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5PTEVsQlFVMHNTMEZCU3l4SFFVRkhMSE5DUVVGelFpeERRVU5vUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhGUVVGRkxGTkJRVk1zUjBGQlJ5eFRRVUZUTEVWQlFVVXNWVUZCVlN4RlFVRkZMSFZDUVVGakxFTkJRVU1zUTBGQlF6dFJRVU0zUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hsUVVGUkxFTkJRWGxDTEZGQlFWRXNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGFrVXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3hsUVVGbExFOUJRVzFDTEVWQlFVVXNTMEZCV1N4RlFVRkZMRXRCUVRCQ08wbEJRekZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjBRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU55Uml4TlFVRk5MRWxCUVVrc1QwRkJUeXhGUVVGRkxFTkJRVU03VVVGRGRFSXNRMEZCUXp0UlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMDRzVFVGQlRTeERRVUZETEVWQlFVTXNZVUZCWVN4RlFVRkZMRVZCUVVVc1JVRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF5eEZRVUZGTEZWQlFWVXNSVUZCUlN4RlFVRkZMRVZCUVVNc1EwRkJRenRSUVVNelJDeERRVUZETzBsQlEwZ3NRMEZCUXp0SlFVVkVMRWxCUVUwc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZUVJc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNNVFpeEpRVUZOTEdGQlFXRXNSMEZCZVVJc1JVRkJSU3hEUVVGRE8wbEJReTlETEVsQlFVMHNZVUZCWVN4SFFVRjNRaXhGUVVGRkxFTkJRVU03U1VGRk9VTXNTVUZCU1N4WlFVRlpMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJSWEpDTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEzUkRMRVZCUVVVc1EwRkJReXhEUVVGRExGbEJRVmtzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMWxCUVVNc1RVRkJUU3hKUVVGSkxFOUJRVThzUlVGQlJTeERRVUZETzFGQlEzUkVMRWxCUVUwc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVVndReXhKUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRia0lzU1VGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVVZ5UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExGVkJRVlVzU1VGQlNTeERRVUZETEV0QlFVc3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVWQlFVVXNRMEZCUXp0UlFVTXpSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJZc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlF5OURMRU5CUVVNN1VVRkRSQ3hoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUXpWQ0xGbEJRVmtzUlVGQlJTeERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeFpRVUZaTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5vUnl4TlFVRk5MRWxCUVVrc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMRWxCUVUwc1ZVRkJWU3hIUVVGSExHdENRVUZMTEVOQlFVTXNZVUZCWVN4RlFVRkZMR0ZCUVdFc1EwRkJReXhoUVVGaExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJRelZHTEUxQlFVMHNRMEZCUXl4RlFVRkRMR1ZCUVVFc1lVRkJZU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFpRVUZaTEVWQlFVVXNXVUZCUVN4VlFVRlZMRVZCUVVNc1EwRkJRenRCUVVNNVJDeERRVUZETzBGQlJVUXNiVU5CUVcxRExFdEJRWGxETzBsQlF6RkZMRWxCUVUwc1MwRkJTeXhIUVVFd1F5eEZRVUZGTEVOQlFVTTdTVUZEZUVRc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVOQlFVTTdVVUZEWWl4SlFVRkpMSFZDUVVGMVFpeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEzQkVMRVZCUVVVc1EwRkJReXhEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVFpeEpRVUZOTEVOQlFVTXNSMEZCUnl4MVFrRkJkVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRmFMRU5CUVZrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTjJSU3hKUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVm9zUTBGQldTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRM1pFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2NVUkJRVzFFTEVOQlFVTXNaVUZCVlN4RFFVRkRMRTlCUVVrc1EwRkJReXhEUVVGRE8xRkJRM1pHTEVOQlFVTTdVVUZEUkN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRMnhETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTB3c1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3Vkhsd1pYMGdabkp2YlNBblFHRnVaM1ZzWVhJdlkyOXlaU2M3WEc1cGJYQnZjblFnZTA5aWMyVnlkbUZpYkdWOUlHWnliMjBnSjNKNGFuTXZUMkp6WlhKMllXSnNaU2M3WEc1cGJYQnZjblFnZTA5aWMyVnlkbVZ5ZlNCbWNtOXRJQ2R5ZUdwekwwOWljMlZ5ZG1WeUp6dGNibWx0Y0c5eWRDQjdiMllnZlNCbWNtOXRJQ2R5ZUdwekwyOWljMlZ5ZG1GaWJHVXZiMlluTzF4dVhHNXBiWEJ2Y25RZ2UxSnZkWFJsTENCU2IzVjBaWEpEYjI1bWFXZDlJR1p5YjIwZ0p5NHZZMjl1Wm1sbkp6dGNibWx0Y0c5eWRDQjdRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZEN3Z1VtOTFkR1Z5VTNSaGRHVlRibUZ3YzJodmRIMGdabkp2YlNBbkxpOXliM1YwWlhKZmMzUmhkR1VuTzF4dWFXMXdiM0owSUh0UVVrbE5RVkpaWDA5VlZFeEZWSDBnWm5KdmJTQW5MaTl6YUdGeVpXUW5PMXh1YVcxd2IzSjBJSHRWY214UVlYUm9WMmwwYUZCaGNtRnRjeXdnVlhKc1UyVm5iV1Z1ZEN3Z1ZYSnNWSEpsWlN3Z2JXRndRMmhwYkdSeVpXNUpiblJ2UVhKeVlYbDlJR1p5YjIwZ0p5NHZkWEpzWDNSeVpXVW5PMXh1YVcxd2IzSjBJSHRzWVhOMExDQnRaWEpuWlgwZ1puSnZiU0FuTGk5MWRHbHNjeTlqYjJ4c1pXTjBhVzl1Snp0Y2JtbHRjRzl5ZENCN1ZISmxaVTV2WkdWOUlHWnliMjBnSnk0dmRYUnBiSE12ZEhKbFpTYzdYRzVjYm1Oc1lYTnpJRTV2VFdGMFkyZ2dlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdkV0pzYVdNZ2MyVm5iV1Z1ZERvZ1ZYSnNVMlZuYldWdWRDQTlJRzUxYkd3cElIdDlYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCeVpXTnZaMjVwZW1Vb1hHNGdJQ0FnY205dmRFTnZiWEJ2Ym1WdWRGUjVjR1U2SUZSNWNHVXNJR052Ym1acFp6b2dVbTkxZEdWeVEyOXVabWxuTENCMWNteFVjbVZsT2lCVmNteFVjbVZsTEZ4dUlDQWdJSFZ5YkRvZ2MzUnlhVzVuS1RvZ1QySnpaWEoyWVdKc1pUeFNiM1YwWlhKVGRHRjBaVk51WVhCemFHOTBQaUI3WEc0Z0lIUnllU0I3WEc0Z0lDQWdZMjl1YzNRZ1kyaHBiR1J5Wlc0Z1BTQndjbTlqWlhOelUyVm5iV1Z1ZENoamIyNW1hV2NzSUhWeWJGUnlaV1V1Y205dmRDd2dVRkpKVFVGU1dWOVBWVlJNUlZRcE8xeHVJQ0FnSUdOdmJuTjBJSEp2YjNRZ1BTQnVaWGNnUVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRDaGNiaUFnSUNBZ0lDQWdXMTBzSUh0OUxDQlFVa2xOUVZKWlgwOVZWRXhGVkN3Z2NtOXZkRU52YlhCdmJtVnVkRlI1Y0dVc0lHNTFiR3dzSUhWeWJGUnlaV1V1Y205dmRDd2dMVEVwTzF4dUlDQWdJR052Ym5OMElISnZiM1JPYjJSbElEMGdibVYzSUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStLSEp2YjNRc0lHTm9hV3hrY21WdUtUdGNiaUFnSUNCeVpYUjFjbTRnYjJZZ0tHNWxkeUJTYjNWMFpYSlRkR0YwWlZOdVlYQnphRzkwS0hWeWJDd2djbTl2ZEU1dlpHVXNJSFZ5YkZSeVpXVXVjWFZsY25sUVlYSmhiWE1zSUhWeWJGUnlaV1V1Wm5KaFoyMWxiblFwS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR2xtSUNobElHbHVjM1JoYm1ObGIyWWdUbTlOWVhSamFDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJQWW5ObGNuWmhZbXhsUEZKdmRYUmxjbE4wWVhSbFUyNWhjSE5vYjNRK0tGeHVJQ0FnSUNBZ0lDQWdJQ2h2WW5NNklFOWljMlZ5ZG1WeVBGSnZkWFJsY2xOMFlYUmxVMjVoY0hOb2IzUStLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW5NdVpYSnliM0lvYm1WM0lFVnljbTl5S0dCRFlXNXViM1FnYldGMFkyZ2dZVzU1SUhKdmRYUmxjem9nSnlSN1pTNXpaV2R0Wlc1MGZTZGdLU2twTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTlpYzJWeWRtRmliR1U4VW05MWRHVnlVM1JoZEdWVGJtRndjMmh2ZEQ0b1hHNGdJQ0FnSUNBZ0lDQWdLRzlpY3pvZ1QySnpaWEoyWlhJOFVtOTFkR1Z5VTNSaGRHVlRibUZ3YzJodmRENHBJRDArSUc5aWN5NWxjbkp2Y2lobEtTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5YjJObGMzTlRaV2R0Wlc1MEtGeHVJQ0FnSUdOdmJtWnBaem9nVW05MWRHVmJYU3dnYzJWbmJXVnVkRG9nVlhKc1UyVm5iV1Z1ZEN3Z2IzVjBiR1YwT2lCemRISnBibWNwT2lCVWNtVmxUbTlrWlR4QlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBQbHRkSUh0Y2JpQWdhV1lnS0hObFoyMWxiblF1Y0dGMGFITlhhWFJvVUdGeVlXMXpMbXhsYm1kMGFDQTlQVDBnTUNBbUppQlBZbXBsWTNRdWEyVjVjeWh6WldkdFpXNTBMbU5vYVd4a2NtVnVLUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YjJObGMzTlRaV2R0Wlc1MFEyaHBiR1J5Wlc0b1kyOXVabWxuTENCelpXZHRaVzUwS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnVzNCeWIyTmxjM05RWVhSb2MxZHBkR2hRWVhKaGJYTW9ZMjl1Wm1sbkxDQnpaV2R0Wlc1MExDQXdMQ0J6WldkdFpXNTBMbkJoZEdoelYybDBhRkJoY21GdGN5d2diM1YwYkdWMEtWMDdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKdlkyVnpjMU5sWjIxbGJuUkRhR2xzWkhKbGJpaGNiaUFnSUNCamIyNW1hV2M2SUZKdmRYUmxXMTBzSUhObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5RcE9pQlVjbVZsVG05a1pUeEJZM1JwZG1GMFpXUlNiM1YwWlZOdVlYQnphRzkwUGx0ZElIdGNiaUFnWTI5dWMzUWdZMmhwYkdSeVpXNGdQU0J0WVhCRGFHbHNaSEpsYmtsdWRHOUJjbkpoZVNoY2JpQWdJQ0FnSUhObFoyMWxiblFzSUNoamFHbHNaQ3dnWTJocGJHUlBkWFJzWlhRcElEMCtJSEJ5YjJObGMzTlRaV2R0Wlc1MEtHTnZibVpwWnl3Z1kyaHBiR1FzSUdOb2FXeGtUM1YwYkdWMEtTazdYRzRnSUdOb1pXTnJUM1YwYkdWMFRtRnRaVlZ1YVhGMVpXNWxjM01vWTJocGJHUnlaVzRwTzF4dUlDQnpiM0owUVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRITW9ZMmhwYkdSeVpXNHBPMXh1SUNCeVpYUjFjbTRnWTJocGJHUnlaVzQ3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE52Y25SQlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBjeWh1YjJSbGN6b2dWSEpsWlU1dlpHVThRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZEQ1YlhTazZJSFp2YVdRZ2UxeHVJQ0J1YjJSbGN5NXpiM0owS0NoaExDQmlLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHRXVkbUZzZFdVdWIzVjBiR1YwSUQwOVBTQlFVa2xOUVZKWlgwOVZWRXhGVkNrZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUdsbUlDaGlMblpoYkhWbExtOTFkR3hsZENBOVBUMGdVRkpKVFVGU1dWOVBWVlJNUlZRcElISmxkSFZ5YmlBeE8xeHVJQ0FnSUhKbGRIVnliaUJoTG5aaGJIVmxMbTkxZEd4bGRDNXNiMk5oYkdWRGIyMXdZWEpsS0dJdWRtRnNkV1V1YjNWMGJHVjBLVHRjYmlBZ2ZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnliMk5sYzNOUVlYUm9jMWRwZEdoUVlYSmhiWE1vWEc0Z0lDQWdZMjl1Wm1sbk9pQlNiM1YwWlZ0ZExDQnpaV2R0Wlc1ME9pQlZjbXhUWldkdFpXNTBMQ0J3WVhSb1NXNWtaWGc2SUc1MWJXSmxjaXdnY0dGMGFITTZJRlZ5YkZCaGRHaFhhWFJvVUdGeVlXMXpXMTBzWEc0Z0lDQWdiM1YwYkdWME9pQnpkSEpwYm1jcE9pQlVjbVZsVG05a1pUeEJZM1JwZG1GMFpXUlNiM1YwWlZOdVlYQnphRzkwUGlCN1hHNGdJR1p2Y2lBb2JHVjBJSElnYjJZZ1kyOXVabWxuS1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCd2NtOWpaWE56VUdGMGFITlhhWFJvVUdGeVlXMXpRV2RoYVc1emRGSnZkWFJsS0hJc0lITmxaMjFsYm5Rc0lIQmhkR2hKYm1SbGVDd2djR0YwYUhNc0lHOTFkR3hsZENrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0VvWlNCcGJuTjBZVzVqWlc5bUlFNXZUV0YwWTJncEtTQjBhSEp2ZHlCbE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCMGFISnZkeUJ1WlhjZ1RtOU5ZWFJqYUNoelpXZHRaVzUwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKdlkyVnpjMUJoZEdoelYybDBhRkJoY21GdGMwRm5ZV2x1YzNSU2IzVjBaU2hjYmlBZ0lDQnliM1YwWlRvZ1VtOTFkR1VzSUhObFoyMWxiblE2SUZWeWJGTmxaMjFsYm5Rc0lIQmhkR2hKYm1SbGVEb2diblZ0WW1WeUxDQndZWFJvY3pvZ1ZYSnNVR0YwYUZkcGRHaFFZWEpoYlhOYlhTeGNiaUFnSUNCdmRYUnNaWFE2SUhOMGNtbHVaeWs2SUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStJSHRjYmlBZ2FXWWdLSEp2ZFhSbExuSmxaR2x5WldOMFZHOHBJSFJvY205M0lHNWxkeUJPYjAxaGRHTm9LQ2s3WEc0Z0lHbG1JQ2dvY205MWRHVXViM1YwYkdWMElEOGdjbTkxZEdVdWIzVjBiR1YwSURvZ1VGSkpUVUZTV1Y5UFZWUk1SVlFwSUNFOVBTQnZkWFJzWlhRcElIUm9jbTkzSUc1bGR5Qk9iMDFoZEdOb0tDazdYRzVjYmlBZ2FXWWdLSEp2ZFhSbExuQmhkR2dnUFQwOUlDY3FLaWNwSUh0Y2JpQWdJQ0JqYjI1emRDQndZWEpoYlhNZ1BTQndZWFJvY3k1c1pXNW5kR2dnUGlBd0lEOGdiR0Z6ZENod1lYUm9jeWt1Y0dGeVlXMWxkR1Z5Y3lBNklIdDlPMXh1SUNBZ0lHTnZibk4wSUhOdVlYQnphRzkwSUQxY2JpQWdJQ0FnSUNBZ2JtVjNJRUZqZEdsMllYUmxaRkp2ZFhSbFUyNWhjSE5vYjNRb2NHRjBhSE1zSUhCaGNtRnRjeXdnYjNWMGJHVjBMQ0J5YjNWMFpTNWpiMjF3YjI1bGJuUXNJSEp2ZFhSbExDQnpaV2R0Wlc1MExDQXRNU2s3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJVY21WbFRtOWtaVHhCWTNScGRtRjBaV1JTYjNWMFpWTnVZWEJ6YUc5MFBpaHpibUZ3YzJodmRDd2dXMTBwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnZTJOdmJuTjFiV1ZrVUdGMGFITXNJSEJoY21GdFpYUmxjbk1zSUd4aGMzUkRhR2xzWkgwZ1BTQnRZWFJqYUNoelpXZHRaVzUwTENCeWIzVjBaU3dnY0dGMGFITXBPMXh1WEc0Z0lHTnZibk4wSUhOdVlYQnphRzkwSUQwZ2JtVjNJRUZqZEdsMllYUmxaRkp2ZFhSbFUyNWhjSE5vYjNRb1hHNGdJQ0FnSUNCamIyNXpkVzFsWkZCaGRHaHpMQ0J3WVhKaGJXVjBaWEp6TENCdmRYUnNaWFFzSUhKdmRYUmxMbU52YlhCdmJtVnVkQ3dnY205MWRHVXNJSE5sWjIxbGJuUXNYRzRnSUNBZ0lDQndZWFJvU1c1a1pYZ2dLeUJzWVhOMFEyaHBiR1FnTFNBeEtUdGNiaUFnWTI5dWMzUWdjMnhwWTJWa1VHRjBhQ0E5SUhCaGRHaHpMbk5zYVdObEtHeGhjM1JEYUdsc1pDazdYRzRnSUdOdmJuTjBJR05vYVd4a1EyOXVabWxuSUQwZ2NtOTFkR1V1WTJocGJHUnlaVzRnUHlCeWIzVjBaUzVqYUdsc1pISmxiaUE2SUZ0ZE8xeHVYRzRnSUdsbUlDaGphR2xzWkVOdmJtWnBaeTVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdjMnhwWTJWa1VHRjBhQzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGUnlaV1ZPYjJSbFBFRmpkR2wyWVhSbFpGSnZkWFJsVTI1aGNITm9iM1ErS0hOdVlYQnphRzkwTENCYlhTazdYRzVjYmlBZ0lDQXZMeUJVVDBSUE9pQmphR1ZqYXlCMGFHRjBJSFJvWlNCeWFXZG9kQ0J6WldkdFpXNTBJR2x6SUhCeVpYTmxiblJjYmlBZ2ZTQmxiSE5sSUdsbUlDaHpiR2xqWldSUVlYUm9MbXhsYm1kMGFDQTlQVDBnTUNBbUppQlBZbXBsWTNRdWEyVjVjeWh6WldkdFpXNTBMbU5vYVd4a2NtVnVLUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnWTI5dWMzUWdZMmhwYkdSeVpXNGdQU0J3Y205alpYTnpVMlZuYldWdWRFTm9hV3hrY21WdUtHTm9hV3hrUTI5dVptbG5MQ0J6WldkdFpXNTBLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlJ5WldWT2IyUmxQRUZqZEdsMllYUmxaRkp2ZFhSbFUyNWhjSE5vYjNRK0tITnVZWEJ6YUc5MExDQmphR2xzWkhKbGJpazdYRzVjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JqYjI1emRDQmphR2xzWkNBOUlIQnliMk5sYzNOUVlYUm9jMWRwZEdoUVlYSmhiWE1vWEc0Z0lDQWdJQ0FnSUdOb2FXeGtRMjl1Wm1sbkxDQnpaV2R0Wlc1MExDQndZWFJvU1c1a1pYZ2dLeUJzWVhOMFEyaHBiR1FzSUhOc2FXTmxaRkJoZEdnc0lGQlNTVTFCVWxsZlQxVlVURVZVS1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZSeVpXVk9iMlJsUEVGamRHbDJZWFJsWkZKdmRYUmxVMjVoY0hOb2IzUStLSE51WVhCemFHOTBMQ0JiWTJocGJHUmRLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYUmphQ2h6WldkdFpXNTBPaUJWY214VFpXZHRaVzUwTENCeWIzVjBaVG9nVW05MWRHVXNJSEJoZEdoek9pQlZjbXhRWVhSb1YybDBhRkJoY21GdGMxdGRLU0I3WEc0Z0lHbG1JQ2h5YjNWMFpTNXdZWFJvSUQwOVBTQW5KeWtnZTF4dUlDQWdJR2xtSUNoeWIzVjBaUzUwWlhKdGFXNWhiQ0FtSmlBb1QySnFaV04wTG10bGVYTW9jMlZuYldWdWRDNWphR2xzWkhKbGJpa3ViR1Z1WjNSb0lENGdNQ0I4ZkNCd1lYUm9jeTVzWlc1bmRHZ2dQaUF3S1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFNXZUV0YwWTJnb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSHRqYjI1emRXMWxaRkJoZEdoek9pQmJYU3dnYkdGemRFTm9hV3hrT2lBd0xDQndZWEpoYldWMFpYSnpPaUI3ZlgwN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnY0dGMGFDQTlJSEp2ZFhSbExuQmhkR2c3WEc0Z0lHTnZibk4wSUhCaGNuUnpJRDBnY0dGMGFDNXpjR3hwZENnbkx5Y3BPMXh1SUNCamIyNXpkQ0J3YjNOUVlYSmhiV1YwWlhKek9pQjdXMnRsZVRvZ2MzUnlhVzVuWFRvZ1lXNTVmU0E5SUh0OU8xeHVJQ0JqYjI1emRDQmpiMjV6ZFcxbFpGQmhkR2h6T2lCVmNteFFZWFJvVjJsMGFGQmhjbUZ0YzF0ZElEMGdXMTA3WEc1Y2JpQWdiR1YwSUdOMWNuSmxiblJKYm1SbGVDQTlJREE3WEc1Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J3WVhKMGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJR2xtSUNoamRYSnlaVzUwU1c1a1pYZ2dQajBnY0dGMGFITXViR1Z1WjNSb0tTQjBhSEp2ZHlCdVpYY2dUbTlOWVhSamFDZ3BPMXh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblFnUFNCd1lYUm9jMXRqZFhKeVpXNTBTVzVrWlhoZE8xeHVYRzRnSUNBZ1kyOXVjM1FnY0NBOUlIQmhjblJ6VzJsZE8xeHVJQ0FnSUdOdmJuTjBJR2x6VUc5elVHRnlZVzBnUFNCd0xuTjBZWEowYzFkcGRHZ29Kem9uS1R0Y2JseHVJQ0FnSUdsbUlDZ2hhWE5RYjNOUVlYSmhiU0FtSmlCd0lDRTlQU0JqZFhKeVpXNTBMbkJoZEdncElIUm9jbTkzSUc1bGR5Qk9iMDFoZEdOb0tDazdYRzRnSUNBZ2FXWWdLR2x6VUc5elVHRnlZVzBwSUh0Y2JpQWdJQ0FnSUhCdmMxQmhjbUZ0WlhSbGNuTmJjQzV6ZFdKemRISnBibWNvTVNsZElEMGdZM1Z5Y21WdWRDNXdZWFJvTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZFcxbFpGQmhkR2h6TG5CMWMyZ29ZM1Z5Y21WdWRDazdYRzRnSUNBZ1kzVnljbVZ1ZEVsdVpHVjRLeXM3WEc0Z0lIMWNibHh1SUNCcFppQW9jbTkxZEdVdWRHVnliV2x1WVd3Z0ppWWdLRTlpYW1WamRDNXJaWGx6S0hObFoyMWxiblF1WTJocGJHUnlaVzRwTG14bGJtZDBhQ0ErSURBZ2ZId2dZM1Z5Y21WdWRFbHVaR1Y0SUR3Z2NHRjBhSE11YkdWdVozUm9LU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJPYjAxaGRHTm9LQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0J3WVhKaGJXVjBaWEp6SUQwZ2JXVnlaMlVvY0c5elVHRnlZVzFsZEdWeWN5d2dZMjl1YzNWdFpXUlFZWFJvYzF0amIyNXpkVzFsWkZCaGRHaHpMbXhsYm1kMGFDQXRJREZkTG5CaGNtRnRaWFJsY25NcE8xeHVJQ0J5WlhSMWNtNGdlMk52Ym5OMWJXVmtVR0YwYUhNc0lHeGhjM1JEYUdsc1pEb2dZM1Z5Y21WdWRFbHVaR1Y0TENCd1lYSmhiV1YwWlhKemZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyaGxZMnRQZFhSc1pYUk9ZVzFsVlc1cGNYVmxibVZ6Y3lodWIyUmxjem9nVkhKbFpVNXZaR1U4UVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRENWJYU2s2SUhadmFXUWdlMXh1SUNCamIyNXpkQ0J1WVcxbGN6b2dlMXRyT2lCemRISnBibWRkT2lCQlkzUnBkbUYwWldSU2IzVjBaVk51WVhCemFHOTBmU0E5SUh0OU8xeHVJQ0J1YjJSbGN5NW1iM0pGWVdOb0tHNGdQVDRnZTF4dUlDQWdJR3hsZENCeWIzVjBaVmRwZEdoVFlXMWxUM1YwYkdWMFRtRnRaU0E5SUc1aGJXVnpXMjR1ZG1Gc2RXVXViM1YwYkdWMFhUdGNiaUFnSUNCcFppQW9jbTkxZEdWWGFYUm9VMkZ0WlU5MWRHeGxkRTVoYldVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhBZ1BTQnliM1YwWlZkcGRHaFRZVzFsVDNWMGJHVjBUbUZ0WlM1MWNtd3ViV0Z3S0hNZ1BUNGdjeTUwYjFOMGNtbHVaeWdwS1M1cWIybHVLQ2N2SnlrN1hHNGdJQ0FnSUNCamIyNXpkQ0JqSUQwZ2JpNTJZV3gxWlM1MWNtd3ViV0Z3S0hNZ1BUNGdjeTUwYjFOMGNtbHVaeWdwS1M1cWIybHVLQ2N2SnlrN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUZSM2J5QnpaV2R0Wlc1MGN5QmpZVzV1YjNRZ2FHRjJaU0IwYUdVZ2MyRnRaU0J2ZFhSc1pYUWdibUZ0WlRvZ0p5UjdjSDBuSUdGdVpDQW5KSHRqZlNjdVlDazdYRzRnSUNBZ2ZWeHVJQ0FnSUc1aGJXVnpXMjR1ZG1Gc2RXVXViM1YwYkdWMFhTQTlJRzR1ZG1Gc2RXVTdYRzRnSUgwcE8xeHVmU0pkZlE9PVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9yZWNvZ25pemUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvbWFwJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci90b1Byb21pc2UnKTtcbnZhciBmb3JrSm9pbl8xID0gcmVxdWlyZSgncnhqcy9vYnNlcnZhYmxlL2ZvcmtKb2luJyk7XG52YXIgZnJvbVByb21pc2VfMSA9IHJlcXVpcmUoJ3J4anMvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZScpO1xuZnVuY3Rpb24gcmVzb2x2ZShyZXNvbHZlciwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZU5vZGUocmVzb2x2ZXIsIHN0YXRlLl9yb290KS5tYXAoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIHN0YXRlOyB9KTtcbn1cbmV4cG9ydHMucmVzb2x2ZSA9IHJlc29sdmU7XG5mdW5jdGlvbiByZXNvbHZlTm9kZShyZXNvbHZlciwgbm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnJvbVByb21pc2VfMS5mcm9tUHJvbWlzZShyZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50KG5vZGUudmFsdWUuY29tcG9uZW50KS50aGVuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlLl9yZXNvbHZlZENvbXBvbmVudEZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBjID0gbm9kZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHJlc29sdmVOb2RlKHJlc29sdmVyLCBjKS50b1Byb21pc2UoKTsgfSk7XG4gICAgICAgIHJldHVybiBmb3JrSm9pbl8xLmZvcmtKb2luKGMpLm1hcChmdW5jdGlvbiAoXykgeyByZXR1cm4gcmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudChub2RlLnZhbHVlLmNvbXBvbmVudCkudGhlbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICAgICAgbm9kZS52YWx1ZS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgICAgICB9KTsgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY21WemIyeDJaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5eVpYTnZiSFpsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRU3hSUVVGUExIVkNRVUYxUWl4RFFVRkRMRU5CUVVFN1FVRkRMMElzVVVGQlR5dzJRa0ZCTmtJc1EwRkJReXhEUVVGQk8wRkJTWEpETEhsQ1FVRjFRaXd3UWtGQk1FSXNRMEZCUXl4RFFVRkJPMEZCUTJ4RUxEUkNRVUV3UWl3MlFrRkJOa0lzUTBGQlF5eERRVUZCTzBGQlMzaEVMR2xDUVVOSkxGRkJRVEpDTEVWQlFVVXNTMEZCTUVJN1NVRkRla1FzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRkJMRU5CUVVNc1NVRkJTU3hQUVVGQkxFdEJRVXNzUlVGQlRDeERRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTTFSQ3hEUVVGRE8wRkJTR1VzWlVGQlR5eFZRVWQwUWl4RFFVRkJPMEZCUlVRc2NVSkJRMGtzVVVGQk1rSXNSVUZCUlN4SlFVRnpRenRKUVVOeVJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXk5Q0xFMUJRVTBzUTBGQlF5eDVRa0ZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRTlCUVU4N1dVRkRiRVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4NVFrRkJlVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTTdXVUZETDBNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEY0VJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVZPTEVOQlFVTTdTVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOT0xFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVUVzUTBGQlF5eEpRVUZKTEU5QlFVRXNWMEZCVnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCY0VNc1EwRkJiME1zUTBGQlF5eERRVUZETzFGQlEzWkZMRTFCUVUwc1EwRkJReXh0UWtGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkRiRUlzVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVMHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4UFFVRlBPMWxCUTNCRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNlVUpCUVhsQ0xFZEJRVWNzVDBGQlR5eERRVUZETzFsQlF5OURMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEzQkNMRU5CUVVNc1EwRkJReXhGUVVoSExFTkJSMGdzUTBGQlF5eERRVUZETzBsQlExWXNRMEZCUXp0QlFVTklMRU5CUVVNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ0ozSjRhbk12WVdSa0wyOXdaWEpoZEc5eUwyMWhjQ2M3WEc1cGJYQnZjblFnSjNKNGFuTXZZV1JrTDI5d1pYSmhkRzl5TDNSdlVISnZiV2x6WlNjN1hHNWNibWx0Y0c5eWRDQjdRMjl0Y0c5dVpXNTBVbVZ6YjJ4MlpYSjlJR1p5YjIwZ0owQmhibWQxYkdGeUwyTnZjbVVuTzF4dWFXMXdiM0owSUh0UFluTmxjblpoWW14bGZTQm1jbTl0SUNkeWVHcHpMMDlpYzJWeWRtRmliR1VuTzF4dWFXMXdiM0owSUh0bWIzSnJTbTlwYm4wZ1puSnZiU0FuY25ocWN5OXZZbk5sY25aaFlteGxMMlp2Y210S2IybHVKenRjYm1sdGNHOXlkQ0I3Wm5KdmJWQnliMjFwYzJWOUlHWnliMjBnSjNKNGFuTXZiMkp6WlhKMllXSnNaUzltY205dFVISnZiV2x6WlNjN1hHNWNibWx0Y0c5eWRDQjdRV04wYVhaaGRHVmtVbTkxZEdWVGJtRndjMmh2ZEN3Z1VtOTFkR1Z5VTNSaGRHVlRibUZ3YzJodmRIMGdabkp2YlNBbkxpOXliM1YwWlhKZmMzUmhkR1VuTzF4dWFXMXdiM0owSUh0VWNtVmxUbTlrWlgwZ1puSnZiU0FuTGk5MWRHbHNjeTkwY21WbEp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVW9YRzRnSUNBZ2NtVnpiMngyWlhJNklFTnZiWEJ2Ym1WdWRGSmxjMjlzZG1WeUxDQnpkR0YwWlRvZ1VtOTFkR1Z5VTNSaGRHVlRibUZ3YzJodmRDazZJRTlpYzJWeWRtRmliR1U4VW05MWRHVnlVM1JoZEdWVGJtRndjMmh2ZEQ0Z2UxeHVJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpVNXZaR1VvY21WemIyeDJaWElzSUhOMFlYUmxMbDl5YjI5MEtTNXRZWEFvWHlBOVBpQnpkR0YwWlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZPYjJSbEtGeHVJQ0FnSUhKbGMyOXNkbVZ5T2lCRGIyMXdiMjVsYm5SU1pYTnZiSFpsY2l3Z2JtOWtaVG9nVkhKbFpVNXZaR1U4UVdOMGFYWmhkR1ZrVW05MWRHVlRibUZ3YzJodmRENHBPaUJQWW5ObGNuWmhZbXhsUEdGdWVUNGdlMXh1SUNCcFppQW9ibTlrWlM1amFHbHNaSEpsYmk1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1puSnZiVkJ5YjIxcGMyVW9jbVZ6YjJ4MlpYSXVjbVZ6YjJ4MlpVTnZiWEJ2Ym1WdWRDZzhZVzU1UG01dlpHVXVkbUZzZFdVdVkyOXRjRzl1Wlc1MEtTNTBhR1Z1S0daaFkzUnZjbmtnUFQ0Z2UxeHVJQ0FnSUNBZ2JtOWtaUzUyWVd4MVpTNWZjbVZ6YjJ4MlpXUkRiMjF3YjI1bGJuUkdZV04wYjNKNUlEMGdabUZqZEc5eWVUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWIyUmxMblpoYkhWbE8xeHVJQ0FnSUgwcEtUdGNibHh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR052Ym5OMElHTWdQU0J1YjJSbExtTm9hV3hrY21WdUxtMWhjQ2hqSUQwK0lISmxjMjlzZG1WT2IyUmxLSEpsYzI5c2RtVnlMQ0JqS1M1MGIxQnliMjFwYzJVb0tTazdYRzRnSUNBZ2NtVjBkWEp1SUdadmNtdEtiMmx1S0dNcExtMWhjQ2hjYmlBZ0lDQWdJQ0FnWHlBOVBpQnlaWE52YkhabGNpNXlaWE52YkhabFEyOXRjRzl1Wlc1MEtEeGhibmsrYm05a1pTNTJZV3gxWlM1amIyMXdiMjVsYm5RcExuUm9aVzRvWm1GamRHOXllU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdibTlrWlM1MllXeDFaUzVmY21WemIyeDJaV1JEYjIxd2IyNWxiblJHWVdOMGIzSjVJRDBnWm1GamRHOXllVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm05a1pTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNCOVhHNTlJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3Jlc29sdmUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uLy4uL09ic2VydmFibGUnKTtcbnZhciB0b1Byb21pc2VfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL3RvUHJvbWlzZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IHRvUHJvbWlzZV8xLnRvUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHJvbWlzZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL2FkZC9vcGVyYXRvci90b1Byb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIFByb21pc2VPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL1Byb21pc2VPYnNlcnZhYmxlJyk7XG5leHBvcnRzLmZyb21Qcm9taXNlID0gUHJvbWlzZU9ic2VydmFibGVfMS5Qcm9taXNlT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tUHJvbWlzZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL29ic2VydmFibGUvZnJvbVByb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIFJvdXRlck91dGxldE1hcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyT3V0bGV0TWFwKCkge1xuICAgICAgICB0aGlzLl9vdXRsZXRzID0ge307XG4gICAgfVxuICAgIFJvdXRlck91dGxldE1hcC5wcm90b3R5cGUucmVnaXN0ZXJPdXRsZXQgPSBmdW5jdGlvbiAobmFtZSwgb3V0bGV0KSB7IHRoaXMuX291dGxldHNbbmFtZV0gPSBvdXRsZXQ7IH07XG4gICAgcmV0dXJuIFJvdXRlck91dGxldE1hcDtcbn0oKSk7XG5leHBvcnRzLlJvdXRlck91dGxldE1hcCA9IFJvdXRlck91dGxldE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z5WDI5MWRHeGxkRjl0WVhBdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZjbTkxZEdWeVgyOTFkR3hsZEY5dFlYQXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVV0Qk8wbEJRVUU3VVVGRlJTeGhRVUZSTEVkQlFXMURMRVZCUVVVc1EwRkJRenRKUVVWb1JDeERRVUZETzBsQlJFTXNkME5CUVdNc1IwRkJaQ3hWUVVGbExFbEJRVmtzUlVGQlJTeE5RVUZ2UWl4SlFVRlZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNMVJpeHpRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRktSQ3hKUVVsRE8wRkJTbGtzZFVKQlFXVXNhMEpCU1ROQ0xFTkJRVUVpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZTFKdmRYUmxjazkxZEd4bGRIMGdabkp2YlNBbkxpOWthWEpsWTNScGRtVnpMM0p2ZFhSbGNsOXZkWFJzWlhRbk8xeHVYRzR2S2lwY2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVW05MWRHVnlUM1YwYkdWMFRXRndJSHRjYmlBZ0x5b3FJRUJwYm5SbGNtNWhiQ0FxTDF4dUlDQmZiM1YwYkdWMGN6b2dlMXR1WVcxbE9pQnpkSEpwYm1kZE9pQlNiM1YwWlhKUGRYUnNaWFI5SUQwZ2UzMDdYRzRnSUhKbFoybHpkR1Z5VDNWMGJHVjBLRzVoYldVNklITjBjbWx1Wnl3Z2IzVjBiR1YwT2lCU2IzVjBaWEpQZFhSc1pYUXBPaUIyYjJsa0lIc2dkR2hwY3k1ZmIzVjBiR1YwYzF0dVlXMWxYU0E5SUc5MWRHeGxkRHNnZlZ4dWZWeHVJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3JvdXRlcl9vdXRsZXRfbWFwLmpzXG4gKiogbW9kdWxlIGlkID0gNDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnLi4vcm91dGVyJyk7XG52YXIgdXJsX3RyZWVfMSA9IHJlcXVpcmUoJy4uL3VybF90cmVlJyk7XG52YXIgcm91dGVyX2xpbmtfMSA9IHJlcXVpcmUoJy4vcm91dGVyX2xpbmsnKTtcbnZhciBSb3V0ZXJMaW5rQWN0aXZlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSb3V0ZXJMaW5rQWN0aXZlKHJvdXRlciwgZWxlbWVudCwgcmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5jbGFzc2VzID0gW107XG4gICAgICAgIHRoaXMucm91dGVyTGlua0FjdGl2ZU9wdGlvbnMgPSB7IGV4YWN0OiB0cnVlIH07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIGlmIChzIGluc3RhbmNlb2Ygcm91dGVyXzEuTmF2aWdhdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgUm91dGVyTGlua0FjdGl2ZS5wcm90b3R5cGUubmdBZnRlckNvbnRlbnRJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmxpbmtzLmNoYW5nZXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy51cGRhdGUoKTsgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm91dGVyTGlua0FjdGl2ZS5wcm90b3R5cGUsIFwicm91dGVyTGlua0FjdGl2ZVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc2VzID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NlcyA9IGRhdGEuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgUm91dGVyTGlua0FjdGl2ZS5wcm90b3R5cGUubmdPbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykgeyB0aGlzLnVwZGF0ZSgpOyB9O1xuICAgIFJvdXRlckxpbmtBY3RpdmUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgIFJvdXRlckxpbmtBY3RpdmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmxpbmtzIHx8IHRoaXMubGlua3MubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgY3VycmVudFVybFRyZWUgPSB0aGlzLnJvdXRlci5wYXJzZVVybCh0aGlzLnJvdXRlci51cmwpO1xuICAgICAgICB2YXIgaXNBY3RpdmUgPSB0aGlzLmxpbmtzLnJlZHVjZShmdW5jdGlvbiAocmVzLCBsaW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzIHx8IHVybF90cmVlXzEuY29udGFpbnNUcmVlKGN1cnJlbnRVcmxUcmVlLCBsaW5rLnVybFRyZWUsIF90aGlzLnJvdXRlckxpbmtBY3RpdmVPcHRpb25zLmV4YWN0KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gX3RoaXMucmVuZGVyZXIuc2V0RWxlbWVudENsYXNzKF90aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgYywgaXNBY3RpdmUpOyB9KTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuQ29udGVudENoaWxkcmVuKHJvdXRlcl9saW5rXzEuUm91dGVyTGluayksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIGNvcmVfMS5RdWVyeUxpc3QpXG4gICAgXSwgUm91dGVyTGlua0FjdGl2ZS5wcm90b3R5cGUsIFwibGlua3NcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLklucHV0KCksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246dHlwZScsIE9iamVjdClcbiAgICBdLCBSb3V0ZXJMaW5rQWN0aXZlLnByb3RvdHlwZSwgXCJyb3V0ZXJMaW5rQWN0aXZlT3B0aW9uc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgT2JqZWN0KSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdF0pXG4gICAgXSwgUm91dGVyTGlua0FjdGl2ZS5wcm90b3R5cGUsIFwicm91dGVyTGlua0FjdGl2ZVwiLCBudWxsKTtcbiAgICBSb3V0ZXJMaW5rQWN0aXZlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rQWN0aXZlXScgfSksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtyb3V0ZXJfMS5Sb3V0ZXIsIGNvcmVfMS5FbGVtZW50UmVmLCBjb3JlXzEuUmVuZGVyZXJdKVxuICAgIF0sIFJvdXRlckxpbmtBY3RpdmUpO1xuICAgIHJldHVybiBSb3V0ZXJMaW5rQWN0aXZlO1xufSgpKTtcbmV4cG9ydHMuUm91dGVyTGlua0FjdGl2ZSA9IFJvdXRlckxpbmtBY3RpdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeVgyeHBibXRmWVdOMGFYWmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyUnBjbVZqZEdsMlpYTXZjbTkxZEdWeVgyeHBibXRmWVdOMGFYWmxMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFTeHhRa0ZCZVVnc1pVRkJaU3hEUVVGRExFTkJRVUU3UVVGSGVra3NkVUpCUVc5RExGZEJRVmNzUTBGQlF5eERRVUZCTzBGQlEyaEVMSGxDUVVFeVFpeGhRVUZoTEVOQlFVTXNRMEZCUVR0QlFVVjZReXcwUWtGQmVVSXNaVUZCWlN4RFFVRkRMRU5CUVVFN1FVRlBla003U1VGVlJTd3dRa0ZCYjBJc1RVRkJZeXhGUVVGVkxFOUJRVzFDTEVWQlFWVXNVVUZCYTBJN1VVRldOMFlzYVVKQkswTkRPMUZCY2tOeFFpeFhRVUZOTEVkQlFVNHNUVUZCVFN4RFFVRlJPMUZCUVZVc1dVRkJUeXhIUVVGUUxFOUJRVThzUTBGQldUdFJRVUZWTEdGQlFWRXNSMEZCVWl4UlFVRlJMRU5CUVZVN1VVRlNia1lzV1VGQlR5eEhRVUZoTEVWQlFVVXNRMEZCUXp0UlFVZGtMRFJDUVVGMVFpeEhRVUUwUWl4RlFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVU1zUTBGQlF6dFJRVTFvUml4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVVFc1EwRkJRenRaUVVNelF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc2MwSkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXk5Q0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0WlFVTm9RaXhEUVVGRE8xRkJRMGdzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRc05rTkJRV3RDTEVkQlFXeENPMUZCUVVFc2FVSkJSME03VVVGR1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4TFFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRV0lzUTBGQllTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkhSQ3h6UWtGQlNTdzRRMEZCWjBJN1lVRkJjRUlzVlVGQmNVSXNTVUZCY1VJN1dVRkRlRU1zUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFWRXNTVUZCU1N4RFFVRkRPMWxCUXpOQ0xFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRUaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGFrTXNRMEZCUXp0UlFVTklMRU5CUVVNN096dFBRVUZCTzBsQlJVUXNjME5CUVZjc1IwRkJXQ3hWUVVGWkxFOUJRVmNzU1VGQlV5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMmhFTEhORFFVRlhMRWRCUVZnc1kwRkJjVUlzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRkwwTXNhVU5CUVUwc1IwRkJaRHRSUVVGQkxHbENRVmRETzFGQlZrTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUTBGQlF6dFpRVUZETEUxQlFVMHNRMEZCUXp0UlFVVnVSQ3hKUVVGTkxHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUXpkRUxFbEJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVNNVFpeFZRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpPMWxCUTA0c1QwRkJRU3hIUVVGSExFbEJRVWtzZFVKQlFWa3NRMEZCUXl4alFVRmpMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeExRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUzBGQlN5eERRVUZETzFGQlFYSkdMRU5CUVhGR0xFVkJRM3BHTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlZnc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlEyaENMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUzBGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJReXhGUVVGMFJTeERRVUZ6UlN4RFFVRkRMRU5CUVVNN1NVRkRia1lzUTBGQlF6dEpRVGREUkR0UlFVRkRMSE5DUVVGbExFTkJRVU1zZDBKQlFWVXNRMEZCUXpzN2JVUkJRVUU3U1VGSk5VSTdVVUZCUXl4WlFVRkxMRVZCUVVVN08zRkZRVUZCTzBsQmEwSlNPMUZCUVVNc1dVRkJTeXhGUVVGRk96czdORVJCUVVFN1NVRjRRbFk3VVVGQlF5eG5Ra0ZCVXl4RFFVRkRMRVZCUVVNc1VVRkJVU3hGUVVGRkxHOUNRVUZ2UWl4RlFVRkRMRU5CUVVNN08zZENRVUZCTzBsQlowUTFReXgxUWtGQlF6dEJRVUZFTEVOQlFVTXNRVUV2UTBRc1NVRXJRME03UVVFdlExa3NkMEpCUVdkQ0xHMUNRU3RETlVJc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3UVdaMFpYSkRiMjUwWlc1MFNXNXBkQ3dnUTI5dWRHVnVkRU5vYVd4a2NtVnVMQ0JFYVhKbFkzUnBkbVVzSUVWc1pXMWxiblJTWldZc0lFbHVjSFYwTENCUGJrTm9ZVzVuWlhNc0lFOXVSR1Z6ZEhKdmVTd2dVWFZsY25sTWFYTjBMQ0JTWlc1a1pYSmxjbjBnWm5KdmJTQW5RR0Z1WjNWc1lYSXZZMjl5WlNjN1hHNXBiWEJ2Y25RZ2UxTjFZbk5qY21sd2RHbHZibjBnWm5KdmJTQW5jbmhxY3k5VGRXSnpZM0pwY0hScGIyNG5PMXh1WEc1cGJYQnZjblFnZTA1aGRtbG5ZWFJwYjI1RmJtUXNJRkp2ZFhSbGNuMGdabkp2YlNBbkxpNHZjbTkxZEdWeUp6dGNibWx0Y0c5eWRDQjdZMjl1ZEdGcGJuTlVjbVZsZlNCbWNtOXRJQ2N1TGk5MWNteGZkSEpsWlNjN1hHNWNibWx0Y0c5eWRDQjdVbTkxZEdWeVRHbHVhMzBnWm5KdmJTQW5MaTl5YjNWMFpYSmZiR2x1YXljN1hHNWNibWx1ZEdWeVptRmpaU0JTYjNWMFpYSk1hVzVyUVdOMGFYWmxUM0IwYVc5dWN5QjdYRzRnSUdWNFlXTjBPaUJpYjI5c1pXRnVPMXh1ZlZ4dVhHNUFSR2x5WldOMGFYWmxLSHR6Wld4bFkzUnZjam9nSjF0eWIzVjBaWEpNYVc1clFXTjBhWFpsWFNkOUtWeHVaWGh3YjNKMElHTnNZWE56SUZKdmRYUmxja3hwYm10QlkzUnBkbVVnYVcxd2JHVnRaVzUwY3lCUGJrTm9ZVzVuWlhNc0lFOXVSR1Z6ZEhKdmVTd2dRV1owWlhKRGIyNTBaVzUwU1c1cGRDQjdYRzRnSUVCRGIyNTBaVzUwUTJocGJHUnlaVzRvVW05MWRHVnlUR2x1YXlrZ2NISnBkbUYwWlNCc2FXNXJjem9nVVhWbGNubE1hWE4wUEZKdmRYUmxja3hwYm1zK08xeHVJQ0J3Y21sMllYUmxJR05zWVhOelpYTTZJSE4wY21sdVoxdGRJRDBnVzEwN1hHNGdJSEJ5YVhaaGRHVWdjM1ZpYzJOeWFYQjBhVzl1T2lCVGRXSnpZM0pwY0hScGIyNDdYRzVjYmlBZ1FFbHVjSFYwS0NrZ2NISnBkbUYwWlNCeWIzVjBaWEpNYVc1clFXTjBhWFpsVDNCMGFXOXVjem9nVW05MWRHVnlUR2x1YTBGamRHbDJaVTl3ZEdsdmJuTWdQU0I3WlhoaFkzUTZJSFJ5ZFdWOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLSEJ5YVhaaGRHVWdjbTkxZEdWeU9pQlNiM1YwWlhJc0lIQnlhWFpoZEdVZ1pXeGxiV1Z1ZERvZ1JXeGxiV1Z1ZEZKbFppd2djSEpwZG1GMFpTQnlaVzVrWlhKbGNqb2dVbVZ1WkdWeVpYSXBJSHRjYmlBZ0lDQjBhR2x6TG5OMVluTmpjbWx3ZEdsdmJpQTlJSEp2ZFhSbGNpNWxkbVZ1ZEhNdWMzVmljMk55YVdKbEtITWdQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tITWdhVzV6ZEdGdVkyVnZaaUJPWVhacFoyRjBhVzl1Ulc1a0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQnVaMEZtZEdWeVEyOXVkR1Z1ZEVsdWFYUW9LVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTVzYVc1cmN5NWphR0Z1WjJWekxuTjFZbk5qY21saVpTaHpJRDArSUhSb2FYTXVkWEJrWVhSbEtDa3BPMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxLQ2s3WEc0Z0lIMWNibHh1SUNCQVNXNXdkWFFvS1Z4dUlDQnpaWFFnY205MWRHVnlUR2x1YTBGamRHbDJaU2hrWVhSaE9pQnpkSEpwYm1kYlhYeHpkSEpwYm1jcElIdGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoa1lYUmhLU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWpiR0Z6YzJWeklEMGdQR0Z1ZVQ1a1lYUmhPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbU5zWVhOelpYTWdQU0JrWVhSaExuTndiR2wwS0NjZ0p5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdibWRQYmtOb1lXNW5aWE1vWTJoaGJtZGxjem9nZTMwcE9pQmhibmtnZXlCMGFHbHpMblZ3WkdGMFpTZ3BPeUI5WEc0Z0lHNW5UMjVFWlhOMGNtOTVLQ2s2SUdGdWVTQjdJSFJvYVhNdWMzVmljMk55YVhCMGFXOXVMblZ1YzNWaWMyTnlhV0psS0NrN0lIMWNibHh1SUNCd2NtbDJZWFJsSUhWd1pHRjBaU2dwT2lCMmIybGtJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXViR2x1YTNNZ2ZId2dkR2hwY3k1c2FXNXJjeTVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUlZjbXhVY21WbElEMGdkR2hwY3k1eWIzVjBaWEl1Y0dGeWMyVlZjbXdvZEdocGN5NXliM1YwWlhJdWRYSnNLVHRjYmlBZ0lDQmpiMjV6ZENCcGMwRmpkR2wyWlNBOUlIUm9hWE11YkdsdWEzTXVjbVZrZFdObEtGeHVJQ0FnSUNBZ0lDQW9jbVZ6TENCc2FXNXJLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUh4OElHTnZiblJoYVc1elZISmxaU2hqZFhKeVpXNTBWWEpzVkhKbFpTd2diR2x1YXk1MWNteFVjbVZsTENCMGFHbHpMbkp2ZFhSbGNreHBibXRCWTNScGRtVlBjSFJwYjI1ekxtVjRZV04wS1N4Y2JpQWdJQ0FnSUNBZ1ptRnNjMlVwTzF4dVhHNGdJQ0FnZEdocGN5NWpiR0Z6YzJWekxtWnZja1ZoWTJnb1hHNGdJQ0FnSUNBZ0lHTWdQVDRnZEdocGN5NXlaVzVrWlhKbGNpNXpaWFJGYkdWdFpXNTBRMnhoYzNNb2RHaHBjeTVsYkdWdFpXNTBMbTVoZEdsMlpVVnNaVzFsYm5Rc0lHTXNJR2x6UVdOMGFYWmxLU2s3WEc0Z0lIMWNibjFjYmlKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvZGlyZWN0aXZlcy9yb3V0ZXJfbGlua19hY3RpdmUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciByb3V0ZXJfb3V0bGV0X21hcF8xID0gcmVxdWlyZSgnLi4vcm91dGVyX291dGxldF9tYXAnKTtcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4uL3NoYXJlZCcpO1xudmFyIFJvdXRlck91dGxldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyT3V0bGV0KHBhcmVudE91dGxldE1hcCwgbG9jYXRpb24sIG5hbWUpIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICBwYXJlbnRPdXRsZXRNYXAucmVnaXN0ZXJPdXRsZXQobmFtZSA/IG5hbWUgOiBzaGFyZWRfMS5QUklNQVJZX09VVExFVCwgdGhpcyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSb3V0ZXJPdXRsZXQucHJvdG90eXBlLCBcImlzQWN0aXZhdGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAhIXRoaXMuYWN0aXZhdGVkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm91dGVyT3V0bGV0LnByb3RvdHlwZSwgXCJjb21wb25lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmF0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVkLmluc3RhbmNlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm91dGVyT3V0bGV0LnByb3RvdHlwZSwgXCJhY3RpdmF0ZWRSb3V0ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2YXRlZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZhdGVkUm91dGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFJvdXRlck91dGxldC5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlZC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJvdXRlck91dGxldC5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoZmFjdG9yeSwgYWN0aXZhdGVkUm91dGUsIHByb3ZpZGVycywgb3V0bGV0TWFwKSB7XG4gICAgICAgIHRoaXMub3V0bGV0TWFwID0gb3V0bGV0TWFwO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xuICAgICAgICB2YXIgaW5qID0gY29yZV8xLlJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocHJvdmlkZXJzLCB0aGlzLmxvY2F0aW9uLnBhcmVudEluamVjdG9yKTtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZWQgPSB0aGlzLmxvY2F0aW9uLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCB0aGlzLmxvY2F0aW9uLmxlbmd0aCwgaW5qLCBbXSk7XG4gICAgfTtcbiAgICBSb3V0ZXJPdXRsZXQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkRpcmVjdGl2ZSh7IHNlbGVjdG9yOiAncm91dGVyLW91dGxldCcgfSksXG4gICAgICAgIF9fcGFyYW0oMiwgY29yZV8xLkF0dHJpYnV0ZSgnbmFtZScpKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JvdXRlcl9vdXRsZXRfbWFwXzEuUm91dGVyT3V0bGV0TWFwLCBjb3JlXzEuVmlld0NvbnRhaW5lclJlZiwgU3RyaW5nXSlcbiAgICBdLCBSb3V0ZXJPdXRsZXQpO1xuICAgIHJldHVybiBSb3V0ZXJPdXRsZXQ7XG59KCkpO1xuZXhwb3J0cy5Sb3V0ZXJPdXRsZXQgPSBSb3V0ZXJPdXRsZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeVgyOTFkR3hsZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTlrYVhKbFkzUnBkbVZ6TDNKdmRYUmxjbDl2ZFhSc1pYUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3p0QlFVRkJMSEZDUVVGeFNTeGxRVUZsTEVOQlFVTXNRMEZCUVR0QlFVTnlTaXhyUTBGQk9FSXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdEJRVVZ5UkN4MVFrRkJOa0lzVjBGQlZ5eERRVUZETEVOQlFVRTdRVUZIZWtNN1NVRlJSU3h6UWtGRFNTeGxRVUZuUXl4RlFVRlZMRkZCUVRCQ0xFVkJRMnBFTEVsQlFWazdVVUZFVnl4aFFVRlJMRWRCUVZJc1VVRkJVU3hEUVVGclFqdFJRVVYwUlN4bFFVRmxMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NkVUpCUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU55UlN4RFFVRkRPMGxCUlVRc2MwSkJRVWtzY1VOQlFWYzdZVUZCWml4alFVRTJRaXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE96czdUMEZCUVR0SlFVTjJSQ3h6UWtGQlNTeHRRMEZCVXp0aFFVRmlPMWxCUTBVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMmRDUVVGRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6dFpRVU5vUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTTdVVUZEYWtNc1EwRkJRenM3TzA5QlFVRTdTVUZEUkN4elFrRkJTU3gzUTBGQll6dGhRVUZzUWp0WlFVTkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXp0blFrRkJReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEhsQ1FVRjVRaXhEUVVGRExFTkJRVU03V1VGRGFFVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU03VVVGRE9VSXNRMEZCUXpzN08wOUJRVUU3U1VGRlJDeHBRMEZCVlN4SFFVRldPMUZCUTBVc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRia0lzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRaUVVONlFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVONFFpeERRVUZETzBsQlEwZ3NRMEZCUXp0SlFVVkVMQ3RDUVVGUkxFZEJRVklzVlVGRFNTeFBRVUU0UWl4RlFVRkZMR05CUVRoQ0xFVkJRemxFTEZOQlFYVkRMRVZCUVVVc1UwRkJNRUk3VVVGRGNrVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhqUVVGakxFTkJRVU03VVVGRGRFTXNTVUZCVFN4SFFVRkhMRWRCUVVjc2VVSkJRV3RDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03VVVGRE9VWXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRM3BHTEVOQlFVTTdTVUYyUTBnN1VVRkJReXhuUWtGQlV5eERRVUZETEVWQlFVTXNVVUZCVVN4RlFVRkZMR1ZCUVdVc1JVRkJReXhEUVVGRE8yMUNRVmRvUXl4blFrRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF6czdiMEpCV0dVN1NVRjNRM1pETEcxQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVhaRFJDeEpRWFZEUXp0QlFYWkRXU3h2UWtGQldTeGxRWFZEZUVJc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3UVhSMGNtbGlkWFJsTENCRGIyMXdiMjVsYm5SR1lXTjBiM0o1TENCRGIyMXdiMjVsYm5SU1pXWXNJRVJwY21WamRHbDJaU3dnVW1WbWJHVmpkR2wyWlVsdWFtVmpkRzl5TENCU1pYTnZiSFpsWkZKbFpteGxZM1JwZG1WUWNtOTJhV1JsY2l3Z1ZtbGxkME52Ym5SaGFXNWxjbEpsWm4wZ1puSnZiU0FuUUdGdVozVnNZWEl2WTI5eVpTYzdYRzVwYlhCdmNuUWdlMUp2ZFhSbGNrOTFkR3hsZEUxaGNIMGdabkp2YlNBbkxpNHZjbTkxZEdWeVgyOTFkR3hsZEY5dFlYQW5PMXh1YVcxd2IzSjBJSHRCWTNScGRtRjBaV1JTYjNWMFpYMGdabkp2YlNBbkxpNHZjbTkxZEdWeVgzTjBZWFJsSnp0Y2JtbHRjRzl5ZENCN1VGSkpUVUZTV1Y5UFZWUk1SVlI5SUdaeWIyMGdKeTR1TDNOb1lYSmxaQ2M3WEc1Y2JrQkVhWEpsWTNScGRtVW9lM05sYkdWamRHOXlPaUFuY205MWRHVnlMVzkxZEd4bGRDZDlLVnh1Wlhod2IzSjBJR05zWVhOeklGSnZkWFJsY2s5MWRHeGxkQ0I3WEc0Z0lIQnlhWFpoZEdVZ1lXTjBhWFpoZEdWa09pQkRiMjF3YjI1bGJuUlNaV1k4WVc1NVBqdGNiaUFnY0hKcGRtRjBaU0JmWVdOMGFYWmhkR1ZrVW05MWRHVTZJRUZqZEdsMllYUmxaRkp2ZFhSbE8xeHVJQ0J3ZFdKc2FXTWdiM1YwYkdWMFRXRndPaUJTYjNWMFpYSlBkWFJzWlhSTllYQTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0J3WVhKbGJuUlBkWFJzWlhSTllYQTZJRkp2ZFhSbGNrOTFkR3hsZEUxaGNDd2djSEpwZG1GMFpTQnNiMk5oZEdsdmJqb2dWbWxsZDBOdmJuUmhhVzVsY2xKbFppeGNiaUFnSUNBZ0lFQkJkSFJ5YVdKMWRHVW9KMjVoYldVbktTQnVZVzFsT2lCemRISnBibWNwSUh0Y2JpQWdJQ0J3WVhKbGJuUlBkWFJzWlhSTllYQXVjbVZuYVhOMFpYSlBkWFJzWlhRb2JtRnRaU0EvSUc1aGJXVWdPaUJRVWtsTlFWSlpYMDlWVkV4RlZDd2dkR2hwY3lrN1hHNGdJSDFjYmx4dUlDQm5aWFFnYVhOQlkzUnBkbUYwWldRb0tUb2dZbTl2YkdWaGJpQjdJSEpsZEhWeWJpQWhJWFJvYVhNdVlXTjBhWFpoZEdWa095QjlYRzRnSUdkbGRDQmpiMjF3YjI1bGJuUW9LVG9nVDJKcVpXTjBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVZV04wYVhaaGRHVmtLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDkxZEd4bGRDQnBjeUJ1YjNRZ1lXTjBhWFpoZEdWa0p5azdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZV04wYVhaaGRHVmtMbWx1YzNSaGJtTmxPMXh1SUNCOVhHNGdJR2RsZENCaFkzUnBkbUYwWldSU2IzVjBaU2dwT2lCQlkzUnBkbUYwWldSU2IzVjBaU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbUZqZEdsMllYUmxaQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RQZFhSc1pYUWdhWE1nYm05MElHRmpkR2wyWVhSbFpDY3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloWTNScGRtRjBaV1JTYjNWMFpUdGNiaUFnZlZ4dVhHNGdJR1JsWVdOMGFYWmhkR1VvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZV04wYVhaaGRHVmtLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtRmpkR2wyWVhSbFpDNWtaWE4wY205NUtDazdYRzRnSUNBZ0lDQjBhR2x6TG1GamRHbDJZWFJsWkNBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWVdOMGFYWmhkR1VvWEc0Z0lDQWdJQ0JtWVdOMGIzSjVPaUJEYjIxd2IyNWxiblJHWVdOMGIzSjVQR0Z1ZVQ0c0lHRmpkR2wyWVhSbFpGSnZkWFJsT2lCQlkzUnBkbUYwWldSU2IzVjBaU3hjYmlBZ0lDQWdJSEJ5YjNacFpHVnljem9nVW1WemIyeDJaV1JTWldac1pXTjBhWFpsVUhKdmRtbGtaWEpiWFN3Z2IzVjBiR1YwVFdGd09pQlNiM1YwWlhKUGRYUnNaWFJOWVhBcE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxtOTFkR3hsZEUxaGNDQTlJRzkxZEd4bGRFMWhjRHRjYmlBZ0lDQjBhR2x6TGw5aFkzUnBkbUYwWldSU2IzVjBaU0E5SUdGamRHbDJZWFJsWkZKdmRYUmxPMXh1SUNBZ0lHTnZibk4wSUdsdWFpQTlJRkpsWm14bFkzUnBkbVZKYm1wbFkzUnZjaTVtY205dFVtVnpiMngyWldSUWNtOTJhV1JsY25Nb2NISnZkbWxrWlhKekxDQjBhR2x6TG14dlkyRjBhVzl1TG5CaGNtVnVkRWx1YW1WamRHOXlLVHRjYmlBZ0lDQjBhR2x6TG1GamRHbDJZWFJsWkNBOUlIUm9hWE11Ykc5allYUnBiMjR1WTNKbFlYUmxRMjl0Y0c5dVpXNTBLR1poWTNSdmNua3NJSFJvYVhNdWJHOWpZWFJwYjI0dWJHVnVaM1JvTENCcGJtb3NJRnRkS1R0Y2JpQWdmVnh1ZlZ4dUlsMTlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvZGlyZWN0aXZlcy9yb3V0ZXJfb3V0bGV0LmpzXG4gKiogbW9kdWxlIGlkID0gNDE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvbW1vbicpO1xudmFyIHBsYXRmb3JtX2Jyb3dzZXJfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbl9yb3V0ZXJfcHJvdmlkZXJzJyk7XG5mdW5jdGlvbiBwcm92aWRlUm91dGVyKGNvbmZpZywgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgeyBwcm92aWRlOiBjb21tb25fMS5QbGF0Zm9ybUxvY2F0aW9uLCB1c2VDbGFzczogcGxhdGZvcm1fYnJvd3Nlcl8xLkJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uIH1cbiAgICBdLmNvbmNhdChjb21tb24ucHJvdmlkZVJvdXRlcihjb25maWcsIG9wdHMpKTtcbn1cbmV4cG9ydHMucHJvdmlkZVJvdXRlciA9IHByb3ZpZGVSb3V0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljbTkxZEdWeVgzQnliM1pwWkdWeWN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl5YjNWMFpYSmZjSEp2ZG1sa1pYSnpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFTeDFRa0ZCSzBJc2FVSkJRV2xDTEVOQlFVTXNRMEZCUVR0QlFVTnFSQ3hwUTBGQmMwTXNNa0pCUVRKQ0xFTkJRVU1zUTBGQlFUdEJRVVZzUlN4SlFVRlpMRTFCUVUwc1YwRkJUU3d5UWtGQk1rSXNRMEZCUXl4RFFVRkJPMEZCYzBKd1JDeDFRa0ZCT0VJc1RVRkJiMElzUlVGQlJTeEpRVUU0UWp0SlFVRTVRaXh2UWtGQk9FSXNSMEZCT1VJc1UwRkJPRUk3U1VGRGFFWXNUVUZCVFN4RFFVRkRPMUZCUTB3c1JVRkJReXhQUVVGUExFVkJRVVVzZVVKQlFXZENMRVZCUVVVc1VVRkJVU3hGUVVGRkxEQkRRVUYxUWl4RlFVRkRPMkZCUXpORUxFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVOMFF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFVeGxMSEZDUVVGaExHZENRVXMxUWl4RFFVRkJJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHRRYkdGMFptOXliVXh2WTJGMGFXOXVmU0JtY205dElDZEFZVzVuZFd4aGNpOWpiMjF0YjI0bk8xeHVhVzF3YjNKMElIdENjbTkzYzJWeVVHeGhkR1p2Y20xTWIyTmhkR2x2Ym4wZ1puSnZiU0FuUUdGdVozVnNZWEl2Y0d4aGRHWnZjbTB0WW5KdmQzTmxjaWM3WEc1Y2JtbHRjRzl5ZENBcUlHRnpJR052YlcxdmJpQm1jbTl0SUNjdUwyTnZiVzF2Ymw5eWIzVjBaWEpmY0hKdmRtbGtaWEp6Snp0Y2JtbHRjRzl5ZENCN1VtOTFkR1Z5UTI5dVptbG5mU0JtY205dElDY3VMMk52Ym1acFp5YzdYRzVjYmx4dUx5b3FYRzRnS2lCQklHeHBjM1FnYjJZZ2UwQnNhVzVySUZCeWIzWnBaR1Z5ZlhNdUlGUnZJSFZ6WlNCMGFHVWdjbTkxZEdWeUxDQjViM1VnYlhWemRDQmhaR1FnZEdocGN5QjBieUI1YjNWeUlHRndjR3hwWTJGMGFXOXVMbHh1SUNwY2JpQXFJQ01qSXlCRmVHRnRjR3hsWEc0Z0tseHVJQ29nWUdCZ1hHNGdLaUJBUTI5dGNHOXVaVzUwS0h0a2FYSmxZM1JwZG1Wek9pQmJVazlWVkVWU1gwUkpVa1ZEVkVsV1JWTmRmU2xjYmlBcUlHTnNZWE56SUVGd2NFTnRjQ0I3WEc0Z0tpQWdJQzh2SUM0dUxseHVJQ29nZlZ4dUlDcGNiaUFxSUdOdmJuTjBJSEp2ZFhSbGNpQTlJRnRjYmlBcUlDQWdlM0JoZEdnNklDY3ZhRzl0WlNjc0lHTnZiWEJ2Ym1WdWREb2dTRzl0WlgxY2JpQXFJRjA3WEc0Z0tseHVJQ29nWW05dmRITjBjbUZ3S0VGd2NFTnRjQ3dnVzNCeWIzWnBaR1ZTYjNWMFpYSW9jbTkxZEdWeUtWMHBPMXh1SUNvZ1lHQmdYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtOTJhV1JsVW05MWRHVnlLR052Ym1acFp6b2dVbTkxZEdWeVEyOXVabWxuTENCdmNIUnpPaUJqYjIxdGIyNHVSWGgwY21GUGNIUnBiMjV6SUQwZ2UzMHBPaUJoYm5sYlhTQjdYRzRnSUhKbGRIVnliaUJiWEc0Z0lDQWdlM0J5YjNacFpHVTZJRkJzWVhSbWIzSnRURzlqWVhScGIyNHNJSFZ6WlVOc1lYTnpPaUJDY205M2MyVnlVR3hoZEdadmNtMU1iMk5oZEdsdmJuMHNYRzRnSUNBZ0xpNHVZMjl0Ylc5dUxuQnliM1pwWkdWU2IzVjBaWElvWTI5dVptbG5MQ0J2Y0hSektWeHVJQ0JkTzF4dWZWeHVJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3JvdXRlcl9wcm92aWRlcnMuanNcbiAqKiBtb2R1bGUgaWQgPSA0MTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29tbW9uJyk7XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnLi9yb3V0ZXInKTtcbnZhciByb3V0ZXJfb3V0bGV0X21hcF8xID0gcmVxdWlyZSgnLi9yb3V0ZXJfb3V0bGV0X21hcCcpO1xudmFyIHJvdXRlcl9zdGF0ZV8xID0gcmVxdWlyZSgnLi9yb3V0ZXJfc3RhdGUnKTtcbnZhciB1cmxfc2VyaWFsaXplcl8xID0gcmVxdWlyZSgnLi91cmxfc2VyaWFsaXplcicpO1xuZXhwb3J0cy5ST1VURVJfQ09ORklHID0gbmV3IGNvcmVfMS5PcGFxdWVUb2tlbignUk9VVEVSX0NPTkZJRycpO1xuZXhwb3J0cy5ST1VURVJfT1BUSU9OUyA9IG5ldyBjb3JlXzEuT3BhcXVlVG9rZW4oJ1JPVVRFUl9PUFRJT05TJyk7XG5mdW5jdGlvbiBzZXR1cFJvdXRlcihyZWYsIHJlc29sdmVyLCB1cmxTZXJpYWxpemVyLCBvdXRsZXRNYXAsIGxvY2F0aW9uLCBpbmplY3RvciwgY29uZmlnLCBvcHRzKSB7XG4gICAgaWYgKHJlZi5jb21wb25lbnRUeXBlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLicpO1xuICAgIH1cbiAgICB2YXIgY29tcG9uZW50VHlwZSA9IHJlZi5jb21wb25lbnRUeXBlc1swXTtcbiAgICB2YXIgciA9IG5ldyByb3V0ZXJfMS5Sb3V0ZXIoY29tcG9uZW50VHlwZSwgcmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIG91dGxldE1hcCwgbG9jYXRpb24sIGluamVjdG9yLCBjb25maWcpO1xuICAgIHJlZi5yZWdpc3RlckRpc3Bvc2VMaXN0ZW5lcihmdW5jdGlvbiAoKSB7IHJldHVybiByLmRpc3Bvc2UoKTsgfSk7XG4gICAgaWYgKG9wdHMuZW5hYmxlVHJhY2luZykge1xuICAgICAgICByLmV2ZW50cy5zdWJzY3JpYmUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXAoXCJSb3V0ZXIgRXZlbnQ6IFwiICsgZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuZXhwb3J0cy5zZXR1cFJvdXRlciA9IHNldHVwUm91dGVyO1xuZnVuY3Rpb24gc2V0dXBSb3V0ZXJJbml0aWFsaXplcihpbmplY3Rvcikge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXBwUmVmID0gaW5qZWN0b3IuZ2V0KGNvcmVfMS5BcHBsaWNhdGlvblJlZik7XG4gICAgICAgIGlmIChhcHBSZWYuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGFwcFJlZi5yZWdpc3RlckJvb3RzdHJhcExpc3RlbmVyKGZ1bmN0aW9uICgpIHsgaW5qZWN0b3IuZ2V0KHJvdXRlcl8xLlJvdXRlcikuaW5pdGlhbE5hdmlnYXRpb24oKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmplY3Rvci5nZXQocm91dGVyXzEuUm91dGVyKS5pbml0aWFsTmF2aWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH07XG59XG5leHBvcnRzLnNldHVwUm91dGVySW5pdGlhbGl6ZXIgPSBzZXR1cFJvdXRlckluaXRpYWxpemVyO1xuZnVuY3Rpb24gcHJvdmlkZVJvdXRlcihfY29uZmlnLCBfb3B0cykge1xuICAgIHJldHVybiBbXG4gICAgICAgIHsgcHJvdmlkZTogZXhwb3J0cy5ST1VURVJfQ09ORklHLCB1c2VWYWx1ZTogX2NvbmZpZyB9LCB7IHByb3ZpZGU6IGV4cG9ydHMuUk9VVEVSX09QVElPTlMsIHVzZVZhbHVlOiBfb3B0cyB9LFxuICAgICAgICBjb21tb25fMS5Mb2NhdGlvbiwgeyBwcm92aWRlOiBjb21tb25fMS5Mb2NhdGlvblN0cmF0ZWd5LCB1c2VDbGFzczogY29tbW9uXzEuUGF0aExvY2F0aW9uU3RyYXRlZ3kgfSxcbiAgICAgICAgeyBwcm92aWRlOiB1cmxfc2VyaWFsaXplcl8xLlVybFNlcmlhbGl6ZXIsIHVzZUNsYXNzOiB1cmxfc2VyaWFsaXplcl8xLkRlZmF1bHRVcmxTZXJpYWxpemVyIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IHJvdXRlcl8xLlJvdXRlcixcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IHNldHVwUm91dGVyLFxuICAgICAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgICAgIGNvcmVfMS5BcHBsaWNhdGlvblJlZiwgY29yZV8xLkNvbXBvbmVudFJlc29sdmVyLCB1cmxfc2VyaWFsaXplcl8xLlVybFNlcmlhbGl6ZXIsIHJvdXRlcl9vdXRsZXRfbWFwXzEuUm91dGVyT3V0bGV0TWFwLCBjb21tb25fMS5Mb2NhdGlvbiwgY29yZV8xLkluamVjdG9yLFxuICAgICAgICAgICAgICAgIGV4cG9ydHMuUk9VVEVSX0NPTkZJRywgZXhwb3J0cy5ST1VURVJfT1BUSU9OU1xuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICByb3V0ZXJfb3V0bGV0X21hcF8xLlJvdXRlck91dGxldE1hcCxcbiAgICAgICAgeyBwcm92aWRlOiByb3V0ZXJfc3RhdGVfMS5BY3RpdmF0ZWRSb3V0ZSwgdXNlRmFjdG9yeTogZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm91dGVyU3RhdGUucm9vdDsgfSwgZGVwczogW3JvdXRlcl8xLlJvdXRlcl0gfSxcbiAgICAgICAgeyBwcm92aWRlOiBjb3JlXzEuQVBQX0lOSVRJQUxJWkVSLCBtdWx0aTogdHJ1ZSwgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXJJbml0aWFsaXplciwgZGVwczogW2NvcmVfMS5JbmplY3Rvcl0gfVxuICAgIF07XG59XG5leHBvcnRzLnByb3ZpZGVSb3V0ZXIgPSBwcm92aWRlUm91dGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5dGJXOXVYM0p2ZFhSbGNsOXdjbTkyYVdSbGNuTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12WTI5dGJXOXVYM0p2ZFhSbGNsOXdjbTkyYVdSbGNuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxIVkNRVUVyUkN4cFFrRkJhVUlzUTBGQlF5eERRVUZCTzBGQlEycEdMSEZDUVVGM1JpeGxRVUZsTEVOQlFVTXNRMEZCUVR0QlFVZDRSeXgxUWtGQmNVSXNWVUZCVlN4RFFVRkRMRU5CUVVFN1FVRkRhRU1zYTBOQlFUaENMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdRVUZEY0VRc05rSkJRVFpDTEdkQ1FVRm5RaXhEUVVGRExFTkJRVUU3UVVGRE9VTXNLMEpCUVd0RUxHdENRVUZyUWl4RFFVRkRMRU5CUVVFN1FVRkZlRVFzY1VKQlFXRXNSMEZCUnl4SlFVRkpMR3RDUVVGWExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdRVUZEYWtRc2MwSkJRV01zUjBGQlJ5eEpRVUZKTEd0Q1FVRlhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVbG9SU3h4UWtGRFNTeEhRVUZ0UWl4RlFVRkZMRkZCUVRKQ0xFVkJRVVVzWVVGQk5FSXNSVUZET1VVc1UwRkJNRUlzUlVGQlJTeFJRVUZyUWl4RlFVRkZMRkZCUVd0Q0xFVkJRVVVzVFVGQmIwSXNSVUZEZUVZc1NVRkJhMEk3U1VGRGNFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOdVF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMREpFUVVFeVJDeERRVUZETEVOQlFVTTdTVUZETDBVc1EwRkJRenRKUVVORUxFbEJRVTBzWVVGQllTeEhRVUZITEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE5VTXNTVUZCVFN4RFFVRkRMRWRCUTBnc1NVRkJTU3hsUVVGTkxFTkJRVU1zWVVGQllTeEZRVUZGTEZGQlFWRXNSVUZCUlN4aFFVRmhMRVZCUVVVc1UwRkJVeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkRPVVlzUjBGQlJ5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExHTkJRVTBzVDBGQlFTeERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRVZCUVZnc1EwRkJWeXhEUVVGRExFTkJRVU03U1VGRkwwTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtJc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNWVUZCUVN4RFFVRkRPMWxCUTJ4Q0xFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNiVUpCUVhWQ0xFTkJRVU1zUTBGQlF5eFhRVUZaTEVOQlFVTXNTVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkROVVFzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU14UWl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyWXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8xRkJRM0pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRUxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEV0N4RFFVRkRPMEZCZEVKbExHMUNRVUZYTEdOQmMwSXhRaXhEUVVGQk8wRkJSVVFzWjBOQlFYVkRMRkZCUVd0Q08wbEJTWFpFTEZWQlFWVXNRMEZCUXp0UlFVTlVMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNjVUpCUVdNc1EwRkJReXhEUVVGRE8xRkJRelZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRkRU1zVFVGQlRTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExHTkJRVkVzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRk5MRU5CUVVNc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGVFWXNRMEZCUXp0UlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMDRzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRk5MRU5CUVVNc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkRPMUZCUXpORExFTkJRVU03U1VGRFNDeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRUaXhOUVVGTkxFTkJRVU1zWTBGQlZ5eFBRVUZCTEVsQlFVa3NSVUZCU2l4RFFVRkpMRU5CUVVNN1FVRkRla0lzUTBGQlF6dEJRV0psTERoQ1FVRnpRaXg1UWtGaGNrTXNRMEZCUVR0QlFXOUNSQ3gxUWtGQk9FSXNUMEZCY1VJc1JVRkJSU3hMUVVGdFFqdEpRVU4wUlN4TlFVRk5MRU5CUVVNN1VVRkRUQ3hGUVVGRExFOUJRVThzUlVGQlJTeHhRa0ZCWVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVU1zUlVGQlJTeEZRVUZETEU5QlFVOHNSVUZCUlN4elFrRkJZeXhGUVVGRkxGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVTTdVVUZEZGtZc2FVSkJRVkVzUlVGQlJTeEZRVUZETEU5QlFVOHNSVUZCUlN4NVFrRkJaMElzUlVGQlJTeFJRVUZSTEVWQlFVVXNOa0pCUVc5Q0xFVkJRVU03VVVGRGNrVXNSVUZCUXl4UFFVRlBMRVZCUVVVc09FSkJRV0VzUlVGQlJTeFJRVUZSTEVWQlFVVXNjVU5CUVc5Q0xFVkJRVU03VVVGRmVFUTdXVUZEUlN4UFFVRlBMRVZCUVVVc1pVRkJUVHRaUVVObUxGVkJRVlVzUlVGQlJTeFhRVUZYTzFsQlEzWkNMRWxCUVVrc1JVRkJSVHRuUWtGRFNpeHhRa0ZCWXl4RlFVRkZMSGRDUVVGcFFpeEZRVUZGTERoQ1FVRmhMRVZCUVVVc2JVTkJRV1VzUlVGQlJTeHBRa0ZCVVN4RlFVRkZMR1ZCUVZFN1owSkJRM0pHTEhGQ1FVRmhMRVZCUVVVc2MwSkJRV003WVVGRE9VSTdVMEZEUmp0UlFVVkVMRzFEUVVGbE8xRkJRMllzUlVGQlF5eFBRVUZQTEVWQlFVVXNOa0pCUVdNc1JVRkJSU3hWUVVGVkxFVkJRVVVzVlVGQlF5eERRVUZUTEVsQlFVc3NUMEZCUVN4RFFVRkRMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQmJFSXNRMEZCYTBJc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eGxRVUZOTEVOQlFVTXNSVUZCUXp0UlFVZDRSaXhGUVVGRExFOUJRVThzUlVGQlJTeHpRa0ZCWlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzVlVGQlZTeEZRVUZGTEhOQ1FVRnpRaXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEdWQlFWRXNRMEZCUXl4RlFVRkRPMHRCUXpsR0xFTkJRVU03UVVGRFNpeERRVUZETzBGQmNrSmxMSEZDUVVGaExHZENRWEZDTlVJc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3VEc5allYUnBiMjRzSUV4dlkyRjBhVzl1VTNSeVlYUmxaM2tzSUZCaGRHaE1iMk5oZEdsdmJsTjBjbUYwWldkNWZTQm1jbTl0SUNkQVlXNW5kV3hoY2k5amIyMXRiMjRuTzF4dWFXMXdiM0owSUh0QlVGQmZTVTVKVkVsQlRFbGFSVklzSUVGd2NHeHBZMkYwYVc5dVVtVm1MQ0JEYjIxd2IyNWxiblJTWlhOdmJIWmxjaXdnU1c1cVpXTjBiM0lzSUU5d1lYRjFaVlJ2YTJWdWZTQm1jbTl0SUNkQVlXNW5kV3hoY2k5amIzSmxKenRjYmx4dWFXMXdiM0owSUh0U2IzVjBaWEpEYjI1bWFXZDlJR1p5YjIwZ0p5NHZZMjl1Wm1sbkp6dGNibWx0Y0c5eWRDQjdVbTkxZEdWeWZTQm1jbTl0SUNjdUwzSnZkWFJsY2ljN1hHNXBiWEJ2Y25RZ2UxSnZkWFJsY2s5MWRHeGxkRTFoY0gwZ1puSnZiU0FuTGk5eWIzVjBaWEpmYjNWMGJHVjBYMjFoY0NjN1hHNXBiWEJ2Y25RZ2UwRmpkR2wyWVhSbFpGSnZkWFJsZlNCbWNtOXRJQ2N1TDNKdmRYUmxjbDl6ZEdGMFpTYzdYRzVwYlhCdmNuUWdlMFJsWm1GMWJIUlZjbXhUWlhKcFlXeHBlbVZ5TENCVmNteFRaWEpwWVd4cGVtVnlmU0JtY205dElDY3VMM1Z5YkY5elpYSnBZV3hwZW1WeUp6dGNibHh1Wlhod2IzSjBJR052Ym5OMElGSlBWVlJGVWw5RFQwNUdTVWNnUFNCdVpYY2dUM0JoY1hWbFZHOXJaVzRvSjFKUFZWUkZVbDlEVDA1R1NVY25LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQlNUMVZVUlZKZlQxQlVTVTlPVXlBOUlHNWxkeUJQY0dGeGRXVlViMnRsYmlnblVrOVZWRVZTWDA5UVZFbFBUbE1uS1R0Y2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkZlSFJ5WVU5d2RHbHZibk1nZXlCbGJtRmliR1ZVY21GamFXNW5Qem9nWW05dmJHVmhianNnZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MyVjBkWEJTYjNWMFpYSW9YRzRnSUNBZ2NtVm1PaUJCY0hCc2FXTmhkR2x2YmxKbFppd2djbVZ6YjJ4MlpYSTZJRU52YlhCdmJtVnVkRkpsYzI5c2RtVnlMQ0IxY214VFpYSnBZV3hwZW1WeU9pQlZjbXhUWlhKcFlXeHBlbVZ5TEZ4dUlDQWdJRzkxZEd4bGRFMWhjRG9nVW05MWRHVnlUM1YwYkdWMFRXRndMQ0JzYjJOaGRHbHZiam9nVEc5allYUnBiMjRzSUdsdWFtVmpkRzl5T2lCSmJtcGxZM1J2Y2l3Z1kyOXVabWxuT2lCU2IzVjBaWEpEYjI1bWFXY3NYRzRnSUNBZ2IzQjBjem9nUlhoMGNtRlBjSFJwYjI1ektTQjdYRzRnSUdsbUlDaHlaV1l1WTI5dGNHOXVaVzUwVkhsd1pYTXViR1Z1WjNSb0lEMDlJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMEp2YjNSemRISmhjQ0JoZENCc1pXRnpkQ0J2Ym1VZ1kyOXRjRzl1Wlc1MElHSmxabTl5WlNCcGJtcGxZM1JwYm1jZ1VtOTFkR1Z5TGljcE8xeHVJQ0I5WEc0Z0lHTnZibk4wSUdOdmJYQnZibVZ1ZEZSNWNHVWdQU0J5WldZdVkyOXRjRzl1Wlc1MFZIbHdaWE5iTUYwN1hHNGdJR052Ym5OMElISWdQVnh1SUNBZ0lDQWdibVYzSUZKdmRYUmxjaWhqYjIxd2IyNWxiblJVZVhCbExDQnlaWE52YkhabGNpd2dkWEpzVTJWeWFXRnNhWHBsY2l3Z2IzVjBiR1YwVFdGd0xDQnNiMk5oZEdsdmJpd2dhVzVxWldOMGIzSXNJR052Ym1acFp5azdYRzRnSUhKbFppNXlaV2RwYzNSbGNrUnBjM0J2YzJWTWFYTjBaVzVsY2lnb0tTQTlQaUJ5TG1ScGMzQnZjMlVvS1NrN1hHNWNiaUFnYVdZZ0tHOXdkSE11Wlc1aFlteGxWSEpoWTJsdVp5a2dlMXh1SUNBZ0lISXVaWFpsYm5SekxuTjFZbk5qY21saVpTaGxJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1WjNKdmRYQW9ZRkp2ZFhSbGNpQkZkbVZ1ZERvZ0pIc29QR0Z1ZVQ1bExtTnZibk4wY25WamRHOXlLUzV1WVcxbGZXQXBPMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWlM1MGIxTjBjbWx1WnlncEtUdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LR1VwTzF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVuY205MWNFVnVaQ2dwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhJN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6WlhSMWNGSnZkWFJsY2tsdWFYUnBZV3hwZW1WeUtHbHVhbVZqZEc5eU9pQkpibXBsWTNSdmNpa2dlMXh1SUNBdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZVzVuZFd4aGNpOWhibWQxYkdGeUwybHpjM1ZsY3k4NU1UQXhYRzRnSUM4dklFUmxiR0Y1SUhSb1pTQnliM1YwWlhJZ2FXNXpkR0Z1ZEdsaGRHbHZiaUIwYnlCaGRtOXBaQ0JqYVhKamRXeGhjaUJrWlhCbGJtUmxibU41SUNoQmNIQnNhV05oZEdsdmJsSmxaaUF0UGx4dUlDQXZMeUJCVUZCZlNVNUpWRWxCVEVsYVJWSWdMVDRnVW05MWRHVnlLVnh1SUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQmhjSEJTWldZZ1BTQnBibXBsWTNSdmNpNW5aWFFvUVhCd2JHbGpZWFJwYjI1U1pXWXBPMXh1SUNBZ0lHbG1JQ2hoY0hCU1pXWXVZMjl0Y0c5dVpXNTBWSGx3WlhNdWJHVnVaM1JvSUQwOUlEQXBJSHRjYmlBZ0lDQWdJR0Z3Y0ZKbFppNXlaV2RwYzNSbGNrSnZiM1J6ZEhKaGNFeHBjM1JsYm1WeUtDZ3BJRDArSUhzZ2FXNXFaV04wYjNJdVoyVjBLRkp2ZFhSbGNpa3VhVzVwZEdsaGJFNWhkbWxuWVhScGIyNG9LVHNnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2x1YW1WamRHOXlMbWRsZENoU2IzVjBaWElwTG1sdWFYUnBZV3hPWVhacFoyRjBhVzl1S0NrN1hHNGdJQ0FnZlZ4dUlDQjlMQ0F3S1R0Y2JpQWdjbVYwZFhKdUlDZ3BPaUJoYm5rZ1BUNGdiblZzYkR0Y2JuMWNibHh1THlvcVhHNGdLaUJCSUd4cGMzUWdiMllnZTBCc2FXNXJJRkJ5YjNacFpHVnlmWE11SUZSdklIVnpaU0IwYUdVZ2NtOTFkR1Z5TENCNWIzVWdiWFZ6ZENCaFpHUWdkR2hwY3lCMGJ5QjViM1Z5SUdGd2NHeHBZMkYwYVc5dUxseHVJQ3BjYmlBcUlDTWpJeUJGZUdGdGNHeGxYRzRnS2x4dUlDb2dZR0JnWEc0Z0tpQkFRMjl0Y0c5dVpXNTBLSHRrYVhKbFkzUnBkbVZ6T2lCYlVrOVZWRVZTWDBSSlVrVkRWRWxXUlZOZGZTbGNiaUFxSUdOc1lYTnpJRUZ3Y0VOdGNDQjdYRzRnS2lBZ0lDOHZJQzR1TGx4dUlDb2dmVnh1SUNwY2JpQXFJR052Ym5OMElISnZkWFJsY2lBOUlGdGNiaUFxSUNBZ2UzQmhkR2c2SUNjdmFHOXRaU2NzSUdOdmJYQnZibVZ1ZERvZ1NHOXRaWDFjYmlBcUlGMDdYRzRnS2x4dUlDb2dZbTl2ZEhOMGNtRndLRUZ3Y0VOdGNDd2dXM0J5YjNacFpHVlNiM1YwWlhJb2NtOTFkR1Z5S1YwcE8xeHVJQ29nWUdCZ1hHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ3Y205MmFXUmxVbTkxZEdWeUtGOWpiMjVtYVdjNklGSnZkWFJsY2tOdmJtWnBaeXdnWDI5d2RITTZJRVY0ZEhKaFQzQjBhVzl1Y3lrNklHRnVlVnRkSUh0Y2JpQWdjbVYwZFhKdUlGdGNiaUFnSUNCN2NISnZkbWxrWlRvZ1VrOVZWRVZTWDBOUFRrWkpSeXdnZFhObFZtRnNkV1U2SUY5amIyNW1hV2Q5TENCN2NISnZkbWxrWlRvZ1VrOVZWRVZTWDA5UVZFbFBUbE1zSUhWelpWWmhiSFZsT2lCZmIzQjBjMzBzWEc0Z0lDQWdURzlqWVhScGIyNHNJSHR3Y205MmFXUmxPaUJNYjJOaGRHbHZibE4wY21GMFpXZDVMQ0IxYzJWRGJHRnpjem9nVUdGMGFFeHZZMkYwYVc5dVUzUnlZWFJsWjNsOUxGeHVJQ0FnSUh0d2NtOTJhV1JsT2lCVmNteFRaWEpwWVd4cGVtVnlMQ0IxYzJWRGJHRnpjem9nUkdWbVlYVnNkRlZ5YkZObGNtbGhiR2w2WlhKOUxGeHVYRzRnSUNBZ2UxeHVJQ0FnSUNBZ2NISnZkbWxrWlRvZ1VtOTFkR1Z5TEZ4dUlDQWdJQ0FnZFhObFJtRmpkRzl5ZVRvZ2MyVjBkWEJTYjNWMFpYSXNYRzRnSUNBZ0lDQmtaWEJ6T2lCYlhHNGdJQ0FnSUNBZ0lFRndjR3hwWTJGMGFXOXVVbVZtTENCRGIyMXdiMjVsYm5SU1pYTnZiSFpsY2l3Z1ZYSnNVMlZ5YVdGc2FYcGxjaXdnVW05MWRHVnlUM1YwYkdWMFRXRndMQ0JNYjJOaGRHbHZiaXdnU1c1cVpXTjBiM0lzWEc0Z0lDQWdJQ0FnSUZKUFZWUkZVbDlEVDA1R1NVY3NJRkpQVlZSRlVsOVBVRlJKVDA1VFhHNGdJQ0FnSUNCZFhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUZKdmRYUmxjazkxZEd4bGRFMWhjQ3hjYmlBZ0lDQjdjSEp2ZG1sa1pUb2dRV04wYVhaaGRHVmtVbTkxZEdVc0lIVnpaVVpoWTNSdmNuazZJQ2h5T2lCU2IzVjBaWElwSUQwK0lISXVjbTkxZEdWeVUzUmhkR1V1Y205dmRDd2daR1Z3Y3pvZ1cxSnZkWFJsY2wxOUxGeHVYRzRnSUNBZ0x5OGdWSEpwWjJkbGNpQnBibWwwYVdGc0lHNWhkbWxuWVhScGIyNWNiaUFnSUNCN2NISnZkbWxrWlRvZ1FWQlFYMGxPU1ZSSlFVeEpXa1ZTTENCdGRXeDBhVG9nZEhKMVpTd2dkWE5sUm1GamRHOXllVG9nYzJWMGRYQlNiM1YwWlhKSmJtbDBhV0ZzYVhwbGNpd2daR1Z3Y3pvZ1cwbHVhbVZqZEc5eVhYMWNiaUFnWFR0Y2JuMWNiaUpkZlE9PVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9jb21tb25fcm91dGVyX3Byb3ZpZGVycy5qc1xuICoqIG1vZHVsZSBpZCA9IDQyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQXBwU2VydmljZSB9IGZyb20gJy4vYXBwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9qZWN0U2VydmljZSB9IGZyb20gJy4vcHJvamVjdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVGFza1NlcnZpY2UgfSBmcm9tICcuL3Rhc2suc2VydmljZSc7XHJcbmltcG9ydCB7IFJlZmVyZW5jZVNlcnZpY2UgfSBmcm9tICcuL3JlZmVyZW5jZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RhZmZTZXJ2aWNlIH0gZnJvbSAnLi9zdGFmZi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tbWVudFNlcnZpY2UgfSBmcm9tICcuL2NvbW1lbnQuc2VydmljZSc7XHJcblxyXG5leHBvcnQgeyBBcHBTZXJ2aWNlIH07XHJcbmV4cG9ydCB7IFByb2plY3RTZXJ2aWNlIH07XHJcbmV4cG9ydCB7IFRhc2tTZXJ2aWNlIH07XHJcbmV4cG9ydCB7IFJlZmVyZW5jZVNlcnZpY2UgfTtcclxuZXhwb3J0IHsgU3RhZmZTZXJ2aWNlIH07XHJcbmV4cG9ydCB7IENvbW1lbnRTZXJ2aWNlIH07XHJcblxyXG5leHBvcnQgY29uc3QgQVBQX1NFUlZJQ0VTID0gW1xyXG4gICAgQXBwU2VydmljZSxcclxuICAgIFByb2plY3RTZXJ2aWNlLFxyXG4gICAgVGFza1NlcnZpY2UsXHJcbiAgICBSZWZlcmVuY2VTZXJ2aWNlLFxyXG4gICAgU3RhZmZTZXJ2aWNlLFxyXG4gICAgQ29tbWVudFNlcnZpY2VcclxuXTtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcblxyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXInO1xyXG5pbXBvcnQgeyBwYXJzZVJlc3BvbnNlT2JqZWN0cyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmNvbnN0IEhFQURFUlMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbn0pO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvbnM6IGFueTtcclxuICAgIGlzTG9nZ2VkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGdldFVzZXJQcm9maWxlKCkge1xyXG4gICAgICAgIGxldCBoZWFkZXJzID0geyBoZWFkZXJzOiBIRUFERVJTIH07XHJcbiAgICAgICAgbGV0IHVybCA9ICdwP2lkPXVzZXJwcm9maWxlJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBoZWFkZXJzKS5tYXAocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VSZXNwb25zZU9iamVjdHMocmVzcG9uc2UuanNvbigpLm9iamVjdHMpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VHJhbnNsYXRpb25zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRyYW5zbGF0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZih0aGlzLnRyYW5zbGF0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHsgaGVhZGVyczogSEVBREVSUyB9O1xyXG4gICAgICAgIGxldCB1cmwgPSAncD9pZD1jb21tb24tY2FwdGlvbnMnO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcnMpLm1hcChyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb25zID0gcmVzcG9uc2UuanNvbigpLmNhcHRpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbnM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmF2KCkge1xyXG4gICAgICAgIGxldCBoZWFkZXJzID0geyBoZWFkZXJzOiBIRUFERVJTIH07XHJcbiAgICAgICAgbGV0IHVybCA9ICdwP2lkPW91dGxpbmUnO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIGhlYWRlcnMpLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkub2JqZWN0c1swXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlVXNlclByb2ZpbGUodXNlcjogVXNlcikge1xyXG4gICAgICAgIC8vXHJcbiAgICB9XHJcblxyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKCcvJyk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvYXBwLnNlcnZpY2UudHNcbiAqKi8iLCJpbXBvcnQgeyBVUkxTZWFyY2hQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVUkxTZWFyY2hQYXJhbXMoX3BhcmFtcyk6IFVSTFNlYXJjaFBhcmFtcyB7XHJcbiAgICBsZXQgcGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XHJcbiAgICBmb3IgKGxldCBwIGluIF9wYXJhbXMpIHtcclxuICAgICAgICBwYXJhbXMuc2V0KGVuY29kZVVSSUNvbXBvbmVudChwKSwgZW5jb2RlVVJJQ29tcG9uZW50KF9wYXJhbXNbcF0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVPYmoob2JqKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHByb3BlcnR5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbcHJvcGVydHldKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlT2JqZWN0cyhvYmplY3RzOiBhbnkpIHtcclxuICAgIGxldCByZXN1bHQ6IGFueSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IG9iaiBvZiBvYmplY3RzKSB7XHJcbiAgICAgICAgaWYgKG9iai5raW5kKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtvYmoua2luZF0gPSBvYmo7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvYmoubGlzdCAmJiBvYmoubWV0YSAmJiBvYmoudHlwZSkge1xyXG4gICAgICAgICAgICByZXN1bHRbb2JqLnR5cGVdID0gb2JqO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvdXRpbHMvdXRpbHMudHNcbiAqKi8iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMsIFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgRkVUQ0hfUFJPSkVDVFMsXHJcbiAgICBGRVRDSF9QUk9KRUNULFxyXG4gICAgQUREX1BST0pFQ1RcclxufSBmcm9tICcuLi9yZWR1Y2Vycy9wcm9qZWN0cy5yZWR1Y2VyJztcclxuaW1wb3J0IHtcclxuICAgIFByb2plY3QsXHJcbiAgICBUYXNrLFxyXG4gICAgVGFza1R5cGUsXHJcbiAgICBUYWcsXHJcbiAgICBVc2VyLFxyXG4gICAgQXR0YWNobWVudCxcclxuICAgIE9yZ2FuaXphdGlvblxyXG59IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVSTFNlYXJjaFBhcmFtcywgc2VyaWFsaXplT2JqIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY29uc3QgSEVBREVSUyA9IG5ldyBIZWFkZXJzKHtcclxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcclxufSk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBzdG9yZTogU3RvcmU8YW55PixcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHAsXHJcbiAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgZ2V0UHJvamVjdFN0YXR1c1R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZS5nZXQoWydkcmFmdCcsICdwcm9jZXNzZWQnLCAnZmluaXNoZWQnXSkubWFwKHQgPT4gW1xyXG4gICAgICAgICAgICB7IHZhbHVlOiAnRFJBRlQnLCB0ZXh0OiB0LmRyYWZ0LCBkZWZhdWx0OiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6ICdQUk9DRVNTRUQnLCB0ZXh0OiB0LnByb2Nlc3NlZCB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiAnRklOSVNIRUQnLCB0ZXh0OiB0LmZpbmlzaGVkIH1cclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICBmZXRjaFByb2plY3RzKHF1ZXJ5UGFyYW1zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCgncD9pZD1wcm9qZWN0LXZpZXcnLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IEhFQURFUlMsXHJcbiAgICAgICAgICAgIHNlYXJjaDogY3JlYXRlVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5UGFyYW1zKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0pXHJcbiAgICAgICAgICAgIC5tYXAoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzOiA8UHJvamVjdFtdPmRhdGEubGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhOiBkYXRhLm1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmZXRjaFByb2plY3RCeUlkKHByb2plY3RJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHByb2plY3RJZCA9PT0gJ25ldycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YobmV3IFByb2plY3QoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCgncD9pZD1wcm9qZWN0LWZvcm0mcHJvamVjdElkPScgKyBwcm9qZWN0SWQsIHsgaGVhZGVyczogSEVBREVSUyB9KVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IDxQcm9qZWN0PnJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlUHJvamVjdChwcm9qZWN0OiBQcm9qZWN0KSB7XHJcbiAgICAgICAgbGV0IHVybCA9ICdwP2lkPXByb2plY3QtZm9ybSZwcm9qZWN0SWQ9JyArIHByb2plY3QuaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgc2VyaWFsaXplT2JqKHByb2plY3QpLCB7IGhlYWRlcnM6IEhFQURFUlMgfSlcclxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiB0aGlzLnRyYW5zZm9ybVBvc3RSZXNwb25zZShyZXNwb25zZSkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBPYnNlcnZhYmxlLnRocm93KHRoaXMudHJhbnNmb3JtUG9zdFJlc3BvbnNlKGVycm9yKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVByb2plY3QocHJvamVjdHM6IFByb2plY3RbXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKCdwP2lkPXByb2plY3QtdmlldyZpZHM9JyArIHByb2plY3RzLm1hcChpdCA9PiBpdC5pZCkuam9pbignLCcpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRyYW5zZm9ybVBvc3RSZXNwb25zZShyZXNwb25zZTogUmVzcG9uc2UpIHtcclxuICAgICAgICBsZXQganNvbiA9IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihqc29uLCB7XHJcbiAgICAgICAgICAgIG9rOiBqc29uLnR5cGUgPT09ICdET0NVTUVOVF9TQVZFRCcsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGpzb24uY2FwdGlvbnMgPyBqc29uLmNhcHRpb25zLnR5cGUgOiBqc29uLm1lc3NhZ2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zZXJ2aWNlcy9wcm9qZWN0LnNlcnZpY2UudHNcbiAqKi8iLCJleHBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcclxuZXhwb3J0IHsgT3JnYW5pemF0aW9uIH0gZnJvbSAnLi9vcmdhbml6YXRpb24nO1xyXG5leHBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi9hdHRhY2htZW50JztcclxuZXhwb3J0IHsgUHJvamVjdCB9IGZyb20gJy4vcHJvamVjdCc7XHJcbmV4cG9ydCB7IFRhc2sgfSBmcm9tICcuL3Rhc2snO1xyXG5leHBvcnQgeyBUYWcgfSBmcm9tICcuL3RhZyc7XHJcbmV4cG9ydCB7IFRhc2tUeXBlIH0gZnJvbSAnLi90YXNrLXR5cGUnO1xyXG5leHBvcnQgeyBDb21tZW50IH0gZnJvbSAnLi9jb21tZW50JztcclxuZXhwb3J0IHsgUmVxdWVzdCB9IGZyb20gJy4vcmVxdWVzdCc7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL21vZGVscy9pbmRleC50c1xuICoqLyIsImV4cG9ydCBjbGFzcyBVc2VyIHtcclxuICAgIGlkOiBzdHJpbmcgPSAnJztcclxuICAgIGxvZ2luOiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgdXNlck5hbWU6IHN0cmluZyA9ICdAYW5vbnltb3VzJztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBkZXBhcnRtZW50SWQ6IHN0cmluZztcclxuICAgIHBvc2l0aW9uSWQ6IHN0cmluZztcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvdXNlci50c1xuICoqLyIsImV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb24ge1xyXG4gICAgaWQ6IHN0cmluZyA9ICcnO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgYmluOiBzdHJpbmc7XHJcbiAgICBsb2NhbGl6ZWROYW1lOiBhbnk7XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbW9kZWxzL29yZ2FuaXphdGlvbi50c1xuICoqLyIsImV4cG9ydCBjbGFzcyBBdHRhY2htZW50IHtcclxuICAgIGlkOiBzdHJpbmcgPSAnJztcclxuICAgIGZpZWxkTmFtZTogc3RyaW5nO1xyXG4gICAgcmVhbEZpbGVOYW1lOiBzdHJpbmc7XHJcbiAgICBhdXRob3I6IHN0cmluZztcclxuICAgIHJlZ0RhdGU6IERhdGU7XHJcbiAgICBzaXplOiBudW1iZXI7XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbW9kZWxzL2F0dGFjaG1lbnQudHNcbiAqKi8iLCJleHBvcnQgY2xhc3MgUHJvamVjdCB7XHJcbiAgICBpZDogc3RyaW5nID0gJyc7XHJcbiAgICBhdXRob3I6IHN0cmluZztcclxuICAgIHJlZ0RhdGU6IERhdGU7XHJcbiAgICB3YXNSZWFkOiBib29sZWFuO1xyXG4gICAgZnNpZDogc3RyaW5nID0gJzEnO1xyXG5cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHN0YXR1czogc3RyaW5nID0gJ0RSQUZUJztcclxuICAgIGN1c3RvbWVySWQ6IHN0cmluZztcclxuICAgIG1hbmFnZXJVc2VySWQ6IHN0cmluZztcclxuICAgIHByb2dyYW1tZXJVc2VySWQ6IHN0cmluZztcclxuICAgIHRlc3RlclVzZXJJZDogc3RyaW5nO1xyXG4gICAgb2JzZXJ2ZXJVc2VySWRzOiBzdHJpbmdbXTtcclxuICAgIGNvbW1lbnQ6IHN0cmluZztcclxuICAgIGZpbmlzaERhdGU6IERhdGU7XHJcbiAgICBoYXNBdHRhY2htZW50OiBib29sZWFuO1xyXG4gICAgYXR0YWNobWVudElkczogc3RyaW5nW107XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvbW9kZWxzL3Byb2plY3QudHNcbiAqKi8iLCJleHBvcnQgY2xhc3MgVGFzayB7XHJcbiAgICBpZDogc3RyaW5nID0gJyc7XHJcbiAgICBhdXRob3I6IHN0cmluZztcclxuICAgIHJlZ0RhdGU6IERhdGU7XHJcbiAgICB3YXNSZWFkOiBib29sZWFuO1xyXG4gICAgZnNpZDogc3RyaW5nID0gJzEnO1xyXG5cclxuICAgIHByb2plY3RJZDogc3RyaW5nO1xyXG4gICAgcGFyZW50VGFza0lkOiBzdHJpbmc7XHJcbiAgICBzdWJ0YXNrSWRzOiBzdHJpbmdbXTtcclxuICAgIHRhc2tUeXBlSWQ6IHN0cmluZztcclxuICAgIHN0YXR1czogc3RyaW5nID0gJ0RSQUZUJztcclxuICAgIHByaW9yaXR5OiBzdHJpbmcgPSAnTk9STUFMJztcclxuICAgIGJvZHk6IHN0cmluZztcclxuICAgIGFzc2lnbmVlVXNlcklkOiBzdHJpbmc7XHJcbiAgICBzdGFydERhdGU6IERhdGU7XHJcbiAgICBkdWVEYXRlOiBEYXRlO1xyXG4gICAgdGFnSWRzOiBzdHJpbmdbXTtcclxuICAgIGhhc0F0dGFjaG1lbnQ6IGJvb2xlYW47XHJcbiAgICBhdHRhY2htZW50SWRzOiBzdHJpbmdbXTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvdGFzay50c1xuICoqLyIsImV4cG9ydCBjbGFzcyBUYWcge1xyXG4gICAgaWQ6IHN0cmluZyA9ICcnO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuICAgIGxvY2FsaXplZE5hbWU6IGFueTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvdGFnLnRzXG4gKiovIiwiZXhwb3J0IGNsYXNzIFRhc2tUeXBlIHtcclxuICAgIGlkOiBzdHJpbmcgPSAnJztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGxvY2FsaXplZE5hbWU6IGFueTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvdGFzay10eXBlLnRzXG4gKiovIiwiZXhwb3J0IGNsYXNzIENvbW1lbnQge1xyXG4gICAgaWQ6IHN0cmluZyA9ICcnO1xyXG4gICAgY29tbWVudDogc3RyaW5nO1xyXG4gICAgYXR0YWNobWVudHM6IGFueTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvY29tbWVudC50c1xuICoqLyIsImV4cG9ydCBjbGFzcyBSZXF1ZXN0IHtcclxuICAgIGlkOiBzdHJpbmcgPSAnJztcclxuICAgIHRhc2tJZDogc3RyaW5nO1xyXG4gICAgcmVxdWVzdFR5cGU6IHN0cmluZztcclxuICAgIHJlc29sdXRpb246IHN0cmluZztcclxuICAgIHJlc29sdXRpb25UaW1lOiBEYXRlO1xyXG4gICAgY29tbWVudDogc3RyaW5nO1xyXG4gICAgYXR0YWNobWVudHM6IGFueTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9tb2RlbHMvcmVxdWVzdC50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICduZzItdHJhbnNsYXRlL25nMi10cmFuc2xhdGUnO1xyXG5cclxuaW1wb3J0IHsgVGFzayB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVSTFNlYXJjaFBhcmFtcywgc2VyaWFsaXplT2JqIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY29uc3QgSEVBREVSUyA9IG5ldyBIZWFkZXJzKHtcclxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcclxufSk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUYXNrU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwLFxyXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGdldFRhc2tQcmlvcml0eVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlLmdldChbJ3VyZ2VudCcsICdoaWdoJywgJ21lZGl1bScsICdub3JtYWwnXSkubWFwKHQgPT4gW1xyXG4gICAgICAgICAgICB7IHZhbHVlOiAnTk9STUFMJywgdGV4dDogdC5ub3JtYWwsIGRlZmF1bHQ6IHRydWUgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogJ01FRElVTScsIHRleHQ6IHQubWVkaXVtIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6ICdISUdIJywgdGV4dDogdC5oaWdoIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6ICdVUkdFTlQnLCB0ZXh0OiB0LnVyZ2VudCB9XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFza1N0YXR1c1R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlLmdldChbJ2RyYWZ0JywgJ3dhaXRpbmcnLCAncHJvY2Vzc2VkJywgJ2ZpbmlzaGVkJ10pLm1hcCh0ID0+IFtcclxuICAgICAgICAgICAgeyB2YWx1ZTogJ0RSQUZUJywgdGV4dDogdC5kcmFmdCwgZGVmYXVsdDogdHJ1ZSB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiAnV0FJVElORycsIHRleHQ6IHQud2FpdGluZyB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiAnUFJPQ0VTU0VEJywgdGV4dDogdC5wcm9jZXNzZWQgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogJ0ZJTklTSEVEJywgdGV4dDogdC5maW5pc2hlZCB9XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmV0Y2hUYXNrcyhxdWVyeVBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoJ3A/aWQ9dGFzay12aWV3Jywge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiBIRUFERVJTLFxyXG4gICAgICAgICAgICBzZWFyY2g6IGNyZWF0ZVVSTFNlYXJjaFBhcmFtcyhxdWVyeVBhcmFtcylcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdKVxyXG4gICAgICAgICAgICAubWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXNrczogPFRhc2tbXT5kYXRhLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogZGF0YS5tZXRhXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZldGNoVGFza0J5SWQodGFza0lkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGFza0lkID09PSAnbmV3Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihuZXcgVGFzaygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KCdwP2lkPXRhc2stZm9ybSZ0YXNrSWQ9JyArIHRhc2tJZCwgeyBoZWFkZXJzOiBIRUFERVJTIH0pXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gPFRhc2s+cmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVUYXNrKHRhc2s6IFRhc2spIHtcclxuICAgICAgICBsZXQgdXJsID0gJ3A/aWQ9dGFzay1mb3JtJyArICh0YXNrLmlkID8gJyZ0YXNrSWQ9JyArIHRhc2suaWQgOiAnJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgc2VyaWFsaXplT2JqKHRhc2spLCB7IGhlYWRlcnM6IEhFQURFUlMgfSlcclxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiB0aGlzLnRyYW5zZm9ybVBvc3RSZXNwb25zZShyZXNwb25zZSkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBPYnNlcnZhYmxlLnRocm93KHRoaXMudHJhbnNmb3JtUG9zdFJlc3BvbnNlKGVycm9yKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVRhc2sodGFzazogVGFzaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKCdwP2lkPXRhc2stdmlldyZpZHM9JyArIHRhc2suaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdHJhbnNmb3JtUG9zdFJlc3BvbnNlKHJlc3BvbnNlOiBSZXNwb25zZSkge1xyXG4gICAgICAgIGxldCBqc29uID0gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGpzb24sIHtcclxuICAgICAgICAgICAgb2s6IGpzb24udHlwZSA9PT0gJ0RPQ1VNRU5UX1NBVkVEJyxcclxuICAgICAgICAgICAgbWVzc2FnZToganNvbi5jYXB0aW9ucyA/IGpzb24uY2FwdGlvbnMudHlwZSA6IGpzb24ubWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NlcnZpY2VzL3Rhc2suc2VydmljZS50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBGRVRDSF9UQUdTLCBGRVRDSF9UQVNLX1RZUEVTIH0gZnJvbSAnLi4vcmVkdWNlcnMvcmVmZXJlbmNlLnJlZHVjZXInO1xyXG5pbXBvcnQgeyBUYWcsIFRhc2tUeXBlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNvbnN0IEhFQURFUlMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbn0pO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVmZXJlbmNlU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwLFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT5cclxuICAgICkgeyB9XHJcblxyXG4gICAgbG9hZFJlZmVyZW5jZSgpIHtcclxuICAgICAgICB0aGlzLmZldGNoVGFncygpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7IHR5cGU6IEZFVENIX1RBR1MsIHBheWxvYWQ6IGRhdGEgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5mZXRjaFRhc2tUeXBlcygpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7IHR5cGU6IEZFVENIX1RBU0tfVFlQRVMsIHBheWxvYWQ6IGRhdGEgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmV0Y2hUYWdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KCcvUmVmZXJlbmNlL3A/aWQ9dGFncycsIHsgaGVhZGVyczogSEVBREVSUyB9KVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdKVxyXG4gICAgICAgICAgICAubWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWdzOiA8VGFnW10+ZGF0YS5saXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IGRhdGEubWV0YVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmZXRjaFRhc2tUeXBlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCgnL1JlZmVyZW5jZS9wP2lkPXRhc2t0eXBlcycsIHsgaGVhZGVyczogSEVBREVSUyB9KVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS5vYmplY3RzWzBdKVxyXG4gICAgICAgICAgICAubWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZXM6IDxUYXNrVHlwZVtdPmRhdGEubGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhOiBkYXRhLm1ldGFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvcmVmZXJlbmNlLnNlcnZpY2UudHNcbiAqKi8iLCJpbXBvcnQgeyBUYWcsIFRhc2tUeXBlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBGRVRDSF9UQUdTID0gJ0ZFVENIX1RBR1MnO1xyXG5leHBvcnQgY29uc3QgRkVUQ0hfVEFTS19UWVBFUyA9ICdGRVRDSF9UQVNLX1RZUEVTJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlZmVyZW5jZVN0YXRlIHtcclxuICAgIHRhZ3M6IFRhZ1tdLFxyXG4gICAgdGFza1R5cGVzOiBUYXNrVHlwZVtdXHJcbn07XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcbiAgICB0YWdzOiBbXSxcclxuICAgIHRhc2tUeXBlczogW11cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWZlcmVuY2VSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7dHlwZSwgcGF5bG9hZH0pID0+IHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgRkVUQ0hfVEFHUzpcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XHJcbiAgICAgICAgICAgICAgICB0YWdzOiBwYXlsb2FkLnRhZ3NcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgY2FzZSBGRVRDSF9UQVNLX1RZUEVTOlxyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgIHRhc2tUeXBlczogcGF5bG9hZC50YXNrVHlwZXNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9yZWR1Y2Vycy9yZWZlcmVuY2UucmVkdWNlci50c1xuICoqLyIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuXHJcbmltcG9ydCB7IGNyZWF0ZVVSTFNlYXJjaFBhcmFtcyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uLCBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNvbnN0IEhFQURFUlMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbn0pO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RhZmZTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBcclxuICAgICkgeyB9XHJcblxyXG4gICAgZ2V0T3JnYW5pemF0aW9ucyhxdWVyeVBhcmFtcz8pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCgnL1N0YWZmL3A/aWQ9Z2V0LW9yZ2FuaXphdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IEhFQURFUlMsXHJcbiAgICAgICAgICAgIHNlYXJjaDogY3JlYXRlVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5UGFyYW1zKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpLm9iamVjdHNbMF0pXHJcbiAgICAgICAgICAgIC5tYXAoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnM6IDxPcmdhbml6YXRpb25bXT5kYXRhLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogZGF0YS5tZXRhXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9yZ2FuaXphdGlvbkJ5SWQoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldE9yZ2FuaXphdGlvbnMoeyBpZHM6IGlkIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KCdwP2lkPXVzZXJzJywgeyBoZWFkZXJzOiBIRUFERVJTIH0pXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gPFVzZXJbXT5yZXNwb25zZS5qc29uKCkub2JqZWN0c1swXS5saXN0KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zZXJ2aWNlcy9zdGFmZi5zZXJ2aWNlLnRzXG4gKiovIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwLCBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5cclxuaW1wb3J0IHsgQ29tbWVudCB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVSTFNlYXJjaFBhcmFtcywgc2VyaWFsaXplT2JqIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY29uc3QgSEVBREVSUyA9IG5ldyBIZWFkZXJzKHtcclxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcclxufSk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb21tZW50U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGZldGNoVGFza0NvbW1lbnRzKHRhc2tJZDogc3RyaW5nLCBwYWdlID0gMCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KCdwP2lkPWNvbW1lbnRzJnRhc2tJZD0nICsgdGFza0lkLCB7IGhlYWRlcnM6IEhFQURFUlMgfSlcclxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiA8Q29tbWVudD5yZXNwb25zZS5qc29uKCkub2JqZWN0c1sxXSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2VydmljZXMvY29tbWVudC5zZXJ2aWNlLnRzXG4gKiovIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uLCBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBGRVRDSF9PUkdBTklaQVRJT05TID0gJ0ZFVENIX09SR0FOSVpBVElPTlMnO1xyXG5leHBvcnQgY29uc3QgRkVUQ0hfVVNFUlMgPSAnRkVUQ0hfVVNFUlMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU3RhZmZTdGF0ZSB7XHJcbiAgICBvcmdhbml6YXRpb25zOiBPcmdhbml6YXRpb25bXSxcclxuICAgIHVzZXJzOiBVc2VyW11cclxufTtcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogSVN0YWZmU3RhdGUgPSB7XHJcbiAgICBvcmdhbml6YXRpb25zOiBbXSxcclxuICAgIHVzZXJzOiBbXVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0YWZmUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwge3R5cGUsIHBheWxvYWR9KSA9PiB7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIEZFVENIX09SR0FOSVpBVElPTlM6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uczogcGF5bG9hZC5vcmdhbml6YXRpb25zXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGNhc2UgRkVUQ0hfVVNFUlM6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgdXNlcnM6IHBheWxvYWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9yZWR1Y2Vycy9zdGFmZi5yZWR1Y2VyLnRzXG4gKiovIiwiaW1wb3J0IHsgRHJvcGRvd25Db21wb25lbnQgfSBmcm9tICcuL2Ryb3Bkb3duLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERyb3Bkb3duVG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wZG93bi10b2dnbGUuY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBEUk9QRE9XTl9ESVJFQ1RJVkVTID0gW0Ryb3Bkb3duQ29tcG9uZW50LCBEcm9wZG93blRvZ2dsZUNvbXBvbmVudF07XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NoYXJlZC9kcm9wZG93bi9pbmRleC50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIFJlbmRlcmVyLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIENvbnRlbnRDaGlsZHJlbiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IERyb3Bkb3duVG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wZG93bi10b2dnbGUuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdbZHJvcGRvd25dJyxcclxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkNvbXBvbmVudCB7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRyb3Bkb3duJykgdHJ1ZTtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3Mub3BlbicpIGdldCBpc09wZW4oKSB7IHJldHVybiB0aGlzLm9wZW4gfTtcclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJywgWyckZXZlbnQnXSkgcHVibGljIG9uTW91c2VFbnRlcigkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMub3BlbiA9IHRydWUsIHRoaXMuZGVsYXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJywgWyckZXZlbnQnXSkgcHVibGljIG9uTW91c2VMZWF2ZSgkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMub3BlbiA9IGZhbHNlLCB0aGlzLmRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBwdWJsaWMgb25DbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGZDbGljayA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZHJlbihEcm9wZG93blRvZ2dsZUNvbXBvbmVudCkgdG9nZ2xlQ29tcG9uZW50OiBRdWVyeUxpc3Q8RHJvcGRvd25Ub2dnbGVDb21wb25lbnQ+O1xyXG4gICAgQElucHV0KCkgb3BlbiA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgbW91c2VFdmVudCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBkb2N1bWVudENsaWNrTGlzdGVuZXI7XHJcbiAgICBwcml2YXRlIGRvY3VtZW50S2V5dXBMaXN0ZW5lcjtcclxuICAgIHByaXZhdGUgc2VsZkNsaWNrOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHRpbWU7XHJcbiAgICBwcml2YXRlIGRlbGF5ID0gNTAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyKSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbkdsb2JhbCgnYm9keScsICdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGZDbGljaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGZDbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRLZXl1cExpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW5HbG9iYWwoJ2JvZHknLCAna2V5dXAnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09ICdFc2NhcGUnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUNvbXBvbmVudC5mb3JFYWNoKGl0ID0+IGl0LnRvZ2dsZS5zdWJzY3JpYmUoZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZURyb3Bkb3duKGV2ZW50KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVEcm9wZG93bihldmVudCkge1xyXG4gICAgICAgIHRoaXMub3BlbiA9ICF0aGlzLm9wZW47XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvZHJvcGRvd24vZHJvcGRvd24uY29tcG9uZW50LnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdbZHJvcGRvd24tdG9nZ2xlXScsXHJcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRHJvcGRvd25Ub2dnbGVDb21wb25lbnQge1xyXG4gICAgcHVibGljIHRvZ2dsZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRyb3Bkb3duLXRvZ2dsZScpIHRydWU7XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBwdWJsaWMgb25DbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRvZ2dsZS5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2hhcmVkL2Ryb3Bkb3duL2Ryb3Bkb3duLXRvZ2dsZS5jb21wb25lbnQudHNcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgUk9VVEVSX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlIH0gZnJvbSAnbmcyLXRyYW5zbGF0ZS9uZzItdHJhbnNsYXRlJztcclxuXHJcbmltcG9ydCB7IEZFVENIX05BVl9QUk9KRUNUUywgSVByb2plY3RzU3RhdGUgfSBmcm9tICcuLi9yZWR1Y2Vycy9wcm9qZWN0cy5yZWR1Y2VyJztcclxuaW1wb3J0IHsgUHJvamVjdFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wcm9qZWN0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSAnLi4vbW9kZWxzL3Byb2plY3QnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ1tuYXZdJyxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvbmF2Lmh0bWwnKSxcclxuICAgIGRpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFU10sXHJcbiAgICBwaXBlczogW1RyYW5zbGF0ZVBpcGVdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgTmF2Q29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgc3RvcmVTdWI6IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgcHJvamVjdHM6IFByb2plY3RbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHN0b3JlOiBTdG9yZTxhbnk+LFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBwcm9qZWN0U2VydmljZTogUHJvamVjdFNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZVN1YiA9IHRoaXMuc3RvcmUuc2VsZWN0KCdwcm9qZWN0cycpLnN1YnNjcmliZSgoZGF0YTogSVByb2plY3RzU3RhdGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdHMgPSBkYXRhLnByb2plY3RzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucHJvamVjdFNlcnZpY2UuZmV0Y2hQcm9qZWN0cyh7IG5hdjogMSB9KS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiBGRVRDSF9OQVZfUFJPSkVDVFMsIHBheWxvYWQ6IGRhdGEgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZVN1YiAmJiB0aGlzLnN0b3JlU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy9uYXYudHNcbiAqKi8iLCJpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBGRVRDSF9OQVZfUFJPSkVDVFMgPSAnRkVUQ0hfTkFWX1BST0pFQ1RTJztcclxuZXhwb3J0IGNvbnN0IEZFVENIX1BST0pFQ1RTID0gJ0ZFVENIX1BST0pFQ1RTJztcclxuZXhwb3J0IGNvbnN0IEZFVENIX1BST0pFQ1QgPSAnRkVUQ0hfUFJPSkVDVCc7XHJcbmV4cG9ydCBjb25zdCBBRERfUFJPSkVDVCA9ICdBRERfUFJPSkVDVCc7XHJcbmV4cG9ydCBjb25zdCBVUERBVEVfUFJPSkVDVCA9ICdVUERBVEVfUFJPSkVDVCc7XHJcbmV4cG9ydCBjb25zdCBERUxFVEVfUFJPSkVDVCA9ICdERUxFVEVfUFJPSkVDVCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9qZWN0c1N0YXRlIHtcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgcHJvamVjdHM6IFByb2plY3RbXSxcclxuICAgIHByb2plY3Q6IFByb2plY3QsXHJcbiAgICBsb2FkaW5nOiBib29sZWFuXHJcbn07XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGU6IElQcm9qZWN0c1N0YXRlID0ge1xyXG4gICAgbWV0YToge30sXHJcbiAgICBwcm9qZWN0czogW10sXHJcbiAgICBwcm9qZWN0OiB1bmRlZmluZWQsXHJcbiAgICBsb2FkaW5nOiBmYWxzZVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2plY3RzUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwge3R5cGUsIHBheWxvYWR9KSA9PiB7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIEZFVENIX05BVl9QUk9KRUNUUzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgY2FzZSBGRVRDSF9QUk9KRUNUUzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgY2FzZSBGRVRDSF9QUk9KRUNUOlxyXG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICBjYXNlIEFERF9QUk9KRUNUOlxyXG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICBjYXNlIFVQREFURV9QUk9KRUNUOlxyXG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICBjYXNlIERFTEVURV9QUk9KRUNUOlxyXG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn07XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3JlZHVjZXJzL3Byb2plY3RzLnJlZHVjZXIudHNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHVsPlxcclxcbiAgICA8bGk+XFxyXFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Rhc2tzJywgJ215J11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXBlbmNpbFxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgIDxzcGFuPnt7J215X3Rhc2tzJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgPC9hPlxcclxcbiAgICA8L2xpPlxcclxcbiAgICA8bGk+XFxyXFxuICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Rhc2tzJywgJ2luYm94J11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWluYm94XFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgPHNwYW4+e3sndGFza3NfYXNzaWduZWRfdG9fbWUnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgIDwvbGk+XFxyXFxuICAgIDxsaT5cXHJcXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvJ11cXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNhbGVuZGFyXFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgPHNwYW4+e3snZGFzaGJvYXJkJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgPC9hPlxcclxcbiAgICA8L2xpPlxcclxcbiAgICA8bGkgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvbGk+XFxyXFxuICAgIDxsaT5cXHJcXG4gICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cXFwiWycvcHJvamVjdHMnXVxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIj5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtcHV6emxlLXBpZWNlXFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgPHNwYW4+e3sncHJvamVjdHMnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgICAgICA8dWw+XFxyXFxuICAgICAgICAgICAgPGxpICpuZ0Zvcj1cXFwibGV0IHByb2plY3Qgb2YgcHJvamVjdHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8YSBbcm91dGVyTGlua109XFxcIlsnL3Byb2plY3QnLCBwcm9qZWN0LmlkLCAndGFza3MnXVxcXCIgY2xhc3M9XFxcIm5hdi1saW5rXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1maWxlLXRleHQtb1xcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3twcm9qZWN0Lm5hbWV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICA8L3VsPlxcclxcbiAgICA8L2xpPlxcclxcbjwvdWw+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL3RlbXBsYXRlcy9uYXYuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDQ2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxub3RpZmljYXRpb24+PC9ub3RpZmljYXRpb24+XFxyXFxuPGRpdiBjbGFzcz1cXFwibGF5b3V0XFxcIiBbY2xhc3MuaGlkZGVuXT1cXFwiIWlzUmVhZHlcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LW92ZXJsYXlcXFwiIChtb3VzZWRvd24pPVxcXCJoaWRlTmF2KCRldmVudClcXFwiICh0b3VjaHN0YXJ0KT1cXFwiaGlkZU5hdigkZXZlbnQpXFxcIj48L2Rpdj5cXHJcXG4gICAgPGhlYWRlciBjbGFzcz1cXFwiaGVhZGVyIG5hdmJhciBuYXZiYXItZml4ZWQtdG9wXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibmF2YmFyLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1zaWRlLW5hdi10b2dnbGVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwidG9nZ2xlTmF2KClcXFwiPjwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXCJicmFuZC1sb2dvXFxcIiBhbHQ9XFxcImxvZ29cXFwiIHNyYz1cXFwiaW1nL2xvZ28ucG5nXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYnJhbmQtdGl0bGVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAge3tIRUFERVJfVElUTEV9fVxcclxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPG5hdiBjbGFzcz1cXFwibmF2YmFyLW5hdiBuYXZiYXItcmlnaHRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYtaW5saW5lIG5hdmJhci1yaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGkgZHJvcGRvd24gY2xhc3M9XFxcImRyb3Bkb3duXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBkcm9wZG93bi10b2dnbGUgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImRyb3Bkb3duLXRvZ2dsZVxcXCIgKGNsaWNrKT1cXFwicHJldmVudERlZmF1bHQoJGV2ZW50KVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS11c2VyXFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSByaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJ1c2VyLXByb2ZpbGVcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWyd1c2VyLXByb2ZpbGUnXVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3tsb2dnZWRVc2VyLm5hbWV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJsb2dvdXRcXFwiIGhyZWY9XFxcIiNsb2dvdXRcXFwiIChjbGljayk9XFxcImxvZ291dCgkZXZlbnQpXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydsb2dvdXQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cXHJcXG4gICAgICAgICAgICAgICAgPC91bD5cXHJcXG4gICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XFxcIm5hdmJhci1mb3JtIG5hdmJhci1zZWFyY2hcXFwiIG5hbWU9XFxcImZ0LXNlYXJjaFxcXCIgKHN1Ym1pdCk9XFxcImZ0U2VhcmNoKClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImhpZGRlblxcXCIgbmFtZT1cXFwiaWRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwic2VhcmNoXFxcIiBjbGFzcz1cXFwicVxcXCIgbmFtZT1cXFwia2V5d29yZFxcXCIgdmFsdWU9XFxcInt7c2VhcmNoX2tleXdvcmR9fVxcXCIgcGxhY2Vob2xkZXI9XFxcInt7J3NlYXJjaCcgfCB0cmFuc2xhdGV9fVxcXCIgcmVxdWlyZWQgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIChmb2N1cyk9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAoYmx1cik9XFxcInNlYXJjaFRvZ2dsZSgpXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXRpbWVzXFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJzZWFyY2hcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDwvZm9ybT5cXHJcXG4gICAgICAgICAgICA8L25hdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2hlYWRlcj5cXHJcXG4gICAgPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICA8bmF2IG5hdiBjbGFzcz1cXFwiYXNpZGUgc2lkZS1uYXZcXFwiPjwvbmF2PlxcclxcbiAgICAgICAgPG1haW4gY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcclxcbiAgICAgICAgICAgIDxyb3V0ZXItb3V0bGV0Pjwvcm91dGVyLW91dGxldD5cXHJcXG4gICAgICAgIDwvbWFpbj5cXHJcXG4gICAgPC9zZWN0aW9uPlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC90ZW1wbGF0ZXMvYXBwLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA0NjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IHByb3ZpZGVSb3V0ZXIsIFJvdXRlckNvbmZpZyB9ICBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuaW1wb3J0IHsgQXV0aEd1YXJkIH0gZnJvbSAnLi9hdXRoLmd1YXJkJztcclxuaW1wb3J0IHsgRGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Rhc2hib2FyZCc7XHJcbmltcG9ydCB7IFByb2plY3RzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdHMnO1xyXG5pbXBvcnQgeyBQcm9qZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdCc7XHJcbmltcG9ydCB7IFRhc2tzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Rhc2svdGFza3MnO1xyXG5pbXBvcnQgeyBUYXNrQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Rhc2svdGFzayc7XHJcbmltcG9ydCB7IFVzZXJQcm9maWxlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3VzZXItcHJvZmlsZSc7XHJcbmltcG9ydCB7IExvZ2luQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2xvZ2luJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vbW9kZWxzL3VzZXInO1xyXG5cclxuY29uc3Qgcm91dGVzOiBSb3V0ZXJDb25maWcgPSBbXHJcbiAgICB7IHBhdGg6ICcnLCBjb21wb25lbnQ6IERhc2hib2FyZENvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdIH0sXHJcbiAgICB7IHBhdGg6ICdkYXNoYm9hcmQnLCBjb21wb25lbnQ6IERhc2hib2FyZENvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdIH0sXHJcbiAgICB7IHBhdGg6ICdwcm9qZWN0cy86cHJvamVjdElkJywgY29tcG9uZW50OiBQcm9qZWN0Q29tcG9uZW50LCBjYW5BY3RpdmF0ZTogW0F1dGhHdWFyZF0gfSxcclxuICAgIHsgcGF0aDogJ3Byb2plY3RzJywgY29tcG9uZW50OiBQcm9qZWN0c0NvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdIH0sXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgcGF0aDogJ3Byb2plY3RzJywgY29tcG9uZW50OiBQcm9qZWN0c0NvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdLCBjaGlsZHJlbjogW1xyXG4gICAgLy8gICAgICAgICB7IHBhdGg6ICc6cHJvamVjdElkJywgY29tcG9uZW50OiBQcm9qZWN0Q29tcG9uZW50IH1cclxuICAgIC8vICAgICBdXHJcbiAgICAvLyB9LFxyXG4gICAgeyBwYXRoOiAncHJvamVjdC86cHJvamVjdElkL3Rhc2tzJywgY29tcG9uZW50OiBUYXNrc0NvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdIH0sXHJcbiAgICB7IHBhdGg6ICd0YXNrcy86Zm9yJywgY29tcG9uZW50OiBUYXNrc0NvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFtBdXRoR3VhcmRdIH0sXHJcbiAgICB7IHBhdGg6ICd0YXNrcycsIGNvbXBvbmVudDogVGFza3NDb21wb25lbnQsIGNhbkFjdGl2YXRlOiBbQXV0aEd1YXJkXSB9LFxyXG4gICAgeyBwYXRoOiAndGFzay86dGFza0lkJywgY29tcG9uZW50OiBUYXNrQ29tcG9uZW50LCBjYW5BY3RpdmF0ZTogW0F1dGhHdWFyZF0gfSxcclxuICAgIHsgcGF0aDogJ3VzZXItcHJvZmlsZScsIGNvbXBvbmVudDogVXNlclByb2ZpbGVDb21wb25lbnQsIGNhbkFjdGl2YXRlOiBbQXV0aEd1YXJkXSB9LFxyXG4gICAgeyBwYXRoOiAnbG9naW4nLCBjb21wb25lbnQ6IExvZ2luQ29tcG9uZW50IH0sXHJcbiAgICB7IHBhdGg6ICcqKicsIGNvbXBvbmVudDogRGFzaGJvYXJkQ29tcG9uZW50LCBjYW5BY3RpdmF0ZTogW0F1dGhHdWFyZF0gfVxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFQUF9ST1VURVJfUFJPVklERVJTID0gW1xyXG4gICAgcHJvdmlkZVJvdXRlcihyb3V0ZXMpLFxyXG4gICAgQXV0aEd1YXJkXHJcbl07XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2FwcC5yb3V0ZXMudHNcbiAqKi8iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBSb3V0ZXIsXHJcbiAgICBDYW5BY3RpdmF0ZSxcclxuICAgIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgICBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmltcG9ydCB7IEFwcFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEF1dGhHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBjYW5BY3RpdmF0ZShuZXh0OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFwcFNlcnZpY2UuaXNMb2dnZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnbG9naW4nXSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2F1dGguZ3VhcmQudHNcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdbZGFzaGJvYXJkXScsXHJcbiAgICB0ZW1wbGF0ZTogJ2Rhc2hib2FyZCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL2Rhc2hib2FyZC50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgUk9VVEVSX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL25vdGlmaWNhdGlvbic7XHJcbmltcG9ydCB7IFRleHRUcmFuc2Zvcm1QaXBlLCBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4uLy4uL3BpcGVzJztcclxuaW1wb3J0IHsgUGFnaW5hdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3NoYXJlZC9wYWdpbmF0aW9uJztcclxuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gJy4uLy4uL21vZGVscy9wcm9qZWN0JztcclxuaW1wb3J0IHsgUHJvamVjdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wcm9qZWN0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9qZWN0Um93Q29tcG9uZW50IH0gZnJvbSAnLi9wcm9qZWN0LXJvdyc7XHJcbmltcG9ydCB7IFByb2plY3RDb21wb25lbnQgfSBmcm9tICcuL3Byb2plY3QnO1xyXG5pbXBvcnQgeyBGRVRDSF9QUk9KRUNUUywgSVByb2plY3RzU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9wcm9qZWN0cy5yZWR1Y2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwcm9qZWN0LWxpc3QnLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL3Byb2plY3RzLmh0bWwnKSxcclxuICAgIC8vIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgZGlyZWN0aXZlczogW1xyXG4gICAgICAgIFJPVVRFUl9ESVJFQ1RJVkVTLFxyXG4gICAgICAgIFBhZ2luYXRpb25Db21wb25lbnQsXHJcbiAgICAgICAgUHJvamVjdFJvd0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIHBpcGVzOiBbRGF0ZUZvcm1hdFBpcGUsIFRyYW5zbGF0ZVBpcGUsIFRleHRUcmFuc2Zvcm1QaXBlXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2plY3RzQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgc3RvcmVTdWI6IGFueTtcclxuXHJcbiAgICB0aXRsZSA9ICdwcm9qZWN0cyc7XHJcbiAgICBwcm9qZWN0czogUHJvamVjdFtdO1xyXG4gICAgcGFyYW1zOiBhbnkgPSB7fTtcclxuICAgIG1ldGE6IGFueSA9IHt9O1xyXG4gICAgcmVxdWVzdFByb2Nlc3M6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICBwcml2YXRlIHByb2plY3RTZXJ2aWNlOiBQcm9qZWN0U2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZVN1YiA9IHRoaXMuc3RvcmUuc2VsZWN0KCdwcm9qZWN0cycpLnN1YnNjcmliZSgoZGF0YTogSVByb2plY3RzU3RhdGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdHMgPSBkYXRhLnByb2plY3RzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhID0gZGF0YS5tZXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZERhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnN0b3JlU3ViICYmIHRoaXMuc3RvcmVTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGF0YShwYXJhbXM/KSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZS5mZXRjaFByb2plY3RzKHBhcmFtcykuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfUFJPSkVDVFMsIHBheWxvYWQ6IGRhdGEgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ29Ub1BhZ2UocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkRGF0YSh7XHJcbiAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3UHJvamVjdCgpIHtcclxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9wcm9qZWN0cycsICduZXcnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlUHJvamVjdCgpIHtcclxuICAgICAgICAvLyB0aGlzLnByb2plY3RTZXJ2aWNlLmRlbGV0ZVByb2plY3QodGhpcy5zZWxlY3RlZFByb2plY3RzKS5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdHMudHNcbiAqKi8iLCJleHBvcnQgeyBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4vZGF0ZS1mb3JtYXQucGlwZSc7XHJcbmV4cG9ydCB7IFRleHRUcmFuc2Zvcm1QaXBlIH0gZnJvbSAnLi90ZXh0LXRyYW5zZm9ybS5waXBlJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvcGlwZXMvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgeyBQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAnZGF0ZUZtdCcgfSlcclxuZXhwb3J0IGNsYXNzIERhdGVGb3JtYXRQaXBlIHtcclxuICAgIHRyYW5zZm9ybShkYXRlOiBEYXRlLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCFkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGZvcm1hdCA9ICdERC5NTS5ZWVlZJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtZCA9IG1vbWVudChkYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKG1kLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWQuZm9ybWF0KGZvcm1hdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvcGlwZXMvZGF0ZS1mb3JtYXQucGlwZS50c1xuICoqLyIsImltcG9ydCB7IFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3RleHQnIH0pXHJcbmV4cG9ydCBjbGFzcyBUZXh0VHJhbnNmb3JtUGlwZSB7XHJcbiAgICB0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCB0cmFuc2Zvcm06IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgc3dpdGNoICh0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjYXNlICdVJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvcGlwZXMvdGV4dC10cmFuc2Zvcm0ucGlwZS50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vcGFnaW5hdGlvbic7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NoYXJlZC9wYWdpbmF0aW9uL2luZGV4LnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBIb3N0QmluZGluZywgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAncGFnaW5hdGlvbicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwYWdpbmF0aW9uXCIgKm5nSWY9XCJ0b3RhbFBhZ2VzID4gMVwiPlxyXG4gICAgICAgICAgICA8YSBocmVmPVwiI1wiICpuZ0lmPVwic3RhcnRQYWdlID4gMVwiIChjbGljayk9XCJ0b1BhZ2UoJGV2ZW50LCAxKVwiPjE8L2E+XHJcbiAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwic3RhcnRQYWdlID4gMVwiPi4uLjwvc3Bhbj5cclxuICAgICAgICAgICAgPGEgW2NsYXNzLnBhZ2UtYWN0aXZlXT1cInAgPT0gY3VycmVudFBhZ2VcIiBocmVmPVwiI1wiICpuZ0Zvcj1cImxldCBwIG9mIHBhZ2VzXCIgKGNsaWNrKT1cInRvUGFnZSgkZXZlbnQsIHApXCI+e3twfX08L2E+XHJcbiAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwic3RvcFBhZ2UgPCB0b3RhbFBhZ2VzXCI+Li4uPC9zcGFuPlxyXG4gICAgICAgICAgICA8YSAqbmdJZj1cInN0b3BQYWdlIDwgdG90YWxQYWdlc1wiIGhyZWY9XCIjXCIgKGNsaWNrKT1cInRvUGFnZSgkZXZlbnQsIHRvdGFsUGFnZXMpXCI+e3t0b3RhbFBhZ2VzfX08L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbkNvbXBvbmVudCB7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2hpZGRlbicpIGdldCBob3N0SGlkZGVuKCkgeyByZXR1cm4gdGhpcy50b3RhbFBhZ2VzIDwgMjsgfTtcclxuXHJcbiAgICBASW5wdXQoKSBtYXhQYWdlQ29udHJvbDogbnVtYmVyID0gNTtcclxuICAgIEBJbnB1dCgpIHRvdGFsUGFnZXM6IG51bWJlciA9IC0xO1xyXG4gICAgQElucHV0KCdwYWdlJylcclxuICAgIHNldCBwYWdlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gK3ZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCA8IDIpIHtcclxuICAgICAgICAgICAgKyt0aGlzLmluaXRpYWxpemVkO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE91dHB1dCgpIG9uUGFnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICAgIGluaXRpYWxpemVkOiBudW1iZXIgPSAwO1xyXG4gICAgY3VycmVudFBhZ2U6IG51bWJlciA9IDA7XHJcbiAgICBzdGFydFBhZ2U6IG51bWJlciA9IDA7XHJcbiAgICBzdG9wUGFnZTogbnVtYmVyID0gMDtcclxuICAgIHBhZ2VzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgdG9QYWdlKGV2ZW50LCBwYWdlOiBudW1iZXIpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSArcGFnZTtcclxuICAgICAgICB0aGlzLm9uUGFnZUNoYW5nZS5lbWl0KHsgcGFnZTogcGFnZSB9KTtcclxuICAgICAgICB0aGlzLnBhZ2luYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBwYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMucGFnZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA8PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubWF4UGFnZUNvbnRyb2wgPSArdGhpcy5tYXhQYWdlQ29udHJvbDtcclxuICAgICAgICB0aGlzLnRvdGFsUGFnZXMgPSArdGhpcy50b3RhbFBhZ2VzO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSArdGhpcy5jdXJyZW50UGFnZTtcclxuXHJcbiAgICAgICAgbGV0IHBlclBhZ2UgPSBNYXRoLmZsb29yKHRoaXMubWF4UGFnZUNvbnRyb2wgLyAyKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UGFnZSA9ICh0aGlzLmN1cnJlbnRQYWdlIC0gcGVyUGFnZSk7XHJcbiAgICAgICAgdGhpcy5zdG9wUGFnZSA9ICh0aGlzLmN1cnJlbnRQYWdlICsgcGVyUGFnZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0UGFnZSA8PSBwZXJQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQYWdlID0gMTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT0gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQYWdlID0gdGhpcy50b3RhbFBhZ2VzIC0gdGhpcy5tYXhQYWdlQ29udHJvbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0b3BQYWdlID4gKHRoaXMudG90YWxQYWdlcyAtIHBlclBhZ2UpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFBhZ2UgPSB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRQYWdlID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wUGFnZSA9IHRoaXMubWF4UGFnZUNvbnRyb2wgKyAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCh0aGlzLm1heFBhZ2VDb250cm9sICsgcGVyUGFnZSkgPj0gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQYWdlID0gMTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wUGFnZSA9IHRoaXMudG90YWxQYWdlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHAgPSB0aGlzLnN0YXJ0UGFnZTsgcCA8PSB0aGlzLnN0b3BQYWdlOyBwKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlcy5wdXNoKHApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJPVVRFUl9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBUZXh0VHJhbnNmb3JtUGlwZSwgRGF0ZUZvcm1hdFBpcGUgfSBmcm9tICcuLi8uLi9waXBlcyc7XHJcbmltcG9ydCB7IEN1c3RvbWVyQ2VsbENvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC9jdXN0b21lci1jZWxsJztcclxuaW1wb3J0IHsgVXNlckNlbGxDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvdXNlci1jZWxsJztcclxuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gJy4uLy4uL21vZGVscy9wcm9qZWN0JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwcm9qZWN0LXJvdycsXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvcHJvamVjdC1yb3cuaHRtbCcpLFxyXG4gICAgZGlyZWN0aXZlczogW1JPVVRFUl9ESVJFQ1RJVkVTLCBDdXN0b21lckNlbGxDb21wb25lbnQsIFVzZXJDZWxsQ29tcG9uZW50XSxcclxuICAgIHBpcGVzOiBbRGF0ZUZvcm1hdFBpcGUsIFRyYW5zbGF0ZVBpcGUsIFRleHRUcmFuc2Zvcm1QaXBlXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2plY3RSb3dDb21wb25lbnQge1xyXG4gICAgQElucHV0KCkgcHJvamVjdDogUHJvamVjdDtcclxuICAgIC8vIEBPdXRwdXRcclxuICAgIHByaXZhdGUgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICB0b2dnbGVTZWxlY3RlZCgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy9wcm9qZWN0L3Byb2plY3Qtcm93LnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2N1c3RvbWVyLWNlbGwnLFxyXG4gICAgdGVtcGxhdGU6IGB7eyBjdXN0b21lcj8ubmFtZSB9fWBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21lckNlbGxDb21wb25lbnQge1xyXG4gICAgQElucHV0KCkgY3VzdG9tZXJJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBjdXN0b21lcjogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4pIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KCdzdGFmZicpLnN1YnNjcmliZSgoc3RhdGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmN1c3RvbWVyID0gc3RhdGUub3JnYW5pemF0aW9ucy5maWx0ZXIoaXQgPT4gaXQuaWQgPT0gdGhpcy5jdXN0b21lcklkKVswXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3NoYXJlZC9jdXN0b21lci1jZWxsLnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3VzZXItY2VsbCcsXHJcbiAgICB0ZW1wbGF0ZTogYHt7IHVzZXI/LmxvZ2luIH19YFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJDZWxsQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB1c2VyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZTogU3RvcmU8YW55PikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoJ3N0YWZmJykuc3Vic2NyaWJlKChzdGF0ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS51c2Vycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VyID0gc3RhdGUudXNlcnMuZmlsdGVyKGl0ID0+IGl0LmlkID09IHRoaXMudXNlcklkKVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvc2hhcmVkL3VzZXItY2VsbC50c1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJlbnRyeS13cmFwXFxcIiBbY2xhc3MuYWN0aXZlXT1cXFwic2VsZWN0ZWRcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeVxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBuYW1lPVxcXCJwcm9qZWN0LWlkXFxcIiB2YWx1ZT1cXFwie3twcm9qZWN0LmlkfX1cXFwiIChjaGFuZ2UpPVxcXCJ0b2dnbGVTZWxlY3RlZCgpXFxcIiBbY2hlY2tlZF09XFxcInNlbGVjdGVkXFxcIiAvPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDxhIGNsYXNzPVxcXCJlbnRyeS1saW5rXFxcIiBbcm91dGVyTGlua109XFxcIlsnLi8nLCBwcm9qZWN0LmlkXVxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cnktZmllbGRzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3QtbmFtZVxcXCI+e3twcm9qZWN0Lm5hbWV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3Qtc3RhdHVzXFxcIj57e3Byb2plY3Quc3RhdHVzIHwgdGV4dDonTCcgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWljb25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXBhcGVyY2xpcFxcXCIgKm5nSWY9XFxcInByb2plY3QuaGFzQXR0YWNobWVudHNcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctcHJvamVjdC1jdXN0b21lclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8Y3VzdG9tZXItY2VsbCBbY3VzdG9tZXJJZF09XFxcInByb2plY3QuY3VzdG9tZXJJZFxcXCI+PC9jdXN0b21lci1jZWxsPlxcclxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy11c2VyLW1hbmFnZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHVzZXItY2VsbCBbdXNlcklkXT1cXFwicHJvamVjdC5tYW5hZ2VyVXNlcklkXFxcIj48L3VzZXItY2VsbD5cXHJcXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdXNlci1wcm9ncmFtbWVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx1c2VyLWNlbGwgW3VzZXJJZF09XFxcInByb2plY3QucHJvZ3JhbW1lclVzZXJJZFxcXCI+PC91c2VyLWNlbGw+XFxyXFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXVzZXItdGVzdGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx1c2VyLWNlbGwgW3VzZXJJZF09XFxcInByb2plY3QudGVzdGVyVXNlcklkXFxcIj48L3VzZXItY2VsbD5cXHJcXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctcHJvamVjdC1jb21tZW50XFxcIj57e3Byb2plY3QuY29tbWVudH19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctZGF0ZVxcXCI+e3twcm9qZWN0LmZpbmlzaERhdGUgfCBkYXRlRm10fX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Byb2plY3QvdGVtcGxhdGVzL3Byb2plY3Qtcm93Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA1NzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxyXFxuICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXHJcXG4gICAgICAgIHt7dGl0bGUgfCB0cmFuc2xhdGV9fVxcclxcbiAgICA8L2gxPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWFjdGlvbnNcXFwiPlxcclxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcIm5ld1Byb2plY3QoKVxcXCI+XFxyXFxuICAgICAgICAgICAge3snbmV3X3Byb2plY3QnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgPHBhZ2luYXRpb24gY2xhc3M9XFxcInB1bGwtcmlnaHRcXFwiIHRvdGFsUGFnZXM9XFxcInt7bWV0YS50b3RhbFBhZ2VzfX1cXFwiIHBhZ2U9XFxcInt7bWV0YS5wYWdlfX1cXFwiIChvblBhZ2VDaGFuZ2UpPVxcXCJnb1RvUGFnZSgkZXZlbnQpXFxcIj48L3BhZ2luYXRpb24+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcbjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYm9keVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInZpZXcgdmlldy1wcm9qZWN0XFxcIiBbY2xhc3MubG9hZF09XFxcInJlcXVlc3RQcm9jZXNzXFxcIj5cXHJcXG4gICAgICAgIDxoZWFkZXIgY2xhc3M9XFxcImVudHJpZXMtaGVhZFxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZC13cmFwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJlbnRyeS1zZWxlY3RcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwiYWxsXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS1jYXB0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctcHJvamVjdC1uYW1lXFxcIj57eyduYW1lJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXByb2plY3Qtc3RhdHVzXFxcIj57eydzdGF0dXMnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctaWNvblxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLXBhcGVyY2xpcFxcXCI+PC9pPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1wcm9qZWN0LWN1c3RvbWVyXFxcIj57eydjdXN0b21lcicgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy11c2VyLW1hbmFnZXJcXFwiPnt7J21hbmFnZXInIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdXNlci1wcm9ncmFtbWVyXFxcIj57eydwcm9ncmFtbWVyJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXVzZXItdGVzdGVyXFxcIj57eyd0ZXN0ZXInIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctcHJvamVjdC1jb21tZW50XFxcIj57eydjb21tZW50JyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7J2ZpbmlzaF9kYXRlJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvaGVhZGVyPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZW50cmllc1xcXCI+XFxyXFxuICAgICAgICAgICAgPHByb2plY3Qtcm93IFtwcm9qZWN0XT1cXFwicHJvamVjdFxcXCIgKm5nRm9yPVxcXCJsZXQgcHJvamVjdCBvZiBwcm9qZWN0c1xcXCI+PC9wcm9qZWN0LXJvdz5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG48cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2NvbXBvbmVudHMvcHJvamVjdC90ZW1wbGF0ZXMvcHJvamVjdHMuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDU3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGUsIFJPVVRFUl9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIENvbnRyb2xHcm91cCwgQ29udHJvbCwgRk9STV9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnbmcyLXRyYW5zbGF0ZS9uZzItdHJhbnNsYXRlJztcclxuXHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbm90aWZpY2F0aW9uJztcclxuaW1wb3J0IHsgRFJPUERPV05fRElSRUNUSVZFUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9kcm9wZG93bic7XHJcbmltcG9ydCB7IFN3aXRjaEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3NoYXJlZC9zd2l0Y2gtYnV0dG9uJztcclxuaW1wb3J0IHsgQ3VzdG9tZXJTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvY3VzdG9tZXItc2VsZWN0JztcclxuaW1wb3J0IHsgVXNlclNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC91c2VyLXNlbGVjdCc7XHJcbmltcG9ydCB7IFRleHRUcmFuc2Zvcm1QaXBlIH0gZnJvbSAnLi4vLi4vcGlwZXMnO1xyXG5pbXBvcnQgeyBBcHBTZXJ2aWNlLCBQcm9qZWN0U2VydmljZSwgVGFza1NlcnZpY2UsIFN0YWZmU2VydmljZSwgUmVmZXJlbmNlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgUHJvamVjdCwgT3JnYW5pemF0aW9uLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwcm9qZWN0JyxcclxuICAgIHN0eWxlczogW2Bwcm9qZWN0IHsgZGlzcGxheTogYmxvY2s7IH1gXSxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy9wcm9qZWN0Lmh0bWwnKSxcclxuICAgIGRpcmVjdGl2ZXM6IFtcclxuICAgICAgICBST1VURVJfRElSRUNUSVZFUyxcclxuICAgICAgICBGT1JNX0RJUkVDVElWRVMsXHJcbiAgICAgICAgRFJPUERPV05fRElSRUNUSVZFUyxcclxuICAgICAgICBTd2l0Y2hCdXR0b25Db21wb25lbnQsXHJcbiAgICAgICAgQ3VzdG9tZXJTZWxlY3RDb21wb25lbnQsXHJcbiAgICAgICAgVXNlclNlbGVjdENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW0Zvcm1CdWlsZGVyXSxcclxuICAgIHBpcGVzOiBbVHJhbnNsYXRlUGlwZSwgVGV4dFRyYW5zZm9ybVBpcGVdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvamVjdENvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIHN1YjogYW55O1xyXG4gICAgcHJpdmF0ZSBzdG9yZVN1YjogYW55O1xyXG5cclxuICAgIGlzUmVhZHkgPSBmYWxzZTtcclxuICAgIHByb2plY3Q6IFByb2plY3Q7XHJcbiAgICBmb3JtOiBDb250cm9sR3JvdXA7XHJcblxyXG4gICAgcHJvamVjdFN0YXR1c1R5cGVzOiBhbnk7XHJcbiAgICBwcml2YXRlIHRvO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcclxuICAgICAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBwcm9qZWN0U2VydmljZTogUHJvamVjdFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBzdGFmZlNlcnZpY2U6IFN0YWZmU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XHJcbiAgICAgICAgICAgIG5hbWU6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgICAgIHN0YXR1czogWycnXSxcclxuICAgICAgICAgICAgY3VzdG9tZXJVc2VySWQ6IFsnJ10sXHJcbiAgICAgICAgICAgIG1hbmFnZXJVc2VySWQ6IFsnJ10sXHJcbiAgICAgICAgICAgIHByb2dyYW1tZXJVc2VySWQ6IFsnJ10sXHJcbiAgICAgICAgICAgIHRlc3RlclVzZXJJZDogWycnXSxcclxuICAgICAgICAgICAgb2JzZXJ2ZXJVc2VySWRzOiBbJyddLFxyXG4gICAgICAgICAgICBjb21tZW50OiBbJyddLFxyXG4gICAgICAgICAgICBmaW5pc2hEYXRlOiBbJyddLFxyXG4gICAgICAgICAgICBhdHRhY2htZW50czogWycnXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnN1YiA9IHRoaXMucm91dGUucGFyYW1zLnN1YnNjcmliZShwYXJhbXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3RTZXJ2aWNlLmZldGNoUHJvamVjdEJ5SWQocGFyYW1zWydwcm9qZWN0SWQnXSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgcHJvamVjdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocHJvamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvciA9PiB0aGlzLmhhbmRsZVhockVycm9yKGVycm9yKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWREYXRhKCkge1xyXG4gICAgICAgIHRoaXMucHJvamVjdFNlcnZpY2UuZ2V0UHJvamVjdFN0YXR1c1R5cGVzKCkuc3Vic2NyaWJlKGRhdGEgPT4gdGhpcy5wcm9qZWN0U3RhdHVzVHlwZXMgPSBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlUHJvamVjdCgpIHtcclxuICAgICAgICBsZXQgbm90eSA9IHRoaXMubm90aWZ5U2VydmljZS5wcm9jZXNzKHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ3dhaXRfd2hpbGVfZG9jdW1lbnRfc2F2ZScpKS5zaG93KCk7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0U2VydmljZS5zYXZlUHJvamVjdCh0aGlzLnByb2plY3QpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgbm90eS5zZXQoeyB0eXBlOiAnc3VjY2VzcycsIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UgfSkucmVtb3ZlKDE1MDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBub3R5LnNldCh7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSkucmVtb3ZlKDE1MDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvclNhdmVQcm9qZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKCkgPT4gbm90eS5yZW1vdmUoMTUwMClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGVycm9yU2F2ZVByb2plY3QoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3Byb2plY3RzJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvclJlc3BvbnNlKTtcclxuICAgICAgICBpZiAoZXJyb3JSZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U3RhdHVzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0LnN0YXR1cyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlRHJvcGRvd24oKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGljaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdEN1c3RvbWVyKGN1c3RvbWVyOiBPcmdhbml6YXRpb24pIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnc2VsZWN0JywgY3VzdG9tZXIpO1xyXG4gICAgICAgIHRoaXMucHJvamVjdC5jdXN0b21lcklkID0gY3VzdG9tZXIuaWQ7XHJcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0TWFuYWdlcih1c2VyOiBVc2VyKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0Lm1hbmFnZXJVc2VySWQgPSB1c2VyLmlkO1xyXG4gICAgICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdFByb2dyYW1tZXIodXNlcjogVXNlcikge1xyXG4gICAgICAgIHRoaXMucHJvamVjdC5wcm9ncmFtbWVyVXNlcklkID0gdXNlci5pZDtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RUZXN0ZXIodXNlcjogVXNlcikge1xyXG4gICAgICAgIHRoaXMucHJvamVjdC50ZXN0ZXJVc2VySWQgPSB1c2VyLmlkO1xyXG4gICAgICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdE9ic2VydmVyKG9ic2VydmVyOiBVc2VyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb2plY3Qub2JzZXJ2ZXJVc2VySWRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdC5vYnNlcnZlclVzZXJJZHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0Lm9ic2VydmVyVXNlcklkcy5wdXNoKG9ic2VydmVyLmlkKTtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVPYnNlcnZlcihvYnNlcnZlcjogVXNlciwgJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0Lm9ic2VydmVyVXNlcklkcy5mb3JFYWNoKChpZCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGlkID09PSBvYnNlcnZlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0Lm9ic2VydmVyVXNlcklkcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdC50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vc3dpdGNoLWJ1dHRvbic7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NoYXJlZC9zd2l0Y2gtYnV0dG9uL2luZGV4LnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzd2l0Y2gtYnV0dG9uJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiaW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmFjdGl2ZV09XCJpc1NlbGVjdGVkKGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5kaXNhYmxlZF09XCJkaXNhYmxlZCB8fCBpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwie3ttdWx0aSA/ICdjaGVja2JveCcgOiAncmFkaW8nfX1cIlxyXG4gICAgICAgICAgICAgICAgbmFtZT1cInt7bmFtZX19XCJcclxuICAgICAgICAgICAgICAgIHZhbHVlPVwie3tpdGVtLnZhbHVlfX1cIlxyXG4gICAgICAgICAgICAgICAgW2NoZWNrZWRdPVwiaXNTZWxlY3RlZChpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWQgfHwgaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAoY2hhbmdlKT1cInNlbGVjdChpdGVtLnZhbHVlLCAkZXZlbnQpXCIgLz5cclxuICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS17e2l0ZW0uaWNvbn19XCIgKm5nSWY9XCJpdGVtLmljb25cIj48L2k+XHJcbiAgICAgICAgICAgIDxzcGFuPnt7aXRlbS50ZXh0fX08L3NwYW4+XHJcbiAgICAgICAgPC9sYWJlbD5cclxuICAgIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTd2l0Y2hCdXR0b25Db21wb25lbnQge1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zd2l0Y2gtYnV0dG9uJykgdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBtb2RlbDtcclxuICAgIEBJbnB1dCgpIHZhbHVlOyAvLyBtb2RlbCBmaWVsZCBuYW1lXHJcbiAgICBASW5wdXQoKSBpdGVtcztcclxuICAgIEBJbnB1dCgpIG5hbWUgPSAnc3diJyArIE1hdGgucmFuZG9tKCk7XHJcbiAgICBASW5wdXQoKSBtdWx0aSA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGNoZWNrRGVmYXVsdCA9IHRydWU7XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgICAgIFtdLmNvbmNhdCh0aGlzLml0ZW1zKS5mb3JFYWNoKGl0ID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tEZWZhdWx0ICYmIGl0LnZhbHVlID09IHRoaXMubW9kZWxbdGhpcy52YWx1ZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tEZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3QodmFsdWUsIGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbFt0aGlzLnZhbHVlXSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU2VsZWN0ZWQoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlID09IHRoaXMubW9kZWxbdGhpcy52YWx1ZV0gfHwgKHRoaXMuY2hlY2tEZWZhdWx0ICYmIGl0ZW0uZGVmYXVsdCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc2hhcmVkL3N3aXRjaC1idXR0b24vc3dpdGNoLWJ1dHRvbi50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlIH0gZnJvbSAnbmcyLXRyYW5zbGF0ZS9uZzItdHJhbnNsYXRlJztcclxuXHJcbmltcG9ydCB7IERST1BET1dOX0RJUkVDVElWRVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvZHJvcGRvd24nO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2N1c3RvbWVyLXNlbGVjdCcsXHJcbiAgICBkaXJlY3RpdmVzOiBbRFJPUERPV05fRElSRUNUSVZFU10sXHJcbiAgICBwaXBlczogW1RyYW5zbGF0ZVBpcGVdLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGRyb3Bkb3duIGNsYXNzPVwic2VsZWN0XCI+XHJcbiAgICAgICAgICAgIDxkaXYgZHJvcGRvd24tdG9nZ2xlIGNsYXNzPVwic2VsZWN0LXNlbGVjdGlvbiBpbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e3tjdXN0b21lcj8ubmFtZX19PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnUgc2VsZWN0LWRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJzZWxlY3Qtc2VhcmNoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJrZXl3b3JkXCIgcGxhY2Vob2xkZXI9XCJ7eydzZWFyY2gnIHwgdHJhbnNsYXRlfX1cIiAoa2V5dXApPVwic2VhcmNoQ3VzdG9tZXIoJGV2ZW50KVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJzZWxlY3QtbGlzdCBzY3JvbGwtc2hhZG93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic2VsZWN0LW9wdGlvblwiIFtjbGFzcy5zZWxlY3RlZF09XCJjdXN0b21lcj8uaWQgPT0gbS5pZFwiICpuZ0Zvcj1cImxldCBtIG9mIGN1c3RvbWVyc1wiIChjbGljayk9XCJzZWxlY3QobSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3ttLm5hbWV9fVxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21lclNlbGVjdENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoKSBjdXN0b21lcklkOiBzdHJpbmc7XHJcbiAgICBAT3V0cHV0KCkgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgcHJpdmF0ZSBjdXN0b21lcnM6IGFueTtcclxuICAgIHByaXZhdGUgY3VzdG9tZXI6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JlOiBTdG9yZTxhbnk+KSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnN0b3JlLnNlbGVjdCgnc3RhZmYnKS5zdWJzY3JpYmUoKHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21lcnMgPSBzdGF0ZS5vcmdhbml6YXRpb25zO1xyXG4gICAgICAgICAgICB0aGlzLmN1c3RvbWVyID0gc3RhdGUub3JnYW5pemF0aW9ucy5maWx0ZXIoaXQgPT4gaXQuaWQgPT0gdGhpcy5jdXN0b21lcklkKVswXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3QobSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tZXIgPSBtO1xyXG4gICAgICAgIHRoaXMub25TZWxlY3QuZW1pdCh0aGlzLmN1c3RvbWVyKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3NoYXJlZC9jdXN0b21lci1zZWxlY3QudHNcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBEUk9QRE9XTl9ESVJFQ1RJVkVTIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2Ryb3Bkb3duJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndXNlci1zZWxlY3QnLFxyXG4gICAgZGlyZWN0aXZlczogW0RST1BET1dOX0RJUkVDVElWRVNdLFxyXG4gICAgcGlwZXM6IFtUcmFuc2xhdGVQaXBlXSxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGRpdiBkcm9wZG93biBjbGFzcz1cInNlbGVjdFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGRyb3Bkb3duLXRvZ2dsZSBjbGFzcz1cInNlbGVjdC1zZWxlY3Rpb24gaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPnt7dXNlcj8udXNlck5hbWUgfHwgdXNlcj8ubG9naW59fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IHNlbGVjdC1kcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwic2VsZWN0LWxpc3Qgc2Nyb2xsLXNoYWRvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInNlbGVjdC1vcHRpb25cIiBbY2xhc3Muc2VsZWN0ZWRdPVwidXNlcklkID09IG0uaWRcIiAqbmdGb3I9XCJsZXQgbSBvZiB1c2Vyc1wiIChjbGljayk9XCJzZWxlY3QobSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3ttLm5hbWUgfHwgbS5sb2dpbn19XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJTZWxlY3RDb21wb25lbnQge1xyXG4gICAgQElucHV0KCkgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBAT3V0cHV0KCkgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgcHJpdmF0ZSB1c2VyczogYW55O1xyXG4gICAgcHJpdmF0ZSB1c2VyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZTogU3RvcmU8YW55PikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoJ3N0YWZmJykuc3Vic2NyaWJlKChzdGF0ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlcnMgPSBzdGF0ZS51c2VycztcclxuICAgICAgICAgICAgdGhpcy51c2VyID0gc3RhdGUudXNlcnMuZmlsdGVyKGl0ID0+IGl0LmlkID09IHRoaXMudXNlcklkKVswXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3QobSkge1xyXG4gICAgICAgIHRoaXMudXNlciA9IG07XHJcbiAgICAgICAgdGhpcy5vblNlbGVjdC5lbWl0KHRoaXMudXNlcik7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy9zaGFyZWQvdXNlci1zZWxlY3QudHNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGZvcm0gY2xhc3M9XFxcImZvcm1cXFwiIFtuZ0Zvcm1Nb2RlbF09XFxcImZvcm1cXFwiICpuZ0lmPVxcXCJpc1JlYWR5XFxcIj5cXHJcXG4gICAgPGhlYWRlciBjbGFzcz1cXFwiY29udGVudC1oZWFkZXJcXFwiPlxcclxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWJhY2tcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWNoZXZyb24tbGVmdFxcXCI+PC9pPlxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICA8aDEgY2xhc3M9XFxcImhlYWRlci10aXRsZVxcXCI+XFxyXFxuICAgICAgICAgICAge3socHJvamVjdC5pZCA/ICdwcm9qZWN0JyA6ICduZXdfcHJvamVjdCcpIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgIDwvaDE+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LWFjdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBbZGlzYWJsZWRdPVxcXCIhZm9ybS52YWxpZFxcXCIgKGNsaWNrKT1cXFwic2F2ZVByb2plY3QoKVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIHt7J3NhdmVfY2xvc2UnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIHt7J2Nsb3NlJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9oZWFkZXI+XFxyXFxuICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJjb250ZW50LWJvZHlcXFwiPlxcclxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAge3snbmFtZScgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy5uYW1lLnZhbGlkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwic3BhbjhcXFwiIFsobmdNb2RlbCldPVxcXCJwcm9qZWN0Lm5hbWVcXFwiIG5nQ29udHJvbD1cXFwibmFtZVxcXCIgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMubmFtZS52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLm5hbWUucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J2N1c3RvbWVyJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmN1c3RvbWVyVXNlcklkLnZhbGlkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYW44XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y3VzdG9tZXItc2VsZWN0IFtjdXN0b21lcklkXT1cXFwicHJvamVjdC5jdXN0b21lcklkXFxcIiAob25TZWxlY3QpPVxcXCJzZWxlY3RDdXN0b21lcigkZXZlbnQpXFxcIj48L2N1c3RvbWVyLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5jdXN0b21lclVzZXJJZC52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLmN1c3RvbWVyVXNlcklkLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eydtYW5hZ2VyJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLm1hbmFnZXJVc2VySWQudmFsaWRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3BhbjhcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2VyLXNlbGVjdCBbdXNlcklkXT1cXFwicHJvamVjdC5tYW5hZ2VyVXNlcklkXFxcIiAob25TZWxlY3QpPVxcXCJzZWxlY3RNYW5hZ2VyKCRldmVudClcXFwiPjwvdXNlci1zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMubWFuYWdlclVzZXJJZC52YWxpZCB8fCBmb3JtLmNvbnRyb2xzLm1hbmFnZXJVc2VySWQucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J3Byb2dyYW1tZXInIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMucHJvZ3JhbW1lclVzZXJJZC52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGFuOFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZXItc2VsZWN0IFt1c2VySWRdPVxcXCJwcm9qZWN0LnByb2dyYW1tZXJVc2VySWRcXFwiIChvblNlbGVjdCk9XFxcInNlbGVjdFByb2dyYW1tZXIoJGV2ZW50KVxcXCI+PC91c2VyLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy5wcm9ncmFtbWVyVXNlcklkLnZhbGlkIHx8IGZvcm0uY29udHJvbHMucHJvZ3JhbW1lclVzZXJJZC5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAge3sndGVzdGVyJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLnRlc3RlclVzZXJJZC52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGFuOFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZXItc2VsZWN0IFt1c2VySWRdPVxcXCJwcm9qZWN0LnRlc3RlclVzZXJJZFxcXCIgKG9uU2VsZWN0KT1cXFwic2VsZWN0VGVzdGVyKCRldmVudClcXFwiPjwvdXNlci1zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMudGVzdGVyVXNlcklkLnZhbGlkIHx8IGZvcm0uY29udHJvbHMudGVzdGVyVXNlcklkLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eydvYnNlcnZlcnMnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYW44XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlci1zZWxlY3QgW3VzZXJJZF09XFxcInByb2plY3Qub2JzZXJ2ZXJVc2VySWRzXFxcIiAob25TZWxlY3QpPVxcXCJzZWxlY3RPYnNlcnZlcigkZXZlbnQpXFxcIj48L3VzZXItc2VsZWN0PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J3N0YXR1cycgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHN3aXRjaC1idXR0b24gW21vZGVsXT1cXFwicHJvamVjdFxcXCIgdmFsdWU9XFxcInN0YXR1c1xcXCIgW2l0ZW1zXT1cXFwicHJvamVjdFN0YXR1c1R5cGVzXFxcIj48L3N3aXRjaC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J2ZpbmlzaF9kYXRlJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgY2xhc3M9XFxcInNwYW4yXFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5maW5pc2hEYXRlXFxcIiBuZ0NvbnRyb2w9XFxcImZpbmlzaERhdGVcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J2NvbW1lbnQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMuY29tbWVudC52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwicHJvamVjdC5jb21tZW50XFxcIiBuZ0NvbnRyb2w9XFxcImNvbW1lbnRcXFwiPjwvdGV4dGFyZWE+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLmNvbW1lbnQudmFsaWQgfHwgZm9ybS5jb250cm9scy5jb21tZW50LnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZmllbGRzZXQ+XFxyXFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0XFxcIj5cXHJcXG4gICAgICAgICAgICA8bGVnZW5kIGNsYXNzPVxcXCJsZWdlbmRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICB7eydhdHRhY2htZW50cycgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgIDwvbGVnZW5kPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tdXBsb2FkXFxcIiBkYXRhLXVwbG9hZD1cXFwiXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1wYXBlcmNsaXBcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7J2F0dGFjaF9maWxlJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXR0YWNobWVudHNcXFwiIGRhdGEtdXBsb2FkLWZpbGVzPVxcXCJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXR0YWNobWVudHMtZmlsZVxcXCIgKm5nRm9yPVxcXCJsZXQgYXR0IG9mIHByb2plY3QuYXR0YWNobWVudHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJmaWxlLW5hbWVcXFwiIGhyZWY9XFxcInt7YXR0LnVybH19XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3thdHQucmVhbEZpbGVOYW1lfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWxpbmsgYnRuLXJlbW92ZS1maWxlIG9uLWVkaXRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtdGltZXNcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2ZpZWxkc2V0PlxcclxcbiAgICA8L3NlY3Rpb24+XFxyXFxuPC9mb3JtPlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Byb2plY3QvdGVtcGxhdGVzL3Byb2plY3QuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDU4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSwgUk9VVEVSX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL25vdGlmaWNhdGlvbic7XHJcbmltcG9ydCB7IFRleHRUcmFuc2Zvcm1QaXBlLCBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4uLy4uL3BpcGVzJztcclxuaW1wb3J0IHsgUGFnaW5hdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3NoYXJlZC9wYWdpbmF0aW9uJztcclxuaW1wb3J0IHsgVGFzayB9IGZyb20gJy4uLy4uL21vZGVscy90YXNrJztcclxuaW1wb3J0IHsgVGFza1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90YXNrLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUYXNrUm93Q29tcG9uZW50IH0gZnJvbSAnLi90YXNrLXJvdyc7XHJcbmltcG9ydCB7IFRhc2tDb21wb25lbnQgfSBmcm9tICcuL3Rhc2snO1xyXG5pbXBvcnQgeyBGRVRDSF9UQVNLUywgSVRhc2tzU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy90YXNrcy5yZWR1Y2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0YXNrcycsXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90ZW1wbGF0ZXMvdGFza3MuaHRtbCcpLFxyXG4gICAgLy8gY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVMsIFBhZ2luYXRpb25Db21wb25lbnQsIFRhc2tSb3dDb21wb25lbnRdLFxyXG4gICAgcGlwZXM6IFtEYXRlRm9ybWF0UGlwZSwgVHJhbnNsYXRlUGlwZSwgVGV4dFRyYW5zZm9ybVBpcGVdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVGFza3NDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBzdG9yZVN1YjogYW55O1xyXG4gICAgcHJpdmF0ZSBwYXJhbXNTdWI6IGFueTtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICB0YXNrczogVGFza1tdO1xyXG4gICAgcGFyYW1zOiBhbnkgPSB7fTtcclxuICAgIG1ldGE6IGFueSA9IHt9O1xyXG4gICAgcmVxdWVzdFByb2Nlc3M6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIHRhc2tTZXJ2aWNlOiBUYXNrU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZVN1YiA9IHRoaXMuc3RvcmUuc2VsZWN0KCd0YXNrcycpLnN1YnNjcmliZSgoZGF0YTogSVRhc2tzU3RhdGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFza3MgPSBkYXRhLnRhc2tzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhID0gZGF0YS5tZXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucGFyYW1zU3ViID0gdGhpcy5yb3V0ZS5wYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0YXNrRm9yID0gcGFyYW1zWydmb3InXTtcclxuICAgICAgICAgICAgbGV0IHByb2plY3RJZCA9IHBhcmFtc1sncHJvamVjdElkJ107XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFza0Zvcikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5ib3gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGUgPSAndGFza3NfYXNzaWduZWRfdG9fbWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbXknOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGl0bGUgPSAnbXlfdGFza3MnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gJ3Rhc2tzJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICAgICAgdGhpcy5sb2FkRGF0YSh0aGlzLnBhcmFtcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZVN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIHRoaXMucGFyYW1zU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZERhdGEocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0UHJvY2VzcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50YXNrU2VydmljZS5mZXRjaFRhc2tzKHBhcmFtcykuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfVEFTS1MsIHBheWxvYWQ6IGRhdGEgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ29Ub1BhZ2UocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkRGF0YSh7XHJcbiAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3VGFzaygpIHtcclxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy90YXNrJywgJ25ldyddKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVUYXNrKHRhc2s6IFRhc2spIHtcclxuICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmRlbGV0ZVRhc2sodGFzaykuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy90YXNrL3Rhc2tzLnRzXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJPVVRFUl9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBVc2VyQ2VsbENvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC91c2VyLWNlbGwnO1xyXG5pbXBvcnQgeyBUZXh0VHJhbnNmb3JtUGlwZSwgRGF0ZUZvcm1hdFBpcGUgfSBmcm9tICcuLi8uLi9waXBlcyc7XHJcbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi8uLi9tb2RlbHMvdGFzayc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndGFzay1yb3cnLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdGVtcGxhdGVzL3Rhc2stcm93Lmh0bWwnKSxcclxuICAgIGRpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFUywgVXNlckNlbGxDb21wb25lbnRdLFxyXG4gICAgcGlwZXM6IFtEYXRlRm9ybWF0UGlwZSwgVHJhbnNsYXRlUGlwZSwgVGV4dFRyYW5zZm9ybVBpcGVdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVGFza1Jvd0NvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoKSB0YXNrOiBUYXNrO1xyXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICB0b2dnbGVTZWxlY3RlZCgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy90YXNrL3Rhc2stcm93LnRzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImVudHJ5LXdyYXBcXFwiIFtjbGFzcy5hY3RpdmVdPVxcXCJzZWxlY3RlZFxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImVudHJ5XFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiZW50cnktc2VsZWN0XFxcIj5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcInRhc2staWRcXFwiIHZhbHVlPVxcXCJ7e3Rhc2suaWR9fVxcXCIgKGNoYW5nZSk9XFxcInRvZ2dsZVNlbGVjdGVkKClcXFwiIFtjaGVja2VkXT1cXFwic2VsZWN0ZWRcXFwiIC8+XFxyXFxuICAgICAgICA8L2xhYmVsPlxcclxcbiAgICAgICAgPGEgY2xhc3M9XFxcImVudHJ5LWxpbmtcXFwiIFtyb3V0ZXJMaW5rXT1cXFwiWycvdGFzaycsIHRhc2suaWRdXFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJlbnRyeS1maWVsZHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1ib2R5XFxcIj57e3Rhc2suYm9keX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1zdGF0dXNcXFwiPnt7dGFzay5zdGF0dXMgfCB0ZXh0OidMJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1wcmlvcml0eVxcXCI+e3t0YXNrLnByaW9yaXR5IHwgdGV4dDonTCcgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhc2stYXNzaWduZWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHVzZXItY2VsbCBbdXNlcklkXT1cXFwidGFzay5hc3NpZ25lZVVzZXJJZFxcXCI+PC91c2VyLWNlbGw+XFxyXFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7dGFzay5zdGFydERhdGUgfCBkYXRlRm10fX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy1kYXRlXFxcIj57e3Rhc2suZHVlRGF0ZSB8IGRhdGVGbXR9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LXRhZ3NcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRhZ1xcXCIgKm5nRm9yPVxcXCJsZXQgdGFnIG9mIHRhc2sudGFnc1xcXCI+e3t0YWcubmFtZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2E+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Rhc2svdGVtcGxhdGVzL3Rhc2stcm93Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA1ODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZFVENIX1RBU0tTID0gJ0ZFVENIX1RBU0tTJztcclxuZXhwb3J0IGNvbnN0IEZFVENIX1RBU0sgPSAnRkVUQ0hfVEFTSyc7XHJcbmV4cG9ydCBjb25zdCBBRERfVEFTSyA9ICdBRERfVEFTSyc7XHJcbmV4cG9ydCBjb25zdCBVUERBVEVfVEFTSyA9ICdVUERBVEVfVEFTSyc7XHJcbmV4cG9ydCBjb25zdCBERUxFVEVfVEFTSyA9ICdERUxFVEVfVEFTSyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElUYXNrc1N0YXRlIHtcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgdGFza3M6IFRhc2tbXSxcclxuICAgIGxvYWRpbmc6IGJvb2xlYW5cclxufTtcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogSVRhc2tzU3RhdGUgPSB7XHJcbiAgICBtZXRhOiB7fSxcclxuICAgIHRhc2tzOiBbXSxcclxuICAgIGxvYWRpbmc6IGZhbHNlXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdGFza3NSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7dHlwZSwgcGF5bG9hZH0pID0+IHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgRkVUQ0hfVEFTS1M6XHJcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xyXG4gICAgICAgIGNhc2UgRkVUQ0hfVEFTSzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgY2FzZSBBRERfVEFTSzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgY2FzZSBVUERBVEVfVEFTSzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgY2FzZSBERUxFVEVfVEFTSzpcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9yZWR1Y2Vycy90YXNrcy5yZWR1Y2VyLnRzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImNvbnRlbnQtaGVhZGVyXFxcIj5cXHJcXG4gICAgPGgxIGNsYXNzPVxcXCJoZWFkZXItdGl0bGVcXFwiPlxcclxcbiAgICAgICAge3t0aXRsZSB8IHRyYW5zbGF0ZX19XFxyXFxuICAgIDwvaDE+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnQtYWN0aW9uc1xcXCI+XFxyXFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgKGNsaWNrKT1cXFwibmV3VGFzaygpXFxcIj5cXHJcXG4gICAgICAgICAgICB7eyduZXdfdGFzaycgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICA8cGFnaW5hdGlvbiBjbGFzcz1cXFwicHVsbC1yaWdodFxcXCIgdG90YWxQYWdlcz1cXFwie3ttZXRhLnRvdGFsUGFnZXN9fVxcXCIgcGFnZT1cXFwie3ttZXRhLnBhZ2V9fVxcXCIgKG9uUGFnZUNoYW5nZSk9XFxcImdvVG9QYWdlKCRldmVudClcXFwiPjwvcGFnaW5hdGlvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuPGRpdiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwidmlldyB2aWV3LXRhc2tcXFwiIFtjbGFzcy5sb2FkXT1cXFwicmVxdWVzdFByb2Nlc3NcXFwiPlxcclxcbiAgICAgICAgPGhlYWRlciBjbGFzcz1cXFwiZW50cmllcy1oZWFkXFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkLXdyYXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImVudHJ5LXNlbGVjdFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJhbGxcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJ5LWNhcHRpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YXNrLWJvZHlcXFwiPnt7J2JvZHknIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFzay1zdGF0dXNcXFwiPnt7J3N0YXR1cycgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YXNrLXByaW9yaXR5XFxcIj57eydwcmlvcml0eScgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2dy10YXNrLWFzc2lnbmVlXFxcIj57eydhc3NpZ25lZV91c2VyJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZ3LWRhdGVcXFwiPnt7J3N0YXJ0X2RhdGUnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctZGF0ZVxcXCI+e3snZHVlX2RhdGUnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwidnctdGFnc1xcXCI+e3sndGFncycgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImVudHJpZXNcXFwiPlxcclxcbiAgICAgICAgICAgIDx0YXNrLXJvdyBbdGFza109XFxcInRhc2tcXFwiICpuZ0Zvcj1cXFwibGV0IHRhc2sgb2YgdGFza3NcXFwiPjwvdGFzay1yb3c+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuPHJvdXRlci1vdXRsZXQ+PC9yb3V0ZXItb3V0bGV0PlxcclxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Rhc2svdGVtcGxhdGVzL3Rhc2tzLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA1OTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlLCBST1VURVJfRElSRUNUSVZFUyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBWYWxpZGF0b3JzLCBDb250cm9sR3JvdXAsIENvbnRyb2wsIEZPUk1fRElSRUNUSVZFUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGlwZSwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ25nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL25vdGlmaWNhdGlvbic7XHJcbmltcG9ydCB7IERST1BET1dOX0RJUkVDVElWRVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvZHJvcGRvd24nO1xyXG5pbXBvcnQgeyBTd2l0Y2hCdXR0b25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9zaGFyZWQvc3dpdGNoLWJ1dHRvbic7XHJcbmltcG9ydCB7IFVzZXJTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvdXNlci1zZWxlY3QnO1xyXG5pbXBvcnQgeyBQcm9qZWN0U2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Byb2plY3Qtc2VsZWN0JztcclxuaW1wb3J0IHsgVGFza1R5cGVTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvdGFzay10eXBlLXNlbGVjdCc7XHJcbmltcG9ydCB7IFRhZ3NTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvdGFncy1zZWxlY3QnO1xyXG5pbXBvcnQgeyBUZXh0VHJhbnNmb3JtUGlwZSB9IGZyb20gJy4uLy4uL3BpcGVzJztcclxuaW1wb3J0IHsgQXBwU2VydmljZSwgUHJvamVjdFNlcnZpY2UsIFRhc2tTZXJ2aWNlLCBSZWZlcmVuY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMnO1xyXG5pbXBvcnQgeyBQcm9qZWN0LCBUYXNrLCBUYWcsIFRhc2tUeXBlLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0YXNrJyxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3RlbXBsYXRlcy90YXNrLmh0bWwnKSxcclxuICAgIGRpcmVjdGl2ZXM6IFtcclxuICAgICAgICBST1VURVJfRElSRUNUSVZFUyxcclxuICAgICAgICBGT1JNX0RJUkVDVElWRVMsXHJcbiAgICAgICAgU3dpdGNoQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIERST1BET1dOX0RJUkVDVElWRVMsXHJcbiAgICAgICAgVXNlclNlbGVjdENvbXBvbmVudCxcclxuICAgICAgICBQcm9qZWN0U2VsZWN0Q29tcG9uZW50LFxyXG4gICAgICAgIFRhc2tUeXBlU2VsZWN0Q29tcG9uZW50LFxyXG4gICAgICAgIFRhZ3NTZWxlY3RDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlcl0sXHJcbiAgICBwaXBlczogW1RyYW5zbGF0ZVBpcGUsIFRleHRUcmFuc2Zvcm1QaXBlXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhc2tDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBzdWI6IGFueTtcclxuICAgIGlzUmVhZHkgPSBmYWxzZTtcclxuICAgIHRhc2s6IFRhc2s7XHJcbiAgICBmb3JtOiBDb250cm9sR3JvdXA7XHJcblxyXG4gICAgdGFza1ByaW9yaXR5VHlwZXM6IGFueTtcclxuICAgIHRhc2tTdGF0dXNUeXBlczogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcclxuICAgICAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBwcm9qZWN0U2VydmljZTogUHJvamVjdFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB0YXNrU2VydmljZTogVGFza1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSByZWZlcmVuY2VTZXJ2aWNlOiBSZWZlcmVuY2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbm90aWZ5U2VydmljZTogTm90aWZpY2F0aW9uU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtID0gZm9ybUJ1aWxkZXIuZ3JvdXAoe1xyXG4gICAgICAgICAgICBwcm9qZWN0SWQ6IFsnJ10sXHJcbiAgICAgICAgICAgIHRhc2tUeXBlSWQ6IFsnJ10sXHJcbiAgICAgICAgICAgIHN0YXR1czogWycnXSxcclxuICAgICAgICAgICAgcHJpb3JpdHk6IFsnJ10sXHJcbiAgICAgICAgICAgIGJvZHk6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgICAgIGFzc2lnbmVlVXNlcklkOiBbJyddLFxyXG4gICAgICAgICAgICBzdGFydERhdGU6IFsnJ10sXHJcbiAgICAgICAgICAgIGR1ZURhdGU6IFsnJ10sXHJcbiAgICAgICAgICAgIHRhZ0lkczogWycnXSxcclxuICAgICAgICAgICAgYXR0YWNobWVudHM6IFsnJ11cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnN1YiA9IHRoaXMucm91dGUucGFyYW1zLnN1YnNjcmliZShwYXJhbXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmZldGNoVGFza0J5SWQocGFyYW1zWyd0YXNrSWQnXSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgdGFzayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrID0gdGFzaztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZSA9PiB0aGlzLmhhbmRsZVhockVycm9yKGVycm9yUmVzcG9uc2UpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZERhdGEoKSB7XHJcbiAgICAgICAgT2JzZXJ2YWJsZS5mb3JrSm9pbihcclxuICAgICAgICAgICAgdGhpcy50YXNrU2VydmljZS5nZXRUYXNrU3RhdHVzVHlwZSgpLFxyXG4gICAgICAgICAgICB0aGlzLnRhc2tTZXJ2aWNlLmdldFRhc2tQcmlvcml0eVR5cGUoKVxyXG4gICAgICAgICkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFza1N0YXR1c1R5cGVzID0gZGF0YVswXTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFza1ByaW9yaXR5VHlwZXMgPSBkYXRhWzFdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVhockVycm9yKGVycm9yKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmlzUmVhZHkgPSB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlVGFzaygpIHtcclxuICAgICAgICBsZXQgbm90eSA9IHRoaXMubm90aWZ5U2VydmljZS5wcm9jZXNzKHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ3dhaXRfd2hpbGVfZG9jdW1lbnRfc2F2ZScpKS5zaG93KCk7XHJcbiAgICAgICAgdGhpcy50YXNrU2VydmljZS5zYXZlVGFzayh0aGlzLnRhc2spLnN1YnNjcmliZShcclxuICAgICAgICAgICAgcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm90eS5zZXQoeyB0eXBlOiAnc3VjY2VzcycsIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UgfSkucmVtb3ZlKDE1MDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBub3R5LnNldCh7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSkucmVtb3ZlKDE1MDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvclNhdmVUYXNrKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3JTYXZlVGFzayhlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3JSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvdGFza3MnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlWGhyRXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChlcnJvclJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGF0dXModmFsdWUpIHtcclxuICAgICAgICB0aGlzLnRhc2suc3RhdHVzID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UHJpb3JpdHkodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnRhc2sucHJpb3JpdHkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZURyb3Bkb3duKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xpY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RQcm9qZWN0KHByb2plY3Q6IFByb2plY3QpIHtcclxuICAgICAgICB0aGlzLnRhc2sucHJvamVjdElkID0gcHJvamVjdC5pZDtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RUYXNrVHlwZSh0YXNrVHlwZTogVGFza1R5cGUpIHtcclxuICAgICAgICB0aGlzLnRhc2sudGFza1R5cGVJZCA9IHRhc2tUeXBlLmlkO1xyXG4gICAgICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdEFzc2lnbmVlVXNlcihhc3NpZ25lZVVzZXI6IFVzZXIpIHtcclxuICAgICAgICB0aGlzLnRhc2suYXNzaWduZWVVc2VySWQgPSBhc3NpZ25lZVVzZXIuaWQ7XHJcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFncyh0YWdzOiBUYWdbXSkge1xyXG4gICAgICAgIHRoaXMudGFzay50YWdJZHMgPSB0YWdzLm1hcChpdCA9PiBpdC5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0VGFnKHRhZzogVGFnKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRhc2sudGFnSWRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFzay50YWdJZHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50YXNrLnRhZ0lkcy5wdXNoKHRhZy5pZCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVGFnKHRhZzogVGFnLCAkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnRhc2sudGFnSWRzLmZvckVhY2goKGlkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IHRhZy5pZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXNrLnRhZ0lkcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnRhc2tQcmlvcml0eVR5cGVzID0gW107XHJcbiAgICAgICAgdGhpcy50YXNrU3RhdHVzVHlwZXMgPSBbXTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3Rhc2svdGFzay50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlIH0gZnJvbSAnbmcyLXRyYW5zbGF0ZS9uZzItdHJhbnNsYXRlJztcclxuXHJcbmltcG9ydCB7IERST1BET1dOX0RJUkVDVElWRVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvZHJvcGRvd24nO1xyXG5pbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwcm9qZWN0LXNlbGVjdCcsXHJcbiAgICBkaXJlY3RpdmVzOiBbRFJPUERPV05fRElSRUNUSVZFU10sXHJcbiAgICBwaXBlczogW1RyYW5zbGF0ZVBpcGVdLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGRyb3Bkb3duIGNsYXNzPVwic2VsZWN0XCI+XHJcbiAgICAgICAgICAgIDxkaXYgZHJvcGRvd24tdG9nZ2xlIGNsYXNzPVwic2VsZWN0LXNlbGVjdGlvbiBpbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e3twcm9qZWN0Py5uYW1lfX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudSBzZWxlY3QtZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInNlbGVjdC1saXN0IHNjcm9sbC1zaGFkb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzZWxlY3Qtb3B0aW9uXCIgW2NsYXNzLnNlbGVjdGVkXT1cInByb2plY3RJZCA9PSBtLmlkXCIgKm5nRm9yPVwibGV0IG0gb2YgcHJvamVjdHNcIiAoY2xpY2spPVwic2VsZWN0KG0pXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7bS5uYW1lfX1cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvamVjdFNlbGVjdENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoKSBwcm9qZWN0SWQ6IHN0cmluZztcclxuICAgIEBPdXRwdXQoKSBvblNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBwcml2YXRlIHByb2plY3RzOiBhbnk7XHJcbiAgICBwcml2YXRlIHByb2plY3Q6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JlOiBTdG9yZTxhbnk+KSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnN0b3JlLnNlbGVjdCgncHJvamVjdHMnKS5zdWJzY3JpYmUoKHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0cyA9IHN0YXRlLnByb2plY3RzO1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3QgPSBzdGF0ZS5wcm9qZWN0cy5maWx0ZXIoaXQgPT4gaXQuaWQgPT0gdGhpcy5wcm9qZWN0SWQpWzBdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdChtKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gbTtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0LmVtaXQodGhpcy5wcm9qZWN0KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb21wb25lbnRzL3NoYXJlZC9wcm9qZWN0LXNlbGVjdC50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgRFJPUERPV05fRElSRUNUSVZFUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9kcm9wZG93bic7XHJcbmltcG9ydCB7IFRhc2tUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0YXNrLXR5cGUtc2VsZWN0JyxcclxuICAgIGRpcmVjdGl2ZXM6IFtEUk9QRE9XTl9ESVJFQ1RJVkVTXSxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGRpdiBkcm9wZG93biBjbGFzcz1cInNlbGVjdFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGRyb3Bkb3duLXRvZ2dsZSBjbGFzcz1cInNlbGVjdC1zZWxlY3Rpb24gaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPnt7dGFza1R5cGU/Lm5hbWV9fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IHNlbGVjdC1kcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwic2VsZWN0LWxpc3Qgc2Nyb2xsLXNoYWRvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInNlbGVjdC1vcHRpb25cIiBbY2xhc3Muc2VsZWN0ZWRdPVwidGFza1R5cGVJZCA9PSBtLmlkXCIgKm5nRm9yPVwibGV0IG0gb2YgdGFza1R5cGVzXCIgKGNsaWNrKT1cInNlbGVjdChtKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7e20ubmFtZX19XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhc2tUeXBlU2VsZWN0Q29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIHRhc2tUeXBlSWQ6IHN0cmluZztcclxuICAgIEBPdXRwdXQoKSBvblNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBwcml2YXRlIHRhc2tUeXBlczogYW55O1xyXG4gICAgcHJpdmF0ZSB0YXNrVHlwZTogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4pIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KCdyZWZlcmVuY2UnKS5zdWJzY3JpYmUoKHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50YXNrVHlwZXMgPSBzdGF0ZS50YXNrVHlwZXM7XHJcbiAgICAgICAgICAgIHRoaXMudGFza1R5cGUgPSBzdGF0ZS50YXNrVHlwZXMuZmlsdGVyKGl0ID0+IGl0LmlkID09IHRoaXMudGFza1R5cGVJZClbMF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0KG0pIHtcclxuICAgICAgICB0aGlzLnRhc2tUeXBlID0gbTtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0LmVtaXQodGhpcy50YXNrVHlwZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29tcG9uZW50cy9zaGFyZWQvdGFzay10eXBlLXNlbGVjdC50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgRFJPUERPV05fRElSRUNUSVZFUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9kcm9wZG93bic7XHJcbmltcG9ydCB7IFRhZyB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndGFncy1zZWxlY3QnLFxyXG4gICAgZGlyZWN0aXZlczogW0RST1BET1dOX0RJUkVDVElWRVNdLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGRyb3Bkb3duIGNsYXNzPVwic2VsZWN0XCI+XHJcbiAgICAgICAgICAgIDxkaXYgZHJvcGRvd24tdG9nZ2xlIGNsYXNzPVwic2VsZWN0LXNlbGVjdGlvbiBpbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YWdcIiAqbmdGb3I9XCJsZXQgbSBvZiBzZWxlY3RlZFRhZ3NcIiAoY2xpY2spPVwicmVtb3ZlKG0sICRldmVudClcIj57e20ubmFtZX19PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnUgc2VsZWN0LWRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJzZWxlY3QtbGlzdCBzY3JvbGwtc2hhZG93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic2VsZWN0LW9wdGlvblwiICpuZ0Zvcj1cImxldCBtIG9mIGdldFRhZ3MoKVwiIChjbGljayk9XCJhZGQobSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3ttLm5hbWV9fVxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWdzU2VsZWN0Q29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIHRhZ0lkczogc3RyaW5nW10gPSBbXTtcclxuICAgIEBPdXRwdXQoKSBzZXRUYWdzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBwcml2YXRlIHRhZ3M6IGFueSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFRhZ3M6IGFueSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4pIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KCdyZWZlcmVuY2UnKS5zdWJzY3JpYmUoKHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50YWdzID0gc3RhdGUudGFncztcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFnSWRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFncyA9IHN0YXRlLnRhZ3MuZmlsdGVyKGl0ID0+IHRoaXMudGFnSWRzLmluZGV4T2YoaXQuaWQpICE9IC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRhZ3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGFnSWRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZ3MuZmlsdGVyKGl0ID0+IHRoaXMudGFnSWRzLmluZGV4T2YoaXQuaWQpID09IC0xKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWdzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGQobSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUYWdzLnB1c2gobSk7XHJcbiAgICAgICAgdGhpcy5zZXRUYWdzLmVtaXQodGhpcy5zZWxlY3RlZFRhZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZShtKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhZ3MgPSB0aGlzLnNlbGVjdGVkVGFncy5maWx0ZXIoaXQgPT4gaXQuaWQgIT0gbS5pZCk7XHJcbiAgICAgICAgdGhpcy5zZXRUYWdzLmVtaXQodGhpcy5zZWxlY3RlZFRhZ3MpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvc2hhcmVkL3RhZ3Mtc2VsZWN0LnRzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmb3JtIGNsYXNzPVxcXCJmb3JtXFxcIiBbbmdGb3JtTW9kZWxdPVxcXCJmb3JtXFxcIiAqbmdJZj1cXFwiaXNSZWFkeVxcXCI+XFxyXFxuICAgIDxoZWFkZXIgY2xhc3M9XFxcImNvbnRlbnQtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1iYWNrXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcclxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWxlZnRcXFwiPjwvaT5cXHJcXG4gICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgPGgxIGNsYXNzPVxcXCJoZWFkZXItdGl0bGVcXFwiPlxcclxcbiAgICAgICAgICAgIHt7KHRhc2suaWQgPyAndGFzaycgOiAnbmV3X3Rhc2snKSB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICA8L2gxPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInNhdmVUYXNrKClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICB7eydjbG9zZScgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvaGVhZGVyPlxcclxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXHJcXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXRcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J3Byb2plY3QnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMucHJvamVjdElkLnZhbGlkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYW44XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8cHJvamVjdC1zZWxlY3QgW3Byb2plY3RJZF09XFxcInRhc2sucHJvamVjdElkXFxcIiAob25TZWxlY3QpPVxcXCJzZWxlY3RQcm9qZWN0KCRldmVudClcXFwiPjwvcHJvamVjdC1zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMucHJvamVjdElkLnZhbGlkIHx8IGZvcm0uY29udHJvbHMucHJvamVjdElkLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eyd0YXNrX3R5cGUnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudGFza1R5cGVJZC52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGFuOFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRhc2stdHlwZS1zZWxlY3QgW3Rhc2tUeXBlSWRdPVxcXCJ0YXNrLnRhc2tUeXBlSWRcXFwiIChvblNlbGVjdCk9XFxcInNlbGVjdFRhc2tUeXBlKCRldmVudClcXFwiPjwvdGFzay10eXBlLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy50YXNrVHlwZUlkLnZhbGlkIHx8IGZvcm0uY29udHJvbHMudGFza1R5cGVJZC5wcmlzdGluZVxcXCIgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JlcXVpcmVkJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAge3snc3RhdHVzJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3dpdGNoLWJ1dHRvbiBbbW9kZWxdPVxcXCJ0YXNrXFxcIiB2YWx1ZT1cXFwic3RhdHVzXFxcIiBbaXRlbXNdPVxcXCJ0YXNrU3RhdHVzVHlwZXNcXFwiPjwvc3dpdGNoLWJ1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XFxcImZvcm0uY29udHJvbHMuc3RhdHVzLnZhbGlkIHx8IGZvcm0uY29udHJvbHMuc3RhdHVzLnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eydwcmlvcml0eScgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiIFtjbGFzcy5oYXMtZXJyb3JdPVxcXCIhZm9ybS5jb250cm9scy5wcmlvcml0eS52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3dpdGNoLWJ1dHRvbiBbbW9kZWxdPVxcXCJ0YXNrXFxcIiB2YWx1ZT1cXFwicHJpb3JpdHlcXFwiIFtpdGVtc109XFxcInRhc2tQcmlvcml0eVR5cGVzXFxcIj48L3N3aXRjaC1idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLnByaW9yaXR5LnZhbGlkIHx8IGZvcm0uY29udHJvbHMucHJpb3JpdHkucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J2JvZHknIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMuYm9keS52YWxpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XFxcInNwYW44XFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5ib2R5XFxcIiBuZ0NvbnRyb2w9XFxcImJvZHlcXFwiPjwvdGV4dGFyZWE+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLmJvZHkudmFsaWQgfHwgZm9ybS5jb250cm9scy5ib2R5LnByaXN0aW5lXFxcIiBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAge3sncmVxdWlyZWQnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICB7eydhc3NpZ25lZV91c2VyJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCIgW2NsYXNzLmhhcy1lcnJvcl09XFxcIiFmb3JtLmNvbnRyb2xzLmFzc2lnbmVlVXNlcklkLnZhbGlkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYW44XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlci1zZWxlY3QgW3VzZXJJZF09XFxcInRhc2suYXNzaWduZWVVc2VySWRcXFwiIChvblNlbGVjdCk9XFxcInNlbGVjdEFzc2lnbmVlVXNlcigkZXZlbnQpXFxcIj48L3VzZXItc2VsZWN0PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFtoaWRkZW5dPVxcXCJmb3JtLmNvbnRyb2xzLmFzc2lnbmVlVXNlcklkLnZhbGlkIHx8IGZvcm0uY29udHJvbHMuYXNzaWduZWVVc2VySWQucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J3N0YXJ0X2RhdGUnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJkYXRlXFxcIiBjbGFzcz1cXFwic3BhbjJcXFwiIFsobmdNb2RlbCldPVxcXCJ0YXNrLnN0YXJ0RGF0ZVxcXCIgbmdDb250cm9sPVxcXCJzdGFydERhdGVcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J2R1ZV9kYXRlJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIgY2xhc3M9XFxcInNwYW4yXFxcIiBbKG5nTW9kZWwpXT1cXFwidGFzay5kdWVEYXRlXFxcIiBuZ0NvbnRyb2w9XFxcImR1ZURhdGVcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHt7J3RhZ3MnIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIiBbY2xhc3MuaGFzLWVycm9yXT1cXFwiIWZvcm0uY29udHJvbHMudGFnSWRzLnZhbGlkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYW44XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGFncy1zZWxlY3QgW3RhZ0lkc109XFxcInRhc2sudGFnSWRzXFxcIiAoc2V0VGFncyk9XFxcInNldFRhZ3MoJGV2ZW50KVxcXCI+PC90YWdzLXNlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbaGlkZGVuXT1cXFwiZm9ybS5jb250cm9scy50YWdJZHMudmFsaWQgfHwgZm9ybS5jb250cm9scy50YWdJZHMucHJpc3RpbmVcXFwiIGNsYXNzPVxcXCJlcnJvci1tZXNzYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7eydyZXF1aXJlZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9maWVsZHNldD5cXHJcXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwiZmllbGRzZXRcXFwiPlxcclxcbiAgICAgICAgICAgIDxsZWdlbmQgY2xhc3M9XFxcImxlZ2VuZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIHt7J2F0dGFjaG1lbnRzJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgPC9sZWdlbmQ+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi11cGxvYWRcXFwiIGRhdGEtdXBsb2FkPVxcXCJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLXBhcGVyY2xpcFxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3snYXR0YWNoX2ZpbGUnIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdHRhY2htZW50c1xcXCIgZGF0YS11cGxvYWQtZmlsZXM9XFxcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdHRhY2htZW50cy1maWxlXFxcIiAqbmdGb3I9XFxcImxldCBhdHQgb2YgdGFzay5hdHRhY2htZW50c1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImZpbGUtbmFtZVxcXCIgaHJlZj1cXFwie3thdHQudXJsfX1cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e2F0dC5yZWFsRmlsZU5hbWV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4tbGluayBidG4tcmVtb3ZlLWZpbGUgb24tZWRpdFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS10aW1lc1xcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZmllbGRzZXQ+XFxyXFxuICAgIDwvc2VjdGlvbj5cXHJcXG48L2Zvcm0+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2NvbXBvbmVudHMvdGFzay90ZW1wbGF0ZXMvdGFzay5odG1sXG4gKiogbW9kdWxlIGlkID0gNTk1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIENvbnRyb2xHcm91cCwgQ29udHJvbCwgRk9STV9ESVJFQ1RJVkVTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IFRyYW5zbGF0ZVBpcGUgfSBmcm9tICduZzItdHJhbnNsYXRlL25nMi10cmFuc2xhdGUnO1xyXG5cclxuaW1wb3J0IHsgVEFCX0RJUkVDVElWRVMgfSBmcm9tICcuLi9zaGFyZWQvdGFicyc7XHJcbmltcG9ydCB7IEFwcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcHAuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvdXNlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnW3VzZXItcHJvZmlsZV0nLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL3RlbXBsYXRlcy91c2VyLXByb2ZpbGUuaHRtbCcpLFxyXG4gICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFUywgVEFCX0RJUkVDVElWRVNdLFxyXG4gICAgcHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdLFxyXG4gICAgcGlwZXM6IFtUcmFuc2xhdGVQaXBlXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJQcm9maWxlQ29tcG9uZW50IHtcclxuICAgIHVzZXI6IFVzZXIgPSBuZXcgVXNlcigpO1xyXG4gICAgZm9ybTogQ29udHJvbEdyb3VwO1xyXG5cclxuICAgIGNoYW5nZVBhc3N3b3JkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcclxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2VcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IGZvcm1CdWlsZGVyLmdyb3VwKHtcclxuICAgICAgICAgICAgbG9naW46IFtdLFxyXG4gICAgICAgICAgICBwd2Q6IFtdLFxyXG4gICAgICAgICAgICBwd2RfY29uZmlybTogW10sXHJcbiAgICAgICAgICAgIGVtYWlsOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZUNoYW5nZVBhc3N3b3JkKCkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlUGFzc3dvcmQgPSAhdGhpcy5jaGFuZ2VQYXNzd29yZDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVc2VyUHJvZmlsZSgpIHtcclxuICAgICAgICB0aGlzLmFwcFNlcnZpY2UudXBkYXRlVXNlclByb2ZpbGUodGhpcy51c2VyKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZShldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvdXNlci1wcm9maWxlLnRzXG4gKiovIiwiaW1wb3J0IHsgVGFicyB9IGZyb20gJy4vdGFicyc7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiJztcclxuXHJcbmV4cG9ydCBjb25zdCBUQUJfRElSRUNUSVZFUyA9IFtUYWJzLCBUYWJdO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvdGFicy9pbmRleC50c1xuICoqLyIsImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi90YWInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3RhYnMnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCI+XHJcbiAgICAgICAgPGxpICpuZ0Zvcj1cImxldCB0YWIgb2YgdGFic1wiIChjbGljayk9XCJzZWxlY3RUYWIodGFiKVwiIFtjbGFzcy5hY3RpdmVdPVwidGFiLmFjdGl2ZVwiPlxyXG4gICAgICAgICAgPGEgaHJlZj1cIiNcIiAoY2xpY2spPVwicHJldmVudERlZmF1bHQoJGV2ZW50KVwiPnt7dGFiLnRpdGxlfX08L2E+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgYFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhYnMgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcclxuXHJcbiAgICBAQ29udGVudENoaWxkcmVuKFRhYikgdGFiczogUXVlcnlMaXN0PFRhYj47XHJcblxyXG4gICAgLy8gY29udGVudENoaWxkcmVuIGFyZSBzZXRcclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgICAgICAvLyBnZXQgYWxsIGFjdGl2ZSB0YWJzXHJcbiAgICAgICAgbGV0IGFjdGl2ZVRhYnMgPSB0aGlzLnRhYnMuZmlsdGVyKHRhYiA9PiB0YWIuYWN0aXZlKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gYWN0aXZlIHRhYiBzZXQsIGFjdGl2YXRlIHRoZSBmaXJzdFxyXG4gICAgICAgIGlmIChhY3RpdmVUYWJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRhYih0aGlzLnRhYnMuZmlyc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RUYWIodGFiOiBUYWIpIHtcclxuICAgICAgICAvLyBkZWFjdGl2YXRlIGFsbCB0YWJzXHJcbiAgICAgICAgdGhpcy50YWJzLmZvckVhY2godGFiID0+IHRhYi5hY3RpdmUgPSBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIGFjdGl2YXRlIHRoZSB0YWIgdGhlIHVzZXIgaGFzIGNsaWNrZWQgb24uXHJcbiAgICAgICAgdGFiLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJldmVudERlZmF1bHQoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL3NoYXJlZC90YWJzL3RhYnMudHNcbiAqKi8iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndGFiJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgIDxkaXYgW2hpZGRlbl09XCIhYWN0aXZlXCIgY2xhc3M9XCJwYW5lXCI+XHJcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWIge1xyXG4gICAgQElucHV0KCd0YWJUaXRsZScpIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBhY3RpdmUgPSBmYWxzZTtcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zaGFyZWQvdGFicy90YWIudHNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGZvcm0gY2xhc3M9XFxcImZvcm0gZm9ybS11c2VycHJvZmlsZVxcXCIgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIFtuZ0Zvcm1Nb2RlbF09XFxcImZvcm1cXFwiPlxcclxcbiAgICA8aGVhZGVyIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxyXFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYmFja1xcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiAoY2xpY2spPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxyXFxuICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgIDxoMSBjbGFzcz1cXFwiaGVhZGVyLXRpdGxlXFxcIj5cXHJcXG4gICAgICAgICAgICB7eydlbXBsb3llZScgfCB0cmFuc2xhdGV9fSB7e3VzZXIubmFtZX19XFxyXFxuICAgICAgICA8L2gxPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudC1hY3Rpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgW2Rpc2FibGVkXT1cXFwiIWZvcm0udmFsaWRcXFwiIChjbGljayk9XFxcInVwZGF0ZVVzZXJQcm9maWxlKClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICB7eydzYXZlX2Nsb3NlJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIChjbGljayk9XFxcImNsb3NlKCRldmVudClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICB7eydjbG9zZScgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvaGVhZGVyPlxcclxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudC1ib2R5XFxcIj5cXHJcXG4gICAgICAgIDx0YWJzPlxcclxcbiAgICAgICAgICAgIDx0YWIgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiB0YWJUaXRsZT1cXFwie3sncHJvcGVydGllcycgfCB0cmFuc2xhdGV9fVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDwhLS08ZmllbGRzZXQgY2xhc3M9XFxcImZpZWxkc2V0IGZpZWxkc2V0LXVzZXItYXZhdGFyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwidXNlci1hdmF0YXJcXFwiIHNyYz1cXFwiaW1nL2F2YXRhci5wbmdcXFwiLz5cXHJcXG4gICAgICAgICAgICAgICAgPC9maWVsZHNldD4tLT5cXHJcXG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldCBmaWVsZHNldC11c2VyLWZpZWxkc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sndXNlcl9uYW1lJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLm5hbWV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydsb2dpbl9uYW1lJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcInNwYW40XFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5sb2dpblxcXCIgbmdDb250cm9sPVxcXCJsb2dpblxcXCIgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgKm5nSWY9XFxcIiFjaGFuZ2VQYXNzd29yZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYnRuIGJ0bi14c1xcXCIgKGNsaWNrKT1cXFwidG9nZ2xlQ2hhbmdlUGFzc3dvcmQoKVxcXCI+e3snY2hhbmdlX3Bhc3N3b3JkJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiAqbmdJZj1cXFwiY2hhbmdlUGFzc3dvcmRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydwYXNzd29yZCcgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBjbGFzcz1cXFwic3BhbjRcXFwiIFsobmdNb2RlbCldPVxcXCJ1c2VyLnB3ZFxcXCIgbmdDb250cm9sPVxcXCJwd2RcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiICpuZ0lmPVxcXCJjaGFuZ2VQYXNzd29yZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3Bhc3N3b3JkX2NvbmZpcm0nIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgY2xhc3M9XFxcInNwYW40XFxcIiBbKG5nTW9kZWwpXT1cXFwidXNlci5wd2RfY29uZmlybVxcXCIgbmdDb250cm9sPVxcXCJwd2RfY29uZmlybVxcXCIgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2VtYWlsJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIGNsYXNzPVxcXCJzcGFuNFxcXCIgWyhuZ01vZGVsKV09XFxcInVzZXIuZW1haWxcXFwiIG5nQ29udHJvbD1cXFwiZW1haWxcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydvcmdfbmFtZScgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7dXNlci5vcmdhbml6YXRpb259fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydkZXBhcnRtZW50JyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t1c2VyLmRlcGFydG1lbnR9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eydwb3NpdGlvbicgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7dXNlci5wb3NpdGlvbn19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J3JvbGVzJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImlucHV0LXBsYWNlaG9sZGVyIGxpc3Qtc3R5bGUtbm9uZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD1cXFwiZmllbGRzL3JvbGVzL2VudHJ5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PVxcXCIuXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxcclxcbiAgICAgICAgICAgIDwvdGFiPlxcclxcbiAgICAgICAgICAgIDx0YWIgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiB0YWJUaXRsZT1cXFwie3snaW50ZXJmYWNlJyB8IHRyYW5zbGF0ZX19XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJmaWVsZHNldFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3snbGltaXRfdmlldycgfCB0cmFuc2xhdGV9fVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVxcXCJwYWdlc2l6ZVxcXCIgY2xhc3M9XFxcIm5hdGl2ZSBzcGFuMlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCIxMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCIvL3BhZ2VzaXplID0gJzEwJ1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiMjBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD1cXFwiLy9wYWdlc2l6ZSA9ICcyMCdcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPVxcXCJzZWxlY3RlZFxcXCIgc2VsZWN0PVxcXCInc2VsZWN0ZWQnXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIjMwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9XFxcIi8vcGFnZXNpemUgPSAnMzAnXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT1cXFwic2VsZWN0ZWRcXFwiIHNlbGVjdD1cXFwiJ3NlbGVjdGVkJ1xcXCIgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCI1MFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCIvL3BhZ2VzaXplID0gJzUwJ1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9XFxcInNlbGVjdGVkXFxcIiBzZWxlY3Q9XFxcIidzZWxlY3RlZCdcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7J2ludGVyZmFjZV9sYW5nJyB8IHRyYW5zbGF0ZX19XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9XFxcImN1cnJlbnRsYW5nXFxcIiBzZWxlY3Q9XFxcIi9yZXF1ZXN0L0BsYW5nXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XFxcImxhbmdcXFwiIGNsYXNzPVxcXCJuYXRpdmUgc3BhbjJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9XFxcIi8vcXVlcnlbQGVudGl0eSA9ICdsYW5ndWFnZSddL2VudHJ5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJ7dmlld2NvbnRlbnQvbGFuZy9AaWR9XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PVxcXCJ2aWV3Y29udGVudC9sYW5nL0BpZCA9ICRjdXJyZW50bGFuZ1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPVxcXCJzZWxlY3RlZFxcXCIgc2VsZWN0PVxcXCInc2VsZWN0ZWQnXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9XFxcInZpZXdjb250ZW50L2xhbmdcXFwiIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2xzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIiBkYXRhLXRvZ2dsZS10aGVtZT1cXFwidGhlbWUxXFxcIiBjbGFzcz1cXFwiaW5wdXQtcGxhY2Vob2xkZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3snY2hhbmdlX3NraW4nIHwgdHJhbnNsYXRlfX1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XFxyXFxuICAgICAgICAgICAgPC90YWI+XFxyXFxuICAgICAgICA8L3RhYnM+XFxyXFxuICAgIDwvc2VjdGlvbj5cXHJcXG48L2Zvcm0+XFxyXFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL3RlbXBsYXRlcy91c2VyLXByb2ZpbGUuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDYwMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnW2xvZ2luXScsXHJcbiAgICB0ZW1wbGF0ZTogJydcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdMb2dvdXQnO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2NvbXBvbmVudHMvbG9naW4udHNcbiAqKi8iLCJleHBvcnQgKiBmcm9tICcuL3N0b3JlJztcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvc3RvcmUvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMsIHByb3ZpZGVTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ0BuZ3J4L2NvcmUvY29tcG9zZSc7XHJcblxuLy8gbW9kZWxzXG5pbXBvcnQgeyBQcm9qZWN0LCBUYXNrLCBUYXNrVHlwZSwgVGFnLCBVc2VyLCBBdHRhY2htZW50LCBPcmdhbml6YXRpb24gfSBmcm9tICcuLi9tb2RlbHMnO1xuXG4vLyByZWR1Y2Vyc1xyXG5pbXBvcnQgeyBwcm9qZWN0c1JlZHVjZXIgYXMgcHJvamVjdHMgfSBmcm9tICcuLi9yZWR1Y2Vycy9wcm9qZWN0cy5yZWR1Y2VyJztcclxuaW1wb3J0IHsgdGFza3NSZWR1Y2VyIGFzIHRhc2tzIH0gZnJvbSAnLi4vcmVkdWNlcnMvdGFza3MucmVkdWNlcic7XHJcbmltcG9ydCB7IHN0YWZmUmVkdWNlciBhcyBzdGFmZiB9IGZyb20gJy4uL3JlZHVjZXJzL3N0YWZmLnJlZHVjZXInO1xyXG5pbXBvcnQgeyByZWZlcmVuY2VSZWR1Y2VyIGFzIHJlZmVyZW5jZSB9IGZyb20gJy4uL3JlZHVjZXJzL3JlZmVyZW5jZS5yZWR1Y2VyJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFN0b3JlIHtcclxuICAgIG5hdlByb2plY3RzOiBQcm9qZWN0W107XHJcbiAgICBwcm9qZWN0czogUHJvamVjdFtdO1xyXG4gICAgdGFza3M6IFRhc2tbXTtcclxuICAgIHRhc2tUeXBlczogVGFza1R5cGVbXTtcclxuICAgIHRhZ3M6IFRhZ1tdO1xyXG4gICAgdXNlcnM6IFVzZXJbXTtcclxuICAgIG9yZ2FuaXphdGlvbnM6IE9yZ2FuaXphdGlvbltdO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEFQUF9TVE9SRSA9IHByb3ZpZGVTdG9yZShcclxuICAgIGNvbXBvc2UoY29tYmluZVJlZHVjZXJzKSh7XHJcbiAgICAgICAgcHJvamVjdHMsXHJcbiAgICAgICAgdGFza3MsXHJcbiAgICAgICAgc3RhZmYsXHJcbiAgICAgICAgcmVmZXJlbmNlXHJcbiAgICB9KVxyXG4pO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9zdG9yZS9zdG9yZS50c1xuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5jb21wb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmdW5jdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmdW5jdGlvbnNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmIChmdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0ID0gZnVuY3Rpb25zW2Z1bmN0aW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHJlc3QgPSBmdW5jdGlvbnMuc2xpY2UoMCwgLTEpO1xuICAgICAgICByZXR1cm4gcmVzdC5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY29tcG9zZWQsIGZuKSB7IHJldHVybiBmbihjb21wb3NlZCk7IH0sIGxhc3QoYXJnKSk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb3NlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0BuZ3J4L2NvcmUvY29tcG9zZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==